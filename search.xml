<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Array</title>
    <url>/2022/05/24/Array/</url>
    <content><![CDATA[<h1 id="数组好题选编"><a href="#数组好题选编" class="headerlink" title="数组好题选编"></a>数组好题选编</h1><h2 id="前缀和数组"><a href="#前缀和数组" class="headerlink" title="前缀和数组"></a>前缀和数组</h2><p>前缀和技巧适用于快速、频繁地计算一个索引区间内的元素之和。</p>
<h3 id="303-Range-Sum-Query-Immutable"><a href="#303-Range-Sum-Query-Immutable" class="headerlink" title="303. Range Sum Query - Immutable"></a><a href="https://leetcode.cn/problems/range-sum-query-immutable/">303. Range Sum Query - Immutable</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumArray</span> &#123;</span><br><span class="line">    <span class="comment">// 前缀和数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] preSum;	<span class="comment">//前i个数之和</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 输入一个数组，构造前缀和 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">// preSum[0] = 0，便于计算累加和</span></span><br><span class="line">        preSum = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 计算 nums 的累加和</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; preSum.length; i++) &#123;</span><br><span class="line">            preSum[i] = preSum[i - <span class="number">1</span>] + nums[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 查询闭区间 [left, right] 的累加和 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumRange</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> preSum[right + <span class="number">1</span>] - preSum[left];	<span class="comment">//[0,right] - [0,left-1] = [left,right]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="304-Range-Sum-Query-2D-Immutable"><a href="#304-Range-Sum-Query-2D-Immutable" class="headerlink" title="304. Range Sum Query 2D - Immutable"></a><a href="https://leetcode.cn/problems/range-sum-query-2d-immutable/">304. Range Sum Query 2D - Immutable</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumMatrix</span> &#123;</span><br><span class="line">    <span class="comment">// 定义：preSum[i][j] 记录 matrix 中子矩阵 [0, 0, i-1, j-1] 的元素和</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[][] preSum;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumMatrix</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length, n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span> || n == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 构造前缀和矩阵</span></span><br><span class="line">        preSum = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="comment">// 计算每个矩阵 [0, 0, i, j] 的元素和</span></span><br><span class="line">                preSum[i][j] = preSum[i-<span class="number">1</span>][j] + preSum[i][j-<span class="number">1</span>] + matrix[i - <span class="number">1</span>][j - <span class="number">1</span>] - preSum[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算子矩阵 [x1, y1, x2, y2] 的元素和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumRegion</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span> &#123;</span><br><span class="line">        <span class="comment">// 目标矩阵之和由四个相邻矩阵运算获得</span></span><br><span class="line">        <span class="keyword">return</span> preSum[x2+<span class="number">1</span>][y2+<span class="number">1</span>] - preSum[x1][y2+<span class="number">1</span>] - preSum[x2+<span class="number">1</span>][y1] + preSum[x1][y1];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="Prefix-Sum-amp-HashMap"><a href="#Prefix-Sum-amp-HashMap" class="headerlink" title="Prefix Sum&amp;HashMap"></a>Prefix Sum&amp;HashMap</h2><h3 id="560-Subarray-Sum-Equals-K"><a href="#560-Subarray-Sum-Equals-K" class="headerlink" title="560. Subarray Sum Equals K"></a><a href="https://leetcode.cn/problems/subarray-sum-equals-k/">560. Subarray Sum Equals K</a></h3><p>不关心具体是哪两项的前缀和之差等于k，只关心等于 k 的前缀和之差出现的次数c，就知道了有c个子数组求和等于k</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subarraySum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            sum+=nums[i];</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(sum-k))&#123;</span><br><span class="line">                count+=map.get(sum-k);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(sum,map.getOrDefault(sum,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1248-Count-Number-of-Nice-Subarrays"><a href="#1248-Count-Number-of-Nice-Subarrays" class="headerlink" title="1248. Count Number of Nice Subarrays"></a><a href="https://leetcode.cn/problems/count-number-of-nice-subarrays/">1248. Count Number of Nice Subarrays</a></h3><p>奇数个数为 k 的区间数量, 等价于在对区间各项 &amp;1 后，和为 k 的区间数量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode1248</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numberOfSubarrays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            sum+=nums[i]&amp;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(sum-k))&#123;</span><br><span class="line">                count+=map.get(sum-k);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(sum,map.getOrDefault(sum,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="974-Subarray-Sums-Divisible-by-K"><a href="#974-Subarray-Sums-Divisible-by-K" class="headerlink" title="974. Subarray Sums Divisible by K"></a><a href="https://leetcode.cn/problems/subarray-sums-divisible-by-k/">974. Subarray Sums Divisible by K</a></h3><p>注意：mod后可能是 (-k,k) 间的任意值，需要处理，且不可以通过定长数组来优化</p>
<p>Java负数参与的取模运算规则：</p>
<p><strong>先忽略负号，按照正数运算之后</strong>，<strong>被取模的数是正数结果就取正，反之取负。</strong></p>
<p><strong>即只看被除的数7的符号，不考虑除数3的符号！！！</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode974</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subarraysDivByK</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            sum+=nums[i];</span><br><span class="line">            <span class="type">int</span> mod=(sum%k+k)%k;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(mod))&#123;</span><br><span class="line">                count+=map.get(mod);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(mod,map.getOrDefault(mod,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="523-Continuous-Subarray-Sum"><a href="#523-Continuous-Subarray-Sum" class="headerlink" title="523. Continuous Subarray Sum"></a><a href="https://leetcode.cn/problems/continuous-subarray-sum/">523. Continuous Subarray Sum</a></h3><p>map中记录之前最早的 sum%k 后结果为 mod 的区间的终点</p>
<p>若再找到一个相同的 mod 且间隔大于 2，则满足</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode523</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkSubarraySum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">0</span>,-<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            sum+=nums[i];</span><br><span class="line">            <span class="type">int</span> mod=sum%k;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(mod))&#123;</span><br><span class="line">                <span class="keyword">if</span>(i-map.get(mod)&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(mod,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="差分数组"><a href="#差分数组" class="headerlink" title="差分数组"></a>差分数组</h2><p><strong>前缀和主要适用的场景是原始数组不会被修改的情况下，频繁查询某个区间的累加和</strong>。</p>
<p><strong>差分数组的主要适用场景是频繁对原始数组的某个区间的元素进行增减</strong></p>
<h3 id="370-Range-Addition"><a href="#370-Range-Addition" class="headerlink" title="370. Range Addition"></a><a href="https://leetcode.cn/problems/range-addition/">370. Range Addition</a></h3><p>由于初始<code>res</code>数组是全0，初始<code>dif</code>数组就是全0，无需初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode370</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] getModifiedArray(<span class="type">int</span> length, <span class="type">int</span>[][] updates) &#123;</span><br><span class="line">        <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line">        <span class="type">int</span>[] dif=<span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] update : updates) &#123;</span><br><span class="line">            <span class="type">int</span> from=update[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> to=update[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> inc=update[<span class="number">2</span>];</span><br><span class="line">            dif[from]+=inc;</span><br><span class="line">            <span class="keyword">if</span>(to+<span class="number">1</span>&lt;length)&#123;</span><br><span class="line">                dif[to+<span class="number">1</span>]-=inc;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res[<span class="number">0</span>]=dif[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">            res[i]=res[i-<span class="number">1</span>]+dif[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1109-Corporate-Flight-Bookings"><a href="#1109-Corporate-Flight-Bookings" class="headerlink" title="1109. Corporate Flight Bookings"></a><a href="https://leetcode.cn/problems/corporate-flight-bookings/">1109. Corporate Flight Bookings</a></h3><p>可以优化空间复杂度，无需另外开辟<code>res</code>数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode1109</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] corpFlightBookings(<span class="type">int</span>[][] bookings, <span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span>[] dif=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] booking : bookings) &#123;</span><br><span class="line">            <span class="type">int</span> from=booking[<span class="number">0</span>]-<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> to=booking[<span class="number">1</span>]-<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> inc=booking[<span class="number">2</span>];</span><br><span class="line">            dif[from]+=inc;</span><br><span class="line">            <span class="keyword">if</span>(to+<span class="number">1</span>&lt;n)&#123;</span><br><span class="line">                dif[to+<span class="number">1</span>]-=inc;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dif[i]+=dif[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dif;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1094-Car-Pooling"><a href="#1094-Car-Pooling" class="headerlink" title="1094. Car Pooling"></a><a href="https://leetcode.cn/problems/car-pooling/">1094. Car Pooling</a></h3><p>每多一段<code>trip</code>的影响就是，区间<code>[from, to-1]</code>+&#x3D;<code>passenger</code></p>
<p>只要保证在每一个地点车上人数都不超过<code>capacity</code>即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode1094</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">carPooling</span><span class="params">(<span class="type">int</span>[][] trips, <span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n=<span class="number">1000</span>;</span><br><span class="line">        <span class="type">int</span>[] dif=<span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] trip : trips) &#123;</span><br><span class="line">            <span class="type">int</span> inc=trip[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> from=trip[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> to=trip[<span class="number">2</span>]-<span class="number">1</span>;</span><br><span class="line">            dif[from]+=inc;</span><br><span class="line">            <span class="keyword">if</span>(to+<span class="number">1</span>&lt;n)&#123;</span><br><span class="line">                dif[to+<span class="number">1</span>]-=inc;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                dif[i]+=dif[i-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(dif[i]&gt;capacity)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Sliding-Window"><a href="#Sliding-Window" class="headerlink" title="Sliding Window"></a>Sliding Window</h2><h3 id="209-Minimum-Size-Subarray-Sum"><a href="#209-Minimum-Size-Subarray-Sum" class="headerlink" title="209. Minimum Size Subarray Sum"></a><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">209. Minimum Size Subarray Sum</a></h3><p>看到求 minimal length, 考虑用 <strong>sliding window</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> len=Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">while</span>(right&lt;n)&#123;<span class="comment">//[left,right)</span></span><br><span class="line">            sum+=nums[right];</span><br><span class="line">            right++;</span><br><span class="line">            <span class="keyword">while</span>(sum&gt;=target)&#123;</span><br><span class="line">                <span class="keyword">if</span>(right-left&lt;len)&#123;</span><br><span class="line">                    len=right-left;</span><br><span class="line">                &#125;</span><br><span class="line">                sum-=nums[left];</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len==Integer.MAX_VALUE ? <span class="number">0</span> : len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="二维数组遍历"><a href="#二维数组遍历" class="headerlink" title="二维数组遍历"></a>二维数组遍历</h2><h3 id="54-Spiral-Matrix"><a href="#54-Spiral-Matrix" class="headerlink" title="54. Spiral Matrix"></a><a href="https://leetcode.cn/problems/spiral-matrix/">54. Spiral Matrix</a></h3><p>大基本功</p>
<p>注意处理完rowStart和colEnd后，要注意判断区间是否还合法，不合法则提前结束</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">spiralOrder</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> row=matrix.length;</span><br><span class="line">        <span class="type">int</span> col=matrix[<span class="number">0</span>].length;</span><br><span class="line">        List&lt;Integer&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> rowStart=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> rowEnd=row-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> colStart=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> colEnd=col-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(rowStart&lt;=rowEnd &amp;&amp; colStart&lt;=colEnd)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=colStart; i&lt;=colEnd; i++)&#123;</span><br><span class="line">                res.add(matrix[rowStart][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rowStart++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=rowStart; i&lt;=rowEnd; i++)&#123;</span><br><span class="line">                res.add(matrix[i][colEnd]);</span><br><span class="line">            &#125;</span><br><span class="line">            colEnd--;</span><br><span class="line">            <span class="keyword">if</span>(rowStart&gt;rowEnd || colStart&gt;colEnd)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=colEnd; i&gt;=colStart; i--)&#123;</span><br><span class="line">                res.add(matrix[rowEnd][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rowEnd--;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=rowEnd; i&gt;=rowStart; i--)&#123;</span><br><span class="line">                res.add(matrix[i][colStart]);</span><br><span class="line">            &#125;</span><br><span class="line">            colStart++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="59-Spiral-Matrix-II"><a href="#59-Spiral-Matrix-II" class="headerlink" title="59. Spiral Matrix II"></a><a href="https://leetcode.cn/problems/spiral-matrix-ii/">59. Spiral Matrix II</a></h3><p>继续大基本功</p>
<p>注意：n*n矩阵则无需判断提前退出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span>[][] res=<span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="type">int</span> rowStart=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> rowEnd=n-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> colStart=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> colEnd=n-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> index=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(rowStart&lt;=rowEnd &amp;&amp; colStart&lt;=colEnd)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=colStart; i&lt;=colEnd; i++)&#123;</span><br><span class="line">                res[rowStart][i]=index++;</span><br><span class="line">            &#125;</span><br><span class="line">            rowStart++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=rowStart; i&lt;=rowEnd; i++)&#123;</span><br><span class="line">                res[i][colEnd]=index++;</span><br><span class="line">            &#125;</span><br><span class="line">            colEnd--;</span><br><span class="line">            <span class="comment">/*if(rowStart&gt;rowEnd || colStart&gt;colEnd)&#123;</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=colEnd; i&gt;=colStart; i--)&#123;</span><br><span class="line">                res[rowEnd][i]=index++;</span><br><span class="line">            &#125;</span><br><span class="line">            rowEnd--;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=rowEnd; i&gt;=rowStart; i--)&#123;</span><br><span class="line">                res[i][colStart]=index++;</span><br><span class="line">            &#125;</span><br><span class="line">            colStart++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="48-Rotate-Image"><a href="#48-Rotate-Image" class="headerlink" title="48. Rotate Image"></a><a href="https://leetcode.cn/problems/rotate-image/">48. Rotate Image</a></h3><p> rotate the image by <strong>90</strong> degrees (clockwise)</p>
<p>解法：</p>
<ol>
<li><strong>先将 <code>n x n</code> 矩阵 <code>matrix</code> 按照左上到右下的对角线进行镜像对称</strong></li>
<li><strong>然后再对矩阵的每一行进行反转</strong></li>
</ol>
<p><strong>结果就是 <code>matrix</code> 顺时针旋转 90 度的结果</strong></p>
<p>逆时针旋转？同理：</p>
<ol>
<li>沿着另一条对角线翻转</li>
<li>再反转每一行</li>
</ol>
<p>给你一个包含若干单词和空格的字符串 <code>s</code>，请你写一个算法，<strong>原地</strong>反转所有单词的顺序</p>
<p>解法：</p>
<ol>
<li><strong>先将整个字符串 <code>s</code> 反转</strong></li>
<li><strong>然后将每个单词分别反转</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode48</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n=matrix.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="type">int</span> temp=matrix[i][j];</span><br><span class="line">                matrix[i][j]=matrix[j][i];</span><br><span class="line">                matrix[j][i]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> right=n-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="type">int</span> temp=matrix[i][left];</span><br><span class="line">                matrix[i][left]=matrix[i][right];</span><br><span class="line">                matrix[i][right]=temp;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="1365-How-Many-Numbers-Are-Smaller-Than-the-Current-Number"><a href="#1365-How-Many-Numbers-Are-Smaller-Than-the-Current-Number" class="headerlink" title="1365. How Many Numbers Are Smaller Than the Current Number"></a><a href="https://leetcode.cn/problems/how-many-numbers-are-smaller-than-the-current-number/">1365. How Many Numbers Are Smaller Than the Current Number</a></h3><p>注意数组元素范围为[0,100]， 可以用数组记录每个元素出现的次数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode1365</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] smallerNumbersThanCurrent(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="comment">//计数排序</span></span><br><span class="line">        <span class="type">int</span>[] count=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">101</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            count[num]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">101</span>; i++) &#123;</span><br><span class="line">            count[i]+=count[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此时count[i]表示[0,i]元素出现的次数</span></span><br><span class="line">        <span class="comment">//小于num的元素个数即为count[num-1]</span></span><br><span class="line">        <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">            res[i]=nums[i]&gt;<span class="number">0</span> ? count[nums[i]-<span class="number">1</span>] : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="283-Move-Zeroes"><a href="#283-Move-Zeroes" class="headerlink" title="283. Move Zeroes"></a><a href="https://leetcode.cn/problems/move-zeroes/">283. Move Zeroes</a></h3><p>转换思路：不需要交换0和非0，只要<strong>把非0的数按顺序填入数组头</strong>即可</p>
<p>同侧双指针，left代表要填的位置，right代表要填的数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        <span class="keyword">while</span>(right&lt;n)&#123;</span><br><span class="line">            <span class="keyword">while</span>(right&lt;n &amp;&amp; nums[right]==<span class="number">0</span>)&#123;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(right&gt;=n)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(nums,left,right);</span><br><span class="line">            left++;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==j)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> temp=nums[i];</span><br><span class="line">        nums[i]=nums[j];</span><br><span class="line">        nums[j]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="152-Maximum-Product-Subarray"><a href="#152-Maximum-Product-Subarray" class="headerlink" title="152. Maximum Product Subarray"></a>152. Maximum Product Subarray</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProduct</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">2</span>];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=nums[<span class="number">0</span>];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">1</span>]=nums[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> res=nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>]=Math.max(nums[i]*dp[i-<span class="number">1</span>][<span class="number">0</span>],nums[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>]=Math.min(nums[i]*dp[i-<span class="number">1</span>][<span class="number">1</span>],nums[i]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>]=Math.max(nums[i]*dp[i-<span class="number">1</span>][<span class="number">1</span>],nums[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>]=Math.min(nums[i]*dp[i-<span class="number">1</span>][<span class="number">0</span>],nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        res=Math.max(dp[i][<span class="number">0</span>],res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="150-Evaluate-Reverse-Polish-Notation"><a href="#150-Evaluate-Reverse-Polish-Notation" class="headerlink" title="150. Evaluate Reverse Polish Notation"></a>150. Evaluate Reverse Polish Notation</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(String[] tokens)</span> &#123;</span><br><span class="line">    Deque&lt;Integer&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tokens.length; i++) &#123;</span><br><span class="line">        String s=tokens[i];</span><br><span class="line">        <span class="keyword">if</span>(s.equals(<span class="string">&quot;+&quot;</span>) || s.equals(<span class="string">&quot;-&quot;</span>)</span><br><span class="line">                || s.equals(<span class="string">&quot;*&quot;</span>) || s.equals(<span class="string">&quot;/&quot;</span>))&#123;</span><br><span class="line">            <span class="type">int</span> a=stack.pop();</span><br><span class="line">            <span class="type">int</span> b=stack.pop();</span><br><span class="line">            stack.push(cal(s,a,b));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            stack.push(Integer.valueOf(s));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cal</span><span class="params">(String s, <span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (s)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> b+a;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> b-a;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> b*a;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> b/a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="169-Majority-Element"><a href="#169-Majority-Element" class="headerlink" title="169. Majority Element"></a>169. Majority Element</h3><p><strong>Follow-up:</strong> Could you solve the problem in linear time and in <code>O(1)</code> space?</p>
<h4 id="Approach-4-Bit-Manipulation"><a href="#Approach-4-Bit-Manipulation" class="headerlink" title="Approach 4: Bit Manipulation"></a>Approach 4: Bit Manipulation</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">majorityElement</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> bit=<span class="number">1</span>&lt;&lt;i;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span>((num&amp;bit)!=<span class="number">0</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count&gt;n/<span class="number">2</span>)&#123;</span><br><span class="line">            res|=bit;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="189-Rotate-Array"><a href="#189-Rotate-Array" class="headerlink" title="189. Rotate Array"></a>189. Rotate Array</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="comment">//1 2 3 4 5</span></span><br><span class="line">    <span class="comment">//k=2</span></span><br><span class="line">    <span class="comment">//3 2 1 5 4</span></span><br><span class="line">    <span class="comment">//4 5 1 2 3</span></span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="comment">//[0,n-k-1] , [n-k,n-1]</span></span><br><span class="line">    <span class="type">int</span> p=((n-k-<span class="number">1</span>)%n + n)%n;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right=p;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        swap(nums,left++,right--);</span><br><span class="line">    &#125;</span><br><span class="line">    left=p+<span class="number">1</span>;</span><br><span class="line">    right=n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        swap(nums,left++,right--);</span><br><span class="line">    &#125;</span><br><span class="line">    left=<span class="number">0</span>;</span><br><span class="line">    right=n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        swap(nums,left++,right--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">    nums[i]=nums[i]^nums[j];    <span class="comment">//a=a^b</span></span><br><span class="line">    nums[j]=nums[i]^nums[j];    <span class="comment">//b=a^b^b=a</span></span><br><span class="line">    nums[i]=nums[i]^nums[j];    <span class="comment">//a=a^b^a=b</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="221-Maximal-Square"><a href="#221-Maximal-Square" class="headerlink" title="221. Maximal Square"></a>221. Maximal Square</h3><p>逐一判断，超时!</p>
<p>注意：</p>
<ul>
<li>类比maximum rectangle, 用dp!</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximalSquare</span><span class="params">(<span class="type">char</span>[][] matrix)</span> &#123;</span><br><span class="line">    <span class="type">int</span> row=matrix.length;</span><br><span class="line">    <span class="type">int</span> col=matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[i][j]==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                max=Math.max(max,cal(matrix,i,j,row,col));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cal</span><span class="params">(<span class="type">char</span>[][] matrix, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> row, <span class="type">int</span> col)</span>&#123;</span><br><span class="line">    <span class="type">int</span> cur=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(valid(matrix,x,y,row,col,cur))&#123;</span><br><span class="line">        cur++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur*cur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">valid</span><span class="params">(<span class="type">char</span>[][] matrix, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> cur)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=y; i&lt;=y+cur; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x+cur&gt;=row || i&gt;=col  || matrix[x+cur][i]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x; i&lt;=x+cur; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(y+cur&gt;=col || i&gt;=row || matrix[i][y+cur]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Approach-2-Dynamic-Programming"><a href="#Approach-2-Dynamic-Programming" class="headerlink" title="Approach 2: Dynamic Programming"></a>Approach 2: Dynamic Programming</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximalSquare</span><span class="params">(<span class="type">char</span>[][] matrix)</span> &#123;</span><br><span class="line">    <span class="type">int</span> row=matrix.length;</span><br><span class="line">    <span class="type">int</span> col=matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[row+<span class="number">1</span>][col+<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= col; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[i-<span class="number">1</span>][j-<span class="number">1</span>]==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                dp[i][j]=Math.min(Math.min(dp[i][j-<span class="number">1</span>],dp[i-<span class="number">1</span>][j]),dp[i-<span class="number">1</span>][j-<span class="number">1</span>])+<span class="number">1</span>;</span><br><span class="line">                max=Math.max(max,dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max*max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Approach-3-Better-Dynamic-Programming-Accepted"><a href="#Approach-3-Better-Dynamic-Programming-Accepted" class="headerlink" title="Approach #3 (Better Dynamic Programming) [Accepted]"></a>Approach #3 (Better Dynamic Programming) [Accepted]</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximalSquare</span><span class="params">(<span class="type">char</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> matrix.length, cols = rows &gt; <span class="number">0</span> ? matrix[<span class="number">0</span>].length : <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[cols + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxsqlen</span> <span class="operator">=</span> <span class="number">0</span>, prev = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= rows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= cols; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> dp[j];</span><br><span class="line">                <span class="keyword">if</span> (matrix[i - <span class="number">1</span>][j - <span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                    dp[j] = Math.min(Math.min(dp[j - <span class="number">1</span>], prev), dp[j]) + <span class="number">1</span>;</span><br><span class="line">                    maxsqlen = Math.max(maxsqlen, dp[j]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                prev = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxsqlen * maxsqlen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="228-Summary-Ranges"><a href="#228-Summary-Ranges" class="headerlink" title="228. Summary Ranges"></a>228. Summary Ranges</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">summaryRanges</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    List&lt;String&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">        <span class="type">int</span> start=i;</span><br><span class="line">        <span class="type">int</span> end=i;</span><br><span class="line">        <span class="keyword">while</span>(end+<span class="number">1</span>&lt;n &amp;&amp; nums[end+<span class="number">1</span>]==nums[end]+<span class="number">1</span>)&#123;</span><br><span class="line">            end++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(start==end)&#123;</span><br><span class="line">            res.add(String.valueOf(nums[start]));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.add(nums[start]+<span class="string">&quot;-&gt;&quot;</span>+nums[end]);</span><br><span class="line">        &#125;</span><br><span class="line">        i=end+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="289-Game-of-Life"><a href="#289-Game-of-Life" class="headerlink" title="289. Game of Life"></a>289. Game of Life</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">gameOfLife</span><span class="params">(<span class="type">int</span>[][] board)</span> &#123;</span><br><span class="line">    <span class="type">int</span> row=board.length;</span><br><span class="line">    <span class="type">int</span> col=board[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">boolean</span>[][] change=<span class="keyword">new</span> <span class="title class_">boolean</span>[row][col];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][j]==<span class="number">0</span> &amp;&amp; lives(board,i,j,row,col))&#123;</span><br><span class="line">                change[i][j]=<span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(board[i][j]==<span class="number">1</span> &amp;&amp; dies(board,i,j,row,col))&#123;</span><br><span class="line">                change[i][j]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(change[i][j])&#123;</span><br><span class="line">                board[i][j]=board[i][j]==<span class="number">1</span> ? <span class="number">0</span> :<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">lives</span><span class="params">(<span class="type">int</span>[][] board, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> row, <span class="type">int</span> col)</span>&#123;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=i-<span class="number">1</span>; x&lt;=i+<span class="number">1</span>; x++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> y=j-<span class="number">1</span>; y&lt;=j+<span class="number">1</span>; y++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x==i &amp;&amp; y==j)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span> || x&gt;=row || y&lt;<span class="number">0</span> || y&gt;=col || board[x][y]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count==<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">dies</span><span class="params">(<span class="type">int</span>[][] board, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> row, <span class="type">int</span> col)</span>&#123;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=i-<span class="number">1</span>; x&lt;=i+<span class="number">1</span>; x++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> y=j-<span class="number">1</span>; y&lt;=j+<span class="number">1</span>; y++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x==i &amp;&amp; y==j)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span> || x&gt;=row || y&lt;<span class="number">0</span> || y&gt;=col || board[x][y]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count!=<span class="number">2</span> &amp;&amp; count!=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>BFS</title>
    <url>/2022/06/23/BFS/</url>
    <content><![CDATA[<h1 id="BFS好题选编"><a href="#BFS好题选编" class="headerlink" title="BFS好题选编"></a>BFS好题选编</h1><h2 id="301-Remove-Invalid-Parentheses"><a href="#301-Remove-Invalid-Parentheses" class="headerlink" title="301. Remove Invalid Parentheses"></a><a href="https://leetcode.cn/problems/remove-invalid-parentheses/">301. Remove Invalid Parentheses</a></h2><p>经测试，<code>BFS</code>比<code>backtracking</code><strong>快得多！</strong></p>
<p>注意到题目中要求最少删除，这样的描述正是广度优先搜索算法应用的场景，并且题目也要求我们输出所有的结果。我们在进行广度优先搜索时<strong>每一轮删除字符串中的 1 个括号，直到出现合法匹配的字符串为止</strong>，此时进行轮转的次数即为最少需要删除括号的个数。</p>
<p>我们进行广度优先搜索时，每次保存上一轮搜索的结果，然后对上一轮已经保存的结果中的每一个字符串尝试所有可能的删除一个括号的方法，然后将保存的结果进行下一轮搜索。在保存结果时，我们可以利用哈希表对上一轮生成的结果去重，从而提高效率。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">removeInvalidParentheses</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        List&lt;String&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        Set&lt;String&gt; currSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        currSet.add(s);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String str : currSet) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isValid(str)) &#123;</span><br><span class="line">                    ans.add(str);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ans.size() &gt; <span class="number">0</span>) &#123;	<span class="comment">//直到第一次出现合法匹配的字符串，此时删除次数必然最少</span></span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">            Set&lt;String&gt; nextSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">            <span class="keyword">for</span> (String str : currSet) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i ++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; str.charAt(i) == str.charAt(i - <span class="number">1</span>)) &#123;<span class="comment">// 进一步优化运行速度，去掉也可以; 只需考虑删除相邻两个相同字符中的一个即可，不必重复考虑</span></span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (str.charAt(i) == <span class="string">&#x27;(&#x27;</span> || str.charAt(i) == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                        nextSet.add(str.substring(<span class="number">0</span>, i) + str.substring(i + <span class="number">1</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            currSet = nextSet;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String str)</span> &#123;	<span class="comment">//判断valid无需分别计数left和right</span></span><br><span class="line">        <span class="type">char</span>[] ss = str.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : ss) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                count--;</span><br><span class="line">                <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">return</span> <span class="variable">count</span> <span class="operator">=</span>= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="133-Clone-Graph"><a href="#133-Clone-Graph" class="headerlink" title="133. Clone Graph"></a><a href="https://leetcode.cn/problems/clone-graph/">133. Clone Graph</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Node,Node&gt; map;</span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">cloneGraph</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    Deque&lt;Node&gt; queue=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();   <span class="comment">//队中放入老节点</span></span><br><span class="line">    queue.offer(node);</span><br><span class="line">    map.put(node,<span class="keyword">new</span> <span class="title class_">Node</span>(node.val,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()));</span><br><span class="line">    <span class="comment">//直到队空</span></span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">        Node cur=queue.poll();</span><br><span class="line">        <span class="keyword">for</span> (Node next : cur.neighbors) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!map.containsKey(next))&#123;	<span class="comment">//第一次访问到该老节点，则入队，并复制</span></span><br><span class="line">                queue.offer(next);</span><br><span class="line">                map.put(next,<span class="keyword">new</span> <span class="title class_">Node</span>(next.val,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()));</span><br><span class="line">            &#125;</span><br><span class="line">            map.get(cur).neighbors.add(map.get(next));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Node[] clone;</span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">cloneGraph</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Deque&lt;Node&gt; queue=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    clone=<span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">101</span>];</span><br><span class="line">    queue.offer(node);</span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">        Node cur=queue.poll();</span><br><span class="line">        <span class="type">int</span> val=cur.val;</span><br><span class="line">        <span class="keyword">if</span>(clone[val]==<span class="literal">null</span>)&#123;</span><br><span class="line">            Node newNode=<span class="keyword">new</span> <span class="title class_">Node</span>(val);</span><br><span class="line">            clone[val]=newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Node next : cur.neighbors) &#123;</span><br><span class="line">            <span class="keyword">if</span>(clone[next.val]==<span class="literal">null</span>)&#123;</span><br><span class="line">                queue.offer(next);</span><br><span class="line">                Node newNext=<span class="keyword">new</span> <span class="title class_">Node</span>(next.val);</span><br><span class="line">                clone[next.val]=newNext;</span><br><span class="line">            &#125;</span><br><span class="line">            clone[val].neighbors.add(clone[next.val]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clone[<span class="number">1</span>];</span><br></pre></td></tr></table></figure>



<h2 id="269-Alien-Dictionary"><a href="#269-Alien-Dictionary" class="headerlink" title="269. Alien Dictionary"></a><a href="https://leetcode.cn/problems/alien-dictionary/">269. Alien Dictionary</a></h2><p>拓扑排序，用dfs需要三要素+后序遍历逆序，用bfs结果无需逆序，也需三要素：</p>
<ul>
<li>入度数组</li>
<li>出队计数器count</li>
<li>当前入度为0的queue</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">alienOrder</span><span class="params">(String[] words)</span> &#123;</span><br><span class="line">    Set&lt;Character&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    Map&lt;Character,List&lt;Character&gt;&gt; graph=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            set.add(word.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">        String small=words[i-<span class="number">1</span>];</span><br><span class="line">        String big=words[i];</span><br><span class="line">        <span class="type">int</span> len=Math.max(small.length(),big.length());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(j==big.length())&#123;    <span class="comment">//invalid</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j==small.length())&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(small.charAt(j)!=big.charAt(j))&#123;</span><br><span class="line">                <span class="type">char</span> from=small.charAt(j);</span><br><span class="line">                <span class="type">char</span> to=big.charAt(j);</span><br><span class="line">                graph.putIfAbsent(from,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">                graph.get(from).add(to);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    Deque&lt;Character&gt; queue=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span>[] in=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span> (List&lt;Character&gt; tos : graph.values()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Character to : tos) &#123;</span><br><span class="line">            in[to-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Character c : set) &#123;</span><br><span class="line">        <span class="keyword">if</span>(in[c-<span class="string">&#x27;a&#x27;</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">            queue.offer(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">        <span class="type">char</span> cur=queue.poll();</span><br><span class="line">        sb.append(cur);</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span>(graph.containsKey(cur))&#123;</span><br><span class="line">            <span class="keyword">for</span> (Character next : graph.get(cur)) &#123;</span><br><span class="line">                in[next-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">                <span class="keyword">if</span>(in[next-<span class="string">&#x27;a&#x27;</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">                    queue.offer(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count==set.size() ? sb.toString() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>优化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">alienOrder</span><span class="params">(String[] words)</span> &#123;</span><br><span class="line">    List&lt;Character&gt;[] graph=<span class="keyword">new</span> <span class="title class_">List</span>[<span class="number">26</span>];</span><br><span class="line">    Map&lt;Character,Integer&gt; ins=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            ins.put(word.charAt(i),<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">        String first=words[i-<span class="number">1</span>];</span><br><span class="line">        String second=words[i];</span><br><span class="line">        <span class="type">int</span> l=Math.max(first.length(),second.length());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; l; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(j==first.length())&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j==second.length())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">char</span> a=first.charAt(j);</span><br><span class="line">            <span class="type">char</span> b=second.charAt(j);</span><br><span class="line">            <span class="keyword">if</span>(a!=b)&#123;</span><br><span class="line">                <span class="keyword">if</span>(graph[a-<span class="string">&#x27;a&#x27;</span>]==<span class="literal">null</span>)&#123;</span><br><span class="line">                    graph[a-<span class="string">&#x27;a&#x27;</span>]=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                &#125;</span><br><span class="line">                graph[a-<span class="string">&#x27;a&#x27;</span>].add(b);</span><br><span class="line">                ins.put(b,ins.get(b)+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    Deque&lt;Character&gt; queue=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Character c : ins.keySet()) &#123;</span><br><span class="line">        <span class="keyword">if</span>(ins.get(c)==<span class="number">0</span>)&#123;</span><br><span class="line">            queue.offer(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">        <span class="type">char</span> cur=queue.poll();</span><br><span class="line">        sb.append(cur);</span><br><span class="line">        <span class="keyword">if</span>(graph[cur-<span class="string">&#x27;a&#x27;</span>]!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Character next : graph[cur - <span class="string">&#x27;a&#x27;</span>]) &#123;</span><br><span class="line">                ins.put(next,ins.get(next)-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(ins.get(next)==<span class="number">0</span>)&#123;</span><br><span class="line">                    queue.offer(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sb.length()==ins.size())&#123;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="100-Same-Tree"><a href="#100-Same-Tree" class="headerlink" title="100. Same Tree"></a>100. Same Tree</h2><h3 id="DFS："><a href="#DFS：" class="headerlink" title="DFS："></a>DFS：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">null</span> &amp;&amp; q==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">null</span> || q==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p.val==q.val &amp;&amp; isSameTree(p.left,q.left) &amp;&amp; isSameTree(p.right,q.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS:"></a>BFS:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">    Deque&lt;TreeNode&gt; q1=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    Deque&lt;TreeNode&gt; q2=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    q1.offer(p);</span><br><span class="line">    q2.offer(q);</span><br><span class="line">    <span class="keyword">while</span>(!q1.isEmpty() &amp;&amp; !q2.isEmpty())&#123;</span><br><span class="line">        TreeNode node1=q1.poll();</span><br><span class="line">        TreeNode node2=q2.poll();</span><br><span class="line">        <span class="keyword">if</span>(node1==<span class="literal">null</span> &amp;&amp; node2==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node1==<span class="literal">null</span> || node2==<span class="literal">null</span> || node1.val!=node2.val)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        q1.offer(node1.left);</span><br><span class="line">        q1.offer(node1.right);</span><br><span class="line">        q2.offer(node2.left);</span><br><span class="line">        q2.offer(node2.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> q1.isEmpty() &amp;&amp; q2.isEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="102-Binary-Tree-Level-Order-Traversal"><a href="#102-Binary-Tree-Level-Order-Traversal" class="headerlink" title="102. Binary Tree Level Order Traversal"></a>102. Binary Tree Level Order Traversal</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    Deque&lt;TreeNode&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    q.offer(root);</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> size=q.size();</span><br><span class="line">        <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            TreeNode node=q.poll();</span><br><span class="line">            list.add(node.val);</span><br><span class="line">            <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                q.offer(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                q.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.add(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="103-Binary-Tree-Zigzag-Level-Order-Traversal"><a href="#103-Binary-Tree-Zigzag-Level-Order-Traversal" class="headerlink" title="103. Binary Tree Zigzag Level Order Traversal"></a>103. Binary Tree Zigzag Level Order Traversal</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">zigzagLevelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    Deque&lt;TreeNode&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    q.offer(root);</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span> size=q.size();</span><br><span class="line">        <span class="type">int</span> idx=res.size();</span><br><span class="line">        LinkedList&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            TreeNode node=q.poll();</span><br><span class="line">            <span class="keyword">if</span>((idx&amp;<span class="number">1</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">                list.add(node.val);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                list.addFirst(node.val);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                q.offer(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                q.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.add(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="104-Maximum-Depth-of-Binary-Tree"><a href="#104-Maximum-Depth-of-Binary-Tree" class="headerlink" title="104. Maximum Depth of Binary Tree"></a>104. Maximum Depth of Binary Tree</h2><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS:"></a>DFS:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Math.max(maxDepth(root.left),maxDepth(root.right))+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="BFS-1"><a href="#BFS-1" class="headerlink" title="BFS:"></a>BFS:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Deque&lt;TreeNode&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    q.offer(root);</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span> size=q.size();</span><br><span class="line">        res++;</span><br><span class="line">        <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            TreeNode node=q.poll();</span><br><span class="line">            <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                q.offer(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                q.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="310-Minimum-Height-Trees"><a href="#310-Minimum-Height-Trees" class="headerlink" title="310. Minimum Height Trees"></a>310. Minimum Height Trees</h2><h3 id="BFS-Time-Limit-Exceeded"><a href="#BFS-Time-Limit-Exceeded" class="headerlink" title="BFS    (Time Limit Exceeded)"></a>BFS    (Time Limit Exceeded)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode310</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findMinHeightTrees</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> min=Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span>[][] graph=<span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">            <span class="type">int</span> a=edge[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> b=edge[<span class="number">1</span>];</span><br><span class="line">            graph[a][b]=<span class="number">1</span>;</span><br><span class="line">            graph[b][a]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;Integer&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> h=<span class="number">0</span>;</span><br><span class="line">            <span class="type">boolean</span>[] visited=<span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">            q.clear();</span><br><span class="line">            q.offer(i);</span><br><span class="line">            visited[i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">                <span class="type">int</span> size=q.size();</span><br><span class="line">                h++;</span><br><span class="line">                <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> root=q.poll();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(graph[root][j]==<span class="number">1</span> &amp;&amp; !visited[j])&#123;</span><br><span class="line">                            q.offer(j);</span><br><span class="line">                            visited[j]=<span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(h&lt;=min)&#123;</span><br><span class="line">                <span class="keyword">if</span>(h&lt;min)&#123;</span><br><span class="line">                    res.clear();</span><br><span class="line">                    min=h;</span><br><span class="line">                &#125;</span><br><span class="line">                res.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Topological-sort"><a href="#Topological-sort" class="headerlink" title="Topological sort"></a>Topological sort</h3><ul>
<li>find out the centroids of the circle,  <em>i.e.</em> nodes that is close to all the peripheral nodes (leaf nodes)</li>
<li>For the tree-alike graph, the number of centroids is <strong>no more than 2</strong>.<ul>
<li>proved by contradiction</li>
</ul>
</li>
<li>Given the above intuition, the problem is now reduced down to looking for all the <em><strong>centroid</strong></em> nodes in a tree-alike graph, which in addition are no more than two.</li>
<li>algorithm: trim out the leaf nodes, layer by layer!!</li>
</ul>
<p>​    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findMinHeightTrees</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// edge cases</span></span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            ArrayList&lt;Integer&gt; centroids = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                centroids.add(i);</span><br><span class="line">            <span class="keyword">return</span> centroids;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Build the graph with the adjacency list</span></span><br><span class="line">        ArrayList&lt;Set&lt;Integer&gt;&gt; neighbors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            neighbors.add(<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">start</span> <span class="operator">=</span> edge[<span class="number">0</span>], end = edge[<span class="number">1</span>];</span><br><span class="line">            neighbors.get(start).add(end);</span><br><span class="line">            neighbors.get(end).add(start);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize the first layer of leaves</span></span><br><span class="line">        ArrayList&lt;Integer&gt; leaves = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">if</span> (neighbors.get(i).size() == <span class="number">1</span>)</span><br><span class="line">                leaves.add(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Trim the leaves until reaching the centroids</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">remainingNodes</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="keyword">while</span> (remainingNodes &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            remainingNodes -= leaves.size();</span><br><span class="line">            ArrayList&lt;Integer&gt; newLeaves = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// remove the current leaves along with the edges</span></span><br><span class="line">            <span class="keyword">for</span> (Integer leaf : leaves) &#123;</span><br><span class="line">                <span class="comment">// the only neighbor left for the leaf node</span></span><br><span class="line">                <span class="type">Integer</span> <span class="variable">neighbor</span> <span class="operator">=</span> neighbors.get(leaf).iterator().next();</span><br><span class="line">                <span class="comment">// remove the edge along with the leaf node</span></span><br><span class="line">                neighbors.get(neighbor).remove(leaf);</span><br><span class="line">                <span class="keyword">if</span> (neighbors.get(neighbor).size() == <span class="number">1</span>)</span><br><span class="line">                    newLeaves.add(neighbor);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// prepare for the next round</span></span><br><span class="line">            leaves = newLeaves;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The remaining nodes are the centroids of the graph</span></span><br><span class="line">        <span class="keyword">return</span> leaves;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findMinHeightTrees</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">2</span>)&#123;</span><br><span class="line">        List&lt;Integer&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            res.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;Integer,Set&lt;Integer&gt;&gt; neighbors=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        neighbors.put(i,<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">        <span class="type">int</span> a=edge[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> b=edge[<span class="number">1</span>];</span><br><span class="line">        neighbors.get(a).add(b);</span><br><span class="line">        neighbors.get(b).add(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; leaves=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(neighbors.get(i).size()==<span class="number">1</span>)&#123;</span><br><span class="line">            leaves.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> remaining=n;</span><br><span class="line">    <span class="keyword">while</span>(remaining&gt;<span class="number">2</span>)&#123;</span><br><span class="line">        remaining-=leaves.size();</span><br><span class="line">        List&lt;Integer&gt; newLeaves=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Integer leaf : leaves) &#123;</span><br><span class="line">            <span class="type">int</span> neighbor=neighbors.get(leaf).iterator().next();</span><br><span class="line">            neighbors.get(neighbor).remove(leaf);</span><br><span class="line">            <span class="keyword">if</span>(neighbors.get(neighbor).size()==<span class="number">1</span>)&#123;</span><br><span class="line">                newLeaves.add(neighbor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        leaves=newLeaves;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> leaves;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="111-Minimum-Depth-of-Binary-Tree"><a href="#111-Minimum-Depth-of-Binary-Tree" class="headerlink" title="111. Minimum Depth of Binary Tree"></a>111. Minimum Depth of Binary Tree</h2><h3 id="DFS-1"><a href="#DFS-1" class="headerlink" title="DFS:"></a>DFS:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root.left==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> minDepth(root.right)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root.right==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> minDepth(root.left)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Math.min(minDepth(root.left),minDepth(root.right))+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="BFS-2"><a href="#BFS-2" class="headerlink" title="BFS:"></a>BFS:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Deque&lt;TreeNode&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    q.offer(root);</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span> size=q.size();</span><br><span class="line">        res++;</span><br><span class="line">        <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            TreeNode node=q.poll();</span><br><span class="line">            <span class="keyword">if</span>(node.left==<span class="literal">null</span> &amp;&amp; node.right==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                q.offer(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                q.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="112-Path-Sum"><a href="#112-Path-Sum" class="headerlink" title="112. Path Sum"></a>112. Path Sum</h2><h3 id="DFS-2"><a href="#DFS-2" class="headerlink" title="DFS:"></a>DFS:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPathSum</span><span class="params">(TreeNode root, <span class="type">int</span> targetSum)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> root.val==targetSum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hasPathSum(root.left,targetSum-root.val) || hasPathSum(root.right,targetSum-root.val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="BFS-3"><a href="#BFS-3" class="headerlink" title="BFS:"></a>BFS:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPathSum</span><span class="params">(TreeNode root, <span class="type">int</span> targetSum)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Deque&lt;TreeNode&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    q.offer(root);</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        TreeNode node=q.poll();</span><br><span class="line">        <span class="keyword">if</span>(node.left==<span class="literal">null</span> &amp;&amp; node.right==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(node.val==targetSum)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            node.left.val+=node.val;</span><br><span class="line">            q.offer(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            node.right.val+=node.val;</span><br><span class="line">            q.offer(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="116-Populating-Next-Right-Pointers-in-Each-Node"><a href="#116-Populating-Next-Right-Pointers-in-Each-Node" class="headerlink" title="116. Populating Next Right Pointers in Each Node"></a>116. Populating Next Right Pointers in Each Node</h2><h3 id="O-N-time-O-N-space"><a href="#O-N-time-O-N-space" class="headerlink" title="O(N) time, O(N) space:"></a>O(N) time, O(N) space:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Node <span class="title function_">connect</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Deque&lt;Node&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    q.offer(root);</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span> size=q.size();</span><br><span class="line">        <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            Node node=q.poll();</span><br><span class="line">            <span class="keyword">if</span>(size==<span class="number">0</span>)&#123;</span><br><span class="line">                node.next=<span class="literal">null</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                node.next=q.peek();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                q.offer(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                q.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="O-N-time-O-1-space"><a href="#O-N-time-O-1-space" class="headerlink" title="O(N) time, O(1) space:"></a>O(N) time, O(1) space:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">connect</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Start with the root node. There are no next pointers</span></span><br><span class="line">        <span class="comment">// that need to be set up on the first level</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">leftmost</span> <span class="operator">=</span> root;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Once we reach the final level, we are done</span></span><br><span class="line">        <span class="keyword">while</span> (leftmost.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Iterate the &quot;linked list&quot; starting from the head</span></span><br><span class="line">            <span class="comment">// node and using the next pointers, establish the </span></span><br><span class="line">            <span class="comment">// corresponding links for the next level</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> leftmost;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// CONNECTION 1</span></span><br><span class="line">                head.left.next = head.right;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// CONNECTION 2</span></span><br><span class="line">                <span class="keyword">if</span> (head.next != <span class="literal">null</span>) &#123;</span><br><span class="line">                    head.right.next = head.next.left;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// Progress along the list (nodes on the current level)</span></span><br><span class="line">                head = head.next;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Move onto the next level</span></span><br><span class="line">            leftmost = leftmost.left;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Node <span class="title function_">connect</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node cur=root;</span><br><span class="line">    Node leftMost=cur.left;</span><br><span class="line">    <span class="keyword">while</span>(leftMost!=<span class="literal">null</span>)&#123;</span><br><span class="line">        Node next=cur.next;</span><br><span class="line">        cur.left.next=cur.right;</span><br><span class="line">        <span class="keyword">if</span>(next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            cur.right.next=next.left;</span><br><span class="line">            cur=next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cur=leftMost;</span><br><span class="line">            leftMost=cur.left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="127-Word-Ladder"><a href="#127-Word-Ladder" class="headerlink" title="127. Word Ladder"></a>127. Word Ladder</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">ladderLength</span><span class="params">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> &#123;</span><br><span class="line">    Deque&lt;String&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    Set&lt;String&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    q.offer(beginWord);</span><br><span class="line">    set.add(beginWord);</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span> size=q.size();</span><br><span class="line">        res++;</span><br><span class="line">        <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            String cur=q.poll();</span><br><span class="line">            <span class="keyword">if</span>(cur.equals(endWord))&#123;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; wordList.size(); i++) &#123;</span><br><span class="line">                String s=wordList.get(i);</span><br><span class="line">                <span class="keyword">if</span>(!set.contains(s) &amp;&amp; next(cur,s))&#123;</span><br><span class="line">                    set.add(s);</span><br><span class="line">                    q.offer(s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">next</span><span class="params">(String a, String b)</span>&#123;</span><br><span class="line">    <span class="type">int</span> n=a.length();</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a.charAt(i)!=b.charAt(i))&#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span>(count&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count==<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="126-Word-Ladder-II"><a href="#126-Word-Ladder-II" class="headerlink" title="126. Word Ladder II"></a>126. Word Ladder II</h2><p>easy to count, but how to store the shortest transformation sequeneces? </p>
<h2 id="226-Invert-Binary-Tree"><a href="#226-Invert-Binary-Tree" class="headerlink" title="226. Invert Binary Tree"></a>226. Invert Binary Tree</h2><h3 id="DFS-3"><a href="#DFS-3" class="headerlink" title="DFS:"></a>DFS:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode left=root.left;</span><br><span class="line">    root.left=invertTree(root.right);</span><br><span class="line">    root.right=invertTree(left);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="BFS-4"><a href="#BFS-4" class="headerlink" title="BFS:"></a>BFS:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span> || root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    Deque&lt;TreeNode&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    invert(root);</span><br><span class="line">    q.addFirst(root.left);</span><br><span class="line">    q.addLast(root.right);</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        TreeNode l=q.pollFirst();</span><br><span class="line">        TreeNode r=q.pollLast();</span><br><span class="line">        invert(l);</span><br><span class="line">        invert(r);</span><br><span class="line">        <span class="keyword">if</span>(l!=<span class="literal">null</span> &amp;&amp; l.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            q.offerFirst(l.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l!=<span class="literal">null</span> &amp;&amp; l.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            q.offerFirst(l.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(r!=<span class="literal">null</span> &amp;&amp; r.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            q.offerLast(r.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(r!=<span class="literal">null</span> &amp;&amp; r.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            q.offerLast(r.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">invert</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode left=root.left;</span><br><span class="line">    root.left=root.right;</span><br><span class="line">    root.right=left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="279-Perfect-Squares"><a href="#279-Perfect-Squares" class="headerlink" title="279. Perfect Squares"></a>279. Perfect Squares</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numSquares</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    Deque&lt;Integer&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    q.offer(n);</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    Set&lt;Integer&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="comment">//12           1</span></span><br><span class="line">        <span class="comment">//11,8,3       2</span></span><br><span class="line">        <span class="comment">//10,7,2,4     3</span></span><br><span class="line">        <span class="type">int</span> size=q.size();</span><br><span class="line">        res++;</span><br><span class="line">        set.clear();</span><br><span class="line">        <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> cur=q.poll();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= cur; i++) &#123;</span><br><span class="line">                <span class="type">int</span> sq=i*i;</span><br><span class="line">                <span class="keyword">if</span>(sq&lt;=cur)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(sq==cur)&#123;</span><br><span class="line">                        <span class="keyword">return</span> res;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!set.contains(cur-sq))&#123;</span><br><span class="line">                        q.offer(cur-sq);</span><br><span class="line">                        set.add(cur-sq);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="286-Walls-and-Gates"><a href="#286-Walls-and-Gates" class="headerlink" title="286. Walls and Gates"></a>286. Walls and Gates</h2><h3 id="DFS-run-time-exceeded"><a href="#DFS-run-time-exceeded" class="headerlink" title="DFS: run time exceeded"></a>DFS: run time exceeded</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode286</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] board;</span><br><span class="line">    <span class="type">int</span> row;</span><br><span class="line">    <span class="type">int</span> col;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wallsAndGates</span><span class="params">(<span class="type">int</span>[][] rooms)</span> &#123;</span><br><span class="line">        board=rooms;</span><br><span class="line">        row=board.length;</span><br><span class="line">        col=board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j]==<span class="number">0</span>)&#123;</span><br><span class="line">                    dfs(i,j,i+<span class="number">1</span>,j,<span class="number">1</span>);</span><br><span class="line">                    dfs(i,j,i-<span class="number">1</span>,j,<span class="number">1</span>);</span><br><span class="line">                    dfs(i,j,i,j+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">                    dfs(i,j,i,j-<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> preX, <span class="type">int</span> preY, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> dist)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=row || j&lt;<span class="number">0</span> || j&gt;=col || board[i][j]==-<span class="number">1</span></span><br><span class="line">                || board[i][j]==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        board[i][j]=Math.min(board[i][j],dist);</span><br><span class="line">        <span class="keyword">if</span>(preX!=i+<span class="number">1</span>)&#123;</span><br><span class="line">            dfs(i,j,i+<span class="number">1</span>,j,dist+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(preX!=i-<span class="number">1</span>)&#123;</span><br><span class="line">            dfs(i,j,i-<span class="number">1</span>,j,dist+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(preY!=j+<span class="number">1</span>)&#123;</span><br><span class="line">            dfs(i,j,i,j+<span class="number">1</span>,dist+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(preY!=j-<span class="number">1</span>)&#123;</span><br><span class="line">            dfs(i,j,i,j-<span class="number">1</span>,dist+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="BFS-O-mn-time-and-space-complexity"><a href="#BFS-O-mn-time-and-space-complexity" class="headerlink" title="BFS: O(mn) time and space complexity"></a>BFS: O(mn) time and space complexity</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">EMPTY</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">GATE</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;<span class="type">int</span>[]&gt; DIRECTIONS = Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">1</span>,  <span class="number">0</span>&#125;,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;-<span class="number">1</span>,  <span class="number">0</span>&#125;,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">0</span>,  <span class="number">1</span>&#125;,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">0</span>, -<span class="number">1</span>&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wallsAndGates</span><span class="params">(<span class="type">int</span>[][] rooms)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> rooms.length;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> rooms[<span class="number">0</span>].length;</span><br><span class="line">    Queue&lt;<span class="type">int</span>[]&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; m; row++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; n; col++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rooms[row][col] == GATE) &#123;</span><br><span class="line">                q.add(<span class="keyword">new</span> <span class="title class_">int</span>[] &#123; row, col &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">        <span class="type">int</span>[] point = q.poll();</span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> point[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> point[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] direction : DIRECTIONS) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> row + direction[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> col + direction[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (r &lt; <span class="number">0</span> || c &lt; <span class="number">0</span> || r &gt;= m || c &gt;= n || rooms[r][c] != EMPTY) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            rooms[r][c] = rooms[row][col] + <span class="number">1</span>;</span><br><span class="line">            q.add(<span class="keyword">new</span> <span class="title class_">int</span>[] &#123; r, c &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="302-Smallest-Rectangle-Enclosing-Black-Pixels"><a href="#302-Smallest-Rectangle-Enclosing-Black-Pixels" class="headerlink" title="302. Smallest Rectangle Enclosing Black Pixels"></a>302. Smallest Rectangle Enclosing Black Pixels</h2><h3 id="Approach-1-Naive-Linear-Search"><a href="#Approach-1-Naive-Linear-Search" class="headerlink" title="Approach 1: Naive Linear Search"></a>Approach 1: Naive Linear Search</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minArea</span><span class="params">(<span class="type">char</span>[][] image, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> x, bottom = x;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> y, right = y;</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; image.length; ++x) &#123;</span><br><span class="line">        <span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; image[<span class="number">0</span>].length; ++y) &#123;</span><br><span class="line">            <span class="keyword">if</span> (image[x][y] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                top = Math.min(top, x);</span><br><span class="line">                bottom = Math.max(bottom, x + <span class="number">1</span>);</span><br><span class="line">                left = Math.min(left, y);</span><br><span class="line">                right = Math.max(right, y + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (right - left) * (bottom - top);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Approach-2-BFS-x2F-DFS"><a href="#Approach-2-BFS-x2F-DFS" class="headerlink" title="Approach 2: BFS&#x2F;DFS"></a>Approach 2: BFS&#x2F;DFS</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minArea</span><span class="params">(<span class="type">char</span>[][] image, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    <span class="type">int</span> row=image.length;</span><br><span class="line">    <span class="type">int</span> col=image[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span>[] dx=&#123;<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] dy=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> minX=x;</span><br><span class="line">    <span class="type">int</span> maxX=x;</span><br><span class="line">    <span class="type">int</span> minY=y;</span><br><span class="line">    <span class="type">int</span> maxY=y;</span><br><span class="line">    Deque&lt;<span class="type">int</span>[]&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x,y&#125;);</span><br><span class="line">    image[x][y]=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span>[] cur=q.poll();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">            <span class="type">int</span> i=cur[<span class="number">0</span>]+dx[k];</span><br><span class="line">            <span class="type">int</span> j=cur[<span class="number">1</span>]+dy[k];</span><br><span class="line">            <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=row || j&lt;<span class="number">0</span> || j&gt;=col || image[i][j]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            minX=Math.min(minX,i);</span><br><span class="line">            maxX=Math.max(maxX,i);</span><br><span class="line">            minY=Math.min(minY,j);</span><br><span class="line">            maxY=Math.max(maxY,j);</span><br><span class="line">            q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i,j&#125;);</span><br><span class="line">            image[i][j]=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (maxX-minX+<span class="number">1</span>)*(maxY-minY+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="317-Shortest-Distance-from-All-Buildings"><a href="#317-Shortest-Distance-from-All-Buildings" class="headerlink" title="317. Shortest Distance from All Buildings"></a>317. Shortest Distance from All Buildings</h2><p>level-ordered BFS</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode317</span> &#123;</span><br><span class="line">    <span class="type">int</span> row;</span><br><span class="line">    <span class="type">int</span> col;</span><br><span class="line">    <span class="type">int</span>[][] grid;</span><br><span class="line">    <span class="type">int</span>[][][] distances;</span><br><span class="line">    <span class="type">int</span>[] dx=&#123;<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] dy=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">shortestDistance</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.grid=grid;</span><br><span class="line">        row=grid.length;</span><br><span class="line">        col=grid[<span class="number">0</span>].length;</span><br><span class="line">        distances=<span class="keyword">new</span> <span class="title class_">int</span>[row][col][<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j]==<span class="number">1</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    bfs(i,j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res=Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j]==<span class="number">0</span> &amp;&amp; distances[i][j][<span class="number">1</span>]==count)&#123;</span><br><span class="line">                    res=Math.min(res,distances[i][j][<span class="number">0</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res==Integer.MAX_VALUE ? -<span class="number">1</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">bfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span>[][] visited=<span class="keyword">new</span> <span class="title class_">boolean</span>[row][col];</span><br><span class="line">        Deque&lt;<span class="type">int</span>[]&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i,j&#125;);</span><br><span class="line">        <span class="type">int</span> dist=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> size=q.size();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">int</span>[] cur=q.poll();</span><br><span class="line">                <span class="type">int</span> x=cur[<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> y=cur[<span class="number">1</span>];</span><br><span class="line">                distances[x][y][<span class="number">0</span>]+=dist;</span><br><span class="line">                distances[x][y][<span class="number">1</span>]++;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                    <span class="type">int</span> newX=x+dx[k];</span><br><span class="line">                    <span class="type">int</span> newY=y+dy[k];</span><br><span class="line">                    <span class="keyword">if</span>(newX&lt;<span class="number">0</span> || newX&gt;=row || newY&lt;<span class="number">0</span> || newY&gt;=col)&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!visited[newX][newY] &amp;&amp; grid[newX][newY]==<span class="number">0</span>)&#123;</span><br><span class="line">                        visited[newX][newY]=<span class="literal">true</span>;</span><br><span class="line">                        q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;newX,newY&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dist++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="339-Nested-List-Weight-Sum"><a href="#339-Nested-List-Weight-Sum" class="headerlink" title="339. Nested List Weight Sum"></a>339. Nested List Weight Sum</h2><h3 id="DFS-4"><a href="#DFS-4" class="headerlink" title="DFS:"></a>DFS:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">depthSum</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> dfs(nestedList,<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(List&lt;NestedInteger&gt; nestedList, <span class="type">int</span> depth)</span>&#123;</span><br><span class="line">     <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(NestedInteger i: nestedList)&#123;</span><br><span class="line">         <span class="keyword">if</span>(i.isInteger())&#123;</span><br><span class="line">             res+=i.getInteger()*depth;</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             res+=dfs(i.getList(),depth+<span class="number">1</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> res;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<h3 id="BFS-5"><a href="#BFS-5" class="headerlink" title="BFS:"></a>BFS:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">depthSum</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> &#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    Deque&lt;NestedInteger&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(NestedInteger i : nestedList)&#123;</span><br><span class="line">        q.offer(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> depth=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span> size=q.size();</span><br><span class="line">        <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            NestedInteger i=q.poll();</span><br><span class="line">            <span class="keyword">if</span>(i.isInteger())&#123;</span><br><span class="line">                res+=i.getInteger()*depth;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(NestedInteger j: i.getList())&#123;</span><br><span class="line">                    q.offer(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        depth++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="365-Water-and-Jug-Problem"><a href="#365-Water-and-Jug-Problem" class="headerlink" title="365. Water and Jug Problem"></a>365. Water and Jug Problem</h2><p><a href="https://leetcode.com/problems/water-and-jug-problem/discuss/1055738/VMware-asked-this-in-Interview.-My-BFS-solution-for-interview">https://leetcode.com/problems/water-and-jug-problem/discuss/1055738/VMware-asked-this-in-Interview.-My-BFS-solution-for-interview</a>.</p>
<p>At any state (a,b) of the jugs we can do 6 things.</p>
<ol>
<li>Pour contents of jug1 to jug2. (note that jug1 may still have some water left after pouring water to jug2)</li>
<li>Pour contents of jug2 to jug1. (note that jug2 may still have some water left after pouring water to jug1)</li>
<li>Empty jug1 completely.</li>
<li>Empty jug2 completely.</li>
<li>Fill jug1 completely (to its maximum limit)</li>
<li>Fill jug2 completely (to its maximum limit)</li>
</ol>
<p>We are going to keep a note of the already visited states (a,b) of the jugs in a HashSet of string with key being: “a,b” (the capacities of the jugs separated by a comma. This helps us to avoid redundant calculations).</p>
<p>We are going to start with a queue containing only the state (0,0) (both jugs empty) initially. Apply the above 6 operations on that and add those states to the queue if they weren’t already visited. Then simply keep checking whether in any of the states we get the summation of the capacities &#x3D;&#x3D; z.</p>
<p>If we don’t find any such state. return false.</p>
<h3 id="BFS-Time-Limit-Exceeded-1"><a href="#BFS-Time-Limit-Exceeded-1" class="headerlink" title="BFS: Time Limit Exceeded"></a>BFS: Time Limit Exceeded</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>&#123;</span><br><span class="line">       <span class="type">int</span> x,y;</span><br><span class="line">       State(<span class="type">int</span> a, <span class="type">int</span> b)&#123;</span><br><span class="line">           <span class="built_in">this</span>.x=a;</span><br><span class="line">           <span class="built_in">this</span>.y=b;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125; </span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canMeasureWater</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span>(x+y==z) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       <span class="keyword">if</span>(x+y&lt;z) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       <span class="keyword">if</span>(x%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; y%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; z%<span class="number">2</span>!=<span class="number">0</span>)<span class="comment">//cannot measure odd capacity using even capacity jugs </span></span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       </span><br><span class="line">       HashSet&lt;String&gt; visited=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();<span class="comment">//state visited hset of jugs</span></span><br><span class="line">       State start=<span class="keyword">new</span> <span class="title class_">State</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">       Queue&lt;State&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">       q.add(start);</span><br><span class="line">       <span class="comment">//run a bfs. don&#x27;t add already visited states</span></span><br><span class="line">       <span class="keyword">while</span>(q.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">           <span class="type">int</span> n=q.size();</span><br><span class="line">           State curr=q.poll();</span><br><span class="line">           <span class="keyword">if</span>(curr.x+curr.y==z)</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           visited.add(curr.x+<span class="string">&quot;,&quot;</span>+curr.y);</span><br><span class="line">           </span><br><span class="line">           <span class="type">int</span> newY,newX;</span><br><span class="line">           <span class="comment">//pour x-&gt;y ********************* option 1</span></span><br><span class="line">           newX=curr.x-Math.min(curr.x,y-curr.y);</span><br><span class="line">           newY=curr.y+Math.min(curr.x,y-curr.y);</span><br><span class="line">           <span class="keyword">if</span>(!visited.contains(newX+<span class="string">&quot;,&quot;</span>+newY) )</span><br><span class="line">               q.add(<span class="keyword">new</span> <span class="title class_">State</span>(newX,newY));</span><br><span class="line">           </span><br><span class="line">           <span class="comment">//pour x&lt;-y ********************* option 2</span></span><br><span class="line">           newX=curr.x+Math.min(curr.y,x-curr.x);</span><br><span class="line">           newY=curr.y-Math.min(curr.y,x-curr.x);</span><br><span class="line">           <span class="keyword">if</span>(!visited.contains(newX+<span class="string">&quot;,&quot;</span>+newY) )</span><br><span class="line">               q.add(<span class="keyword">new</span> <span class="title class_">State</span>(newX,newY));</span><br><span class="line">           </span><br><span class="line">           <span class="comment">//expty x   ********************* option 3</span></span><br><span class="line">           newX=<span class="number">0</span>;</span><br><span class="line">           newY=curr.y;<span class="comment">//same</span></span><br><span class="line">           <span class="keyword">if</span>(!visited.contains(newX+<span class="string">&quot;,&quot;</span>+newY) )</span><br><span class="line">               q.add(<span class="keyword">new</span> <span class="title class_">State</span>(newX,newY));</span><br><span class="line">           </span><br><span class="line">           <span class="comment">//empty y   ********************* option 4</span></span><br><span class="line">           newX=curr.x;<span class="comment">//same</span></span><br><span class="line">           newY=<span class="number">0</span>;</span><br><span class="line">           <span class="keyword">if</span>(!visited.contains(newX+<span class="string">&quot;,&quot;</span>+newY) )</span><br><span class="line">               q.add(<span class="keyword">new</span> <span class="title class_">State</span>(newX,newY));</span><br><span class="line">           </span><br><span class="line">           <span class="comment">//fill x    ********************* option 5</span></span><br><span class="line">           newX=x;<span class="comment">//max capacity</span></span><br><span class="line">           newY=curr.y;</span><br><span class="line">           <span class="keyword">if</span>(!visited.contains(newX+<span class="string">&quot;,&quot;</span>+newY) )</span><br><span class="line">               q.add(<span class="keyword">new</span> <span class="title class_">State</span>(newX,newY));</span><br><span class="line">           </span><br><span class="line">           <span class="comment">//fill y    ********************* option 6</span></span><br><span class="line">           newX=curr.x;</span><br><span class="line">           newY=y;<span class="comment">//max capacity</span></span><br><span class="line">           <span class="keyword">if</span>(!visited.contains(newX+<span class="string">&quot;,&quot;</span>+newY) )</span><br><span class="line">               q.add(<span class="keyword">new</span> <span class="title class_">State</span>(newX,newY));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><p>ax + by &#x3D; k*gcd(a,b)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canMeasureWater</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> &#123;</span><br><span class="line">    <span class="comment">//limit brought by the statement that water is finallly in one or both buckets</span></span><br><span class="line">    <span class="keyword">if</span>(x + y &lt; z) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//case x or y is zero</span></span><br><span class="line">    <span class="keyword">if</span>( x == z || y == z || x + y == z ) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//get GCD, then we can use the property of Bézout&#x27;s identity</span></span><br><span class="line">    <span class="keyword">return</span> z%GCD(x, y) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">GCD</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(b != <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> b;</span><br><span class="line">        b = a%b;</span><br><span class="line">        a = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="404-Sum-of-Left-Leaves"><a href="#404-Sum-of-Left-Leaves" class="headerlink" title="404. Sum of Left Leaves"></a>404. Sum of Left Leaves</h2><h3 id="DFS-5"><a href="#DFS-5" class="headerlink" title="DFS:"></a>DFS:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(root.left!=<span class="literal">null</span> &amp;&amp;</span><br><span class="line">            root.left.left==<span class="literal">null</span> &amp;&amp; root.left.right==<span class="literal">null</span>)&#123;</span><br><span class="line">        res+=root.left.val;</span><br><span class="line">        <span class="keyword">return</span> res+sumOfLeftLeaves(root.right);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sumOfLeftLeaves(root.left)+sumOfLeftLeaves(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="BFS-6"><a href="#BFS-6" class="headerlink" title="BFS:"></a>BFS:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    Set&lt;TreeNode&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    Deque&lt;TreeNode&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    q.offer(root);</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        TreeNode node=q.poll();</span><br><span class="line">        <span class="keyword">if</span>(set.contains(node)</span><br><span class="line">                &amp;&amp; node.left==<span class="literal">null</span> &amp;&amp; node.right==<span class="literal">null</span>)&#123;</span><br><span class="line">            res+=node.val;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                q.offer(node.left);</span><br><span class="line">                set.add(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                q.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="407-Trapping-Rain-Water-II"><a href="#407-Trapping-Rain-Water-II" class="headerlink" title="407. Trapping Rain Water II"></a>407. Trapping Rain Water II</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cell</span> &#123;</span><br><span class="line">    <span class="type">int</span> row;</span><br><span class="line">    <span class="type">int</span> col;</span><br><span class="line">    <span class="type">int</span> height;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cell</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.row = row;</span><br><span class="line">        <span class="built_in">this</span>.col = col;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trapRainWater</span><span class="params">(<span class="type">int</span>[][] heights)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (heights == <span class="literal">null</span> || heights.length == <span class="number">0</span> || heights[<span class="number">0</span>].length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    PriorityQueue&lt;Cell&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Cell&gt;()&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Cell a, Cell b)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a.height - b.height;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> heights.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> heights[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">boolean</span>[][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initially, add all the Cells which are on borders to the queue.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        visited[i][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        visited[i][n - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">        queue.offer(<span class="keyword">new</span> <span class="title class_">Cell</span>(i, <span class="number">0</span>, heights[i][<span class="number">0</span>]));</span><br><span class="line">        queue.offer(<span class="keyword">new</span> <span class="title class_">Cell</span>(i, n - <span class="number">1</span>, heights[i][n - <span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        visited[<span class="number">0</span>][i] = <span class="literal">true</span>;</span><br><span class="line">        visited[m - <span class="number">1</span>][i] = <span class="literal">true</span>;</span><br><span class="line">        queue.offer(<span class="keyword">new</span> <span class="title class_">Cell</span>(<span class="number">0</span>, i, heights[<span class="number">0</span>][i]));</span><br><span class="line">        queue.offer(<span class="keyword">new</span> <span class="title class_">Cell</span>(m - <span class="number">1</span>, i, heights[m - <span class="number">1</span>][i]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// from the borders, pick the shortest cell visited and check its neighbors:</span></span><br><span class="line">    <span class="comment">// if the neighbor is shorter, collect the water it can trap and update its height as its height plus the water trapped</span></span><br><span class="line">   <span class="comment">// add all its neighbors to the queue.</span></span><br><span class="line">    <span class="type">int</span>[][] dirs = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;-<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] dir : dirs) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> cell.row + dir[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> cell.col + dir[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (row &gt;= <span class="number">0</span> &amp;&amp; row &lt; m &amp;&amp; col &gt;= <span class="number">0</span> &amp;&amp; col &lt; n &amp;&amp; !visited[row][col]) &#123;</span><br><span class="line">                visited[row][col] = <span class="literal">true</span>;</span><br><span class="line">                res += Math.max(<span class="number">0</span>, cell.height - heights[row][col]);</span><br><span class="line">                queue.offer(<span class="keyword">new</span> <span class="title class_">Cell</span>(row, col, Math.max(heights[row][col], cell.height)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="433-Minimum-Genetic-Mutation"><a href="#433-Minimum-Genetic-Mutation" class="headerlink" title="433. Minimum Genetic Mutation"></a>433. Minimum Genetic Mutation</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minMutation</span><span class="params">(String startGene, String endGene, String[] bank)</span> &#123;</span><br><span class="line">    Deque&lt;String&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    q.offer(startGene);</span><br><span class="line">    <span class="type">int</span> level=<span class="number">0</span>;</span><br><span class="line">    Set&lt;String&gt; visited=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    visited.add(startGene);</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span> size=q.size();</span><br><span class="line">        <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            String cur=q.poll();</span><br><span class="line">            <span class="keyword">if</span>(cur.equals(endGene))&#123;</span><br><span class="line">                <span class="keyword">return</span> level;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (String s : bank) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!visited.contains(s) &amp;&amp; isNext(cur,s))&#123;</span><br><span class="line">                    visited.add(s);</span><br><span class="line">                    q.offer(s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        level++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isNext</span><span class="params">(String a, String b)</span>&#123;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n=a.length();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a.charAt(i)!=b.charAt(i))&#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span>(count&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count==<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="542-01-Matrix"><a href="#542-01-Matrix" class="headerlink" title="542. 01 Matrix"></a>542. 01 Matrix</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[][] updateMatrix(<span class="type">int</span>[][] mat) &#123;</span><br><span class="line">    <span class="type">int</span> row=mat.length;</span><br><span class="line">    <span class="type">int</span> col=mat[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span>[][] dirs=&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">    Deque&lt;<span class="type">int</span>[]&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span>[][] dist=<span class="keyword">new</span> <span class="title class_">int</span>[row][col];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] ints : dist) &#123;</span><br><span class="line">        Arrays.fill(ints,Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(mat[i][j]==<span class="number">0</span>)&#123;</span><br><span class="line">                dist[i][j]=<span class="number">0</span>;</span><br><span class="line">                q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i,j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span>[] cur=q.poll();</span><br><span class="line">        <span class="type">int</span> i=cur[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> j=cur[<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> d=dist[i][j];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] dir : dirs) &#123;</span><br><span class="line">            <span class="type">int</span> x=i+dir[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> y=j+dir[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(x&gt;=<span class="number">0</span> &amp;&amp; x&lt;row &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;col)&#123;</span><br><span class="line">                <span class="keyword">if</span>(d+<span class="number">1</span>&lt;dist[x][y])&#123;</span><br><span class="line">                    dist[x][y]=d+<span class="number">1</span>;</span><br><span class="line">                    q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x,y&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="623-Add-One-Row-to-Tree"><a href="#623-Add-One-Row-to-Tree" class="headerlink" title="623. Add One Row to Tree"></a>623. Add One Row to Tree</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(depth==<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val,root,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">Deque&lt;TreeNode&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">q.offer(root);</span><br><span class="line"><span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">    <span class="type">int</span> size=q.size();</span><br><span class="line">    <span class="keyword">if</span>(i==depth-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            TreeNode node=q.poll();</span><br><span class="line">            TreeNode newLeft=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">            TreeNode newRight=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">            newLeft.left=node.left;</span><br><span class="line">            newRight.right=node.right;</span><br><span class="line">            node.left=newLeft;</span><br><span class="line">            node.right=newRight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        TreeNode node=q.poll();</span><br><span class="line">        <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            q.offer(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            q.offer(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>



<h2 id="662-Maximum-Width-of-Binary-Tree"><a href="#662-Maximum-Width-of-Binary-Tree" class="headerlink" title="662. Maximum Width of Binary Tree"></a>662. Maximum Width of Binary Tree</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">widthOfBinaryTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    Deque&lt;Pair&lt;TreeNode,Integer&gt;&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    q.offer(<span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;(root,<span class="number">1</span>));</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span> size=q.size();</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> r=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(count&lt;size)&#123;</span><br><span class="line">            Pair&lt;TreeNode,Integer&gt; cur=q.poll();</span><br><span class="line">            TreeNode node=cur.getKey();</span><br><span class="line">            <span class="type">int</span> index=cur.getValue();</span><br><span class="line">            <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</span><br><span class="line">                l=index;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(count==size-<span class="number">1</span>)&#123;</span><br><span class="line">                r=index;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                q.offer(<span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;(node.left,<span class="number">2</span>*index));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                q.offer(<span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;(node.right,<span class="number">2</span>*index+<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        res=Math.max(res,r-l+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="785-Is-Graph-Bipartite"><a href="#785-Is-Graph-Bipartite" class="headerlink" title="785. Is Graph Bipartite?"></a>785. Is Graph Bipartite?</h2>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>DDIA学习笔记</title>
    <url>/2022/05/12/DDIA/</url>
    <content><![CDATA[<h1 id="数据系统的基石"><a href="#数据系统的基石" class="headerlink" title="数据系统的基石"></a>数据系统的基石</h1><h2 id="可靠性、可伸缩性、可维护性"><a href="#可靠性、可伸缩性、可维护性" class="headerlink" title="可靠性、可伸缩性、可维护性"></a>可靠性、可伸缩性、可维护性</h2><h3 id="Reliability"><a href="#Reliability" class="headerlink" title="Reliability"></a>Reliability</h3><ul>
<li><p>系统在 <strong>困境</strong>（adversity，比如硬件故障、软件故障、人为错误）中仍可正常工作（正确完成功能，并能达到期望的性能水准）</p>
</li>
<li><p>造成错误的原因叫做 <strong>故障（fault）</strong>，能预料并应对故障的系统特性可称为 <strong>容错（fault-tolerant）</strong> 或 <strong>韧性（resilient）</strong></p>
</li>
<li><p>注意 <strong>故障（fault）</strong> 不同于 <strong>失效（failure）</strong>。<strong>故障</strong> 通常定义为系统的一部分状态偏离其标准，而 <strong>失效</strong> 则是系统作为一个整体停止向用户提供服务。故障的概率不可能降到零，因此最好设计容错机制以防因 <strong>故障</strong> 而导致 <strong>失效</strong></p>
</li>
<li><p><strong>硬件故障（hardware faults）</strong>:</p>
<ol>
<li><p>硬盘崩溃、内存出错、机房断电、有人拔错网线……</p>
</li>
<li><p>硬盘的 <strong>平均无故障时间（MTTF, mean time to failure）</strong> 约为 10 到 50 年</p>
</li>
<li><p>对策：</p>
<ul>
<li>增加单个硬件的冗余度</li>
<li>云平台的设计优先考虑 <strong>灵活性（flexibility）</strong> 和 <strong>弹性（elasticity）</strong>，而不是单机可靠性</li>
<li>在硬件冗余的基础上进一步引入软件容错机制</li>
</ul>
</li>
</ol>
</li>
<li><p><strong>软件错误 系统性错误（systematic error）</strong></p>
</li>
</ul>
<ol>
<li><p>例子：</p>
<ul>
<li>接受特定的错误输入，便导致所有应用服务器实例崩溃的 BUG。例如 2012 年 6 月 30 日的闰秒，由于 Linux 内核中的一个错误，许多应用同时挂掉了。</li>
<li>失控进程会用尽一些共享资源，包括 CPU 时间、内存、磁盘空间或网络带宽。</li>
<li>系统依赖的服务变慢，没有响应，或者开始返回错误的响应。</li>
</ul>
</li>
<li><p>导致这类软件故障的 BUG 通常会潜伏很长时间，直到被异常情况触发为止。这种情况意味着软件对其环境做出了某种假设 —— 虽然这种假设通常来说是正确的，但由于某种原因最后不再成立了</p>
</li>
<li><p>对策：</p>
<ul>
<li><p>仔细考虑系统中的假设和交互</p>
</li>
<li><p>彻底的测试</p>
</li>
<li><p>进程隔离；允许进程崩溃并重启</p>
</li>
<li><p>测量、监控并分析生产环境中的系统行为。如果系统能够提供一些保证（例如在一个消息队列中，进入与发出的消息数量相等），那么系统就可以在运行时不断自检，并在出现 <strong>差异（discrepancy）</strong> 时报警</p>
</li>
</ul>
</li>
</ol>
<ul>
<li><p><strong>人为错误</strong></p>
<ol>
<li><p>设计并构建了软件系统的工程师是人类，维持系统运行的运维也是人类。即使他们怀有最大的善意，人类也是不可靠的。</p>
</li>
<li><p>对策：</p>
<ul>
<li>以最小化犯错机会的方式设计系统。例如，精心设计的抽象、API 和管理后台使做对事情更容易，搞砸事情更困难。但如果接口限制太多，人们就会忽略它们的好处而想办法绕开。很难正确把握这种微妙的平衡。</li>
<li>将人们最容易犯错的地方与可能导致失效的地方 <strong>解耦（decouple）</strong>。特别是提供一个功能齐全的非生产环境 <strong>沙箱（sandbox）</strong>，使人们可以在不影响真实用户的情况下，使用真实数据安全地探索和实验。</li>
<li>在各个层次进行彻底的测试，从单元测试、全系统集成测试到手动测试。自动化测试易于理解，已经被广泛使用，特别适合用来覆盖正常情况中少见的 <strong>边缘场景（corner case）</strong>。</li>
<li>允许从人为错误中简单快速地恢复，以最大限度地减少失效情况带来的影响。 例如，快速回滚配置变更，分批发布新代码（以便任何意外错误只影响一小部分用户），并提供数据重算工具（以备旧的计算出错）。</li>
<li>配置详细和明确的监控，比如性能指标和错误率。 在其他工程学科中这指的是 <strong>遥测（telemetry）</strong>（一旦火箭离开了地面，遥测技术对于跟踪发生的事情和理解失败是至关重要的）。监控可以向我们发出预警信号，并允许我们检查是否有任何地方违反了假设和约束。当出现问题时，指标数据对于问题诊断是非常宝贵的。</li>
</ul>
</li>
</ol>
</li>
<li><p><strong>可靠性有多重要</strong></p>
<ol>
<li><p>即使在 “非关键” 应用中，我们也对用户负有责任。</p>
</li>
<li><p>我们偷工减料时，应该清楚意识到自己在做什么。</p>
</li>
</ol>
</li>
</ul>
<h3 id="Scalability"><a href="#Scalability" class="headerlink" title="Scalability"></a>Scalability</h3><ul>
<li><p>有合理的办法应对系统的增长（数据量、流量、复杂性）</p>
</li>
<li><p>系统今天能可靠运行，并不意味未来也能可靠运行。服务 <strong>降级（degradation）</strong> 的一个常见原因是负载增加，例如：系统负载已经从一万个并发用户增长到十万个并发用户，或者从一百万增长到一千万。也许现在处理的数据量级要比过去大得多。</p>
</li>
<li><p><strong>描述负载</strong></p>
<ol>
<li><p>负载可以用一些称为 <strong>负载参数（load parameters）</strong> 的数字来描述。参数的最佳选择取决于系统架构，它可能是每秒向 Web 服务器发出的请求、数据库中的读写比率、聊天室中同时活跃的用户数量、缓存命中率或其他东西。除此之外，也许平均情况对你很重要，也许你的瓶颈是少数极端场景。</p>
</li>
<li><p>例子：twitter业务:</p>
<ul>
<li><p>发布推文</p>
<p>用户可以向其粉丝发布新消息（平均 4.6k 请求 &#x2F; 秒，峰值超过 12k 请求 &#x2F; 秒）</p>
</li>
<li><p>主页时间线</p>
<p>用户可以查阅他们关注的人发布的推文（300k 请求 &#x2F; 秒）</p>
</li>
<li><p>方法一：全局推文集合，关系型数据库</p>
<p>发布推文时，只需将新推文插入全局推文集合即可。当一个用户请求自己的主页时间线时，首先查找他关注的所有人，查询这些被关注用户发布的推文并按时间顺序合并。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tweets.<span class="operator">*</span>, users.<span class="operator">*</span></span><br><span class="line">  <span class="keyword">FROM</span> tweets</span><br><span class="line">  <span class="keyword">JOIN</span> users   <span class="keyword">ON</span> tweets.sender_id <span class="operator">=</span> users.id</span><br><span class="line">  <span class="keyword">JOIN</span> follows <span class="keyword">ON</span> follows.followee_id <span class="operator">=</span> users.id</span><br><span class="line">  <span class="keyword">WHERE</span> follows.follower_id <span class="operator">=</span> <span class="built_in">current_user</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>方法二：为每个用户的主页时间线维护一个缓存。</p>
<p>当一个用户发布推文时，查找所有关注该用户的人，并将新的推文插入到每个主页时间线缓存中。 因此读取主页时间线的请求开销很小，因为结果已经提前计算好了。</p>
</li>
<li><p>推特的第一个版本使用了方法 1，但系统很难跟上主页时间线查询的负载。所以公司转向了方法 2，方法 2 的效果更好，因为发推频率比查询主页时间线的频率几乎低了两个数量级，所以在这种情况下，最好在写入时做更多的工作，而在读取时做更少的工作。</p>
</li>
<li><p>然而方法 2 的缺点是，发推现在需要大量的额外工作。平均来说，一条推文会发往约 75 个关注者，所以每秒 4.6k 的发推写入，变成了对主页时间线缓存每秒 345k 的写入。但这个平均值隐藏了用户粉丝数差异巨大这一现实，一些用户有超过 3000 万的粉丝，这意味着一条推文就可能会导致主页时间线缓存的 3000 万次写入！及时完成这种操作是一个巨大的挑战 —— 推特尝试在 5 秒内向粉丝发送推文。</p>
</li>
<li><p>在推特的例子中，每个用户粉丝数的分布（可能按这些用户的发推频率来加权）是探讨可伸缩性的一个关键负载参数，因为它决定了扇出负载。你的应用程序可能具有非常不同的特征，但可以采用相似的原则来考虑它的负载。</p>
</li>
<li><p>推特轶事的最终转折：现在已经稳健地实现了方法 2，推特逐步转向了两种方法的混合。大多数用户发的推文会被扇出写入其粉丝主页时间线缓存中。但是少数拥有海量粉丝的用户（即名流）会被排除在外。当用户读取主页时间线时，分别地获取出该用户所关注的每位名流的推文，再与用户的主页时间线缓存合并，如方法 1 所示。这种混合方法能始终如一地提供良好性能。</p>
</li>
</ul>
</li>
</ol>
</li>
<li><p><strong>描述性能</strong></p>
<ol>
<li><p>一旦系统的负载被描述好，就可以研究当负载增加会发生什么。我们可以从两种角度来看：</p>
<ul>
<li>增加负载参数并保持系统资源（CPU、内存、网络带宽等）不变时，系统性能将受到什么影响？</li>
<li>增加负载参数并希望保持性能不变时，需要增加多少系统资源？</li>
</ul>
</li>
<li><p>对于 Hadoop 这样的批处理系统，通常关心的是 <strong>吞吐量（throughput）</strong>，即每秒可以处理的记录数量，或者在特定规模数据集上运行作业的总时间 </p>
</li>
<li><p>对于在线系统，通常更重要的是服务的 <strong>响应时间（response time）</strong>，即客户端发送请求到接收响应之间的时间</p>
<ul>
<li><p><strong>延迟（latency）</strong> 和 <strong>响应时间（response time）</strong> 经常用作同义词，但实际上它们并不一样。</p>
</li>
<li><p>响应时间是客户所看到的，除了实际处理请求的时间（ <strong>服务时间（service time）</strong> ）之外，还包括网络延迟和排队延迟。</p>
</li>
<li><p>延迟是某个请求等待处理的 <strong>持续时长</strong>，在此期间它处于 <strong>休眠（latent）</strong> 状态，并等待服务</p>
</li>
<li><p>即使不断重复发送同样的请求，每次得到的响应时间也都会略有不同。现实世界的系统会处理各式各样的请求，响应时间可能会有很大差异。因此我们需要将响应时间视为一个可以测量的数值 <strong>分布（distribution）</strong>，而不是单个数值。</p>
</li>
<li><p>响应时间的高百分位点（也称为 <strong>尾部延迟</strong>，即 <strong>tail latencies</strong>）非常重要，因为它们直接影响用户的服务体验。例如亚马逊在描述内部服务的响应时间要求时是以 <strong>99.9 百分位点</strong>为准，即使它只影响一千个请求中的一个。这是因为<strong>请求响应最慢的客户往往也是数据最多的客户</strong>，也可以说是最有价值的客户 ——<strong>因为他们掏钱了</strong>。保证网站响应迅速对于保持客户的满意度非常重要，亚马逊观察到：响应时间增加 100 毫秒，销售量就减少 1%；而另一些报告说：慢 1 秒钟会让客户满意度指标减少 16%。</p>
<p>另一方面，优化第 99.99 百分位点（一万个请求中最慢的一个）被认为太昂贵了，不能为亚马逊的目标带来足够好处。减小高百分位点处的响应时间相当困难，因为它很容易受到随机事件的影响，这超出了控制范围，而且效益也很小。</p>
</li>
<li><p>百分位点通常用于 <strong>服务级别目标（SLO, service level objectives）</strong> 和 <strong>服务级别协议（SLA, service level agreements）</strong>，即定义服务预期性能和可用性的合同。 SLA 可能会声明，如果服务响应时间的中位数小于 200 毫秒，且 99.9 百分位点低于 1 秒，则认为服务工作正常（如果响应时间更长，就认为服务不达标）。这些指标为客户设定了期望值，并允许客户在 SLA 未达标的情况下要求退款。</p>
</li>
<li><p><strong>排队延迟（queueing delay）</strong> 通常占了高百分位点处响应时间的很大一部分。由于服务器只能并行处理少量的事务（如受其 CPU 核数的限制），所以只要有少量缓慢的请求就能阻碍后续请求的处理，这种效应有时被称为 <strong>头部阻塞（head-of-line blocking）</strong> 。即使后续请求在服务器上处理的非常迅速，由于需要等待先前请求完成，客户端最终看到的是缓慢的总体响应时间。因为存在这种效应，测量客户端的响应时间非常重要。</p>
</li>
<li><p>为测试系统的可伸缩性而人为产生负载时，产生负载的客户端要独立于响应时间不断发送请求。如果客户端在发送下一个请求之前等待先前的请求完成，这种行为会产生人为排队的效果，使得测试时的队列比现实情况更短，使测量结果产生偏差。</p>
</li>
</ul>
</li>
</ol>
</li>
<li><p><strong>应对负载的方法</strong></p>
<ol>
<li><p><strong>纵向伸缩</strong>（scaling up，也称为垂直伸缩，即 vertical scaling，转向更强大的机器）</p>
</li>
<li><p><strong>横向伸缩</strong>（scaling out，也称为水平伸缩，即 horizontal scaling，将负载分布到多台小机器上）</p>
</li>
<li><p>跨多台机器部署 <strong>无状态服务（stateless services）</strong> 非常简单，但将带状态的数据系统从单节点变为分布式配置则可能引入许多额外复杂度。出于这个原因，常识告诉我们应该将数据库放在单个节点上（纵向伸缩），直到伸缩成本或可用性需求迫使其改为分布式。</p>
</li>
<li><p>随着分布式系统的工具和抽象越来越好，至少对于某些类型的应用而言，这种常识可能会改变。可以预见分布式数据系统将成为未来的默认设置，即使对不处理大量数据或流量的场景也如此。本书的其余部分将介绍多种分布式数据系统，不仅讨论它们在可伸缩性方面的表现，还包括易用性和可维护性。</p>
</li>
<li><p>大规模的系统架构通常是应用特定的 —— 没有一招鲜吃遍天的通用可伸缩架构（不正式的叫法：<strong>万金油（magic scaling sauce）</strong> ）。应用的问题可能是读取量、写入量、要存储的数据量、数据的复杂度、响应时间要求、访问模式或者所有问题的大杂烩。</p>
<p>举个例子，用于处理每秒十万个请求（每个大小为 1 kB）的系统与用于处理每分钟 3 个请求（每个大小为 2GB）的系统看上去会非常不一样，尽管两个系统有同样的数据吞吐量。</p>
</li>
<li><p>一个良好适配应用的可伸缩架构，是围绕着 <strong>假设（assumption）</strong> 建立的：哪些操作是常见的？哪些操作是罕见的？这就是所谓负载参数。如果假设最终是错误的，那么为伸缩所做的工程投入就白费了，最糟糕的是适得其反。在早期创业公司或非正式产品中，通常支持产品快速迭代的能力，要比可伸缩至未来的假想负载要重要的多。</p>
</li>
</ol>
</li>
</ul>
<h3 id="Maintainability"><a href="#Maintainability" class="headerlink" title="Maintainability"></a>Maintainability</h3><ul>
<li><p>许多不同的人（工程师、运维）在不同的生命周期，都能高效地在系统上工作（使系统保持现有行为，并适应新的应用场景）</p>
</li>
<li><p>可操作性（Operability）</p>
<p>便于运维团队保持系统平稳运行</p>
</li>
<li><p>简单性（Simplicity）</p>
<p>从系统中消除尽可能多的 <strong>复杂度（complexity）</strong>，使新工程师也能轻松理解系统（注意这和用户接口的简单性不一样）</p>
<ol>
<li><p>简化系统并不一定意味着减少功能；它也可以意味着消除 <strong>额外的（accidental）</strong> 的复杂度。 Moseley 和 Marks把 <strong>额外复杂度</strong> 定义为：由具体实现中涌现，而非（从用户视角看，系统所解决的）问题本身固有的复杂度。</p>
</li>
<li><p>用于消除 <strong>额外复杂度</strong> 的最好工具之一是 <strong>抽象（abstraction）</strong>。一个好的抽象可以将大量实现细节隐藏在一个干净，简单易懂的外观下面。一个好的抽象也可以广泛用于各类不同应用。比起重复造很多轮子，重用抽象不仅更有效率，而且有助于开发高质量的软件。抽象组件的质量改进将使所有使用它的应用受益。</p>
<p>例如，高级编程语言是一种抽象，隐藏了机器码、CPU 寄存器和系统调用。 SQL 也是一种抽象，隐藏了复杂的磁盘 &#x2F; 内存数据结构、来自其他客户端的并发请求、崩溃后的不一致性。当然在用高级语言编程时，我们仍然用到了机器码；只不过没有 <strong>直接（directly）</strong> 使用罢了，正是因为编程语言的抽象，我们才不必去考虑这些实现细节。</p>
</li>
</ol>
</li>
<li><p>可演化性（evolvability）</p>
<p>使工程师在未来能轻松地对系统进行更改，当需求变化时为新应用场景做适配。也称为 <strong>可伸缩性（extensibility）</strong>、<strong>可修改性（modifiability）</strong> 或 <strong>可塑性（plasticity）</strong></p>
</li>
</ul>
<h2 id="数据模型与查询语言"><a href="#数据模型与查询语言" class="headerlink" title="数据模型与查询语言"></a>数据模型与查询语言</h2><p>多数应用使用层层叠加的数据模型构建。对于每层数据模型的关键问题是：它是如何用低一层数据模型来 <strong>表示</strong> 的？例如：</p>
<ol>
<li>作为一名应用开发人员，你观察现实世界（里面有人员、组织、货物、行为、资金流向、传感器等），并采用对象或数据结构，以及操控那些数据结构的 API 来进行建模。那些结构通常是特定于应用程序的。</li>
<li>当要存储那些数据结构时，你可以利用通用数据模型来表示它们，如 JSON 或 XML 文档、关系数据库中的表或图模型。</li>
<li>数据库软件的工程师选定如何以内存、磁盘或网络上的字节来表示 JSON &#x2F; XML&#x2F; 关系 &#x2F; 图数据。这类表示形式使数据有可能以各种方式来查询，搜索，操纵和处理。</li>
<li>在更低的层次上，硬件工程师已经想出了使用电流、光脉冲、磁场或者其他东西来表示字节的方法。</li>
</ol>
<p>一个复杂的应用程序可能会有更多的中间层次，比如基于 API 的 API，不过基本思想仍然是一样的：每个层都通过提供一个明确的数据模型来隐藏更低层次中的复杂性。这些抽象允许不同的人群有效地协作（例如数据库厂商的工程师和使用数据库的应用程序开发人员）。</p>
<h3 id="关系模型与文档模型"><a href="#关系模型与文档模型" class="headerlink" title="关系模型与文档模型"></a>关系模型与文档模型</h3><ul>
<li><p>NoSQL 被追溯性地重新解释为 <strong>不仅是 SQL（Not Only SQL）</strong>，其背后的驱动因素有：</p>
<ol>
<li>需要比关系数据库更好的可伸缩性，包括非常大的数据集或非常高的写入吞吐量</li>
<li>相比商业数据库产品，免费和开源软件更受偏爱</li>
<li>关系模型不能很好地支持一些特殊的查询操作</li>
<li>受挫于关系模型的限制性，渴望一种更具多动态性与表现力的数据模型</li>
</ol>
</li>
<li><p>新的非关系型 “NoSQL” 数据存储在两个主要方向上存在分歧：</p>
<ol>
<li><strong>文档数据库</strong> 的应用场景是：数据通常是自我包含的，而且文档之间的关系非常稀少。</li>
<li><strong>图形数据库</strong> 用于相反的场景：任意事物都可能与任何事物相关联。</li>
</ol>
</li>
<li><p>在可预见的未来，关系数据库似乎可能会继续与各种非关系数据库一起使用 - 这种想法有时也被称为 <strong>混合持久化（polyglot persistence）</strong>。</p>
</li>
<li><p>目前大多数应用程序开发都使用面向对象的编程语言来开发，这导致了对 SQL 数据模型的普遍批评：如果数据存储在关系表中，那么需要一个笨拙的转换层，处于应用程序代码中的对象和表，行，列的数据库模型之间。模型之间的不连贯有时被称为 <strong>阻抗不匹配（impedance mismatch）</strong></p>
<ol>
<li><p>像 ActiveRecord 和 Hibernate 这样的 <strong>对象关系映射（ORM object-relational mapping）</strong> 框架可以减少这个转换层所需的样板代码的数量，但是它们不能完全隐藏这两个模型之间的差异。</p>
</li>
<li><p>对于一个像简历这样自包含文档的数据结构而言，JSON 表示是非常合适的。JSON 比 XML 更简单。面向文档的数据库（如 MongoDB ，RethinkDB ，CouchDB 和 Espresso）支持这种数据模型。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">251</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;first_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bill&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;last_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Gates&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;summary&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Co-chair of the Bill &amp; Melinda Gates... Active blogger.&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;region_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;us:91&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;industry_id&quot;</span><span class="punctuation">:</span> <span class="number">131</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;photo_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/p/7/000/253/05b/308dd6e.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;positions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;job_title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Co-chair&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;organization&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bill &amp; Melinda Gates Foundation&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;job_title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Co-founder, Chairman&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;organization&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Microsoft&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;education&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;school_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Harvard University&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="number">1973</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end&quot;</span><span class="punctuation">:</span> <span class="number">1975</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;school_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Lakeside School, Seattle&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;contact_info&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;blog&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://thegatesnotes.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;twitter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://twitter.com/BillGates&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h3 id="数据查询语言"><a href="#数据查询语言" class="headerlink" title="数据查询语言"></a>数据查询语言</h3><ul>
<li><p>SQL 是一种 <strong>声明式</strong> 查询语言</p>
</li>
<li><p>许多常用的编程语言是命令式的。</p>
</li>
<li><p>web上的声明式查询：用css选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-class">.selected</span> &gt; <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>web上的命令式查询：在 Javascript 中，使用 <strong>文档对象模型（DOM）</strong> API</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> liElements = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; liElements.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (liElements[i].<span class="property">className</span> === <span class="string">&quot;selected&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> children = liElements[i].<span class="property">childNodes</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; children.<span class="property">length</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> child = children[j];</span><br><span class="line">            <span class="keyword">if</span> (child.<span class="property">nodeType</span> === <span class="title class_">Node</span>.<span class="property">ELEMENT_NODE</span> &amp;&amp; child.<span class="property">tagName</span> === <span class="string">&quot;P&quot;</span>) &#123;</span><br><span class="line">                child.<span class="title function_">setAttribute</span>(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;background-color: blue&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>MapReduce 是一个由 Google 推广的编程模型，用于在多台机器上批量处理大规模的数据。一些 NoSQL 数据存储（包括 MongoDB 和 CouchDB）支持有限形式的 MapReduce，作为在多个文档中执行只读查询的机制。</p>
<p>MapReduce 既不是一个声明式的查询语言，也不是一个完全命令式的查询 API，而是处于两者之间：查询的逻辑用代码片段来表示，这些代码片段会被处理框架重复性调用。它基于 <code>map</code>（也称为 <code>collect</code>）和 <code>reduce</code>（也称为 <code>fold</code> 或 <code>inject</code>）函数，两个函数存在于许多函数式编程语言中。</p>
</li>
</ul>
<h3 id="图数据模型"><a href="#图数据模型" class="headerlink" title="图数据模型"></a>图数据模型</h3><p>一个图由两种对象组成：<strong>顶点</strong>（vertices，也称为 <strong>节点</strong>，即 nodes，或 <strong>实体</strong>，即 entities），和 <strong>边</strong>（edges，也称为 <strong>关系</strong>，即 relationships，或 <strong>弧</strong>，即 arcs）。多种数据可以被建模为一个图形。典型的例子包括：</p>
<ul>
<li><p>社交图谱</p>
<p>顶点是人，边指示哪些人彼此认识。</p>
</li>
<li><p>网络图谱</p>
<p>顶点是网页，边缘表示指向其他页面的 HTML 链接。</p>
</li>
<li><p>公路或铁路网络</p>
<p>顶点是交叉路口，边线代表它们之间的道路或铁路线。</p>
</li>
</ul>
<p>可以将那些众所周知的算法运用到这些图上：例如，汽车导航系统搜索道路网络中两点之间的最短路径，PageRank 可以用在网络图上来确定网页的流行程度，从而确定该网页在搜索结果中的排名。</p>
<p>在刚刚给出的例子中，图中的所有顶点代表了相同类型的事物（人、网页或交叉路口）。不过，图并不局限于这样的同类数据：同样强大地是，图提供了一种一致的方式，用来在单个数据存储中存储完全不同类型的对象。例如，Facebook 维护一个包含许多不同类型的顶点和边的单个图：顶点表示人，地点，事件，签到和用户的评论；边缘表示哪些人是彼此的朋友，哪个签到发生在何处，谁评论了哪条消息，谁参与了哪个事件，等等。</p>
<h2 id="存储与检索"><a href="#存储与检索" class="headerlink" title="存储与检索"></a>存储与检索</h2><ul>
<li><p>数据模型和查询语言:</p>
<p>程序员将数据录入数据库的格式，以及再次要回数据的机制。</p>
</li>
<li><p>存储与检索:</p>
<p>数据库如何存储程序员提供的数据，以及如何在程序员需要时重新找到数据。</p>
</li>
</ul>
<h3 id="驱动数据库的数据结构"><a href="#驱动数据库的数据结构" class="headerlink" title="驱动数据库的数据结构"></a>驱动数据库的数据结构</h3><ul>
<li><p>bash: set与get</p>
</li>
<li><p><strong>日志（log）</strong> 这个词通常指应用日志：即应用程序输出的描述正在发生的事情的文本。本书在更普遍的意义下使用 <strong>日志</strong> 这一词：一个<strong>仅追加（append-only）</strong>的记录序列。它可能压根就不是给人类看的，它可以使用二进制格式，并仅能由其他程序读取。</p>
</li>
<li><p>为了高效查找数据库中特定键的值，我们需要一个数据结构：<strong>索引（index）</strong>。索引背后的大致思想是通过保存一些额外的元数据作为路标来帮助你找到想要的数据。如果你想以几种不同的方式搜索同一份数据，那么你也许需要在数据的不同部分上建立多个索引。</p>
</li>
<li><p>索引是从主数据衍生的 <strong>额外的（additional）</strong> 结构。许多数据库允许添加与删除索引，这不会影响数据的内容，而只会影响查询的性能。维护额外的结构会产生开销，特别是在写入时。写入性能很难超过简单地追加写入文件，因为追加写入是最简单的写入操作。任何类型的索引通常都会减慢写入速度，因为每次写入数据时都需要更新索引。</p>
</li>
</ul>
<h4 id="散列索引"><a href="#散列索引" class="headerlink" title="散列索引"></a>散列索引</h4><ol>
<li><p><strong>键值数据（key-value Data）</strong> 的索引。</p>
</li>
<li><p>键值存储与在大多数编程语言中可以找到的 <strong>字典（dictionary）</strong> 类型非常相似，通常字典都是用 <strong>散列映射（hash map）</strong> 或 <strong>散列表（hash table）</strong> 实现的。既然我们已经可以用散列映射来表示 <strong>内存中</strong> 的数据结构，为什么不使用它来索引 <strong>硬盘上</strong> 的数据呢？</p>
</li>
<li><p>假设我们的数据存储只是一个追加写入的文件，就像前面的例子一样，那么最简单的索引策略就是：保留一个内存中的散列映射，其中每个键都映射到数据文件中的一个字节偏移量，指明了可以找到对应值的位置。当你将新的键值对追加写入文件中时，还要更新散列映射，以反映刚刚写入的数据的偏移量（这同时适用于插入新键与更新现有键）。当你想查找一个值时，使用散列映射来查找数据文件中的偏移量，<strong>寻找（seek）</strong> 该位置并读取该值即可。</p>
</li>
<li><p>现实中，Bitcask 实际上就是这么做的（Riak 中默认的存储引擎）</p>
<p>像 Bitcask 这样的存储引擎非常适合每个键的值经常更新的情况。例如，键可能是某个猫咪视频的网址（URL），而值可能是该视频被播放的次数（每次有人点击播放按钮时递增）。在这种类型的工作负载中，有很多写操作，但是没有太多不同的键 —— 每个键有很多的写操作，但是将所有键保存在内存中是可行的。</p>
</li>
<li><p>直到现在，我们只是追加写入一个文件 —— 所以如何避免最终用完硬盘空间？一种好的解决方案是，将日志分为特定大小的段（segment），当日志增长到特定尺寸时关闭当前段文件，并开始写入一个新的段文件。然后，我们就可以对这些段进行 <strong>压缩（compaction）</strong>。这里的压缩意味着在日志中丢弃重复的键，只保留每个键的最近更新。</p>
</li>
<li><p>可以同时执行压缩和分段合并</p>
</li>
<li><p>每个段现在都有自己的内存散列表，将键映射到文件偏移量。为了找到一个键的值，我们首先检查最近的段的散列映射；如果键不存在，我们就检查第二个最近的段，依此类推。合并过程将保持段的数量足够小，所以查找过程不需要检查太多的散列映射。</p>
</li>
<li><p>值得考虑的问题：</p>
<ul>
<li><p>文件格式</p>
<p>CSV 不是日志的最佳格式。使用二进制格式更快，更简单：首先以字节为单位对字符串的长度进行编码，然后是原始的字符串（不需要转义）。</p>
</li>
<li><p>删除记录</p>
<p>如果要删除一个键及其关联的值，则必须在数据文件中追加一个特殊的删除记录（逻辑删除，有时被称为墓碑，即 tombstone）。当日志段被合并时，合并过程会通过这个墓碑知道要将被删除键的所有历史值都丢弃掉。</p>
</li>
<li><p>崩溃恢复</p>
<p>如果数据库重新启动，则内存散列映射将丢失。原则上，你可以通过从头到尾读取整个段文件并记录下来每个键的最近值来恢复每个段的散列映射。但是，如果段文件很大，可能需要很长时间，这会使服务的重启比较痛苦。 Bitcask 通过将每个段的散列映射的快照存储在硬盘上来加速恢复，可以使散列映射更快地加载到内存中。</p>
</li>
<li><p>部分写入记录</p>
<p>数据库随时可能崩溃，包括在将记录追加到日志的过程中。 Bitcask 文件包含校验和，允许检测和忽略日志中的这些损坏部分。</p>
</li>
<li><p>并发控制</p>
<p>由于写操作是以严格的顺序追加到日志中的，所以常见的实现是只有一个写入线程。也因为数据文件段是仅追加的或者说是不可变的，所以它们可以被多个线程同时读取。</p>
</li>
</ul>
</li>
<li><p>append-only的优势：</p>
<ul>
<li>追加和分段合并都是顺序写入操作，通常比随机写入快得多，尤其是在磁性机械硬盘上。在某种程度上，顺序写入在基于闪存的 <strong>固态硬盘（SSD）</strong> 上也是好的选择。</li>
<li>如果段文件是仅追加的或不可变的，并发和崩溃恢复就简单多了。例如，当一个数据值被更新的时候发生崩溃，你不用担心文件里将会同时包含旧值和新值各自的一部分。</li>
<li>合并旧段的处理也可以避免数据文件随着时间的推移而碎片化的问题。</li>
</ul>
</li>
<li><p>散列表索引也有其局限性：</p>
<ul>
<li>散列表必须能放进内存。如果你有非常多的键，那真是倒霉。原则上可以在硬盘上维护一个散列映射，不幸的是硬盘散列映射很难表现优秀。它需要大量的随机访问 I&#x2F;O，当它用满时想要再增长是很昂贵的，并且散列冲突的处理也需要很烦琐的逻辑。</li>
<li>范围查询效率不高。例如，你无法轻松扫描 kitty00000 和 kitty99999 之间的所有键 —— 你必须在散列映射中单独查找每个键。</li>
</ul>
</li>
</ol>
<h4 id="SSTable和LSM树"><a href="#SSTable和LSM树" class="headerlink" title="SSTable和LSM树"></a>SSTable和LSM树</h4><ol>
<li><p><strong>排序字符串表（Sorted String Table）</strong>，简称 SSTable</p>
<ul>
<li>对段文件的格式做一个简单的改变：要求键值对的序列按键排序</li>
<li>还要求每个键只在每个合并的段文件中出现一次（压缩过程已经保证）</li>
</ul>
</li>
<li><p>现在我们可以让我们的存储引擎以如下方式工作：</p>
<ul>
<li>有新写入时，将其添加到内存中的平衡树数据结构（例如红黑树）。这个内存树有时被称为 <strong>内存表（memtable）</strong>。</li>
<li>当 <strong>内存表</strong> 大于某个阈值（通常为几兆字节）时，将其作为 SSTable 文件写入硬盘。这可以高效地完成，因为树已经维护了按键排序的键值对。新的 SSTable 文件将成为数据库中最新的段。当该 SSTable 被写入硬盘时，新的写入可以在一个新的内存表实例上继续进行。</li>
<li>收到读取请求时，首先尝试在内存表中找到对应的键，如果没有就在最近的硬盘段中寻找，如果还没有就在下一个较旧的段中继续寻找，以此类推。</li>
<li>时不时地，在后台运行一个合并和压缩过程，以合并段文件并将已覆盖或已删除的值丢弃掉。</li>
</ul>
</li>
<li><p>用SSTables制作LSM树（日志结构合并树）</p>
<p>LSM 树的基本思想 —— 保存一系列在后台合并的 SSTables —— 简单而有效。即使数据集比可用内存大得多，它仍能继续正常工作。由于数据按排序顺序存储，你可以高效地执行范围查询（扫描所有从某个最小值到某个最大值之间的所有键），并且因为硬盘写入是连续的，所以 LSM 树可以支持非常高的写入吞吐量。</p>
</li>
</ol>
<h4 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h4><ol>
<li><p>像 SSTables 一样，B 树保持按键排序的键值对，这允许高效的键值查找和范围查询。但这也就是所有的相似之处了：B 树有着非常不同的设计理念。</p>
</li>
<li><p>日志结构索引将数据库分解为可变大小的段，通常是几兆字节或更大的大小，并且总是按顺序写入段。相比之下，B 树将数据库分解成固定大小的块（block）或页面（page），传统上大小为 4KB（有时会更大），并且一次只能读取或写入一个页面。这种设计更接近于底层硬件，因为硬盘空间也是按固定大小的块来组织的。</p>
</li>
<li><p>每个页面都可以使用地址或位置来标识，这允许一个页面引用另一个页面 —— 类似于指针，但在硬盘而不是在内存中。我们可以使用这些页面引用来构建一个<strong>页面树</strong></p>
<p>一个页面会被指定为 B 树的根；在索引中查找一个键时，就从这里开始。该页面包含几个键和对子页面的引用。每个子页面负责一段连续范围的键，引用之间的键，指明了引用子页面的键范围。</p>
</li>
<li><p>在 B 树的一个页面中对子页面的引用的数量称为分支因子。在实践中，分支因子取决于存储页面引用和范围边界所需的空间量，但通常是几百个。</p>
</li>
<li><p>如果要更新 B 树中现有键的值，需要搜索包含该键的叶子页面，更改该页面中的值，并将该页面写回到硬盘（对该页面的任何引用都将保持有效）。如果你想添加一个新的键，你需要找到其范围能包含新键的页面，并将其添加到该页面。如果页面中没有足够的可用空间容纳新键，则将其分成两个半满页面，并更新父页面以反映新的键范围分区</p>
</li>
<li><p>这个算法可以确保树保持平衡：具有 n 个键的 B 树总是具有 O (log n)的深度。大多数数据库可以放入一个三到四层的 B 树，所以你不需要追踪多个页面引用来找到你正在查找的页面（分支因子为 500 的 4KB 页面的四层树可以存储多达 256TB 的数据）。</p>
</li>
<li><p>让B树更可靠:</p>
<ul>
<li>B 树的基本底层写操作是用新数据覆写硬盘上的页面，并假定覆写不改变页面的位置：即，当页面被覆写时，对该页面的所有引用保持完整。这与日志结构索引（如 LSM 树）形成鲜明对比，后者只追加到文件（并最终删除过时的文件），但从不修改文件中已有的内容。</li>
<li>你可以把覆写硬盘上的页面对应为实际的硬件操作。在磁性硬盘驱动器上，这意味着将磁头移动到正确的位置，等待旋转盘上的正确位置出现，然后用新的数据覆写适当的扇区。在固态硬盘上，由于 SSD 必须一次擦除和重写相当大的存储芯片块，所以会发生更复杂的事情</li>
<li>注意，一些操作需要覆写几个不同的页面。例如，如果因为插入导致页面过满而拆分页面，则需要写入新拆分的两个页面，并覆写其父页面以更新对两个子页面的引用。这是一个危险的操作，因为如果数据库在仅有部分页面被写入时崩溃，那么最终将导致一个损坏的索引（例如，可能有一个孤儿页面不是任何父项的子项） 。</li>
<li>为了使数据库能处理异常崩溃的场景，B 树实现通常会带有一个额外的硬盘数据结构：<strong>预写式日志</strong>（WAL，即 write-ahead log，也称为 <strong>重做日志</strong>，即 redo log）。这是一个仅追加的文件，每个 B 树的修改在其能被应用到树本身的页面之前都必须先写入到该文件。当数据库在崩溃后恢复时，这个日志将被用来使 B 树恢复到一致的状态</li>
<li>另外还有一个更新页面的复杂情况是，如果多个线程要同时访问 B 树，则需要仔细的并发控制 —— 否则线程可能会看到树处于不一致的状态。这通常是通过使用 <strong>锁存器</strong>（latches，轻量级锁）保护树的数据结构来完成。日志结构化的方法在这方面更简单，因为它们在后台进行所有的合并，而不会干扰新接收到的查询，并且能够时不时地将旧的段原子交换为新的段。</li>
</ul>
</li>
<li><p>B树的优化：</p>
<ul>
<li><p>一些数据库（如 LMDB）使用写时复制方案，而不是覆盖页面并维护 WAL 以支持崩溃恢复。修改的页面被写入到不同的位置，并且还在树中创建了父页面的新版本，以指向新的位置。这种方法对于并发控制也很有用</p>
</li>
<li><p>B+树</p>
<p>我们可以通过不存储整个键，而是缩短其大小，来节省页面空间。特别是在树内部的页面上，键只需要提供足够的信息来充当键范围之间的边界。在页面中包含更多的键允许树具有更高的分支因子，因此也就允许更少的层级 </p>
</li>
<li><p>额外的指针已被添加到树中。例如，每个叶子页面可以引用其左边和右边的兄弟页面，使得不用跳回父页面就能按顺序对键进行扫描。</p>
</li>
</ul>
</li>
</ol>
<ul>
<li><p><strong>比较LSM树和B树</strong></p>
<ol>
<li><p>根据经验，通常 LSM 树的写入速度更快，而 B 树的读取速度更快。 LSM 树上的读取通常比较慢，因为它们必须检查几种不同的数据结构和不同压缩（Compaction）层级的 SSTables。</p>
</li>
<li><p>LSM树的优点：</p>
<ul>
<li><p>B 树索引中的每块数据都必须至少写入两次：一次写入预先写入日志（WAL），一次写入树页面本身（如果有分页还需要再写入一次）。即使在该页面中只有几个字节发生了变化，也需要接受写入整个页面的开销。有些存储引擎甚至会覆写同一个页面两次，以免在电源故障的情况下导致页面部分更新</p>
</li>
<li><p>由于反复压缩和合并 SSTables，日志结构索引也会多次重写数据。这种影响 —— 在数据库的生命周期中每次写入数据库导致对硬盘的多次写入 —— 被称为 <strong>写放大（write amplification）</strong>。需要特别注意的是固态硬盘，固态硬盘的闪存寿命在覆写有限次数后就会耗尽。</p>
</li>
<li><p>LSM 树通常能够比 B 树支持更高的写入吞吐量，部分原因是它们有时具有较低的写放大（尽管这取决于存储引擎的配置和工作负载），部分是因为它们顺序地写入紧凑的 SSTable 文件而不是必须覆写树中的几个页面。这种差异在磁性硬盘驱动器上尤其重要，其顺序写入比随机写入要快得多。</p>
</li>
<li><p>LSM 树可以被压缩得更好，因此通常能比 B 树在硬盘上产生更小的文件。B 树存储引擎会由于碎片化（fragmentation）而留下一些未使用的硬盘空间：当页面被拆分或某行不能放入现有页面时，页面中的某些空间仍未被使用。由于 LSM 树不是面向页面的，并且会通过定期重写 SSTables 以去除碎片，所以它们具有较低的存储开销，特别是当使用分层压缩（leveled compaction）时。</p>
</li>
<li><p>在许多固态硬盘上，固件内部使用了日志结构化算法，以将随机写入转变为顺序写入底层存储芯片，因此存储引擎写入模式的影响不太明显。但是，<strong>较低的写入放大率</strong>和<strong>减少的碎片</strong>仍然对固态硬盘更有利：更紧凑地表示数据允许在可用的 I&#x2F;O 带宽内处理更多的读取和写入请求。</p>
</li>
</ul>
</li>
<li><p>LSM树的缺点:</p>
<ul>
<li><p>日志结构存储的缺点是压缩过程有时会干扰正在进行的读写操作。尽管存储引擎尝试增量地执行压缩以尽量不影响并发访问，但是硬盘资源有限，所以很容易发生某个请求需要等待硬盘先完成昂贵的压缩操作。对吞吐量和平均响应时间的影响通常很小，但是日志结构化存储引擎在更高百分位的响应时间有时会相当长，而 B 树的行为则相对更具有可预测性。</p>
</li>
<li><p>压缩的另一个问题出现在高写入吞吐量时：硬盘的有限写入带宽需要在初始写入（记录日志和刷新内存表到硬盘）和在后台运行的压缩线程之间共享。写入空数据库时，可以使用全硬盘带宽进行初始写入，但数据库越大，压缩所需的硬盘带宽就越多。</p>
</li>
<li><p>如果写入吞吐量很高，并且压缩没有仔细配置好，有可能导致压缩跟不上写入速率。在这种情况下，硬盘上未合并段的数量不断增加，直到硬盘空间用完，读取速度也会减慢，因为它们需要检查更多的段文件。通常情况下，即使压缩无法跟上，基于 SSTable 的存储引擎也不会限制传入写入的速率，所以你需要进行明确的监控来检测这种情况。</p>
</li>
<li><p>B 树的一个优点是每个键只存在于索引中的一个位置，而日志结构化的存储引擎可能在不同的段中有相同键的多个副本。这个方面使得 B 树在想要提供强大的事务语义的数据库中很有吸引力：在许多关系数据库中，事务隔离是通过在键范围上使用锁来实现的，在 B 树索引中，这些锁可以直接附加到树上。</p>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="事务处理还是分析"><a href="#事务处理还是分析" class="headerlink" title="事务处理还是分析"></a>事务处理还是分析</h3><p><strong>在线事务处理（OLTP, OnLine Transaction Processing）</strong></p>
<ul>
<li><p>博客文章的评论，游戏中的动作，地址簿中的联系人，处理商业交易</p>
</li>
<li><p>应用程序通常使用索引通过某个键查找少量记录。根据用户的输入插入或更新记录。</p>
</li>
</ul>
<p> <strong>在线分析处理（OLAP, OnLine Analytice Processing）</strong></p>
<ul>
<li><p>哪个牌子的婴儿食品最常与 X 品牌的尿布同时购买？一月份每个商店的总收入是多少？</p>
</li>
<li><p>通常，分析查询需要扫描大量记录，每个记录只读取几列，并计算汇总统计信息（如计数、总和或平均值），而不是将原始数据返回给用户。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">事务处理系统 OLTP</th>
<th align="center">分析系统 OLAP</th>
</tr>
</thead>
<tbody><tr>
<td align="center">主要读取模式</td>
<td align="center">查询少量记录，按键读取</td>
<td align="center">在大批量记录上聚合</td>
</tr>
<tr>
<td align="center">主要写入模式</td>
<td align="center">随机访问，写入要求低延时</td>
<td align="center">批量导入（ETL）或者事件流</td>
</tr>
<tr>
<td align="center">主要用户</td>
<td align="center">终端用户，通过 Web 应用</td>
<td align="center">内部数据分析师，用于决策支持</td>
</tr>
<tr>
<td align="center">处理的数据</td>
<td align="center">数据的最新状态（当前时间点）</td>
<td align="center">随时间推移的历史事件</td>
</tr>
<tr>
<td align="center">数据集尺寸</td>
<td align="center">GB ~ TB</td>
<td align="center">TB ~ PB</td>
</tr>
</tbody></table>
<h4 id="数据仓库"><a href="#数据仓库" class="headerlink" title="数据仓库"></a>数据仓库</h4><ol>
<li><p>在二十世纪八十年代末和九十年代初期，企业有停止使用 OLTP 系统进行分析的趋势，转而在单独的数据库上运行分析。这个单独的数据库被称为 <strong>数据仓库（data warehouse）</strong>。</p>
</li>
<li><p>将数据存入仓库的过程称为 “<strong>抽取 - 转换 - 加载（ETL）</strong>”</p>
<p>extract, transform, load</p>
</li>
<li><p>事实表</p>
</li>
<li><p>维度表</p>
</li>
</ol>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>DFS</title>
    <url>/2022/06/23/DFS/</url>
    <content><![CDATA[<h1 id="DFS选编"><a href="#DFS选编" class="headerlink" title="DFS选编"></a>DFS选编</h1><h2 id="99-Recover-Binary-Search-Tree"><a href="#99-Recover-Binary-Search-Tree" class="headerlink" title="99. Recover Binary Search Tree"></a><a href="https://leetcode.cn/problems/recover-binary-search-tree/">99. Recover Binary Search Tree</a></h2><h3 id="法一：O-n-space-显式inorder"><a href="#法一：O-n-space-显式inorder" class="headerlink" title="法一：O(n) space    显式inorder"></a>法一：<code>O(n)</code> space    显式inorder</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode99</span> &#123;</span><br><span class="line">    List&lt;TreeNode&gt; nodes;</span><br><span class="line">    List&lt;Integer&gt; vals;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recoverTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        nodes=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        vals=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="type">int</span> first=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> second=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; vals.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(vals.get(i-<span class="number">1</span>)&gt;vals.get(i))&#123;</span><br><span class="line">                first=i-<span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> firstVal=vals.get(first);</span><br><span class="line">                <span class="keyword">while</span>(i+<span class="number">1</span>&lt;vals.size() &amp;&amp; vals.get(i+<span class="number">1</span>)&lt;firstVal)&#123;	<span class="comment">//firstVal换成vals.get(i)则报错！</span></span><br><span class="line">                    <span class="comment">//[-33,321,55,71,146,231,-13]</span></span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                second=i;</span><br><span class="line">                nodes.get(first).val=nodes.get(second).val;</span><br><span class="line">                nodes.get(second).val=firstVal;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root.left);</span><br><span class="line">        nodes.add(root);</span><br><span class="line">        vals.add(root.val);</span><br><span class="line">        dfs(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：O-1-space-隐式inorder"><a href="#法二：O-1-space-隐式inorder" class="headerlink" title="法二：O(1) space    隐式inorder"></a>法二：<code>O(1)</code> space    隐式inorder</h3><p>方法一是显式地将中序遍历的值序列保存在一个 <code>nums</code> 数组中，然后再去寻找被错误交换的节点，但我们也可以隐式地在中序遍历的过程就找到被错误交换的节点 <code>x</code> 和 <code>y</code>。</p>
<p>注意：无需辅助boolean，需要一直比较，确定second的位置！！！！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    TreeNode t1, t2, pre;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recoverTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        inorder(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> t1.val;</span><br><span class="line">        t1.val = t2.val;</span><br><span class="line">        t2.val = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inorder</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">        inorder(root.left);</span><br><span class="line">        <span class="keyword">if</span> (pre != <span class="literal">null</span> &amp;&amp; pre.val &gt; root.val) &#123;	<span class="comment">//只和前一个节点比较即可</span></span><br><span class="line">            <span class="keyword">if</span> (t1 == <span class="literal">null</span>) t1 = pre;</span><br><span class="line">            t2 = root;</span><br><span class="line">        &#125;</span><br><span class="line">        pre = root;</span><br><span class="line">        inorder(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1382-Balance-a-Binary-Search-Tree"><a href="#1382-Balance-a-Binary-Search-Tree" class="headerlink" title="1382. Balance a Binary Search Tree"></a><a href="https://leetcode.cn/problems/balance-a-binary-search-tree/">1382. Balance a Binary Search Tree</a></h2><ol>
<li><p>Convert the tree to a sorted array using an in-order traversal.</p>
</li>
<li><p>Construct a new balanced tree from the sorted array recursively.</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode1382</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">balanceBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        Deque&lt;TreeNode&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            <span class="comment">//out: left root right</span></span><br><span class="line">            <span class="comment">//in:  right root left</span></span><br><span class="line">            TreeNode node=stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    stack.push(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">                stack.push(node);</span><br><span class="line">                stack.push(<span class="literal">null</span>);</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    stack.push(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                list.add(stack.pop().val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> construct(list,<span class="number">0</span>,list.size()-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeNode <span class="title function_">construct</span><span class="params">(List&lt;Integer&gt; list, <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start&gt;end || start&lt;<span class="number">0</span> || end&gt;=list.size())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(start==end)&#123;</span><br><span class="line">            TreeNode node=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(list.get(start));</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid=start+(end-start)/<span class="number">2</span>;</span><br><span class="line">        TreeNode node=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(list.get(mid));</span><br><span class="line">        node.left=construct(list,start,mid-<span class="number">1</span>);</span><br><span class="line">        node.right=construct(list,mid+<span class="number">1</span>,end);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="133-Clone-Graph"><a href="#133-Clone-Graph" class="headerlink" title="133. Clone Graph"></a><a href="https://leetcode.cn/problems/clone-graph/">133. Clone Graph</a></h2><h3 id="用数组去重："><a href="#用数组去重：" class="headerlink" title="用数组去重："></a>用数组去重：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Node[] clones;</span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">cloneGraph</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    clones=<span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">101</span>];</span><br><span class="line">    <span class="keyword">return</span> dfs(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node <span class="title function_">dfs</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">    <span class="type">int</span> val=node.val;</span><br><span class="line">    <span class="keyword">if</span>(clones[val]!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> clones[val];</span><br><span class="line">    &#125;</span><br><span class="line">    ArrayList&lt;Node&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Node clone=<span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">    clone.val=val;</span><br><span class="line">    clone.neighbors=list;</span><br><span class="line">    clones[val]=clone;</span><br><span class="line">    <span class="keyword">for</span> (Node next : node.neighbors) &#123;</span><br><span class="line">        list.add(dfs(next));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="用哈希表去重："><a href="#用哈希表去重：" class="headerlink" title="用哈希表去重："></a>用哈希表去重：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap &lt;Node, Node&gt; visited = <span class="keyword">new</span> <span class="title class_">HashMap</span> &lt;&gt; ();</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">cloneGraph</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果该节点已经被访问过了，则直接从哈希表中取出对应的克隆节点返回</span></span><br><span class="line">        <span class="keyword">if</span> (visited.containsKey(node)) &#123;</span><br><span class="line">            <span class="keyword">return</span> visited.get(node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 克隆节点，注意到为了深拷贝我们不会克隆它的邻居的列表</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">cloneNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(node.val, <span class="keyword">new</span> <span class="title class_">ArrayList</span>());</span><br><span class="line">        <span class="comment">// 哈希表存储</span></span><br><span class="line">        visited.put(node, cloneNode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历该节点的邻居并更新克隆节点的邻居列表</span></span><br><span class="line">        <span class="keyword">for</span> (Node neighbor: node.neighbors) &#123;</span><br><span class="line">            cloneNode.neighbors.add(cloneGraph(neighbor));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cloneNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="156-Binary-Tree-Upside-Down"><a href="#156-Binary-Tree-Upside-Down" class="headerlink" title="156. Binary Tree Upside Down"></a><a href="https://leetcode.cn/problems/binary-tree-upside-down/">156. Binary Tree Upside Down</a></h2><p>It is guaranteed that every right node has a sibling (a left node with the same parent) and has no children.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode156</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">upsideDownBinaryTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reverse(root,root.left,root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeNode <span class="title function_">reverse</span><span class="params">(TreeNode root, TreeNode left, TreeNode right)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left==<span class="literal">null</span> &amp;&amp; right==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode newRoot=reverse(left,left.left,left.right);	<span class="comment">//需要记录新树的root，即老树的最左下节点</span></span><br><span class="line">        left.left=right;</span><br><span class="line">        left.right=root;</span><br><span class="line">        root.left=<span class="literal">null</span>;</span><br><span class="line">        root.right=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            right.left=<span class="literal">null</span>;</span><br><span class="line">            right.right=<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newRoot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="250-Count-Univalue-Subtrees"><a href="#250-Count-Univalue-Subtrees" class="headerlink" title="250. Count Univalue Subtrees"></a><a href="https://leetcode.cn/problems/count-univalue-subtrees/">250. Count Univalue Subtrees</a></h2><p>同值子树，但不同的同值子树同的那个值<strong>可以不同</strong></p>
<p>即叶子节点 必定 count as 同值子树</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">【示例一】</span><br><span class="line">      root = [<span class="number">5</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="literal">null</span>,<span class="number">5</span>]是几个同值子树？ </span><br><span class="line">     是<span class="number">4</span>个（三个叶子节点<span class="number">5</span>,  一个<span class="number">5</span>-&gt;<span class="number">5</span>）</span><br><span class="line">【示例二】</span><br><span class="line">      root = [<span class="number">5</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="literal">null</span>,<span class="number">5</span>]是几个同值子树？</span><br><span class="line">     也是<span class="number">4</span>个（两个叶子节点<span class="number">5</span>, 一个叶子节点<span class="number">6</span>， 一个<span class="number">5</span>-&gt;<span class="number">5</span>）</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">is_uni</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//base case - if the node has no children this is a univalue subtree</span></span><br><span class="line">    <span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// found a univalue subtree - increment</span></span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">is_unival</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check if all of the node&#x27;s children are univalue subtrees and if they have the same value</span></span><br><span class="line">    <span class="comment">// also recursively call is_uni for children</span></span><br><span class="line">    <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">        is_unival = is_uni(node.left) &amp;&amp; is_unival &amp;&amp; node.left.val == node.val;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">        is_unival = is_uni(node.right) &amp;&amp; is_unival &amp;&amp; node.right.val == node.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return if a univalue tree exists here and increment if it does</span></span><br><span class="line">    <span class="keyword">if</span> (!is_unival) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countUnivalSubtrees</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    is_uni(root);</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode250</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countUnivalSubtrees</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count=<span class="number">0</span>;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> b=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            b= dfs(root.left) &amp;&amp; root.val==root.left.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            b= dfs(root.right) &amp;&amp; root.val==root.right.val &amp;&amp; b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!b)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="269-Alien-Dictionary"><a href="#269-Alien-Dictionary" class="headerlink" title="269. Alien Dictionary"></a><a href="https://leetcode.cn/problems/alien-dictionary/">269. Alien Dictionary</a></h2><p>难点：</p>
<ol>
<li>理解题意</li>
<li>拓扑排序             <strong>将后序遍历的结果进行反转，就是拓扑排序的结果</strong></li>
</ol>
<p><a href="https://leetcode.cn/problems/alien-dictionary/solution/-by-max-lfsznscofe-zf3j/">https://leetcode.cn/problems/alien-dictionary/solution/-by-max-lfsznscofe-zf3j/</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">alienOrder</span><span class="params">(String[] words)</span> &#123;</span><br><span class="line">        Map&lt;Character, List&lt;Character&gt;&gt; graph = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> words.length;</span><br><span class="line">        Set&lt;Character&gt; unknown = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String word : words)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++)&#123;</span><br><span class="line">                unknown.add(word.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1. build graph</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">w1</span> <span class="operator">=</span> words[i], w2 = words[i + <span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> Math.max(w1.length(), w2.length());</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; maxLen; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j == w2.length()) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;<span class="comment">//不合法</span></span><br><span class="line">                <span class="keyword">if</span>(j == w1.length()) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(w1.charAt(j) != w2.charAt(j))&#123;</span><br><span class="line">                    <span class="type">char</span> <span class="variable">from</span> <span class="operator">=</span> w1.charAt(j), to = w2.charAt(j);</span><br><span class="line">                    <span class="keyword">if</span>(graph.get(from) == <span class="literal">null</span>)&#123;</span><br><span class="line">                        graph.put(from, <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;());</span><br><span class="line">                    &#125;</span><br><span class="line">                    graph.get(from).add(to);</span><br><span class="line">                    <span class="keyword">break</span>;<span class="comment">//找到第一个不同字母，可以判断顺序</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.topological sort</span></span><br><span class="line">        visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">26</span>];</span><br><span class="line">        onPath = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">26</span>];</span><br><span class="line">        path = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch : graph.keySet())&#123;</span><br><span class="line">            traverse(graph, ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. get final result</span></span><br><span class="line">        <span class="keyword">if</span>(hasCycle) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;<span class="comment">//存在环则无法排序出合法的字母顺序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> unk : unknown)&#123;</span><br><span class="line">            <span class="keyword">if</span>(path.indexOf(String.valueOf(unk)) == -<span class="number">1</span>)&#123;</span><br><span class="line">                path.append(unk);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> path.reverse().toString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span>[] visited;<span class="comment">//记录结点访问</span></span><br><span class="line">    <span class="type">boolean</span>[] onPath;<span class="comment">//记录路线访问</span></span><br><span class="line">    <span class="type">boolean</span> hasCycle;<span class="comment">//存在环标志</span></span><br><span class="line">    StringBuilder path;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">(Map&lt;Character, List&lt;Character&gt;&gt; graph, <span class="type">char</span> ch)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(onPath[ch - <span class="string">&#x27;a&#x27;</span>]) hasCycle = <span class="literal">true</span>;<span class="comment">//该路径曾经访问过，存在环</span></span><br><span class="line">        <span class="keyword">if</span>(hasCycle || visited[ch - <span class="string">&#x27;a&#x27;</span>]) <span class="keyword">return</span>; <span class="comment">// 存在环或者已访问过该节点 返回</span></span><br><span class="line">        visited[ch - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">true</span>;</span><br><span class="line">        onPath[ch - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(graph.get(ch) != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> next : graph.get(ch))&#123;</span><br><span class="line">                traverse(graph, next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        path.append(ch);</span><br><span class="line">        onPath[ch - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="269-Alien-Dictionary-1"><a href="#269-Alien-Dictionary-1" class="headerlink" title="269. Alien Dictionary"></a><a href="https://leetcode.cn/problems/alien-dictionary/">269. Alien Dictionary</a></h2><p>难点：</p>
<ol>
<li>理解题意</li>
<li>拓扑排序             <strong>将后序遍历的结果进行反转，就是拓扑排序的结果</strong></li>
</ol>
<p><a href="https://leetcode.cn/problems/alien-dictionary/solution/-by-max-lfsznscofe-zf3j/">https://leetcode.cn/problems/alien-dictionary/solution/-by-max-lfsznscofe-zf3j/</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">alienOrder</span><span class="params">(String[] words)</span> &#123;</span><br><span class="line">        Map&lt;Character, List&lt;Character&gt;&gt; graph = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> words.length;</span><br><span class="line">        Set&lt;Character&gt; unknown = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String word : words)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++)&#123;</span><br><span class="line">                unknown.add(word.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1. build graph</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">w1</span> <span class="operator">=</span> words[i], w2 = words[i + <span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> Math.max(w1.length(), w2.length());</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; maxLen; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j == w2.length()) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;<span class="comment">//不合法</span></span><br><span class="line">                <span class="keyword">if</span>(j == w1.length()) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(w1.charAt(j) != w2.charAt(j))&#123;</span><br><span class="line">                    <span class="type">char</span> <span class="variable">from</span> <span class="operator">=</span> w1.charAt(j), to = w2.charAt(j);</span><br><span class="line">                    <span class="keyword">if</span>(graph.get(from) == <span class="literal">null</span>)&#123;</span><br><span class="line">                        graph.put(from, <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;());</span><br><span class="line">                    &#125;</span><br><span class="line">                    graph.get(from).add(to);</span><br><span class="line">                    <span class="keyword">break</span>;<span class="comment">//找到第一个不同字母，可以判断顺序</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.topological sort</span></span><br><span class="line">        visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">26</span>];</span><br><span class="line">        onPath = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">26</span>];</span><br><span class="line">        path = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch : graph.keySet())&#123;</span><br><span class="line">            traverse(graph, ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. get final result</span></span><br><span class="line">        <span class="keyword">if</span>(hasCycle) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;<span class="comment">//存在环则无法排序出合法的字母顺序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> unk : unknown)&#123;</span><br><span class="line">            <span class="keyword">if</span>(path.indexOf(String.valueOf(unk)) == -<span class="number">1</span>)&#123;</span><br><span class="line">                path.append(unk);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> path.reverse().toString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span>[] visited;<span class="comment">//记录结点访问</span></span><br><span class="line">    <span class="type">boolean</span>[] onPath;<span class="comment">//记录路线访问</span></span><br><span class="line">    <span class="type">boolean</span> hasCycle;<span class="comment">//存在环标志</span></span><br><span class="line">    StringBuilder path;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">(Map&lt;Character, List&lt;Character&gt;&gt; graph, <span class="type">char</span> ch)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(onPath[ch - <span class="string">&#x27;a&#x27;</span>]) hasCycle = <span class="literal">true</span>;<span class="comment">//该路径曾经访问过，存在环</span></span><br><span class="line">        <span class="keyword">if</span>(hasCycle || visited[ch - <span class="string">&#x27;a&#x27;</span>]) <span class="keyword">return</span>; <span class="comment">// 存在环或者已访问过该节点 返回</span></span><br><span class="line">        visited[ch - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">true</span>;</span><br><span class="line">        onPath[ch - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(graph.get(ch) != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> next : graph.get(ch))&#123;</span><br><span class="line">                traverse(graph, next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        path.append(ch);</span><br><span class="line">        onPath[ch - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>graph可以用<code>HashMap</code>，也可以沿用之前schedule中的<code>List[]</code></p>
<p>graph dfs三要素：</p>
<ul>
<li>hasCycle</li>
<li>visited[]</li>
<li>onPath[]</li>
</ul>
<p>拓扑排序结果即为<strong>后序遍历的逆序</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode269</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> hasCycle;</span><br><span class="line">    <span class="type">boolean</span>[] visited;</span><br><span class="line">    <span class="type">boolean</span>[] onPath;</span><br><span class="line">    StringBuilder sb;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">alienOrder</span><span class="params">(String[] words)</span> &#123;</span><br><span class="line">        Map&lt;Character, List&lt;Character&gt;&gt; graph=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Set&lt;Character&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">                set.add(word.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">            String small=words[i-<span class="number">1</span>];</span><br><span class="line">            String big=words[i];</span><br><span class="line">            <span class="type">int</span> len=Math.max(small.length(),big.length());</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(j==big.length())&#123; <span class="comment">//invalid</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j==small.length())&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(small.charAt(j)!=big.charAt(j))&#123;</span><br><span class="line">                    <span class="type">char</span> from=small.charAt(j);</span><br><span class="line">                    <span class="type">char</span> to=big.charAt(j);</span><br><span class="line">                    graph.putIfAbsent(from, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">                    graph.get(from).add(to);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        hasCycle=<span class="literal">false</span>;</span><br><span class="line">        visited=<span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">26</span>];</span><br><span class="line">        onPath=<span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">26</span>];</span><br><span class="line">        sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : set) &#123;</span><br><span class="line">            dfs(graph,c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(hasCycle)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(Map&lt;Character, List&lt;Character&gt;&gt; graph, <span class="type">char</span> cur)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(onPath[cur-<span class="string">&#x27;a&#x27;</span>])&#123;</span><br><span class="line">            hasCycle=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(visited[cur-<span class="string">&#x27;a&#x27;</span>] || hasCycle)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[cur-<span class="string">&#x27;a&#x27;</span>]=<span class="literal">true</span>;</span><br><span class="line">        onPath[cur-<span class="string">&#x27;a&#x27;</span>]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(graph.containsKey(cur))&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> next : graph.get(cur)) &#123;</span><br><span class="line">                dfs(graph,next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(cur);</span><br><span class="line">        onPath[cur-<span class="string">&#x27;a&#x27;</span>]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="272-Closest-Binary-Search-Tree-Value-II"><a href="#272-Closest-Binary-Search-Tree-Value-II" class="headerlink" title="272. Closest Binary Search Tree Value II"></a><a href="https://leetcode.cn/problems/closest-binary-search-tree-value-ii/">272. Closest Binary Search Tree Value II</a></h2><p><em>Assume that the BST is balanced. Could you solve it in less than O(n) runtime (where n &#x3D; total nodes)?</em></p>
<p><strong>k-th smallet elements</strong></p>
<h3 id="法一：traverse-heap-O-nlogn"><a href="#法一：traverse-heap-O-nlogn" class="headerlink" title="法一：traverse + heap, O(nlogn)"></a>法一：traverse + heap, O(nlogn)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PriorityQueue&lt;Integer&gt; pq;</span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">closestKValues</span><span class="params">(TreeNode root, <span class="type">double</span> target, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    pq=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a,b)-&gt;Math.abs(a-target)&lt;Math.abs(b-target) ? -<span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">    dfs(root);</span><br><span class="line">    List&lt;Integer&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(count++&lt;k)&#123;</span><br><span class="line">        res.add(pq.poll());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root.left);</span><br><span class="line">    pq.offer(root.val);</span><br><span class="line">    dfs(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：quick-select-O-n"><a href="#法二：quick-select-O-n" class="headerlink" title="法二：quick select, O(n)"></a>法二：quick select, O(n)</h3><h2 id="827-Making-A-Large-Island"><a href="#827-Making-A-Large-Island" class="headerlink" title="827. Making A Large Island"></a><a href="https://leetcode.cn/problems/making-a-large-island/">827. Making A Large Island</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode827</span> &#123;</span><br><span class="line">    <span class="type">int</span> row;</span><br><span class="line">    <span class="type">int</span> col;</span><br><span class="line">    <span class="type">int</span> idx;</span><br><span class="line">    <span class="type">int</span>[][] grid;</span><br><span class="line">    <span class="type">int</span>[] area;</span><br><span class="line">    <span class="type">int</span>[] dx;</span><br><span class="line">    <span class="type">int</span>[] dy;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestIsland</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        row=grid.length;</span><br><span class="line">        col=grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="built_in">this</span>.grid=grid;</span><br><span class="line">        idx=<span class="number">2</span>;</span><br><span class="line">        dx=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        dy=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        area=<span class="keyword">new</span> <span class="title class_">int</span>[row*col+<span class="number">2</span>];    <span class="comment">//存储每个岛屿的面积，岛屿下标从2开始</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> max=Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j]==<span class="number">1</span>)&#123;</span><br><span class="line">                    area[idx]=dfs(i,j);</span><br><span class="line">                    max=Math.max(max,area[idx]);</span><br><span class="line">                    idx++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//注意去重，同一个岛屿只加一次</span></span><br><span class="line">        Set&lt;Integer&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j]==<span class="number">0</span>)&#123;</span><br><span class="line">                    set.clear();</span><br><span class="line">                    <span class="type">int</span> s=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                        <span class="type">int</span> x=i+dx[k];</span><br><span class="line">                        <span class="type">int</span> y=j+dy[k];</span><br><span class="line">                        <span class="keyword">if</span>(x&lt;<span class="number">0</span> || x&gt;=row || y&lt;<span class="number">0</span> || y&gt;=col || grid[x][y]==<span class="number">0</span>)&#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(set.contains(grid[x][y]))&#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        s+=area[grid[x][y]];</span><br><span class="line">                        set.add(grid[x][y]);    <span class="comment">//此时grid中存储的已经是岛屿的编号</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    max=Math.max(max,s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算每个岛屿的面积，并给岛屿编号，同一岛屿编号相同</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">        grid[i][j]=idx;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">            <span class="type">int</span> x=i+dx[k];</span><br><span class="line">            <span class="type">int</span> y=j+dy[k];</span><br><span class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span> || x&gt;=row || y&lt;<span class="number">0</span> || y&gt;=col || grid[x][y]!=<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//等于0说明是水，大于等于2说明已经作为岛屿(的一部分)被计算过了</span></span><br><span class="line">            res+=dfs(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>连同的同一个岛屿的idx相同！！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode827</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] grid;</span><br><span class="line">    <span class="type">int</span> row;</span><br><span class="line">    <span class="type">int</span> col;</span><br><span class="line">    <span class="type">int</span>[] area;</span><br><span class="line">    <span class="type">int</span>[] dx=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] dy=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestIsland</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.grid=grid;</span><br><span class="line">        row=grid.length;</span><br><span class="line">        col=grid[<span class="number">0</span>].length;</span><br><span class="line">        area=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>+row*col];</span><br><span class="line">        <span class="type">int</span> max=Integer.MIN_VALUE;</span><br><span class="line">        <span class="type">int</span> idx=<span class="number">2</span>; <span class="comment">//island index starting form 2; 0 for water, 1 for unscanned island</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j]==<span class="number">1</span>)&#123;</span><br><span class="line">                    area[idx]=dfs(i,j,idx);</span><br><span class="line">                    idx++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;Integer&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j]==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> s=<span class="number">1</span>;</span><br><span class="line">                    set.clear();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">0</span>; p &lt; <span class="number">4</span>; p++) &#123;</span><br><span class="line">                        <span class="type">int</span> x=i+dx[p];</span><br><span class="line">                        <span class="type">int</span> y=j+dy[p];</span><br><span class="line">                        <span class="keyword">if</span>(x&lt;<span class="number">0</span> || x&gt;=row || y&lt;<span class="number">0</span> || y&gt;=col || grid[x][y]==<span class="number">0</span>)&#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="type">int</span> island=grid[x][y];</span><br><span class="line">                        <span class="keyword">if</span>(set.contains(island))&#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        set.add(island);</span><br><span class="line">                        s+=area[island];</span><br><span class="line">                    &#125;</span><br><span class="line">                    max=Math.max(max,s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max==Integer.MIN_VALUE ? row*col : max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> idx)</span>&#123;</span><br><span class="line">        grid[i][j]=idx;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">0</span>; p &lt; <span class="number">4</span>; p++) &#123;</span><br><span class="line">            <span class="type">int</span> x=i+dx[p];</span><br><span class="line">            <span class="type">int</span> y=j+dy[p];</span><br><span class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span> || x&gt;=row || y&lt;<span class="number">0</span> || y&gt;=col || grid[x][y]!=<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res+=dfs(x,y,idx);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="130-Surrounded-Regions"><a href="#130-Surrounded-Regions" class="headerlink" title="130. Surrounded Regions"></a>130. Surrounded Regions</h2><p>反向flood</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode130</span> &#123;</span><br><span class="line">    <span class="type">int</span> row;</span><br><span class="line">    <span class="type">int</span> col;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">        row=board.length;</span><br><span class="line">        col=board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            dfs(board,i,<span class="number">0</span>);</span><br><span class="line">            dfs(board,i,col-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            dfs(board,<span class="number">0</span>,j);</span><br><span class="line">            dfs(board,row-<span class="number">1</span>,j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j]==<span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                    board[i][j]=<span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j]==<span class="string">&#x27;S&#x27;</span>)&#123;</span><br><span class="line">                    board[i][j]=<span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=row || j&lt;<span class="number">0</span> || j&gt;=col || board[i][j]==<span class="string">&#x27;X&#x27;</span> || board[i][j]==<span class="string">&#x27;S&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        board[i][j]=<span class="string">&#x27;S&#x27;</span>;</span><br><span class="line">        dfs(board,i-<span class="number">1</span>,j);</span><br><span class="line">        dfs(board,i+<span class="number">1</span>,j);</span><br><span class="line">        dfs(board,i,j-<span class="number">1</span>);</span><br><span class="line">        dfs(board,i,j+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="261-Graph-Valid-Tree"><a href="#261-Graph-Valid-Tree" class="headerlink" title="261. Graph Valid Tree"></a>261. Graph Valid Tree</h2><h3 id="法一：DFS："><a href="#法一：DFS：" class="headerlink" title="法一：DFS："></a>法一：DFS：</h3><ul>
<li>跟有向图不同，无向图dfs要<strong>删除回头路</strong></li>
<li>否则会产生<strong>unnecessary circle</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode261</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] graph;</span><br><span class="line">    <span class="type">boolean</span>[] visited;</span><br><span class="line">    <span class="type">boolean</span>[] onPath;</span><br><span class="line">    <span class="type">boolean</span> has_cycle;</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validTree</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges)</span> &#123;</span><br><span class="line">        graph=<span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">            <span class="type">int</span> a=edge[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> b=edge[<span class="number">1</span>];</span><br><span class="line">            graph[a][b]=<span class="number">1</span>;</span><br><span class="line">            graph[b][a]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visited=<span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        onPath=<span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        count=<span class="number">0</span>;</span><br><span class="line">        dfs(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> !has_cycle &amp;&amp; count==n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> cur)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(onPath[cur])&#123;</span><br><span class="line">            has_cycle=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(has_cycle || visited[cur])&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[cur]=<span class="literal">true</span>;</span><br><span class="line">        onPath[cur]=<span class="literal">true</span>;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; graph[cur].length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(graph[cur][i]==<span class="number">1</span>)&#123;</span><br><span class="line">                graph[i][cur]=<span class="number">0</span>; <span class="comment">//avoid unnecessary circle</span></span><br><span class="line">                dfs(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        onPath[cur]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：UnionFind"><a href="#法二：UnionFind" class="headerlink" title="法二：UnionFind"></a>法二：UnionFind</h3><h2 id="113-Path-Sum-II"><a href="#113-Path-Sum-II" class="headerlink" title="113. Path Sum II"></a>113. Path Sum II</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; res;</span><br><span class="line">   <span class="type">int</span> target;</span><br><span class="line">   List&lt;Integer&gt; path;</span><br><span class="line"> <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">pathSum</span><span class="params">(TreeNode root, <span class="type">int</span> targetSum)</span> &#123;</span><br><span class="line">     res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">     target=targetSum;</span><br><span class="line">     path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">     dfs(root,<span class="number">0</span>);</span><br><span class="line">     <span class="keyword">return</span> res;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, <span class="type">int</span> sum)</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="keyword">if</span>(sum+root.val==target)&#123;</span><br><span class="line">             path.add(root.val);</span><br><span class="line">             res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">             path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     path.add(root.val);</span><br><span class="line">     dfs(root.left,sum+root.val);</span><br><span class="line">     dfs(root.right,sum+root.val);</span><br><span class="line">     path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<h2 id="124-Binary-Tree-Maximum-Path-Sum"><a href="#124-Binary-Tree-Maximum-Path-Sum" class="headerlink" title="124. Binary Tree Maximum Path Sum"></a>124. Binary Tree Maximum Path Sum</h2><p>初代hard题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> res;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxPathSum</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    res=Integer.MIN_VALUE;</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l=Math.max(dfs(root.left),<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> r=Math.max(dfs(root.right),<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> max=root.val+l+r;</span><br><span class="line">    res=Math.max(res,max);</span><br><span class="line">    <span class="keyword">return</span> root.val+Math.max(l,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="129-Sum-Root-to-Leaf-Numbers"><a href="#129-Sum-Root-to-Leaf-Numbers" class="headerlink" title="129. Sum Root to Leaf Numbers"></a>129. Sum Root to Leaf Numbers</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="type">int</span> res;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumNumbers</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        dfs(root,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode cur, <span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cur.left==<span class="literal">null</span> &amp;&amp; cur.right==<span class="literal">null</span>)&#123;</span><br><span class="line">            num*=<span class="number">10</span>;</span><br><span class="line">            num+=cur.val;</span><br><span class="line">            res+=num;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(cur.left,num*<span class="number">10</span>+cur.val);</span><br><span class="line">        dfs(cur.right,num*<span class="number">10</span>+cur.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="230-Kth-Smallest-Element-in-a-BST"><a href="#230-Kth-Smallest-Element-in-a-BST" class="headerlink" title="230. Kth Smallest Element in a BST"></a>230. Kth Smallest Element in a BST</h2><h3 id="法一：O-H-k"><a href="#法一：O-H-k" class="headerlink" title="法一：O(H+k)"></a>法一：O(H+k)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> index;</span><br><span class="line">  <span class="type">int</span> res;</span><br><span class="line">  <span class="type">boolean</span> done;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">kthSmallest</span><span class="params">(TreeNode root, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    index=<span class="number">0</span>;</span><br><span class="line">    res=<span class="number">0</span>;</span><br><span class="line">    dfs(root,k);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode cur, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur==<span class="literal">null</span> || done)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(cur.left,k);</span><br><span class="line">    index++;</span><br><span class="line">    <span class="keyword">if</span>(index==k)&#123;</span><br><span class="line">        done=<span class="literal">true</span>;</span><br><span class="line">        res=cur.val;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(cur.right,k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">kthSmallest</span><span class="params">(TreeNode root, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    LinkedList&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">while</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        stack.push(root);</span><br><span class="line">        root = root.left;</span><br><span class="line">      &#125;</span><br><span class="line">      root = stack.pop();</span><br><span class="line">      <span class="keyword">if</span> (--k == <span class="number">0</span>) <span class="keyword">return</span> root.val;</span><br><span class="line">      root = root.right;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Follow-up"><a href="#Follow-up" class="headerlink" title="Follow up:"></a>Follow up:</h3><p>What if the BST is modified (insert&#x2F;delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?</p>
<h2 id="257-Binary-Tree-Paths"><a href="#257-Binary-Tree-Paths" class="headerlink" title="257. Binary Tree Paths"></a>257. Binary Tree Paths</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; res;</span><br><span class="line">  LinkedList&lt;Integer&gt; path;</span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">binaryTreePaths</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    path=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    path.add(root.val);</span><br><span class="line">    <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>)&#123;</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (Integer i : path) &#123;</span><br><span class="line">            sb.append(i);</span><br><span class="line">            sb.append(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">        sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">        res.add(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root.left);</span><br><span class="line">    dfs(root.right);</span><br><span class="line">    path.removeLast();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="270-Closest-Binary-Search-Tree-Value"><a href="#270-Closest-Binary-Search-Tree-Value" class="headerlink" title="270. Closest Binary Search Tree Value"></a>270. Closest Binary Search Tree Value</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1 2 3 4 5</span></span><br><span class="line"><span class="type">boolean</span> done;</span><br><span class="line">  <span class="type">int</span> start;</span><br><span class="line">  <span class="type">int</span> pre;</span><br><span class="line">  <span class="type">int</span> res;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">closestValue</span><span class="params">(TreeNode root, <span class="type">double</span> target)</span> &#123;</span><br><span class="line">    res=Integer.MIN_VALUE;</span><br><span class="line">    pre=Integer.MIN_VALUE;</span><br><span class="line">    dfs(root,target);</span><br><span class="line">    <span class="keyword">if</span>(done)&#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre&lt;target ? pre : start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, <span class="type">double</span> target)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span> || done)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root.left,target);</span><br><span class="line">    <span class="type">int</span> cur=root.val;</span><br><span class="line">    <span class="keyword">if</span>(pre!=Integer.MIN_VALUE)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre&lt;=target &amp;&amp; cur&gt;=target)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Math.abs(pre-target)&lt;Math.abs(cur-target))&#123;</span><br><span class="line">                res=pre;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res=cur;</span><br><span class="line">            &#125;</span><br><span class="line">            done=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        start=cur;</span><br><span class="line">    &#125;</span><br><span class="line">    pre=cur;</span><br><span class="line">    dfs(root.right,target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>注意：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="number">1</span>==<span class="number">1.0</span>);	<span class="comment">//true</span></span><br></pre></td></tr></table></figure>





<h2 id="298-Binary-Tree-Longest-Consecutive-Sequence"><a href="#298-Binary-Tree-Longest-Consecutive-Sequence" class="headerlink" title="298. Binary Tree Longest Consecutive Sequence"></a>298. Binary Tree Longest Consecutive Sequence</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> res;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestConsecutive</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    dfs(root,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, <span class="type">int</span> l)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        res=Math.max(res,l);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    l++;</span><br><span class="line">    res=Math.max(res,l);</span><br><span class="line">    <span class="keyword">if</span>(root.left!=<span class="literal">null</span> &amp;&amp; root.val+<span class="number">1</span>==root.left.val)&#123;</span><br><span class="line">        dfs(root.left,l);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        dfs(root.left,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root.right!=<span class="literal">null</span> &amp;&amp; root.val+<span class="number">1</span>==root.right.val)&#123;</span><br><span class="line">        dfs(root.right,l);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        dfs(root.right,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="323-Number-of-Connected-Components-in-an-Undirected-Graph"><a href="#323-Number-of-Connected-Components-in-an-Undirected-Graph" class="headerlink" title="323. Number of Connected Components in an Undirected Graph"></a>323. Number of Connected Components in an Undirected Graph</h2><h3 id="法一：DFS"><a href="#法一：DFS" class="headerlink" title="法一：DFS"></a>法一：DFS</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span>[] visited;</span><br><span class="line"><span class="type">int</span>[][] graph;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countComponents</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges)</span> &#123;</span><br><span class="line">    graph=<span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">    <span class="built_in">this</span>.n=n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">        <span class="type">int</span> a=edge[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> b=edge[<span class="number">1</span>];</span><br><span class="line">        graph[a][b]=<span class="number">1</span>;</span><br><span class="line">        graph[b][a]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    visited=<span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[i])&#123;</span><br><span class="line">            res++;</span><br><span class="line">            dfs(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> cur)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(visited[cur])&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    visited[cur]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(graph[cur][i]==<span class="number">1</span>)&#123;</span><br><span class="line">            graph[i][cur]=<span class="number">0</span>;</span><br><span class="line">            dfs(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="329-Longest-Increasing-Path-in-a-Matrix"><a href="#329-Longest-Increasing-Path-in-a-Matrix" class="headerlink" title="329. Longest Increasing Path in a Matrix"></a>329. Longest Increasing Path in a Matrix</h2><h3 id="brute-force"><a href="#brute-force" class="headerlink" title="brute force:"></a>brute force:</h3><p>(Naive DFS) [Time Limit Exceeded]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] matrix;</span><br><span class="line"><span class="type">int</span> row;</span><br><span class="line"><span class="type">int</span> col;</span><br><span class="line"><span class="type">int</span> max;</span><br><span class="line"><span class="type">int</span>[] dx=&#123;<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] dy=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestIncreasingPath</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.matrix=matrix;</span><br><span class="line">    row=matrix.length;</span><br><span class="line">    col=matrix[<span class="number">0</span>].length;</span><br><span class="line">    max=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            dfs(i,j,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> l)</span>&#123;</span><br><span class="line">    max=Math.max(max,l);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">        <span class="type">int</span> x=i+dx[k];</span><br><span class="line">        <span class="type">int</span> y=j+dy[k];</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span> || x&gt;=row || y&lt;<span class="number">0</span> || y&gt;=col</span><br><span class="line">                || matrix[x][y]&lt;=matrix[i][j])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(x,y,l+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Approach-2-DFS-Memoization-Accepted"><a href="#Approach-2-DFS-Memoization-Accepted" class="headerlink" title="Approach #2 (DFS + Memoization) [Accepted]"></a>Approach #2 (DFS + Memoization) [Accepted]</h3><p>In computing, memoization is an optimization technique used primarily to speed up computer programs by storing the results of expensive function calls and returning the cached result when the same inputs occur again.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] matrix;</span><br><span class="line"><span class="type">int</span> row;</span><br><span class="line"><span class="type">int</span> col;</span><br><span class="line"><span class="type">int</span>[] dx=&#123;<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] dy=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span>[][] memo;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestIncreasingPath</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.matrix=matrix;</span><br><span class="line">    row=matrix.length;</span><br><span class="line">    col=matrix[<span class="number">0</span>].length;</span><br><span class="line">    memo=<span class="keyword">new</span> <span class="title class_">int</span>[row][col];</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            res=Math.max(res,dfs(i,j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(memo[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> memo[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">        <span class="type">int</span> x=i+dx[k];</span><br><span class="line">        <span class="type">int</span> y=j+dy[k];</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span> || x&gt;=row || y&lt;<span class="number">0</span> || y&gt;=col</span><br><span class="line">                || matrix[x][y]&lt;=matrix[i][j])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res=Math.max(res,dfs(x,y)+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    memo[i][j]=res;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="333-Largest-BST-Subtree"><a href="#333-Largest-BST-Subtree" class="headerlink" title="333. Largest BST Subtree"></a>333. Largest BST Subtree</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;TreeNode, Integer&gt; maxMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"> Map&lt;TreeNode,Integer&gt; minMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"> Map&lt;TreeNode,Integer&gt; sizeMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestBSTSubtree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l=largestBSTSubtree(root.left);</span><br><span class="line">    <span class="type">int</span> r=largestBSTSubtree(root.right);</span><br><span class="line">    <span class="type">int</span> res=Math.max(l,r);</span><br><span class="line">    <span class="keyword">if</span>(valid(root))&#123;</span><br><span class="line">        res=Math.max(res,size(root.left)+size(root.right)+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">valid</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(root.left!=<span class="literal">null</span> &amp;&amp; max(root.left)&gt;=root.val)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">if</span>(root.right!=<span class="literal">null</span> &amp;&amp; min(root.right)&lt;=root.val)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="type">boolean</span> l=valid(root.left);</span><br><span class="line">     <span class="type">boolean</span> r=valid(root.right);</span><br><span class="line">     <span class="keyword">return</span> l&amp;&amp;r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">size</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(sizeMap.containsKey(root))&#123;</span><br><span class="line">         <span class="keyword">return</span> sizeMap.get(root);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="type">int</span> l=size(root.left);</span><br><span class="line">     <span class="type">int</span> r=size(root.right);</span><br><span class="line">     <span class="type">int</span> res=l+r+<span class="number">1</span>;</span><br><span class="line">     sizeMap.put(root,res);</span><br><span class="line">     <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(maxMap.containsKey(root))&#123;</span><br><span class="line">        <span class="keyword">return</span> maxMap.get(root);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> root.val;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="type">int</span> res=root.val;</span><br><span class="line">     <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">         res=Math.max(res,max(root.left));</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">        res=Math.max(res,max(root.right));</span><br><span class="line">    &#125;</span><br><span class="line">    maxMap.put(root,res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">min</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(minMap.containsKey(root))&#123;</span><br><span class="line">        <span class="keyword">return</span> minMap.get(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> root.val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=root.val;</span><br><span class="line">    <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">        res=Math.min(res,min(root.left));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">        res=Math.min(res,min(root.right));</span><br><span class="line">    &#125;</span><br><span class="line">    minMap.put(root,res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="364-Nested-List-Weight-Sum-II"><a href="#364-Nested-List-Weight-Sum-II" class="headerlink" title="364. Nested List Weight Sum II"></a>364. Nested List Weight Sum II</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> maxDepth=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">depthSumInverse</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(NestedInteger i : nestedList)&#123;</span><br><span class="line">        maxDepth=Math.max(maxDepth,getMax(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dfs(nestedList,maxDepth);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">dfs</span><span class="params">(List&lt;NestedInteger&gt; nestedList, <span class="type">int</span> depth)</span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(NestedInteger i : nestedList)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i.isInteger())&#123;</span><br><span class="line">            res+=i.getInteger()*depth;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res+=dfs(i.getList(),depth-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getMax</span><span class="params">(NestedInteger i)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i.isInteger())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> depth=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(NestedInteger next : i.getList())&#123;</span><br><span class="line">        depth=Math.max(depth,getMax(next)+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> depth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="366-Find-Leaves-of-Binary-Tree"><a href="#366-Find-Leaves-of-Binary-Tree" class="headerlink" title="366. Find Leaves of Binary Tree"></a>366. Find Leaves of Binary Tree</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TreeMap&lt;Integer,List&lt;Integer&gt;&gt; map;</span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">findLeaves</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    map=<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(map.values());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">dfs</span><span class="params">(TreeNode cur)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l=dfs(cur.left);</span><br><span class="line">    <span class="type">int</span> r=dfs(cur.right);</span><br><span class="line">    <span class="type">int</span> depth=Math.max(l,r)+<span class="number">1</span>;</span><br><span class="line">    map.putIfAbsent(depth,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">    map.get(depth).add(cur.val);</span><br><span class="line">    <span class="keyword">return</span> depth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="386-Lexicographical-Numbers"><a href="#386-Lexicographical-Numbers" class="headerlink" title="386. Lexicographical Numbers"></a>386. Lexicographical Numbers</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">lexicalOrder</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        dfs(i,n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> cur, <span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur&gt;n)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res.add(cur);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(cur*<span class="number">10</span>+i&lt;=n)&#123;</span><br><span class="line">            dfs(cur*<span class="number">10</span>+i,n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="399-Evaluate-Division"><a href="#399-Evaluate-Division" class="headerlink" title="399. Evaluate Division"></a>399. Evaluate Division</h2><h3 id="Approach-1-Path-Search-in-Graph"><a href="#Approach-1-Path-Search-in-Graph" class="headerlink" title="Approach 1: Path Search in Graph"></a>Approach 1: Path Search in Graph</h3><p>注意：</p>
<ol>
<li><p>有向图找路径，用visited去重</p>
</li>
<li><p>只要找到一条路就可返回</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Map&lt;String,Double&gt;&gt; graph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span>[] calcEquation(List&lt;List&lt;String&gt;&gt; equations, <span class="type">double</span>[] values, List&lt;List&lt;String&gt;&gt; queries) &#123;</span><br><span class="line">    build(equations,values);</span><br><span class="line">    <span class="type">double</span>[] res=<span class="keyword">new</span> <span class="title class_">double</span>[queries.size()];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; queries.size(); i++) &#123;</span><br><span class="line">        String start=queries.get(i).get(<span class="number">0</span>);</span><br><span class="line">        String end=queries.get(i).get(<span class="number">1</span>);</span><br><span class="line">        res[i]=dfs(start,end,<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">dfs</span><span class="params">(String cur, String end, Set&lt;String&gt; visited)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!graph.containsKey(cur))&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cur.equals(end))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    visited.add(cur);</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Double&gt; pair : graph.get(cur).entrySet()) &#123;</span><br><span class="line">        String next=pair.getKey();</span><br><span class="line">        <span class="keyword">if</span>(visited.contains(next))&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> value=pair.getValue();</span><br><span class="line">        <span class="type">double</span> res=dfs(next,end,visited);</span><br><span class="line">        <span class="keyword">if</span>(res!=-<span class="number">1.0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res*value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    visited.remove(cur);</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">build</span><span class="params">(List&lt;List&lt;String&gt;&gt; equations, <span class="type">double</span>[] values)</span>&#123;</span><br><span class="line">    graph=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> n=equations.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        String dividend=equations.get(i).get(<span class="number">0</span>);</span><br><span class="line">        String divisor=equations.get(i).get(<span class="number">1</span>);</span><br><span class="line">        <span class="type">double</span> value=values[i];</span><br><span class="line">        graph.putIfAbsent(dividend,<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;());</span><br><span class="line">        graph.putIfAbsent(divisor,<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;());</span><br><span class="line">        graph.get(dividend).put(divisor,value);</span><br><span class="line">        graph.get(divisor).put(dividend,<span class="number">1</span>/value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Approach-2-Union-Find-with-Weights"><a href="#Approach-2-Union-Find-with-Weights" class="headerlink" title="Approach 2: Union-Find with Weights"></a>Approach 2: Union-Find with Weights</h3><p>带权并查集</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">double</span>[] calcEquation(List&lt;List&lt;String&gt;&gt; equations, <span class="type">double</span>[] values, List&lt;List&lt;String&gt;&gt; queries) &#123;</span><br><span class="line">    HashSet&lt;String&gt; sHashSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (List&lt;String&gt; List : equations)</span><br><span class="line">      <span class="keyword">for</span> (String s : List)</span><br><span class="line">        sHashSet.add(s);<span class="comment">// 初始化</span></span><br><span class="line">    <span class="type">UnionFind</span> <span class="variable">uf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnionFind</span>(sHashSet);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">      List&lt;String&gt; list = equations.get(i);</span><br><span class="line">      uf.union(list.get(<span class="number">0</span>), list.get(<span class="number">1</span>), values[i]);<span class="comment">// 合并</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span>[] ans = <span class="keyword">new</span> <span class="title class_">double</span>[queries.size()];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; queries.size(); i++) &#123;</span><br><span class="line">      List&lt;String&gt; list = queries.get(i);</span><br><span class="line">      <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> list.get(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (uf.find(s1) == <span class="literal">null</span> || uf.find(s2) == <span class="literal">null</span>)</span><br><span class="line">        ans[i] = -<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (uf.find(s1).equals(uf.find(s2))) &#123;</span><br><span class="line">        ans[i] = uf.valueMap.get(s1) / uf.valueMap.get(s2);</span><br><span class="line">      &#125; <span class="keyword">else</span></span><br><span class="line">        ans[i] = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">UnionFind</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; parent; <span class="comment">// 记录每个节点的父节点</span></span><br><span class="line">    HashMap&lt;String, Double&gt; valueMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();<span class="comment">// 记录每个string对应的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UnionFind</span><span class="params">(HashSet&lt;String&gt; StringSet)</span> &#123;</span><br><span class="line">      parent = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (String s : StringSet) &#123; <span class="comment">// 初始化父节点为自身</span></span><br><span class="line">        parent.put(s, s);</span><br><span class="line">        valueMap.put(s, <span class="number">1.0</span>);<span class="comment">// 初始赋权均为0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">find</span><span class="params">(String x)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!parent.containsKey(x)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">String</span> <span class="variable">root</span> <span class="operator">=</span> x;</span><br><span class="line">      <span class="type">double</span> <span class="variable">base</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span> (!root.equals(parent.get(root))) &#123;<span class="comment">// 先从x找到根节点，并更新base为到根节点的权重</span></span><br><span class="line">        root = parent.get(root);</span><br><span class="line">        base *= valueMap.get(root);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> (!x.equals(root)) &#123;<span class="comment">// 更新从x到根节点路径上节点的权重</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fatherString</span> <span class="operator">=</span> parent.get(x);</span><br><span class="line">        valueMap.put(x, valueMap.get(x) * base);</span><br><span class="line">        base /= valueMap.get(fatherString);</span><br><span class="line">        parent.put(x, root);<span class="comment">// 压缩路径</span></span><br><span class="line">        x = fatherString;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(String x, String y, Double value)</span> &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">rootX</span> <span class="operator">=</span> find(x);</span><br><span class="line">      <span class="type">String</span> <span class="variable">rootY</span> <span class="operator">=</span> find(y);</span><br><span class="line">      <span class="keyword">if</span> (rootX.equals(rootY)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      parent.put(rootX, rootY);</span><br><span class="line">      valueMap.put(rootX, value * valueMap.get(y) / valueMap.get(x));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="417-Pacific-Atlantic-Water-Flow"><a href="#417-Pacific-Atlantic-Water-Flow" class="headerlink" title="417. Pacific Atlantic Water Flow"></a>417. Pacific Atlantic Water Flow</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> row;</span><br><span class="line"><span class="type">int</span> col;</span><br><span class="line"><span class="type">int</span>[][] heights;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">pacificAtlantic</span><span class="params">(<span class="type">int</span>[][] heights)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.heights=heights;</span><br><span class="line">    row=heights.length;</span><br><span class="line">    col=heights[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">boolean</span>[][] pacific=<span class="keyword">new</span> <span class="title class_">boolean</span>[row][col];</span><br><span class="line">    <span class="type">boolean</span>[][] atlantic=<span class="keyword">new</span> <span class="title class_">boolean</span>[row][col];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        dfs(i,<span class="number">0</span>,heights[i][<span class="number">0</span>],pacific);</span><br><span class="line">        dfs(i,col-<span class="number">1</span>,heights[i][col-<span class="number">1</span>],atlantic);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">        dfs(<span class="number">0</span>,j,heights[<span class="number">0</span>][j],pacific);</span><br><span class="line">        dfs(row-<span class="number">1</span>,j,heights[row-<span class="number">1</span>][j],atlantic);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(pacific[i][j] &amp;&amp; atlantic[i][j])&#123;</span><br><span class="line">                res.add(Arrays.asList(i,j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> preHeight, <span class="type">boolean</span>[][] visited)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=row || j&lt;<span class="number">0</span> || j&gt;=col </span><br><span class="line">            || visited[i][j] || heights[i][j]&lt;preHeight)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    visited[i][j]=<span class="literal">true</span>;</span><br><span class="line">    dfs(i+<span class="number">1</span>,j,heights[i][j],visited);</span><br><span class="line">    dfs(i-<span class="number">1</span>,j,heights[i][j],visited);</span><br><span class="line">    dfs(i,j+<span class="number">1</span>,heights[i][j],visited);</span><br><span class="line">    dfs(i,j-<span class="number">1</span>,heights[i][j],visited);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="426-Convert-Binary-Search-Tree-to-Sorted-Doubly-Linked-List"><a href="#426-Convert-Binary-Search-Tree-to-Sorted-Doubly-Linked-List" class="headerlink" title="426. Convert Binary Search Tree to Sorted Doubly Linked List"></a>426. Convert Binary Search Tree to Sorted Doubly Linked List</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Node first;</span><br><span class="line">Node pre;</span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">treeToDoublyList</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root);</span><br><span class="line">    first.left=pre;</span><br><span class="line">    pre.right=first;</span><br><span class="line">    <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(Node cur)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(cur.left);</span><br><span class="line">    <span class="keyword">if</span>(first==<span class="literal">null</span>)&#123;</span><br><span class="line">        first=cur;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        pre.right=cur;</span><br><span class="line">        cur.left=pre;</span><br><span class="line">    &#125;</span><br><span class="line">    pre=cur;</span><br><span class="line">    dfs(cur.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="430-Flatten-a-Multilevel-Doubly-Linked-List"><a href="#430-Flatten-a-Multilevel-Doubly-Linked-List" class="headerlink" title="430. Flatten a Multilevel Doubly Linked List"></a>430. Flatten a Multilevel Doubly Linked List</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Node pre;</span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">flatten</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">    dfs(head);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(Node cur)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pre=cur;</span><br><span class="line">    <span class="keyword">if</span>(cur.child==<span class="literal">null</span>)&#123;</span><br><span class="line">        dfs(cur.next);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        Node next=cur.next;</span><br><span class="line">        Node child=cur.child;</span><br><span class="line">        dfs(child);</span><br><span class="line">        cur.next=child;</span><br><span class="line">        cur.child=<span class="literal">null</span>;</span><br><span class="line">        child.prev=cur;</span><br><span class="line">        pre.next=next;</span><br><span class="line">        <span class="keyword">if</span>(next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            next.prev=pre;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="437-Path-Sum-III"><a href="#437-Path-Sum-III" class="headerlink" title="437. Path Sum III"></a>437. Path Sum III</h2><h3 id="法一：丑陋的brute-force"><a href="#法一：丑陋的brute-force" class="headerlink" title="法一：丑陋的brute force"></a>法一：丑陋的brute force</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> target;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pathSum</span><span class="params">(TreeNode root, <span class="type">int</span> targetSum)</span> &#123;</span><br><span class="line">    target=targetSum;</span><br><span class="line">    dfs(root,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode node, List&lt;Long&gt; sums)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    sums.add((<span class="type">long</span>) <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sums.size(); i++) &#123;</span><br><span class="line">        sums.set(i,sums.get(i)+node.val);</span><br><span class="line">        <span class="keyword">if</span>(sums.get(i)==target)&#123;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Long&gt; clone=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(sums);</span><br><span class="line">    dfs(node.left,sums);</span><br><span class="line">    dfs(node.right,clone);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：优雅的brute-force"><a href="#法二：优雅的brute-force" class="headerlink" title="法二：优雅的brute force"></a>法二：优雅的brute force</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pathSum</span><span class="params">(TreeNode root, <span class="type">long</span> sum)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> pathSumFrom(root, sum) + pathSum(root.left, sum) + pathSum(root.right, sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">pathSumFrom</span><span class="params">(TreeNode node, <span class="type">long</span> sum)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (node.val == sum ? <span class="number">1</span> : <span class="number">0</span>) </span><br><span class="line">        + pathSumFrom(node.left, sum - node.val) + pathSumFrom(node.right, sum - node.val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="490-The-Maze"><a href="#490-The-Maze" class="headerlink" title="490. The Maze"></a>490. The Maze</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> row;</span><br><span class="line"><span class="type">int</span> col;</span><br><span class="line"><span class="type">int</span>[][] maze;</span><br><span class="line"><span class="type">int</span>[][] dirs=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPath</span><span class="params">(<span class="type">int</span>[][] maze, <span class="type">int</span>[] start, <span class="type">int</span>[] destination)</span> &#123;</span><br><span class="line">    row=maze.length;</span><br><span class="line">    col=maze[<span class="number">0</span>].length;</span><br><span class="line">    <span class="built_in">this</span>.maze=maze;</span><br><span class="line">    <span class="keyword">return</span> dfs(start[<span class="number">0</span>],start[<span class="number">1</span>],destination,<span class="keyword">new</span> <span class="title class_">boolean</span>[row][col]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span>[] end,<span class="type">boolean</span>[][] visited)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==end[<span class="number">0</span>] &amp;&amp; j==end[<span class="number">1</span>])&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    visited[i][j]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] dir : dirs) &#123;</span><br><span class="line">        <span class="type">int</span> x=i+dir[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> y=j+dir[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span>(x&gt;=<span class="number">0</span> &amp;&amp; x&lt;row &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;col &amp;&amp; maze[x][y]==<span class="number">0</span>)&#123;</span><br><span class="line">            x+=dir[<span class="number">0</span>];</span><br><span class="line">            y+=dir[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!visited[x-dir[<span class="number">0</span>]][y-dir[<span class="number">1</span>]])&#123;</span><br><span class="line">            <span class="keyword">if</span>(dfs(x-dir[<span class="number">0</span>],y-dir[<span class="number">1</span>],end,visited))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer,List&lt;Integer&gt;&gt; grid;</span><br><span class="line">List&lt;Integer&gt; list;</span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">killProcess</span><span class="params">(List&lt;Integer&gt; pid, List&lt;Integer&gt; ppid, <span class="type">int</span> kill)</span> &#123;</span><br><span class="line">    grid=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> n=pid.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> to=pid.get(i);</span><br><span class="line">        <span class="type">int</span> from=ppid.get(i);</span><br><span class="line">        grid.putIfAbsent(from,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        grid.get(from).add(to);</span><br><span class="line">    &#125;</span><br><span class="line">    list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(kill);</span><br><span class="line">    dfs(kill);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> cur)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(grid.containsKey(cur))&#123;</span><br><span class="line">        <span class="keyword">for</span> (Integer next : grid.get(cur)) &#123;</span><br><span class="line">            <span class="comment">//不存在环，无需判断contains</span></span><br><span class="line">            <span class="comment">//list.contains低效，加了会超时</span></span><br><span class="line">                list.add(next);</span><br><span class="line">                dfs(next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>LRU&amp;LFU</title>
    <url>/2022/06/14/LRU&amp;&amp;LFU/</url>
    <content><![CDATA[<h1 id="LRU-amp-LFU算法"><a href="#LRU-amp-LFU算法" class="headerlink" title="LRU&amp;LFU算法"></a>LRU&amp;LFU算法</h1><h2 id="146-LRU-Cache"><a href="#146-LRU-Cache" class="headerlink" title="146. LRU Cache"></a><a href="https://leetcode.cn/problems/lru-cache/">146. LRU Cache</a></h2><p><strong>每次淘汰那些最久没被使用的数据</strong></p>
<p>LRU 缓存淘汰算法就是一种常用策略。LRU 的全称是 Least Recently Used，也就是说我们认为最近使用过的数据应该是是「有用的」，很久都没用过的数据应该是无用的，内存满了就优先删那些很久没用过的数据。</p>
<p>要让 <code>put</code> 和 <code>get</code> 方法的时间复杂度为 O(1)，我们可以总结出 <code>cache</code> 这个数据结构必要的条件：</p>
<p>1、显然 <code>cache</code> 中的元素必须有时序，以区分最近使用的和久未使用的数据，当容量满了之后要删除最久未使用的那个元素腾位置。</p>
<p>2、我们要在 <code>cache</code> 中快速找某个 <code>key</code> 是否已存在并得到对应的 <code>val</code>；</p>
<p>3、每次访问 <code>cache</code> 中的某个 <code>key</code>，需要将这个元素变为最近使用的，也就是说 <code>cache</code> 要支持在任意位置快速插入和删除元素。</p>
<p>那么，什么数据结构同时符合上述条件呢？哈希表查找快，但是数据无固定顺序；链表有顺序之分，插入删除快，但是查找慢。所以结合一下，形成一种新的数据结构：哈希链表 <code>LinkedHashMap</code>。</p>
<p>LRU 缓存算法的核心数据结构就是哈希链表，双向链表和哈希表的结合体。</p>
<p>若要自己实现，则需要<code>hashmap</code> 和 双链表</p>
<p>尾插 + hashmap，保证迭代顺序就是插入顺序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line"></span><br><span class="line">    LinkedHashMap&lt;Integer,Integer&gt; cache;</span><br><span class="line">    <span class="type">int</span> cap;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        cache=<span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        cap=capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> val=cache.getOrDefault(key,-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(val!=-<span class="number">1</span>)&#123;</span><br><span class="line">            makeRecently(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(cache.containsKey(key))&#123;</span><br><span class="line">            cache.put(key,value);</span><br><span class="line">            makeRecently(key);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cache.put(key,value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cache.size()&gt;cap)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> cache.keySet().iterator().next();</span><br><span class="line">            cache.remove(first);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">makeRecently</span><span class="params">(<span class="type">int</span> key)</span>&#123;</span><br><span class="line">        <span class="type">int</span> val=cache.get(key);</span><br><span class="line">        cache.remove(key);</span><br><span class="line">        cache.put(key,val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="460-LFU-Cache"><a href="#460-LFU-Cache" class="headerlink" title="460. LFU Cache"></a><a href="https://leetcode.cn/problems/lfu-cache/">460. LFU Cache</a></h2><p>LRU 算法的核心数据结构是使用哈希链表 <code>LinkedHashMap</code>，首先借助链表的有序性使得链表元素维持插入顺序，同时借助哈希映射的快速访问能力使得我们可以在 O(1) 时间访问链表的任意元素。</p>
<p>LFU 算法的淘汰策略是 Least Frequently Used，也就是<strong>每次淘汰那些使用次数最少的数据</strong>。</p>
<p>淘汰访问频次最低的数据，<strong>如果访问频次最低的数据有多条，需要淘汰最旧的数据</strong></p>
<p><code>LinkedHashSet</code> 顾名思义，是链表和哈希集合的结合体。链表不能快速访问链表节点，但是插入元素具有时序；哈希集合中的元素无序，但是可以对元素进行快速的访问和删除。</p>
<p>那么，它俩结合起来就兼具了哈希集合和链表的特性，既可以在 O(1) 时间内访问或删除其中的元素，又可以保持插入的时序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LFUCache</span> &#123;</span><br><span class="line">    <span class="comment">// key 到 val 的映射，我们后文称为 KV 表</span></span><br><span class="line">    HashMap&lt;Integer, Integer&gt; keyToVal;</span><br><span class="line">    <span class="comment">// key 到 freq 的映射，我们后文称为 KF 表</span></span><br><span class="line">    HashMap&lt;Integer, Integer&gt; keyToFreq;</span><br><span class="line">    <span class="comment">// freq 到 key 列表的映射，我们后文称为 FK 表</span></span><br><span class="line">    HashMap&lt;Integer, LinkedHashSet&lt;Integer&gt;&gt; freqToKeys;</span><br><span class="line">    <span class="comment">// 记录最小的频次</span></span><br><span class="line">    <span class="type">int</span> minFreq;</span><br><span class="line">    <span class="comment">// 记录 LFU 缓存的最大容量</span></span><br><span class="line">    <span class="type">int</span> cap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LFUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        keyToVal = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        keyToFreq = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        freqToKeys = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.cap = capacity;</span><br><span class="line">        <span class="built_in">this</span>.minFreq = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> val)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>注意：测试用例有capacity为0的情况，需要考虑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LFUCache</span> &#123;</span><br><span class="line"></span><br><span class="line">    HashMap&lt;Integer,Integer&gt; keyValue;</span><br><span class="line">    HashMap&lt;Integer,Integer&gt; keyFreq;</span><br><span class="line">    HashMap&lt;Integer, LinkedHashSet&lt;Integer&gt;&gt; freqKey;</span><br><span class="line">    <span class="type">int</span> minFreq;</span><br><span class="line">    <span class="type">int</span> cap;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LFUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        keyValue=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        keyFreq=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        freqKey=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        minFreq=<span class="number">0</span>;</span><br><span class="line">        cap=capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(cap==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> keyValue.getOrDefault(key,-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(val!=-<span class="number">1</span>)&#123;</span><br><span class="line">            increaseFreq(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(cap==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(keyValue.containsKey(key))&#123;</span><br><span class="line">            keyValue.put(key,value);</span><br><span class="line">            increaseFreq(key);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//new key</span></span><br><span class="line">            <span class="keyword">if</span>(keyValue.size()&gt;=cap)&#123;</span><br><span class="line">                removeLeastFreq();</span><br><span class="line">            &#125;</span><br><span class="line">            keyValue.put(key,value);</span><br><span class="line">            keyFreq.put(key,<span class="number">1</span>);</span><br><span class="line">            freqKey.putIfAbsent(<span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;());</span><br><span class="line">            LinkedHashSet&lt;Integer&gt; set = freqKey.get(<span class="number">1</span>);</span><br><span class="line">            set.add(key);</span><br><span class="line">            minFreq=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removeLeastFreq</span><span class="params">()</span>&#123;</span><br><span class="line">        LinkedHashSet&lt;Integer&gt; set = freqKey.get(minFreq);</span><br><span class="line">        <span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> set.iterator().next();</span><br><span class="line">        set.remove(first);</span><br><span class="line">        keyValue.remove(first);</span><br><span class="line">        keyFreq.remove(first);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">increaseFreq</span><span class="params">(<span class="type">int</span> key)</span>&#123;</span><br><span class="line">        <span class="type">int</span> freq=keyFreq.get(key);</span><br><span class="line">        keyFreq.put(key,freq+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        freqKey.putIfAbsent(freq+<span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;());</span><br><span class="line">        LinkedHashSet&lt;Integer&gt; cur = freqKey.get(freq + <span class="number">1</span>);</span><br><span class="line">        cur.add(key);</span><br><span class="line"></span><br><span class="line">        LinkedHashSet&lt;Integer&gt; pre = freqKey.get(freq);</span><br><span class="line">        pre.remove(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//此时可以确定freq+1非空，因为刚刚更新(key,freq+1)</span></span><br><span class="line">        <span class="keyword">if</span>(pre.isEmpty())&#123;</span><br><span class="line">            freqKey.remove(freq);</span><br><span class="line">            <span class="keyword">if</span>(freq==minFreq)&#123;</span><br><span class="line">                minFreq++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>JAVA杂记</title>
    <url>/2022/10/03/JAVA%E6%9D%82%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="JAVA-Q-amp-A"><a href="#JAVA-Q-amp-A" class="headerlink" title="JAVA Q&amp;A"></a>JAVA Q&amp;A</h1><h2 id="1-JAVA一个文件写多个类-同级类-规则和注意点"><a href="#1-JAVA一个文件写多个类-同级类-规则和注意点" class="headerlink" title="1. JAVA一个文件写多个类 ( 同级类 ) 规则和注意点"></a>1. JAVA一个文件写多个类 ( 同级类 ) 规则和注意点</h2><ul>
<li>在一个.java文件中可以有多个同级类, 其修饰符<strong>只可以public／abstract／final／和无修饰符</strong></li>
<li><strong>public修饰的只能有一个</strong>,且必须要与文件名相同；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//因为jvm虚拟机为了提高查找类的速度，使用import语句导入的时候，只会导入对应空间的文件名所对应的class文件，而public文件是大家都要使用的，因此直接导入这个类名对应的class文件即可。</span></span><br></pre></td></tr></table></figure>



<ul>
<li><p>若<strong>没有public</strong>的则可与文件名不同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Java编译器在编译的时候，如果整个Java文件（编译单元）都没有public类（对外的公开接口类），类加载器子就无需从这方面直接去加载该编译单元产生的所有的字节码文件（.class文件），那么也就是无需去寻找编译后字节码文件存放位置。而类名和文件名一致是为了方便虚拟机在相应的路径中找到相应的类所对应的字节码文件。所以在没有public类的Java文件中，文件名和类名都没什么联系。</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>该文件同级的类之间可以互相调用，但是除了public的类，其他<strong>不能够在其他文件调用</strong></p>
</li>
<li><p>在一个.java文件中由类／Enum／接口／Annotation其中<strong>至少一个</strong>类型组成。单独一个方法／变量不能独自存在与文件中，所以公用方法的封装也是做成类方法。原因是java是类加载机制，需要编译一个java文件成多个class文件，当类来使用。</p>
</li>
<li><p>用javac 编译这个.java文件的时候，它会给<strong>每一个类</strong>生成一个.class文件</p>
</li>
</ul>
<h2 id="2-抽象类可以有constructor吗？"><a href="#2-抽象类可以有constructor吗？" class="headerlink" title="2. 抽象类可以有constructor吗？"></a>2. 抽象类可以有constructor吗？</h2><p><em><strong>Yes</strong> !</em> <strong><em>*是的*</em> ！</strong> <em><strong>Abstract classes can have constructors</strong> !</em> <strong><em>*抽象类可以有构造函数*</em> ！</strong></p>
<p><em>Yes, when we define a class to be an Abstract Class it cannot be instantiated but that does not mean an Abstract class cannot have a constructor.</em> <strong>是的，当我们将类定义为抽象类时，它无法实例化，但这并不意味着抽象类不能具有构造函数。</strong> <em>Each abstract class must have a concrete subclass which will implement the abstract methods of that abstract class.</em> <strong>每个抽象类必须有一个具体的子类，它将实现该抽象类的抽象方法</strong></p>
<p><em>When we create an object of any subclass all the constructors in the corresponding inheritance tree are invoked in the top to bottom approach.</em> <strong>当我们创建任何子类的对象时，相应的继承树中的所有构造函数都是从上到下的方法调用的。</strong> <em>The same case applies to abstract classes.</em> <strong>同样的情况适用于抽象类。</strong> <em>Though we cannot create an object of an abstract class, when we create an object of a class which is concrete and subclass of the abstract class, the constructor of the abstract class is automatically invoked.</em> <strong>虽然我们不能创建抽象类的对象，但是当我们创建一个类的对象时，它是抽象类的具体和子类，抽象类的构造函数会被自动调用。</strong> <em>Hence we can have a constructor in abstract classes.</em> <strong>因此，我们可以在抽象类中使用构造函数。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">TestEngine</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">private</span> String engineId;</span><br><span class="line">   <span class="keyword">private</span> String engineName;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">TestEngine</span><span class="params">(String engineId , String engineName)</span></span><br><span class="line">   &#123;</span><br><span class="line">     <span class="built_in">this</span>.engineId = engineId;</span><br><span class="line">     <span class="built_in">this</span>.engineName = engineName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//public gettors and settors</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">scheduleTest</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaTestEngine</span> <span class="keyword">extends</span> <span class="title class_">TestEngine</span></span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> String typeName;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">JavaTestEngine</span><span class="params">(String engineId , String engineName , String typeName)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">super</span>(engineId , engineName);</span><br><span class="line">      <span class="built_in">this</span>.typeName = typeName;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scheduleTest</span><span class="params">()</span></span><br><span class="line">   &#123;</span><br><span class="line">     <span class="comment">//do Stuff</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="3-JAVA-inner-class"><a href="#3-JAVA-inner-class" class="headerlink" title="3.JAVA inner class"></a>3.JAVA inner class</h2><p>inside another class or method</p>
<ul>
<li><p>成员内部类</p>
</li>
<li><p>局部内部类</p>
</li>
<li><p>匿名内部类</p>
</li>
<li><p>静态内部类</p>
</li>
</ul>
<h2 id="4-ragged-array"><a href="#4-ragged-array" class="headerlink" title="4.ragged array"></a>4.ragged array</h2><p>java 2d array并不是真的开辟一个二维矩阵，只是指定行数，列数非必须</p>
<p>每行指向一个array object，这些array的长度可以不等</p>
<h2 id="5-JAVA-反射"><a href="#5-JAVA-反射" class="headerlink" title="5.JAVA 反射"></a>5.JAVA 反射</h2><h3 id="基础理论"><a href="#基础理论" class="headerlink" title="基础理论"></a><strong>基础理论</strong></h3><ol>
<li>A类 -&gt; A.class字节码文件 -&gt; 加载到JVM后的A字节码文件对象(Class对象)</li>
<li>A的Class对象 -&gt; A的实例</li>
<li>Class是反射的基础</li>
<li>当new一个新对象或者引用静态成员变量等时机时，JVM类加载器系统会将对应Class对象加载到JVM中，然后JVM根据Class对象创建实例对象或者提供静态变量的引用值。</li>
<li>每个类，无论创建多少个实例，在JVM中都对应同一个Class对象(类被不同的类加载器加载除外)。</li>
</ol>
<h3 id="主动引用"><a href="#主动引用" class="headerlink" title="主动引用"></a>主动引用</h3><p>对于字节码文件的加载时机，《Java虚拟机规范》中并没有进行强制约束，这点可以交给虚拟机的具体实现来自由把握。但是对于初始化阶段，《Java虚拟机规范》则是严格规定了<code>有且只有</code>六种情况必须立即对类进行“初始化”（而加载、验证、准备自然需要在此之前开始）：</p>
<ol>
<li>遇到new、getstatic、putstatic或invokestatic这四条字节码指令时，如果类型没有进行过初始化，则需要先触发其初始化阶段。<ul>
<li>使用new关键字实例化对象的时候。</li>
<li>读取或设置一个类型的静态字段（被final修饰、已在编译期把结果放入常量池的静态字段除外）的时候。</li>
<li>调用一个类型的静态方法的时候。</li>
</ul>
</li>
<li>使用java.lang.reflect包的方法对类型进行反射调用的时候，如果类型没有进行过初始化，则需要先触发其初始化。</li>
<li>当初始化类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。</li>
<li>当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会先初始化这个主类。</li>
<li>当使用JDK 7新加入的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果为REF_getStatic、REF_putStatic、REF_invokeStatic、REF_newInvokeSpecial四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化。</li>
<li>当一个接口中定义了JDK 8新加入的默认方法（被default关键字修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。</li>
</ol>
<h3 id="被动引用"><a href="#被动引用" class="headerlink" title="被动引用"></a>被动引用</h3><p>这六种场景中的行为称为对一个类型进行<code>主动引用</code>。除此之外，所有引用类型的方式都不会触发初始化，称为<code>被动引用</code>。</p>
<p>被动引用<strong>不会导致初始化，但往往也是需要加载的</strong>，我们举一些例子：</p>
<ol>
<li><p>使用类加载器的loadClass()方法，不做类的初始化工作</p>
</li>
<li><p>类型.class<strong>字面量</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myspring.service.impl;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化A类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myspring.service.impl;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoadTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> A.class;</span><br><span class="line">        System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>子类访问父类的静态字段(不会导致子类初始化，会导致父类初始化)</p>
</li>
<li><p>通过数组定义来引用类，不会触发此类的初始化</p>
</li>
<li><p>常量在编译阶段会存入调用类的常量池中，本质上没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化</p>
</li>
</ol>
<p>对于HotSpot虚拟机来说，可通过-XX：+TraceClassLoading参数观察到类是否会加载。而初始化时执行的是<code>&lt;clinit&gt;()方法</code>，我们可以编写静态代码块来验证此类是否初始化了。</p>
<blockquote>
<p><code>初始化阶段就是执行类构造器&lt;clinit&gt;()方法的过程</code>。<code>&lt;clinit&gt;()并不是程序员在Java代码中直接编写的方法，它是Javac编译器的自动生成物</code>。<code>&lt;clinit&gt;()方法</code>是由编译器自动收集类中的所有<code>类变量</code>的赋值动作和<code>静态语句块（static&#123;&#125;块）</code>中的语句<code>合并</code>产生的，<code>编译器收集的顺序是由语句在源文件中出现的顺序决定的</code>。</p>
</blockquote>
<h3 id="如何获取一个Class对象"><a href="#如何获取一个Class对象" class="headerlink" title="如何获取一个Class对象"></a>如何获取一个Class对象</h3><p>每个.class都是Class类的实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTestBean</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">testStr</span> <span class="operator">=</span> <span class="string">&quot;testStr&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTestStr</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> testStr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTestStr</span><span class="params">(String testStr)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.testStr = testStr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="对象-getClass"><a href="#对象-getClass" class="headerlink" title="对象.getClass()"></a><strong>对象.getClass()</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">MyTestBean</span> <span class="variable">myTestBean1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyTestBean</span>();</span><br><span class="line">    <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> myTestBean1.getClass();</span><br><span class="line">    System.out.print(<span class="string">&quot;获得的Class对象:&quot;</span>);</span><br><span class="line">    System.out.println(c1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">获得的Class对象:<span class="keyword">class</span> <span class="title class_">com</span>.myspring.service.impl.MyTestBean</span><br></pre></td></tr></table></figure>



<h4 id="类型-class字面量"><a href="#类型-class字面量" class="headerlink" title="类型.class字面量"></a><strong>类型.class字面量</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> MyTestBean.class;</span><br><span class="line">    System.out.print(<span class="string">&quot;获得的Class对象:&quot;</span>);</span><br><span class="line">    System.out.println(c1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Class类的forName方法"><a href="#Class类的forName方法" class="headerlink" title="Class类的forName方法"></a><strong>Class类的forName方法</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.myspring.service.impl.MyTestBean&quot;</span>);</span><br><span class="line">    System.out.print(<span class="string">&quot;获得的Class对象:&quot;</span>);</span><br><span class="line">    System.out.println(c1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="类加载器的loadClass方法"><a href="#类加载器的loadClass方法" class="headerlink" title="类加载器的loadClass方法"></a><strong>类加载器的loadClass方法</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().loadClass(<span class="string">&quot;com.myspring.service.impl.MyTestBean&quot;</span>);</span><br><span class="line">    System.out.print(<span class="string">&quot;获得的Class对象:&quot;</span>);</span><br><span class="line">    System.out.println(c1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Class类源码"><a href="#Class类源码" class="headerlink" title="Class类源码"></a>Class类源码</h3><p>简而言之，我们先获取到类型A的Class对象，通过Class对象的newInstance方法可以得到A的实例。通过Class对象可以获取到Constructor对象，进一步可以使用Constructor对象来得到A的实例。通过Class对象可以获取到Method对象，通过Method的invoke方法我们可以调用一些方法。通过Class对象可以获取到Field对象，我们可以对这个实例的一些字段进行赋值取值操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 使用给定的字符串名称返回与类或接口关联的Class对象。 调用此方法等效于：Class.forName(className, true, currentLoader)currentLoader表示当前类的定义类加载器。</span></span><br><span class="line"><span class="comment">* 调用forName“X”）会导致初始化名为X的类。</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>      className   所需类的完全限定名称。</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>     具有指定名称的类的Class对象。</span></span><br><span class="line"><span class="comment">* ......</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; forName(String className) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line"><span class="keyword">return</span> forName0(className, <span class="literal">true</span>, ClassLoader.getClassLoader(caller), caller);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 使用给定的类加载器返回与具有给定字符串名称的类或接口关联的Class对象。</span></span><br><span class="line"><span class="comment">* 给定类或接口的完全限定名称（采用getName返回的相同格式），此方法尝试查找，加载和链接该类或接口。指定的类加载器用于加载类或接口。  </span></span><br><span class="line"><span class="comment">* 如果参数loader为null，则通过引导类加载器加载该类。仅当initialize参数为true且之前尚未初始化时，才初始化该类。</span></span><br><span class="line"><span class="comment">* 如果name表示原始类型或void，则将尝试在名称为name的未命名包中定位用户定义的类。 因此，该方法不能用于获取表示原始类型或void的任何Class对象。</span></span><br><span class="line"><span class="comment">* 如果name表示数组类，则该数组类的组件类型已加载但未初始化。</span></span><br><span class="line"><span class="comment">* 请注意，此方法会引发与加载，链接或初始化有关的错误</span></span><br><span class="line"><span class="comment">* 请注意，此方法不会检查其调用者是否可以访问所请求的类。</span></span><br><span class="line"><span class="comment">* 如果loader为null，并且存在安全管理器，并且调用方的类加载器不为null，则此方法使用RuntimePermission(“getClassLoader”)权限，以确保可以访问引导程序类加载器。</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> initialize 如果true，则将初始化该类。</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> loader     类加载器</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>           代表所需类的类对象</span></span><br><span class="line"><span class="comment">* <span class="doctag">@exception</span> LinkageError ExceptionInInitializerError ClassNotFoundException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; forName(String name, <span class="type">boolean</span> initialize, ClassLoader loader) <span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">return</span> forName0(name, initialize, loader, caller);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建此Class对象表示的类的新实例。就像通过带有空参数列表的new表达式实例化该类一样。如果尚未初始化该类，则将其初始化。</span></span><br><span class="line"><span class="comment">* 请注意，此方法传播由null构造函数引发的任何异常，包括已检查的异常。使用此方法有效地绕过了编译时异常检查，否则该检查将由编译器执行。</span></span><br><span class="line"><span class="comment">* (java.lang.reflect.Constructor)Constructor.newInstance方法通过将构造函数抛出的所有异常包装在java.lang.reflect.InvocationTargetException中从而避免了此问题。</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>  该对象表示的类的新分配实例。</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span>  IllegalAccessException  如果该类或其无效构造函数不可访问。</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span>  InstantiationException  如果此Class表示抽象类，接口，数组类，原始类型或void；或如果类没有空构造函数；或者或实例化由于其他原因而失败。</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span>  ExceptionInInitializerError 如果此方法引发的初始化失败。</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span>  SecurityException 如果存在安全管理器，并且调用者的类加载器与当前类的调用者的类加载器不同，并且调用SecurityManager#checkPackageAccess拒绝访问此类的程序包。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">newInstance</span><span class="params">()</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException&#123;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">if</span> (cachedConstructor == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == Class.class) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalAccessException</span>(<span class="string">&quot;Can not call newInstance() on the Class for java.lang.Class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class&lt;?&gt;[] empty = &#123;&#125;;</span><br><span class="line">        <span class="keyword">final</span> Constructor&lt;T&gt; c = getConstructor0(empty, Member.DECLARED);</span><br><span class="line">        .......</span><br><span class="line">        cachedConstructor = c;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> (InstantiationException)<span class="keyword">new</span> <span class="title class_">InstantiationException</span>(getName()).initCause(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Constructor&lt;T&gt; tmpConstructor = cachedConstructor;</span><br><span class="line"><span class="comment">// 安全性检查（与java.lang.reflect.Constructor中的相同）</span></span><br><span class="line">......</span><br><span class="line"><span class="comment">// 运行构造函数</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> tmpConstructor.newInstance((Object[])<span class="literal">null</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 返回一个包含Class对象的数组，这些对象表示此Class对象表示的类的所有public类和接口成员。这包括从超类继承的public类和接口成员，以及由该类声明的公共类和接口成员。如果此Class对象没有public成员类或接口，则此方法返回长度为0的数组。如果此Class对象表示原始类型，数组类或void，则此方法还返回长度为0的数组。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt;[] getClasses() &#123;......&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 返回一组Class对象的数组，这些对象反映了声明为该Class对象表示的类的成员的所有类和接口。这包括public, protected, default (package) access,private类和接口，但不包括继承的类和接口。如果类未声明任何类或接口作为成员，或者此Class对象表示原始类型，数组类或void，则此方法返回长度为0的数组。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt;[] getDeclaredClasses() <span class="keyword">throws</span> SecurityException &#123;......&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 返回一个包含Field对象的数组，这些对象反映了此Class对象表示的类或接口的所有可访问public字段。</span></span><br><span class="line"><span class="comment">* 如果此Class对象表示没有可访问的public字段的类或接口，则此方法返回长度为0的数组。</span></span><br><span class="line"><span class="comment">* 如果此Class对象表示一个类，则此方法返回该类及其所有超类的public字段。</span></span><br><span class="line"><span class="comment">* 如果此对象表示一个接口，则此方法返回该接口及其所有超级接口的字段。</span></span><br><span class="line"><span class="comment">* 如果此Class对象表示数组类型，原始类型或void，则此方法返回长度为0的数组。</span></span><br><span class="line"><span class="comment">* 返回数组中的元素未排序，并且没有任何特定顺序。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> Field[] getFields() <span class="keyword">throws</span> SecurityException &#123;......&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 返回Field对象的数组，该数组反映由这个class对象表示的类或接口声明的所有字段。这包括public、protected、default（package）access和private字段，但不包括继承的字段。</span></span><br><span class="line"><span class="comment">* 如果这个Class对象表示没有声明字段的类或接口，则此方法返回长度为0的数组。</span></span><br><span class="line"><span class="comment">* 如果这个Class对象表示数组类型、基元类型或void，则此方法返回长度为0的数组。</span></span><br><span class="line"><span class="comment">* 返回数组中的元素没有排序，并且没有任何特定的顺序。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> Field[] getDeclaredFields() <span class="keyword">throws</span> SecurityException &#123;......&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 返回一个Field对象，该对象反映由这个class对象表示的类或接口的指定public成员字段。name参数是一个String，指定所需字段的简单名称。</span></span><br><span class="line"><span class="comment">* 要反射的场由下面的算法确定。设C为该对象表示的类或接口：</span></span><br><span class="line"><span class="comment">* 1.如果C用指定的名称声明了一个public字段，则该字段就是要反映的字段。</span></span><br><span class="line"><span class="comment">* 2.如果在上面的步骤1中找不到任何字段，则此算法递归地应用于C的每个直接上接口。直接上接口按声明的顺序进行搜索。</span></span><br><span class="line"><span class="comment">* 3.如果在上面的步骤1和2中找不到字段，并且C有超类S，则此算法将在S上递归调用。如果C没有超类，则抛出NoSuchFieldException。</span></span><br><span class="line"><span class="comment">* 如果这个Class对象表示数组类型，则此方法找不到数组类型的length字段。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> Field <span class="title function_">getField</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchFieldException, SecurityException &#123;......&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 返回一个Field对象，该对象反映此Class对象表示的类或接口的指定声明字段。name参数是一个String，它指定所需字段的简单名称。</span></span><br><span class="line"><span class="comment">* 如果此Class对象表示数组类型，则此方法找不到数组类型的length字段。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> Field <span class="title function_">getDeclaredField</span><span class="params">(String name)</span><span class="keyword">throws</span> NoSuchFieldException, SecurityException &#123;......&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 返回一个数组，该数组包含Method对象，这些对象反映由该class对象表示的类或接口的所有public方法，包括由类或接口声明的方法以及从超类和超接口继承的那些方法。</span></span><br><span class="line"><span class="comment">* 如果这个Class对象表示一个类型，该类型具有多个具有相同名称和参数类型但返回类型不同的public方法，则返回的数组对这些每个方法都有一个Method对象。</span></span><br><span class="line"><span class="comment">* 如果这个Class对象表示一个具有类初始化方法&lt;clinit&gt;的类型，则返回的数组没有与之(&lt;clint&gt;)相应的method对象。</span></span><br><span class="line"><span class="comment">* 如果这个Class对象表示数组类型，那么返回的数组对于数组类型从object继承的每个public方法都有一个Method对象。它不包含clone()的Method对象。</span></span><br><span class="line"><span class="comment">* 如果这个Class对象表示接口，则返回的数组不包含object隐式声明的任何方法。因此，如果此接口或其任何一个超接口中没有显式声明方法，则返回的数组的长度为0。（请注意，表示类的Class对象始终具有从object继承的public方法。）</span></span><br><span class="line"><span class="comment">* 如果这个Class对象表示基元类型或void，则返回的数组的长度为0。</span></span><br><span class="line"><span class="comment">* 在此class对象表示的类或接口的上层接口中声明的静态方法不被视为类或接口的成员。</span></span><br><span class="line"><span class="comment">* 返回数组中的元素没有排序，并且没有任何特定的顺序。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> Method[] getMethods() <span class="keyword">throws</span> SecurityException &#123;......&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 返回一个数组，该数组包含Method对象，这些对象反映由该class对象表示的类或接口的所有已声明方法，包括public, protected, default (package) access, and private方法，但不包括继承的方法。</span></span><br><span class="line"><span class="comment">* 如果这个Class对象表示一个类型，该类型具有多个声明的方法，这些方法具有相同的名称和参数类型，但返回类型不同，则返回的数组对这些方法每个都有一个Method对象。</span></span><br><span class="line"><span class="comment">* 如果这个Class对象表示一个具有类初始化方法&lt;clinit&gt;的类型，则返回的数组没有与之(&lt;clint&gt;)相应的method对象。</span></span><br><span class="line"><span class="comment">* 如果这个Class对象表示没有声明方法的类或接口，则返回的数组的长度为0。</span></span><br><span class="line"><span class="comment">* 如果此Class对象表示数组类型，原始类型或void，则返回的数组长度为0。</span></span><br><span class="line"><span class="comment">* 返回数组中的元素没有排序，并且没有任何特定的顺序。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> Method[] getDeclaredMethods() <span class="keyword">throws</span> SecurityException &#123;......&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 返回一个Method对象，该对象反映由该class对象表示的类或接口的指定public成员方法。name参数是一个String，指定所需方法的简单名称。parameterTypes参数是一个Class对象的数组，这些对象按声明的顺序标识方法的形式参数类型。如果parameterTypes是null，则将其视为空数组。</span></span><br><span class="line"><span class="comment">* 如果name是“&lt;init&gt;&#125;”或“&lt;clinit&gt;&#125;”，则引发NoSuchMethodException。否则，要反映的方法由下面的算法确定。设C为该对象表示的类或接口：</span></span><br><span class="line"><span class="comment">* 1. C搜索匹配方法，如下所述。如果找到匹配的方法，它将被反映出来。</span></span><br><span class="line"><span class="comment">* 2. 如果在步骤1中未找到匹配方法，则：</span></span><br><span class="line"><span class="comment">* 2.1如果C是Object以外的类，那么这个算法将在C的超类上递归调用.</span></span><br><span class="line"><span class="comment">* 2.2如果C是类Object，或者C是接口，那么将搜索C的上层接口（如果有）以查找匹配的方法。如果找到任何这样的方法，它就会被反映出来。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 要在类或接口C中查找匹配的方法，请执行以下操作：如果C声明了一个具有指定名称和完全相同形式参数类型的public方法，则该方法就是所反映的方法。如果在C中发现了不止一个这样的方法，并且其中一个方法的返回类型比其他任何方法都更具体，则会反映该方法；否则任意选择其中一个方法。</span></span><br><span class="line"><span class="comment">* 请注意，一个类中可能有多个匹配的方法，因为尽管Java语言禁止一个类声明具有相同签名但返回类型不同的多个方法，而Java虚拟机是不禁止的，这增加了虚拟机的灵活性，可用于实现各种语言功能。</span></span><br><span class="line"><span class="comment">* 如果这个Class对象表示数组类型，则此方法找不到clone方法。</span></span><br><span class="line"><span class="comment">* 在此class对象表示的类或接口的上层接口中声明的静态方法不被视为类或接口的成员。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> Method <span class="title function_">getMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span><span class="keyword">throws</span> NoSuchMethodException, SecurityException &#123;......&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 返回一个Method对象，该对象反映此Class对象表示的类或接口的指定声明方法。name参数是一个String，用于指定所需方法的简单名称，而parameterTypes参数是一个Class对象的数组，这些对象标识该方法的形式参数类型，按声明的顺序。如果在一个类中声明了一个以上具有相同参数类型的方法，并且其中一个方法的返回类型比其他方法更具体，则返回该方法。否则，可以选择其中一种方法。如果名称是“ &lt;init&gt;”或“ &lt;clinit&gt;”，则会引发&#123;<span class="doctag">@code</span> NoSuchMethodException&#125;。</span></span><br><span class="line"><span class="comment">* 如果此&#123;<span class="doctag">@code</span> Class&#125;对象表示数组类型，则此方法找不到&#123;<span class="doctag">@code</span> clone（）&#125;方法。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> Method <span class="title function_">getDeclaredMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span><span class="keyword">throws</span> NoSuchMethodException, SecurityException &#123;......&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 返回一个数组，其中包含Constructor对象，这些对象反映由这个class对象表示的类的所有public构造函数。如果类没有public构造函数，或者类是数组类，或者类反映基元类型或void，则返回长度为0的数组。</span></span><br><span class="line"><span class="comment">* 请注意，虽然此方法返回Constructor&lt;T&gt;对象的数组（即该类中的构造函数数组），但该方法的返回类型是Constructor&lt;？&gt;[]而不是Constructor&lt;T&gt;[]。这种信息较少的返回类型是必需的，因为从该方法返回后，可以修改数组以保存不同类的Constructor对象，这将违反Constructor&lt;T&gt;[]的类型保证。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> Constructor&lt;?&gt;[] getConstructors() <span class="keyword">throws</span> SecurityException &#123;......&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 返回Constructor对象的数组，该数组反映由这个class对象表示的类声明的所有构造函数。它们是public、protected、default（package）access和private构造函数。</span></span><br><span class="line"><span class="comment">* 返回的数组中的元素没有排序，并且没有任何特定的顺序。</span></span><br><span class="line"><span class="comment">* 如果类具有默认构造函数，则它将包含在返回的数组中。</span></span><br><span class="line"><span class="comment">* 如果class对象表示接口、基元类型、数组类或void，则此方法返回长度为0的数组。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> Constructor&lt;?&gt;[] getDeclaredConstructors() <span class="keyword">throws</span> SecurityException &#123;......&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 返回一个Constructor对象，该对象反映由这个class对象表示的类的指定public构造函数。parameterTypes参数是一个Class对象的数组，这些对象按声明的顺序标识构造函数的形式参数类型。</span></span><br><span class="line"><span class="comment">* 如果这个Class对象表示在非静态上下文中声明的内部类，则形式参数类型包括显式封闭实例作为第一个参数。</span></span><br><span class="line"><span class="comment">* 要反映的构造函数是由这个class对象表示的类的public构造函数，该对象的形式参数类型与parameterTypes指定的参数类型匹配。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> Constructor&lt;T&gt; <span class="title function_">getConstructor</span><span class="params">(Class&lt;?&gt;... parameterTypes)</span><span class="keyword">throws</span> NoSuchMethodException, SecurityException &#123;......&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 返回一个Constructor对象，该对象反映此Class对象表示的类或接口的指定构造函数。parameterTypes参数是Class对象的数组，这些对象按声明的顺序标识构造函数的形式参数类型。</span></span><br><span class="line"><span class="comment">* 如果此Class对象表示在非静态上下文中声明的内部类，则形式参数类型包括显式的封闭实例作为第一个参数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> Constructor&lt;T&gt; <span class="title function_">getDeclaredConstructor</span><span class="params">(Class&lt;?&gt;... parameterTypes)</span><span class="keyword">throws</span> NoSuchMethodException, SecurityException &#123;......&#125;</span><br></pre></td></tr></table></figure>





<h2 id="6-JAVA常量池"><a href="#6-JAVA常量池" class="headerlink" title="6.JAVA常量池"></a>6.JAVA常量池</h2><ul>
<li><p><strong>Class文件常量池</strong></p>
<p>class文件是一组以字节为单位的二进制数据流，在java代码的编译期间，我们编写的java文件就被编译为.class文件格式的二进制数据存放在磁盘中，其中就包括class文件常量池。 class文件中存在常量池（非运行时常量池），其在编译阶段就已经确定，jvm规范对class文件结构有着严格的规范，必须符合此规范的class文件才能被jvm任何和装载。为了方便说明，我们写个简单的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">JavaBean</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">0x101</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(<span class="type">int</span> v)</span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">this</span>.value = temp + v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过javac命令编译之后，用javap -v 命令查看编译后的文件:</p>
<p>这个命令之后我们得到了该class文件的版本号、常量池、已经编译后的字节码（这里未列出）。既然是常量池，那么其中存放的肯定是常量，那么什么是“常量”呢？ class文件常量池主要存放两大常量：<strong>字面量和符号引用</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">JavaBasicKnowledge</span>.JavaBean</span><br><span class="line">  minor version: <span class="number">0</span></span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #<span class="number">1</span> = Methodref          #<span class="number">6.</span>#<span class="number">29</span>         <span class="comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">2</span> = Fieldref           #<span class="number">5.</span>#<span class="number">30</span>         <span class="comment">// JavaBasicKnowledge/JavaBean.value:I</span></span><br><span class="line">   #<span class="number">3</span> = String             #<span class="number">31</span>            <span class="comment">// abc</span></span><br><span class="line">   #<span class="number">4</span> = Fieldref           #<span class="number">5.</span>#<span class="number">32</span>         <span class="comment">// JavaBasicKnowledge/JavaBean.s:Ljava/lang/String;</span></span><br><span class="line">   #<span class="number">5</span> = Class              #<span class="number">33</span>            <span class="comment">// JavaBasicKnowledge/JavaBean</span></span><br><span class="line">   #<span class="number">6</span> = Class              #<span class="number">34</span>            <span class="comment">// java/lang/Object</span></span><br><span class="line">   #<span class="number">7</span> = Utf8               value</span><br><span class="line">   #<span class="number">8</span> = Utf8               I</span><br><span class="line">   #<span class="number">9</span> = Utf8               s</span><br><span class="line">  #<span class="number">10</span> = Utf8               Ljava/lang/String;</span><br><span class="line">  #<span class="number">11</span> = Utf8               f</span><br><span class="line">  #<span class="number">12</span> = Utf8               ConstantValue</span><br><span class="line">  #<span class="number">13</span> = Integer            <span class="number">257</span></span><br><span class="line">  #<span class="number">14</span> = Utf8               &lt;init&gt;</span><br><span class="line">  #<span class="number">15</span> = Utf8               ()V</span><br><span class="line">  #<span class="number">16</span> = Utf8               Code</span><br><span class="line">  #<span class="number">17</span> = Utf8               LineNumberTable</span><br><span class="line">  #<span class="number">18</span> = Utf8               LocalVariableTable</span><br><span class="line">  #<span class="number">19</span> = Utf8               <span class="built_in">this</span></span><br><span class="line">  #<span class="number">20</span> = Utf8               LJavaBasicKnowledge/JavaBean;</span><br><span class="line">  #<span class="number">21</span> = Utf8               setValue</span><br><span class="line">  #<span class="number">22</span> = Utf8               (I)V</span><br><span class="line">  #<span class="number">23</span> = Utf8               v</span><br><span class="line">  #<span class="number">24</span> = Utf8               temp</span><br><span class="line">  #<span class="number">25</span> = Utf8               getValue</span><br><span class="line">  #<span class="number">26</span> = Utf8               ()I</span><br><span class="line">  #<span class="number">27</span> = Utf8               SourceFile</span><br><span class="line">  #<span class="number">28</span> = Utf8               StringConstantPool.java</span><br><span class="line">  #<span class="number">29</span> = NameAndType        #<span class="number">14</span>:#<span class="number">15</span>        <span class="comment">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  #<span class="number">30</span> = NameAndType        #<span class="number">7</span>:#<span class="number">8</span>          <span class="comment">// value:I</span></span><br><span class="line">  #<span class="number">31</span> = Utf8               abc</span><br><span class="line">  #<span class="number">32</span> = NameAndType        #<span class="number">9</span>:#<span class="number">10</span>         <span class="comment">// s:Ljava/lang/String;</span></span><br><span class="line">  #<span class="number">33</span> = Utf8               JavaBasicKnowledge/JavaBean</span><br><span class="line">  #<span class="number">34</span> = Utf8               java/lang/Object</span><br></pre></td></tr></table></figure>


</li>
<li><p><strong>运行时常量池</strong></p>
</li>
<li><p><strong>全局字符串常量池</strong></p>
</li>
<li><p><strong>基本类型包装类对象常量池</strong></p>
</li>
</ul>
<h2 id="7-JAVA-map-keySet-map-Values"><a href="#7-JAVA-map-keySet-map-Values" class="headerlink" title="7.JAVA map.keySet() map.Values()"></a>7.JAVA map.keySet() map.Values()</h2><p>一言以蔽之，shallow copy而非deep copy</p>
<p>map变了，这些set, collection也跟着变</p>
<p>尝试变这些set? 不行！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Map</span>&lt;<span class="title class_">Integer</span>,<span class="title class_">Integer</span>&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="title class_">Set</span>&lt;<span class="title class_">Integer</span>&gt; keys = map.<span class="title function_">keySet</span>();</span><br><span class="line">map.<span class="title function_">put</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(map.<span class="title function_">keySet</span>());<span class="comment">//[1]</span></span><br><span class="line"><span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(keys);<span class="comment">//[1]</span></span><br><span class="line"><span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(map.<span class="title function_">keySet</span>()==keys);<span class="comment">//true</span></span><br><span class="line"><span class="title class_">Collection</span>&lt;<span class="title class_">Integer</span>&gt; values = map.<span class="title function_">values</span>();</span><br><span class="line">map.<span class="title function_">put</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(values);<span class="comment">//[1, 3]</span></span><br><span class="line">keys.<span class="title function_">add</span>(<span class="number">5</span>);<span class="comment">//UnsupportedOperationException extends RuntimeException</span></span><br><span class="line"><span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(map.<span class="title function_">keySet</span>());</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>LCA</title>
    <url>/2022/05/15/LCA/</url>
    <content><![CDATA[<h1 id="Lowest-Common-Ancestor选编"><a href="#Lowest-Common-Ancestor选编" class="headerlink" title="Lowest Common Ancestor选编"></a>Lowest Common Ancestor选编</h1><h2 id="基本框架-find-root-val"><a href="#基本框架-find-root-val" class="headerlink" title="基本框架: find(root,val)"></a>基本框架: find(root,val)</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义：在以 root 为根的二叉树中寻找值为 val 的节点</span></span><br><span class="line"><span class="function">TreeNode <span class="title">find</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    <span class="keyword">if</span> (root == null) &#123;</span><br><span class="line">        <span class="keyword">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 看看 root.val 是不是要找的</span></span><br><span class="line">    <span class="keyword">if</span> (root.val == val) &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// root 不是目标节点，那就去左子树找</span></span><br><span class="line">    TreeNode left = <span class="built_in">find</span>(root.left, val);</span><br><span class="line">    <span class="keyword">if</span> (left != null) &#123;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 左子树找不着，那就去右子树找</span></span><br><span class="line">    TreeNode right = <span class="built_in">find</span>(root.right, val);</span><br><span class="line">    <span class="keyword">if</span> (right != null) &#123;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实在找不到了</span></span><br><span class="line">    <span class="keyword">return</span> null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>如果一个节点能够在它的左右子树中分别找到<code>p</code>和<code>q</code>，则该节点为<code>LCA</code>节点</strong>。</p>
<p><strong>一旦发现题目和子树有关，那大概率要给函数设置合理的定义和返回值，在后序位置写代码了</strong>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义：在以 root 为根的二叉树中寻找值为 val1 或 val2 的节点</span></span><br><span class="line"><span class="function">TreeNode <span class="title">find</span><span class="params">(TreeNode root, <span class="type">int</span> val1, <span class="type">int</span> val2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    <span class="keyword">if</span> (root == null) &#123;</span><br><span class="line">        <span class="keyword">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 前序位置，看看 root 是不是目标值</span></span><br><span class="line">    <span class="keyword">if</span> (root.val == val1 || root.val == val2) &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 去左右子树寻找</span></span><br><span class="line">    TreeNode left = <span class="built_in">find</span>(root.left, val1, val2);</span><br><span class="line">    TreeNode right = <span class="built_in">find</span>(root.right, val1, val2);</span><br><span class="line">    <span class="comment">// 后序位置，已经知道左右子树是否存在目标值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> left != null ? left : right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="236-Lowest-Common-Ancestor-of-a-Binary-Tree"><a href="#236-Lowest-Common-Ancestor-of-a-Binary-Tree" class="headerlink" title="236. Lowest Common Ancestor of a Binary Tree"></a><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/">236. Lowest Common Ancestor of a Binary Tree</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode236</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> find(root,p.val,q.val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeNode <span class="title function_">find</span><span class="params">(TreeNode root, <span class="type">int</span> p, <span class="type">int</span> q)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.val==p || root.val==q)&#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode left=find(root.left,p,q);</span><br><span class="line">        TreeNode right=find(root.right,p,q);</span><br><span class="line">        <span class="keyword">if</span>(left!=<span class="literal">null</span> &amp;&amp; right!=<span class="literal">null</span>)&#123; <span class="comment">//如果左右子树都找到一个，则LCA为当前root</span></span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//否则LCA在左子树中或右子树中</span></span><br><span class="line">            <span class="keyword">return</span> left!=<span class="literal">null</span> ? left : right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree"><a href="#235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree" class="headerlink" title="235. Lowest Common Ancestor of a Binary Search Tree"></a><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/">235. Lowest Common Ancestor of a Binary Search Tree</a></h2><h3 id="法一：递归写法"><a href="#法一：递归写法" class="headerlink" title="法一：递归写法"></a>法一：递归写法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root.val&lt;p.val &amp;&amp; root.val&lt;q.val)&#123;</span><br><span class="line">        <span class="keyword">return</span> lowestCommonAncestor(root.right,p,q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root.val&gt;p.val &amp;&amp; root.val&gt;q.val)&#123;</span><br><span class="line">        <span class="keyword">return</span> lowestCommonAncestor(root.left,p,q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="法二：迭代写法"><a href="#法二：迭代写法" class="headerlink" title="法二：迭代写法"></a>法二：迭代写法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(root.val&lt;p.val &amp;&amp; root.val&lt;q.val)&#123;</span><br><span class="line">            root=root.right;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val&gt;p.val &amp;&amp; root.val&gt;q.val)&#123;</span><br><span class="line">            root=root.left;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="1650-Lowest-Common-Ancestor-of-a-Binary-Tree-III"><a href="#1650-Lowest-Common-Ancestor-of-a-Binary-Tree-III" class="headerlink" title="1650. Lowest Common Ancestor of a Binary Tree III"></a><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree-iii/">1650. Lowest Common Ancestor of a Binary Tree III</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode1650</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> val;</span><br><span class="line">        <span class="keyword">public</span> Node left;</span><br><span class="line">        <span class="keyword">public</span> Node right;</span><br><span class="line">        <span class="keyword">public</span> Node parent;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">lowestCommonAncestor</span><span class="params">(Node p, Node q)</span> &#123;</span><br><span class="line">        Set&lt;Node&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">null</span> || q!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(set.contains(p))&#123;</span><br><span class="line">                    <span class="keyword">return</span> p;</span><br><span class="line">                &#125;</span><br><span class="line">                set.add(p);</span><br><span class="line">                p=p.parent;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(q!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(set.contains(q))&#123;</span><br><span class="line">                    <span class="keyword">return</span> q;</span><br><span class="line">                &#125;</span><br><span class="line">                set.add(q);</span><br><span class="line">                q=q.parent;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="742-Closest-Leaf-in-a-Binary-Tree"><a href="#742-Closest-Leaf-in-a-Binary-Tree" class="headerlink" title="742. Closest Leaf in a Binary Tree"></a>742. Closest Leaf in a Binary Tree</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findClosestLeaf</span><span class="params">(TreeNode root, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        Map&lt;TreeNode, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        getDistance(root, map, <span class="number">0</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> findNode(root, k);</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MAX_VALUE, minDist = Integer.MAX_VALUE;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (TreeNode cur : map.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur.left == <span class="literal">null</span> &amp;&amp; cur.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">lca</span> <span class="operator">=</span> lowestCommonAncestor(root, node, cur);</span><br><span class="line">                <span class="type">int</span> <span class="variable">curDist</span> <span class="operator">=</span> map.get(node) + map.get(cur) - <span class="number">2</span> * map.get(lca);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (curDist &lt; minDist) &#123;</span><br><span class="line">                    minDist = curDist;</span><br><span class="line">                    res = cur.val;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// get distance from root to each node</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getDistance</span><span class="params">(TreeNode root, Map&lt;TreeNode, Integer&gt; map, <span class="type">int</span> dist)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(root, dist);</span><br><span class="line">        getDistance(root.left, map, dist + <span class="number">1</span>);</span><br><span class="line">        getDistance(root.right, map, dist + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root == p || root == q) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> lowestCommonAncestor(root.right, p, q);</span><br><span class="line">        <span class="keyword">if</span> (left != <span class="literal">null</span> &amp;&amp; right != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">return</span> <span class="variable">left</span> <span class="operator">=</span>= <span class="literal">null</span> ? right : left;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// get the node whose value equals k recursively.</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">findNode</span><span class="params">(TreeNode root, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root.val == k) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> findNode(root.left, k);</span><br><span class="line">            <span class="keyword">if</span> (left != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> findNode(root.right, k);</span><br><span class="line">            <span class="keyword">if</span> (right != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// get the node whose value equals k iteratively.</span></span><br><span class="line">    <span class="comment">// private TreeNode findNode2(TreeNode root, int k) &#123;</span></span><br><span class="line">    <span class="comment">//     if (root == null) &#123;</span></span><br><span class="line">    <span class="comment">//         return null;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     Deque&lt;TreeNode&gt; stack = new ArrayDeque&lt;&gt;();</span></span><br><span class="line">    <span class="comment">//     TreeNode p = root;</span></span><br><span class="line">    <span class="comment">//     while (!stack.isEmpty() || p != null) &#123;</span></span><br><span class="line">    <span class="comment">//         if (p != null) &#123;</span></span><br><span class="line">    <span class="comment">//             if (p.val == k) &#123;</span></span><br><span class="line">    <span class="comment">//                 return p;</span></span><br><span class="line">    <span class="comment">//             &#125;</span></span><br><span class="line">    <span class="comment">//             stack.push(p);</span></span><br><span class="line">    <span class="comment">//             p = p.left;</span></span><br><span class="line">    <span class="comment">//         &#125; else &#123;</span></span><br><span class="line">    <span class="comment">//             p = stack.pop();</span></span><br><span class="line">    <span class="comment">//             p = p.right;</span></span><br><span class="line">    <span class="comment">//         &#125;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     return root;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>神之一手：</p>
<ul>
<li>int curDist &#x3D; map.get(node) + map.get(cur) - 2 * map.get(lca);</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;TreeNode,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findClosestLeaf</span><span class="params">(TreeNode root, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    getDist(root,<span class="number">0</span>);</span><br><span class="line">    TreeNode target=find(root,k);</span><br><span class="line">    <span class="type">int</span> res=Integer.MAX_VALUE;</span><br><span class="line">    <span class="type">int</span> min=Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode node : map.keySet()) &#123;</span><br><span class="line">        <span class="keyword">if</span>(node.left==<span class="literal">null</span> &amp;&amp; node.right==<span class="literal">null</span>)&#123;</span><br><span class="line">            TreeNode p=lca(root,k,node.val);</span><br><span class="line">            <span class="type">int</span> cur=map.get(target)+map.get(node)-<span class="number">2</span>*map.get(p);</span><br><span class="line">            <span class="keyword">if</span>(cur&lt;min)&#123;</span><br><span class="line">                res=node.val;</span><br><span class="line">                min=cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">getDist</span><span class="params">(TreeNode node, <span class="type">int</span> i)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    map.put(node,i);</span><br><span class="line">    getDist(node.left,i+<span class="number">1</span>);</span><br><span class="line">    getDist(node.right,i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TreeNode <span class="title function_">find</span><span class="params">(TreeNode node, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node.val==k)&#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode left=find(node.left,k);</span><br><span class="line">    <span class="keyword">if</span>(left!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> find(node.right,k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TreeNode <span class="title function_">lca</span><span class="params">(TreeNode node, <span class="type">int</span> p, <span class="type">int</span> q)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node.val==p || node.val==q)&#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode left=lca(node.left,p,q);</span><br><span class="line">    TreeNode right=lca(node.right,p,q);</span><br><span class="line">    <span class="keyword">if</span>(left!=<span class="literal">null</span> &amp;&amp; right!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left!=<span class="literal">null</span> ? left : right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="863-All-Nodes-Distance-K-in-Binary-Tree"><a href="#863-All-Nodes-Distance-K-in-Binary-Tree" class="headerlink" title="863. All Nodes Distance K in Binary Tree"></a>863. All Nodes Distance K in Binary Tree</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;TreeNode,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  <span class="comment">//int curDist =</span></span><br><span class="line">  <span class="comment">// map.get(node) + map.get(cur) - 2 * map.get(lca);</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">distanceK</span><span class="params">(TreeNode root, TreeNode target, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Deque&lt;TreeNode&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    q.offer(root);</span><br><span class="line">    getDist(root,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (TreeNode node : map.keySet()) &#123;</span><br><span class="line">        TreeNode p=lca(root,node.val,target.val);</span><br><span class="line">        <span class="type">int</span> dist=map.get(node)+map.get(target)-<span class="number">2</span>*map.get(p);</span><br><span class="line">        <span class="keyword">if</span>(dist==k)&#123;</span><br><span class="line">            res.add(node.val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">getDist</span><span class="params">(TreeNode node, <span class="type">int</span> d)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    map.put(node,d);</span><br><span class="line">    getDist(node.left,d+<span class="number">1</span>);</span><br><span class="line">    getDist(node.right,d+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TreeNode <span class="title function_">lca</span><span class="params">(TreeNode node, <span class="type">int</span> p, <span class="type">int</span> q)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node.val==p || node.val==q)&#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode left=lca(node.left,p,q);</span><br><span class="line">    TreeNode right=lca(node.right,p,q);</span><br><span class="line">    <span class="keyword">if</span>(left!=<span class="literal">null</span> &amp;&amp; right!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left==<span class="literal">null</span> ? right : left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="865-Smallest-Subtree-with-all-the-Deepest-Nodes"><a href="#865-Smallest-Subtree-with-all-the-Deepest-Nodes" class="headerlink" title="865. Smallest Subtree with all the Deepest Nodes"></a>865. Smallest Subtree with all the Deepest Nodes</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;TreeNode, Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">subtreeWithAllDeepest</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    dist(root,<span class="number">0</span>);</span><br><span class="line">    Deque&lt;TreeNode&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode node : map.keySet()) &#123;</span><br><span class="line">        <span class="keyword">if</span>(node.left==<span class="literal">null</span> &amp;&amp; node.right==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">int</span> d=map.get(node);</span><br><span class="line">            <span class="keyword">if</span>(d&gt;max)&#123;</span><br><span class="line">                q.clear();</span><br><span class="line">                q.offer(node);</span><br><span class="line">                max=d;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(d==max)&#123;</span><br><span class="line">                q.offer(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        TreeNode a=q.poll();</span><br><span class="line">        TreeNode b=q.poll();</span><br><span class="line">        q.offer(lca(root,a.val,b.val));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> q.poll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dist</span><span class="params">(TreeNode node, <span class="type">int</span> d)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    map.put(node,d);</span><br><span class="line">    dist(node.left,d+<span class="number">1</span>);</span><br><span class="line">    dist(node.right,d+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TreeNode <span class="title function_">lca</span><span class="params">(TreeNode node, <span class="type">int</span> p, <span class="type">int</span> q)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node.val==p || node.val==q)&#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode left=lca(node.left,p,q);</span><br><span class="line">    TreeNode right=lca(node.right,p,q);</span><br><span class="line">    <span class="keyword">if</span>(left!=<span class="literal">null</span> &amp;&amp; right!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left==<span class="literal">null</span> ? right : left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>binary_tree</tag>
      </tags>
  </entry>
  <entry>
    <title>MergeSort&amp;&amp;QuickSort</title>
    <url>/2022/05/12/MergeSort&amp;&amp;QuickSort/</url>
    <content><![CDATA[<h1 id="Merge-Sort"><a href="#Merge-Sort" class="headerlink" title="Merge Sort"></a>Merge Sort</h1><ul>
<li>归并排序本质上是，先把左半边数组排好序，再把右半边数组排好序，然后把两半数组合并。</li>
<li>类似二叉树后序遍历</li>
<li>需要辅助数组temp</li>
<li>从整体上看，二叉树的高度是 <code>logN</code>，其中每一层的元素个数就是原数组的长度 <code>N</code>，所以总的时间复杂度就是 <code>O(NlogN)</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Merge</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于辅助合并有序数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] temp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">// 先给辅助数组开辟内存空间</span></span><br><span class="line">        temp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="comment">// 排序整个数组（原地修改）</span></span><br><span class="line">        sort(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义：将子数组 nums[lo..hi] 进行排序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lo == hi) &#123;</span><br><span class="line">            <span class="comment">// 单个元素不用排序</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这样写是为了防止溢出，效果等同于 (hi + lo) / 2</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 先对左半部分数组 nums[lo..mid] 排序</span></span><br><span class="line">        sort(nums, lo, mid);</span><br><span class="line">        <span class="comment">// 再对右半部分数组 nums[mid+1..hi] 排序</span></span><br><span class="line">        sort(nums, mid + <span class="number">1</span>, hi);</span><br><span class="line">        <span class="comment">// 将两部分有序数组合并成一个有序数组</span></span><br><span class="line">        merge(nums, lo, mid, hi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 nums[lo..mid] 和 nums[mid+1..hi] 这两个有序数组合并成一个有序数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> lo, <span class="type">int</span> mid, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">        <span class="comment">// 先把 nums[lo..hi] 复制到辅助数组中</span></span><br><span class="line">        <span class="comment">// 以便合并后的结果能够直接存入 nums</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> lo; i &lt;= hi; i++) &#123;</span><br><span class="line">            temp[i] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数组双指针技巧，合并两个有序数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> lo, j = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> lo; p &lt;= hi; p++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == mid + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 左半边数组已全部被合并</span></span><br><span class="line">                nums[p] = temp[j++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == hi + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 右半边数组已全部被合并</span></span><br><span class="line">                nums[p] = temp[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp[i] &gt; temp[j]) &#123;</span><br><span class="line">                nums[p] = temp[j++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nums[p] = temp[i++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="912-Sort-an-Array"><a href="#912-Sort-an-Array" class="headerlink" title="912. Sort an Array"></a><a href="https://leetcode.cn/problems/sort-an-array/">912. Sort an Array</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode912</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] temp;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortArray(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        temp=<span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        mergeSort(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start&gt;=end)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid=start+(end-start)/<span class="number">2</span>;</span><br><span class="line">        mergeSort(nums,start,mid);</span><br><span class="line">        mergeSort(nums,mid+<span class="number">1</span>,end);</span><br><span class="line">        merge(nums,start,mid,end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> mid, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="comment">// 先把 nums[lo..hi] 复制到辅助数组中</span></span><br><span class="line">        <span class="comment">// 以便合并后的结果能够直接存入 nums</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start; i&lt;=end; i++)&#123;</span><br><span class="line">            temp[i]=nums[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> p=start;</span><br><span class="line">        <span class="type">int</span> i=start;</span><br><span class="line">        <span class="type">int</span> j=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid &amp;&amp; j&lt;=end)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp[i]&lt;=temp[j])&#123;</span><br><span class="line">                nums[p++]=temp[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                nums[p++]=temp[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid)&#123;</span><br><span class="line">            nums[p++]=temp[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;=end)&#123;</span><br><span class="line">            nums[p++]=temp[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="315-Count-of-Smaller-Numbers-After-Self"><a href="#315-Count-of-Smaller-Numbers-After-Self" class="headerlink" title="315. Count of Smaller Numbers After Self"></a><a href="https://leetcode.cn/problems/count-of-smaller-numbers-after-self/">315. Count of Smaller Numbers After Self</a></h2><p>这题和归并排序什么关系呢，主要在 <code>merge</code> 函数，<strong>我们在使用 <code>merge</code> 函数合并两个有序数组的时候，其实是可以知道一个元素 <code>nums[i]</code> 后边有多少个元素比 <code>nums[i]</code> 小的</strong>。</p>
<p>求解「逆序对」的思想：当其中一个数字放进最终归并以后的有序数组中的时候，这个数字与之前看过的数字个数（或者是未看过的数字个数）可以直接统计出来，而不必一个一个数。这样排序完成以后，原数组的逆序数也就计算出来了；</p>
<p>因为在排序过程中，每个元素的索引位置会不断改变，所以我们用一个 <code>Pair</code> 类封装每个元素及其在原始数组 <code>nums</code> 中的索引，以便 <code>count</code> 数组记录每个元素之后小于它的元素个数。</p>
<p><strong>在对 <code>nuns[lo..hi]</code> 合并的过程中，每当执行 <code>nums[p] = temp[i]</code> 时，就可以确定 <code>temp[i]</code> 这个元素后面比它小的元素个数为 <code>j - mid - 1</code>，其中i为前半部分的指针</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode315</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Pair</span>&#123; </span><br><span class="line">        <span class="type">int</span> id;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        Pair(<span class="type">int</span> id,<span class="type">int</span> val)&#123;</span><br><span class="line">            <span class="built_in">this</span>.id=id;</span><br><span class="line">            <span class="built_in">this</span>.val=val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Pair[] pairs; <span class="comment">//索引数组，便于定位某一元素在初始数组中的index，用于更新结果</span></span><br><span class="line">    Pair[] temp; <span class="comment">//辅助索引数组，存储merge前已经排序好的前后两部分，用于merge，使merge后pairs里就是最终结果</span></span><br><span class="line">    <span class="type">int</span>[] counts;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">countSmaller</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        pairs=<span class="keyword">new</span> <span class="title class_">Pair</span>[nums.length];</span><br><span class="line">        temp=<span class="keyword">new</span> <span class="title class_">Pair</span>[nums.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            pairs[i]=<span class="keyword">new</span> <span class="title class_">Pair</span>(i,nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        counts=<span class="keyword">new</span> <span class="title class_">int</span>[pairs.length];</span><br><span class="line">        mergeSort(pairs,<span class="number">0</span>,pairs.length-<span class="number">1</span>);</span><br><span class="line">        List&lt;Integer&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> count : counts) &#123;</span><br><span class="line">            res.add(count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(Pair[] pairs, <span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left&gt;=right)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">        mergeSort(pairs,left,mid);</span><br><span class="line">        mergeSort(pairs,mid+<span class="number">1</span>,right);</span><br><span class="line">        merge(pairs,left,mid,right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(Pair[] pairs, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left; i &lt;=right; i++) &#123;</span><br><span class="line">            temp[i]=pairs[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> i=left;</span><br><span class="line">        <span class="type">int</span> j=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//基本逻辑同mergeSort</span></span><br><span class="line">        <span class="comment">//每当出现选中pairs[i]时，更新counts数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> p=left; p&lt;=right; p++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;mid)&#123;</span><br><span class="line">                pairs[p]=temp[j++];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j&gt;right)&#123;</span><br><span class="line">                pairs[p]=temp[i++];</span><br><span class="line">                counts[pairs[p].id]+=j-mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp[i].val&gt;temp[j].val)&#123; <span class="comment">//相等时i在前。保证pairs[i].val&gt;pairs[j-1].val</span></span><br><span class="line">                pairs[p]=temp[j++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//一旦出现i.val&lt;=j.val,就可以保证[mid+1,j)区间全部小于i.val</span></span><br><span class="line">                pairs[p]=temp[i++];</span><br><span class="line">                counts[pairs[p].id]+=j-mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="327-Count-of-Range-Sum"><a href="#327-Count-of-Range-Sum" class="headerlink" title="327. Count of Range Sum"></a>327. Count of Range Sum</h2><p>The problem is similiar to <a href="https://leetcode.com/problems/count-of-smaller-numbers-after-self/">315. Count of Smaller Numbers After Self</a>, yoc can click <strong><a href="https://leetcode.com/problems/count-of-smaller-numbers-after-self/discuss/408322/Python-Different-Concise-Solutions">here</a></strong> to check how to slolve it.<br>The difference between two probles is that you need compute the <strong>prefix sums</strong>, cumsum[i] means nums[:i]’s prefix sums :</p>
<blockquote>
<p>nums &#x3D; [1,3,4]<br>cumsum &#x3D; [0,1,4,8]<br>cumcum[1] means nums[:1]’s prefix sums</p>
</blockquote>
<p>We just need to count those where cumsum[j] - cumsum[i] is in [lower,upper].</p>
<h2 id="493-Reverse-Pairs"><a href="#493-Reverse-Pairs" class="headerlink" title="493. Reverse Pairs"></a><a href="https://leetcode.cn/problems/reverse-pairs/">493. Reverse Pairs</a></h2><p>树状数组？</p>
<h1 id="Quick-Sort"><a href="#Quick-Sort" class="headerlink" title="Quick Sort"></a>Quick Sort</h1><p>快速排序的核心无疑是 <code>partition</code> 函数， <code>partition</code> 函数的作用是在 <code>nums[lo..hi]</code> 中寻找一个分界点 <code>p</code>，通过交换元素使得 <code>nums[lo..p-1]</code> 都小于等于 <code>nums[p]</code>，且 <code>nums[p+1..hi]</code> 都大于 <code>nums[p]</code>：</p>
<h2 id="912-Sort-an-Array-1"><a href="#912-Sort-an-Array-1" class="headerlink" title="912. Sort an Array"></a><a href="https://leetcode.cn/problems/sort-an-array/">912. Sort an Array</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] nums;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortArray(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="built_in">this</span>.nums=nums;</span><br><span class="line">        <span class="built_in">this</span>.n=nums.length;</span><br><span class="line">        sort(<span class="number">0</span>,n-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start&gt;=end)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> j=partition(start,end);</span><br><span class="line">        sort(start,j-<span class="number">1</span>);</span><br><span class="line">        sort(j+<span class="number">1</span>,end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="type">int</span> pivot=nums[start];</span><br><span class="line">        <span class="type">int</span> i=start+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> j=end;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=j)&#123;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;=end &amp;&amp; nums[i]&lt;=pivot)&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;=start &amp;&amp;nums[j]&gt;pivot)&#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=j)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(i,j);</span><br><span class="line">        &#125;</span><br><span class="line">        swap(start,j);</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==j)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> temp=nums[i];</span><br><span class="line">        nums[i]=nums[j];</span><br><span class="line">        nums[j]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>09&#x2F;22&#x2F;2022更新： 不加random的quicksort已经AC不了了！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortArray(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="comment">// quick sort</span></span><br><span class="line">        quickSort(nums, <span class="number">0</span>, nums.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(end&lt;=start)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// pick random elem, split to two arrs</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> partition(arr, start, end);</span><br><span class="line">        quickSort(arr, start, index - <span class="number">1</span>);</span><br><span class="line">        quickSort(arr, index + <span class="number">1</span>, end);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="comment">// partition [left, right]</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> rand.nextInt(end - start + <span class="number">1</span>) + start;</span><br><span class="line">        swap(arr, index, end);</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> start;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> end - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// [start, left-1] smaller than arr[end]</span></span><br><span class="line">        <span class="comment">// [left, right] unknown</span></span><br><span class="line">        <span class="comment">// [right, end - 1] larger than or equal to arr[end]</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[left]&lt;arr[end]) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                swap(arr, left, right);</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, left, end);</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="215-Kth-Largest-Element-in-an-Array"><a href="#215-Kth-Largest-Element-in-an-Array" class="headerlink" title="215. Kth Largest Element in an Array"></a><a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/">215. Kth Largest Element in an Array</a></h2><p>找第<code>k</code>大的数，也就是将数组分为两部分，前部有<code>n-k</code>个元素，后部有<code>k</code>个元素，且前部元素均小于后部元素</p>
<p>而快排的<code>partition</code>返回值<code>j</code>，正好将数组分为<code>[0, j-1] </code>和 <code>[j+1, n-1]</code> 两部分，且前部分有<code>j</code>个元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] nums;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthLargest</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nums=nums;</span><br><span class="line">        <span class="type">int</span> lo=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> hi=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        <span class="keyword">while</span>(lo&lt;=hi)&#123;</span><br><span class="line">            <span class="type">int</span> j=partition(lo,hi);</span><br><span class="line">            <span class="keyword">if</span>(j&lt;n-k)&#123;</span><br><span class="line">                lo=j+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j&gt;n-k)&#123;</span><br><span class="line">                hi=j-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> nums[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="type">int</span> pivot=nums[start];</span><br><span class="line">        <span class="type">int</span> i=start+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> j=end;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=j)&#123;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;=end &amp;&amp; nums[i]&lt;=pivot)&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;=start &amp;&amp; nums[j]&gt;pivot)&#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=j)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(i,j);</span><br><span class="line">        &#125;</span><br><span class="line">        swap(start,j);</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==j)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> temp=nums[i];</span><br><span class="line">        nums[i]=nums[j];</span><br><span class="line">        nums[j]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Random rand=<span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthLargest</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> high=n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">        <span class="type">int</span> j=partition(nums,low,high);</span><br><span class="line">        <span class="keyword">if</span>(j&lt;n-k)&#123;</span><br><span class="line">            low=j+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j&gt;n-k)&#123;</span><br><span class="line">            high=j-<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nums[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">    <span class="type">int</span> index=rand.nextInt(end-start+<span class="number">1</span>)+start;</span><br><span class="line">    swap(nums,start,index);</span><br><span class="line">    <span class="type">int</span> pivot=nums[start];</span><br><span class="line">    <span class="type">int</span> i=start+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> j=end;</span><br><span class="line">    <span class="comment">//[start,i) &lt;=pivot</span></span><br><span class="line">    <span class="comment">//[i,j] unknown</span></span><br><span class="line">    <span class="comment">//(j,end] &gt;pivot</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[j]&gt;pivot)&#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            swap(nums,i++,j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(nums,start,j);</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==j)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> temp=nums[i];</span><br><span class="line">    nums[i]=nums[j];</span><br><span class="line">    nums[j]=temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>新模板！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Random rand=<span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthLargest</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">   quickSelect(nums,<span class="number">0</span>,n-<span class="number">1</span>,n-k);</span><br><span class="line">    <span class="keyword">return</span> nums[n-k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">quickSelect</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left==right)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> pivotIndex=left+rand.nextInt(right-left+<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> pivot=partition(nums,left,right,pivotIndex);</span><br><span class="line">    <span class="keyword">if</span>(pivot==k)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;pivot)&#123;</span><br><span class="line">        quickSelect(nums,left,pivot-<span class="number">1</span>,k);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        quickSelect(nums,pivot+<span class="number">1</span>,right,k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> pivot)</span>&#123;</span><br><span class="line">    <span class="type">int</span> val=nums[pivot];</span><br><span class="line">    swap(nums,right,pivot);</span><br><span class="line">    <span class="type">int</span> idx=left;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left; i &lt;= right; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&lt;val)&#123;</span><br><span class="line">            swap(nums,idx++,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(nums,idx,right);</span><br><span class="line">    <span class="keyword">return</span> idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==b)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    nums[a]^=nums[b];<span class="comment">//a^b</span></span><br><span class="line">    nums[b]^=nums[a];<span class="comment">//b^a^b=a</span></span><br><span class="line">    nums[a]^=nums[b];<span class="comment">//a^b^a=b</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="Quick-Selection"><a href="#Quick-Selection" class="headerlink" title="Quick Selection"></a>Quick Selection</h1><h2 id="324-Wiggle-Sort-II"><a href="#324-Wiggle-Sort-II" class="headerlink" title="324. Wiggle Sort II"></a><a href="https://leetcode.cn/problems/wiggle-sort-ii/">324. Wiggle Sort II</a></h2><p>披着medium外皮的hard！</p>
<p><a href="https://leetcode.cn/problems/wiggle-sort-ii/solution/yi-bu-yi-bu-jiang-shi-jian-fu-za-du-cong-onlognjia/#comment">https://leetcode.cn/problems/wiggle-sort-ii/solution/yi-bu-yi-bu-jiang-shi-jian-fu-za-du-cong-onlognjia/#comment</a></p>
<p>快速选择算法与快速排序算法类似，在一次递归调用中，首先进行partition过程，即利用一个元素将原数组划分为两个子数组，然后将这一元素放在两个数组之间。两者区别在于快速排序接下来需要对左右两个子数组进行递归，而快速选择只需要对一侧子数组进行递归，所以快速选择的时间复杂度为O(n)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wiggleSort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> (n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> x - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> findKthLargest(nums, n - mid);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>, i = <span class="number">0</span>, j = n - <span class="number">1</span>; k &lt;= j; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[k] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">while</span> (j &gt; k &amp;&amp; nums[j] &gt; target) &#123;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">                swap(nums, k, j--);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[k] &lt; target) &#123;</span><br><span class="line">                swap(nums, k, i++);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] arr = nums.clone();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = x - <span class="number">1</span>, k = n - <span class="number">1</span>; i &lt; n; i += <span class="number">2</span>, j--, k--) &#123;</span><br><span class="line">            nums[i] = arr[j];</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; n) &#123;</span><br><span class="line">                nums[i + <span class="number">1</span>] = arr[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthLargest</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> quickSelect(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>, nums.length - k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">quickSelect</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">q</span> <span class="operator">=</span> randomPartition(a, l, r);</span><br><span class="line">        <span class="keyword">if</span> (q == index) &#123;</span><br><span class="line">            <span class="keyword">return</span> a[q];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> q &lt; index ? quickSelect(a, q + <span class="number">1</span>, r, index) : quickSelect(a, l, q - <span class="number">1</span>, index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">randomPartition</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> random.nextInt(r - l + <span class="number">1</span>) + l;</span><br><span class="line">        swap(a, i, r);</span><br><span class="line">        <span class="keyword">return</span> partition(a, l, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> a[r], i = l - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> l; j &lt; r; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt;= x) &#123;</span><br><span class="line">                swap(a, ++i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(a, i + <span class="number">1</span>, r);</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="347-Top-K-Frequent-Elements"><a href="#347-Top-K-Frequent-Elements" class="headerlink" title="347. Top K Frequent Elements"></a>347. Top K Frequent Elements</h2><p>quickselect&#x2F;quicksort 新模板：</p>
<ol>
<li>换pivot到right</li>
<li>for循环从left到right，若 &lt; 则store</li>
<li>换right到store</li>
<li>return store</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="type">int</span>[] unique;</span><br><span class="line">Random rand=<span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] topKFrequent(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        map.put(num,map.getOrDefault(num,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n=map.size();</span><br><span class="line">    unique=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="type">int</span> idx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Integer num : map.keySet()) &#123;</span><br><span class="line">        unique[idx++]=num;</span><br><span class="line">    &#125;</span><br><span class="line">    quickSelect(<span class="number">0</span>,n-<span class="number">1</span>,n-k);</span><br><span class="line">    <span class="keyword">return</span> Arrays.copyOfRange(unique,n-k,n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">quickSelect</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&gt;=right)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//[k,k+1,..,n-1]</span></span><br><span class="line">    <span class="type">int</span> pivotIndex=left+rand.nextInt(right-left+<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> pivot=partition(left,right,pivotIndex);</span><br><span class="line">    <span class="keyword">if</span>(pivot==k)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;pivot)&#123;</span><br><span class="line">        quickSelect(left,pivot-<span class="number">1</span>,k);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        quickSelect(pivot+<span class="number">1</span>,right,k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> pivot)</span>&#123;</span><br><span class="line">    <span class="type">int</span> pivotFreq=map.get(unique[pivot]);</span><br><span class="line">    swap(right,pivot);</span><br><span class="line">    <span class="type">int</span> idx=left;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left; i &lt;= right; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(map.get(unique[i])&lt;pivotFreq)&#123;</span><br><span class="line">            swap(idx++,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(idx,right);</span><br><span class="line">    <span class="keyword">return</span> idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==b)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> temp=unique[a];</span><br><span class="line">    unique[a]=unique[b];</span><br><span class="line">    unique[b]=temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>binary_tree</tag>
        <tag>sorting_algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>LinkedList</title>
    <url>/2022/05/23/LinkedList/</url>
    <content><![CDATA[<h1 id="链表选编"><a href="#链表选编" class="headerlink" title="链表选编"></a>链表选编</h1><h2 id="206-Reverse-Linked-List"><a href="#206-Reverse-Linked-List" class="headerlink" title="206. Reverse Linked List"></a><a href="https://leetcode.cn/problems/reverse-linked-list/">206. Reverse Linked List</a></h2><h3 id="法一：递归"><a href="#法一：递归" class="headerlink" title="法一：递归"></a>法一：递归</h3><p>关键：如何确定后序reversed linked list的尾结点？</p>
<p>答案：由于是从后向前递归，head.next之后的指针被修改，但head的指针未被修改，head.next依然可以找到原链表中的后继，而此时它已经成为了reverse linked list的尾，将head添加到其后即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(head.next==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode postHead=reverseList(head.next);</span><br><span class="line">    head.next.next=head;</span><br><span class="line">    head.next=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> postHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="法二：迭代"><a href="#法二：迭代" class="headerlink" title="法二：迭代"></a>法二：迭代</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    ListNode pre=<span class="literal">null</span>;</span><br><span class="line">    ListNode p=head;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">null</span>)&#123;</span><br><span class="line">        ListNode temp=p.next;</span><br><span class="line">        p.next=pre;</span><br><span class="line">        pre=p;</span><br><span class="line">        p=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="24-Swap-Nodes-in-Pairs"><a href="#24-Swap-Nodes-in-Pairs" class="headerlink" title="24. Swap Nodes in Pairs"></a><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">24. Swap Nodes in Pairs</a></h2><h3 id="法一：递归-1"><a href="#法一：递归-1" class="headerlink" title="法一：递归"></a>法一：递归</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">null</span> || head.next==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode next=head.next;</span><br><span class="line">    ListNode postHead=swapPairs(head.next.next);</span><br><span class="line">    next.next=head;</span><br><span class="line">    head.next=postHead;</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：迭代-1"><a href="#法二：迭代-1" class="headerlink" title="法二：迭代"></a>法二：迭代</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//法二：dummyHead 迭代</span></span><br><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">null</span> || head.next==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode dummyHead=<span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>,head);</span><br><span class="line">    ListNode pre=dummyHead;</span><br><span class="line">    <span class="keyword">while</span>(pre.next!=<span class="literal">null</span> &amp;&amp; pre.next.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">        ListNode temp=head.next.next;</span><br><span class="line">        pre.next=head.next;</span><br><span class="line">        head.next.next=head;</span><br><span class="line">        head.next=temp;</span><br><span class="line">        pre=head;</span><br><span class="line">        head=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="142-Linked-List-Cycle-II"><a href="#142-Linked-List-Cycle-II" class="headerlink" title="142. Linked List Cycle II"></a><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">142. Linked List Cycle II</a></h2><h3 id="法一：用HashMap"><a href="#法一：用HashMap" class="headerlink" title="法一：用HashMap"></a>法一：用HashMap</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode142</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        Set&lt;ListNode&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(set.contains(head))&#123;</span><br><span class="line">                <span class="keyword">return</span> head;</span><br><span class="line">            &#125;</span><br><span class="line">            set.add(head);</span><br><span class="line">            head=head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：双指针"><a href="#法二：双指针" class="headerlink" title="法二：双指针"></a>法二：双指针</h3><p><a href="https://programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html#%E6%80%9D%E8%B7%AF">https://programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html#%E6%80%9D%E8%B7%AF</a></p>
<p>那么相遇时： slow指针走过的节点数为: <code>x + y</code>， fast指针走过的节点数：<code>x + y + n (y + z)</code>，n为fast指针在环内走了n圈才遇到slow指针， （y+z）为 一圈内节点的个数A。</p>
<p>因为fast指针是一步走两个节点，slow指针一步走一个节点， 所以 fast指针走过的节点数 &#x3D; slow指针走过的节点数 * 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(x + y) * 2 = x + y + n (y + z)</span><br></pre></td></tr></table></figure>

<p>两边消掉一个（x+y）: <code>x + y = n (y + z)</code></p>
<p>因为要找环形的入口，那么要求的是x，因为x表示 头结点到 环形入口节点的的距离。</p>
<p>所以要求x ，将x单独放在左面：<code>x = n (y + z) - y</code> ,</p>
<p>再从n(y+z)中提出一个 （y+z）来，整理公式之后为如下公式：<code>x = (n - 1) (y + z) + z</code> 注意这里n一定是大于等于1的，因为 fast指针至少要多走一圈才能相遇slow指针。</p>
<p><strong>从头结点出发一个指针，从相遇节点 也出发一个指针，这两个指针每次只走一个节点， 那么当这两个指针相遇的时候就是 环形入口的节点</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    ListNode fast=head;</span><br><span class="line">    ListNode slow=head;</span><br><span class="line">    <span class="keyword">while</span>(fast!=<span class="literal">null</span> &amp;&amp; fast.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">        fast=fast.next.next;</span><br><span class="line">        slow=slow.next;</span><br><span class="line">        <span class="keyword">if</span>(fast==slow)&#123;</span><br><span class="line">            ListNode meet=fast;</span><br><span class="line">            ListNode h=head;</span><br><span class="line">            <span class="keyword">while</span>(meet!=h)&#123;</span><br><span class="line">                meet=meet.next;</span><br><span class="line">                h=h.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="143-Reorder-List"><a href="#143-Reorder-List" class="headerlink" title="143. Reorder List"></a><a href="https://leetcode.cn/problems/reorder-list/">143. Reorder List</a></h2><p>注意：最后要将最后一个结点的next置为null，否则会成环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reorderList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    List&lt;ListNode&gt; nodes=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    ListNode right=head;</span><br><span class="line">    <span class="type">int</span> r=<span class="number">0</span>;</span><br><span class="line">    nodes.add(right);</span><br><span class="line">    <span class="keyword">while</span>(right.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">        right=right.next;</span><br><span class="line">        nodes.add(right);</span><br><span class="line">        r++;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode dummy=<span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">    ListNode p=dummy;</span><br><span class="line">    ListNode left=head;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        left=nodes.get(l);</span><br><span class="line">        right=nodes.get(r);</span><br><span class="line">        p.next=left;</span><br><span class="line">        p=p.next;</span><br><span class="line">        l++;</span><br><span class="line">        p.next=right;</span><br><span class="line">        p=p.next;</span><br><span class="line">        r--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        p.next=nodes.get(l);</span><br><span class="line">        p=p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    p.next=<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="2-Add-Two-Numbers"><a href="#2-Add-Two-Numbers" class="headerlink" title="2. Add Two Numbers"></a>2. Add Two Numbers</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">    ListNode dummy=<span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">    ListNode pre=dummy;</span><br><span class="line">    <span class="type">int</span> preVal=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l1!=<span class="literal">null</span> || l2!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="type">int</span> curVal=preVal;</span><br><span class="line">        <span class="keyword">if</span>(l1!=<span class="literal">null</span>)&#123;</span><br><span class="line">            curVal+=l1.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l2!=<span class="literal">null</span>)&#123;</span><br><span class="line">            curVal+=l2.val;</span><br><span class="line">        &#125;</span><br><span class="line">        preVal=curVal/<span class="number">10</span>;</span><br><span class="line">        curVal%=<span class="number">10</span>;</span><br><span class="line">        ListNode cur=<span class="keyword">new</span> <span class="title class_">ListNode</span>(curVal);</span><br><span class="line">        pre.next=cur;</span><br><span class="line">        pre=pre.next;</span><br><span class="line">        <span class="keyword">if</span>(l1!=<span class="literal">null</span>)&#123;</span><br><span class="line">            l1=l1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l2!=<span class="literal">null</span>)&#123;</span><br><span class="line">            l2=l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preVal!=<span class="number">0</span>)&#123;</span><br><span class="line">        ListNode cur=<span class="keyword">new</span> <span class="title class_">ListNode</span>(preVal);</span><br><span class="line">        pre.next=cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="234-Palindrome-Linked-List"><a href="#234-Palindrome-Linked-List" class="headerlink" title="234. Palindrome Linked List"></a>234. Palindrome Linked List</h2><p>好题：</p>
<ol>
<li>reverse</li>
<li>findMid(end of first half)</li>
<li>判断完毕注意还原</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    ListNode endOfFirstHalf=endOfFirstHalf(head);</span><br><span class="line">    ListNode startofSecondHalf=endOfFirstHalf.next;</span><br><span class="line">    ListNode end=reverse(startofSecondHalf);</span><br><span class="line">    ListNode p1=head;</span><br><span class="line">    ListNode p2=end;</span><br><span class="line">    <span class="type">boolean</span> res=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(res &amp;&amp; p2!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p1.val!=p2.val)&#123;</span><br><span class="line">            res=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p1=p1.next;</span><br><span class="line">        p2=p2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    endOfFirstHalf.next=reverse(end);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListNode <span class="title function_">reverse</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">      ListNode pre=<span class="literal">null</span>;</span><br><span class="line">      ListNode p=head;</span><br><span class="line">      ListNode next=<span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">while</span>(p!=<span class="literal">null</span>)&#123;</span><br><span class="line">          next=p.next;</span><br><span class="line">          p.next=pre;</span><br><span class="line">          pre=p;</span><br><span class="line">          p=next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListNode <span class="title function_">endOfFirstHalf</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">      ListNode fast=head;</span><br><span class="line">      ListNode slow=head;</span><br><span class="line">      <span class="keyword">while</span>(fast.next!=<span class="literal">null</span> &amp;&amp; fast.next.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">          fast=fast.next.next;</span><br><span class="line">          slow=slow.next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="237-Delete-Node-in-a-Linked-List"><a href="#237-Delete-Node-in-a-Linked-List" class="headerlink" title="237. Delete Node in a Linked List"></a>237. Delete Node in a Linked List</h2><p>骚！</p>
<ul>
<li>不删node，而是先换值，再删next</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteNode</span><span class="params">(ListNode node)</span> &#123;</span><br><span class="line">    ListNode next=node.next;</span><br><span class="line">    node.val=next.val;</span><br><span class="line">    node.next=next.next;</span><br><span class="line">    next.next=<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="328-Odd-Even-Linked-List"><a href="#328-Odd-Even-Linked-List" class="headerlink" title="328. Odd Even Linked List"></a>328. Odd Even Linked List</h2><p>考虑点数的奇偶</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">oddEvenList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">null</span> || head.next==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode head2=<span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">    ListNode p2=head2;</span><br><span class="line">    ListNode p=head;</span><br><span class="line">    ListNode pre=<span class="literal">null</span>;</span><br><span class="line">    ListNode next=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">null</span> &amp;&amp; p.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">        next=p.next.next;</span><br><span class="line">        p2.next=p.next;</span><br><span class="line">        p2=p2.next;</span><br><span class="line">        p2.next=<span class="literal">null</span>;</span><br><span class="line">        p.next=next;</span><br><span class="line">        pre=p;</span><br><span class="line">        p=next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">null</span>)&#123;</span><br><span class="line">        p.next=head2.next;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        pre.next=head2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>Meta高频</title>
    <url>/2022/05/23/Meta%E9%AB%98%E9%A2%91/</url>
    <content><![CDATA[<h1 id="Meta高频题"><a href="#Meta高频题" class="headerlink" title="Meta高频题"></a>Meta高频题</h1><h2 id="1249-Minimum-Remove-to-Make-Valid-Parentheses"><a href="#1249-Minimum-Remove-to-Make-Valid-Parentheses" class="headerlink" title="1249. Minimum Remove to Make Valid Parentheses"></a><a href="https://leetcode.cn/problems/minimum-remove-to-make-valid-parentheses/">1249. Minimum Remove to Make Valid Parentheses</a></h2><p>Meta高频题No. 1</p>
<p>看见括号匹配，想到用栈</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode1249</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">minRemoveToMakeValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n=s.length();</span><br><span class="line">        <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">        Deque&lt;Integer&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">char</span> c=chars[i];</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;)&#x27;</span> &amp;&amp; !stack.isEmpty() &amp;&amp; chars[stack.peek()]==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span> || c==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                stack.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            arr[stack.pop()]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sb.append(chars[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="680-Valid-Palindrome-II"><a href="#680-Valid-Palindrome-II" class="headerlink" title="680. Valid Palindrome II"></a><a href="https://leetcode.cn/problems/valid-palindrome-ii/">680. Valid Palindrome II</a></h2><p>常规longest palindrome subsequence的DP解法超时！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="comment">//longest palindrome subsequence</span></span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        dp[i][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i)==s.charAt(j))&#123;</span><br><span class="line">                dp[i][j]=dp[i+<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">2</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dp[i][j]=Math.max(dp[i+<span class="number">1</span>][j],dp[i][j-<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>][n-<span class="number">1</span>]&gt;=n-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>考虑Greedy Algorithm:</p>
<ol>
<li>双指针，若两头相等，则继续内缩，直到两头不等</li>
<li>不等后，判断 [i+1,j] 和 [i, j-1] 是否有一个是palindrome</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right=s.length()-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.charAt(left)!=s.charAt(right))&#123;</span><br><span class="line">            <span class="keyword">return</span> isValid(s,left+<span class="number">1</span>,right) || isValid(s,left,right-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s, <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">    <span class="type">int</span> left=start;</span><br><span class="line">    <span class="type">int</span> right=end;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.charAt(left)!=s.charAt(right))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="560-Subarray-Sum-Equals-K"><a href="#560-Subarray-Sum-Equals-K" class="headerlink" title="560. Subarray Sum Equals K"></a><a href="https://leetcode.cn/problems/subarray-sum-equals-k/">560. Subarray Sum Equals K</a></h2><h3 id="法一：brute-force"><a href="#法一：brute-force" class="headerlink" title="法一：brute force"></a>法一：brute force</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode560</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subarraySum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i; j&lt;n; j++)&#123;</span><br><span class="line">                sum+=nums[j];</span><br><span class="line">                <span class="keyword">if</span>(sum==k)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：prefix-sum-HashMap"><a href="#法二：prefix-sum-HashMap" class="headerlink" title="法二：prefix sum + HashMap"></a>法二：prefix sum + HashMap</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subarraySum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="number">0</span>,<span class="number">1</span>);   <span class="comment">//前缀和为0的subarray个数初始为1</span></span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        sum+=nums[i];</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(sum-k))&#123;</span><br><span class="line">            count+=map.get(sum-k);</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(sum,map.getOrDefault(sum,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="938-Range-Sum-of-BST"><a href="#938-Range-Sum-of-BST" class="headerlink" title="938. Range Sum of BST"></a><a href="https://leetcode.cn/problems/range-sum-of-bst/">938. Range Sum of BST</a></h2><h3 id="法一：recursively"><a href="#法一：recursively" class="headerlink" title="法一：recursively"></a>法一：recursively</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode938</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> finished;</span><br><span class="line">    <span class="type">int</span> low;</span><br><span class="line">    <span class="type">int</span> high;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rangeSumBST</span><span class="params">(TreeNode root, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.low=low;</span><br><span class="line">        <span class="built_in">this</span>.high=high;</span><br><span class="line">        <span class="built_in">this</span>.sum=<span class="number">0</span>;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span> || finished)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root.left);</span><br><span class="line">        <span class="keyword">if</span>(root.val&gt;=low &amp;&amp; root.val&lt;=high)&#123;</span><br><span class="line">            sum+=root.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.val&gt;high)&#123;</span><br><span class="line">            finished=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：non-recursively"><a href="#法二：non-recursively" class="headerlink" title="法二：non recursively"></a>法二：non recursively</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rangeSumBST</span><span class="params">(TreeNode root, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="type">boolean</span> finished=<span class="literal">false</span>;</span><br><span class="line">    Deque&lt;TreeNode&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; !finished)&#123;</span><br><span class="line">        TreeNode node=stack.pop();</span><br><span class="line">        <span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//left root right</span></span><br><span class="line">            <span class="comment">//right root left</span></span><br><span class="line">            <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(node);</span><br><span class="line">            stack.push(<span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            node =stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(node.val&gt;=low &amp;&amp; node.val&lt;=high)&#123;</span><br><span class="line">                sum+=node.val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.val&gt;high)&#123;</span><br><span class="line">                finished=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="236-Lowest-Common-Ancestor-of-a-Binary-Tree"><a href="#236-Lowest-Common-Ancestor-of-a-Binary-Tree" class="headerlink" title="236. Lowest Common Ancestor of a Binary Tree"></a><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">236. Lowest Common Ancestor of a Binary Tree</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> find(root, p.val, q.val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeNode <span class="title function_">find</span><span class="params">(TreeNode root, <span class="type">int</span> p, <span class="type">int</span> q)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span> || root.val==p || root.val==q)&#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode findLeft=find(root.left,p,q);</span><br><span class="line">        TreeNode findRight=find(root.right,p,q);</span><br><span class="line">        <span class="keyword">if</span>(findLeft!=<span class="literal">null</span> &amp;&amp; findRight!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> findLeft==<span class="literal">null</span> ? findRight : findLeft;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="215-Kth-Largest-Element-in-an-Array"><a href="#215-Kth-Largest-Element-in-an-Array" class="headerlink" title="215. Kth Largest Element in an Array"></a><a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/">215. Kth Largest Element in an Array</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] nums;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthLargest</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nums=nums;</span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        <span class="type">int</span> lo=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> hi=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(lo&lt;=hi)&#123;</span><br><span class="line">            <span class="type">int</span> j=partition(lo,hi);</span><br><span class="line">            <span class="keyword">if</span>(j&gt;n-k)&#123;</span><br><span class="line">                hi=j-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j&lt;n-k)&#123;</span><br><span class="line">                lo=j+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> nums[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="type">int</span> pivot=nums[start];</span><br><span class="line">        <span class="type">int</span> i=start+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> j=end;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=j)&#123;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;=end &amp;&amp; nums[i]&lt;=pivot)&#123; <span class="comment">//注意：由于最后swap(start,j)，所以要保证j不越界，但i可以越界</span></span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;=start &amp;&amp; nums[j]&gt;pivot)&#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=j)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(i,j);</span><br><span class="line">        &#125;</span><br><span class="line">        swap(start,j);</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==j)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> temp=nums[i];</span><br><span class="line">        nums[i]=nums[j];</span><br><span class="line">        nums[j]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="314-Binary-Tree-Vertical-Order-Traversal"><a href="#314-Binary-Tree-Vertical-Order-Traversal" class="headerlink" title="314. Binary Tree Vertical Order Traversal"></a><a href="https://leetcode.cn/problems/binary-tree-vertical-order-traversal/">314. Binary Tree Vertical Order Traversal</a></h2><p>好题，好题！</p>
<p>注意：</p>
<ol>
<li><p><strong>TreeMap</strong></p>
<p>采用 TreeMap&lt;Integer, List<Integer>&gt;来存储每列答案，</p>
<p>返回时直接return new ArrayList&lt;&gt;(res.values()), 可以保证结果按key升序</p>
</li>
<li><p>res.computeIfAbsent(i, k -&gt; new ArrayList&lt;&gt;()), 若不存在这个key，则插入新的键值对</p>
<ul>
<li>getOrDefault：仅仅是返回值，如果不存在返回指定的默认值，不修改map的结构</li>
<li>putIfAbsent：key不存在时，塞一个值，不应该关心返回值</li>
<li>computeIfAbsent：获取key对应的value，不存在时塞一个并返回</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主要思想是层级遍历</span></span><br><span class="line"><span class="comment">// 因为是垂直输出结果，所以假设根节点的初始位置是 0，那么左边向下逐层减 1，右边向下逐层加 1</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">verticalOrder1</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存放当前位置(key)的结果集(value)</span></span><br><span class="line">    Map&lt;Integer, List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存放当前节点（TreeNode）的位置</span></span><br><span class="line">    Map&lt;TreeNode, Integer&gt; nodeMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    nodeMap.put(root, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 层序遍历</span></span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    queue.add(root);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> nodeMap.get(node);</span><br><span class="line">        <span class="comment">// 如果当前位置还没有存储元素的结果集，则初始化 value，并添加元素</span></span><br><span class="line">        res.computeIfAbsent(i, k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()).add(node.val);</span><br><span class="line">        <span class="comment">// 左边向下逐层减 1</span></span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            queue.add(node.left);</span><br><span class="line">            nodeMap.put(node.left, i - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 右边向下逐层加 1</span></span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            queue.add(node.right);</span><br><span class="line">            nodeMap.put(node.right, i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(res.values());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="50-Pow-x-n"><a href="#50-Pow-x-n" class="headerlink" title="50. Pow(x, n)"></a><a href="https://leetcode.cn/problems/powx-n/">50. Pow(x, n)</a></h2><p>注意 int 范围： [ -2147483648, 2147483647]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode50</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">myPow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">long</span> i=n;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            i=-i;</span><br><span class="line">            x=<span class="number">1</span>/x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> res=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                res*=x;</span><br><span class="line">            &#125;</span><br><span class="line">            i/=<span class="number">2</span>;</span><br><span class="line">            x*=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1762-Buildings-With-an-Ocean-View"><a href="#1762-Buildings-With-an-Ocean-View" class="headerlink" title="1762. Buildings With an Ocean View"></a><a href="https://leetcode.cn/problems/buildings-with-an-ocean-view/">1762. Buildings With an Ocean View</a></h2><p>As long as it has no <strong>next greater element</strong>, it is valid</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode1762</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findBuildings(<span class="type">int</span>[] heights) &#123;</span><br><span class="line">        Deque&lt;Integer&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> n=heights.length;</span><br><span class="line">        <span class="type">int</span>[] next=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; heights[stack.peek()]&lt;heights[i])&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            next[i]=stack.isEmpty() ? -<span class="number">1</span> : stack.peek();</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(next[i]==-<span class="number">1</span>)&#123;</span><br><span class="line">                list.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[list.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">            res[i]=list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="973-K-Closest-Points-to-Origin"><a href="#973-K-Closest-Points-to-Origin" class="headerlink" title="973. K Closest Points to Origin"></a><a href="https://leetcode.cn/problems/k-closest-points-to-origin/">973. K Closest Points to Origin</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode973</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] kClosest(<span class="type">int</span>[][] points, <span class="type">int</span> k) &#123;</span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; pq=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] o1, <span class="type">int</span>[] o2)</span> &#123;</span><br><span class="line">                <span class="type">int</span> s1=o1[<span class="number">0</span>]*o1[<span class="number">0</span>]+o1[<span class="number">1</span>]*o1[<span class="number">1</span>];</span><br><span class="line">                <span class="type">int</span> s2=o2[<span class="number">0</span>]*o2[<span class="number">0</span>]+o2[<span class="number">1</span>]*o2[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">return</span> s1-s2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] point : points) &#123;</span><br><span class="line">            pq.offer(point);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[][] res=<span class="keyword">new</span> <span class="title class_">int</span>[k][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="type">int</span>[] head = pq.poll();</span><br><span class="line">            res[i][<span class="number">0</span>]=head[<span class="number">0</span>];</span><br><span class="line">            res[i][<span class="number">1</span>]=head[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="1570-Dot-Product-of-Two-Sparse-Vectors"><a href="#1570-Dot-Product-of-Two-Sparse-Vectors" class="headerlink" title="1570. Dot Product of Two Sparse Vectors"></a><a href="https://leetcode.cn/problems/dot-product-of-two-sparse-vectors/">1570. Dot Product of Two Sparse Vectors</a></h2><p>只要存放系数不为0的位置及其对应系数即可，求乘积时优先遍历长度较小的向量，可以缩短很多时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode1570</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">SparseVector</span> &#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;Integer,Integer&gt; map;</span><br><span class="line">        SparseVector(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">            <span class="built_in">this</span>.map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    map.put(i,nums[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Return the dotProduct of two sparse vectors</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dotProduct</span><span class="params">(SparseVector vec)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size1</span> <span class="operator">=</span> <span class="built_in">this</span>.map.size();</span><br><span class="line">            <span class="type">int</span> <span class="variable">size2</span> <span class="operator">=</span> vec.map.size();</span><br><span class="line">            Map&lt;Integer,Integer&gt; map1;</span><br><span class="line">            Map&lt;Integer,Integer&gt; map2;</span><br><span class="line">            <span class="keyword">if</span>(size1&lt;size2)&#123;</span><br><span class="line">                map1=<span class="built_in">this</span>.map;</span><br><span class="line">                map2=vec.map;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map1=vec.map;</span><br><span class="line">                map2=<span class="built_in">this</span>.map;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (Integer i : map1.keySet()) &#123;</span><br><span class="line">                <span class="keyword">if</span>(map2.containsKey(i))&#123;</span><br><span class="line">                    res+=map1.get(i)*map2.get(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="1650-Lowest-Common-Ancestor-of-a-Binary-Tree-III"><a href="#1650-Lowest-Common-Ancestor-of-a-Binary-Tree-III" class="headerlink" title="1650. Lowest Common Ancestor of a Binary Tree III"></a><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree-iii/">1650. Lowest Common Ancestor of a Binary Tree III</a></h2><p>从下向上，用HashSet来记录所有见过的结点</p>
<p>第一个出现的结点必然就是LCA</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode1650</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> val;</span><br><span class="line">        <span class="keyword">public</span> Node left;</span><br><span class="line">        <span class="keyword">public</span> Node right;</span><br><span class="line">        <span class="keyword">public</span> Node parent;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">lowestCommonAncestor</span><span class="params">(Node p, Node q)</span> &#123;</span><br><span class="line">        Set&lt;Node&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">null</span> || q!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(set.contains(p))&#123;</span><br><span class="line">                    <span class="keyword">return</span> p;</span><br><span class="line">                &#125;</span><br><span class="line">                set.add(p);</span><br><span class="line">                p=p.parent;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(q!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(set.contains(q))&#123;</span><br><span class="line">                    <span class="keyword">return</span> q;</span><br><span class="line">                &#125;</span><br><span class="line">                set.add(q);</span><br><span class="line">                q=q.parent;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="528-Random-Pick-with-Weight"><a href="#528-Random-Pick-with-Weight" class="headerlink" title="528. Random Pick with Weight"></a><a href="https://leetcode.cn/problems/random-pick-with-weight/">528. Random Pick with Weight</a></h2><p>前缀和数组 + 二分查找</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] preSum;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> total;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Solution</span><span class="params">(<span class="type">int</span>[] w)</span> &#123;</span><br><span class="line">        n=w.length;</span><br><span class="line">        preSum=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        preSum[<span class="number">0</span>]=w[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            preSum[i]=preSum[i-<span class="number">1</span>]+w[i];</span><br><span class="line">        &#125;</span><br><span class="line">        total= Arrays.stream(w).sum();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pickIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> x=(<span class="type">int</span>)(Math.random()*total)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> binarySearch(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span> target)</span>&#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=n;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="type">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(preSum[mid]&lt;target)&#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right=mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="124-Binary-Tree-Maximum-Path-Sum"><a href="#124-Binary-Tree-Maximum-Path-Sum" class="headerlink" title="124. Binary Tree Maximum Path Sum"></a><a href="https://leetcode.cn/problems/binary-tree-maximum-path-sum/">124. Binary Tree Maximum Path Sum</a></h2><p>好题，注意：</p>
<ol>
<li><p>dfs返回值和所求结果不同时，应该想到引入成员变量来记录所求结果</p>
</li>
<li><p>遍历所有节点，并考虑经过每个节点的maximum path</p>
</li>
<li><p>求经过某个节点的maximum path只需要经过其左右子节点的单侧最大分支，即dfs函数的返回值</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode124</span> &#123;</span><br><span class="line">    <span class="type">int</span> max;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxPathSum</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.max=Integer.MIN_VALUE;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> leftMax=Math.max(dfs(root.left),<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> rightMax=Math.max(dfs(root.right),<span class="number">0</span>);</span><br><span class="line">        max=Math.max(max,leftMax+root.val+rightMax);</span><br><span class="line">        <span class="keyword">return</span> Math.max(leftMax,rightMax)+root.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="31-Next-Permutation"><a href="#31-Next-Permutation" class="headerlink" title="31. Next Permutation"></a><a href="https://leetcode.cn/problems/next-permutation/">31. Next Permutation</a></h2><p><em>The replacement must be <strong><a href="http://en.wikipedia.org/wiki/In-place_algorithm">in place</a></strong> and use only constant extra memory</em></p>
<p>思路：</p>
<ol>
<li>先倒序遍历数组, 找到第一个 (前一个数比后一个数小的位置) (即nums[i] &lt; nums[i+1]);</li>
<li>这个时候我们不能直接把后一个数nums[i+1] 跟前一个数nums[i]交换就完事了; 还应该从nums[i+1]–&gt;数组末尾这一段的数据中 找出最优的那个值( 如何最优? 即比nums[i]稍微大那么一丢丢的数, 也就是 <code>nums[i+1]之后, 比nums[i]大的数中最小的那个值)</code></li>
<li>找到之后, 跟num[i]交换, 这还不算是下一个排列, num[i]后面的数值还不够小, 所以还应当进升序排列</li>
</ol>
<p>例如:</p>
<p>nums &#x3D; [1,2,7,4,3,1],</p>
<ol>
<li>第一步: 倒序遍历数组, 找出第一组: 前一个数比后一个数小的两个数, 即[2, 7]</li>
<li>2所处的这个位置就是需要找出比它稍微大的数的位置;</li>
<li>我们从[7,4,3,1]中找出比2大的数中的最小值, 也就是3, 找到后跟2交换即可;; 当然了, 如果没找到的话, 直接跳到第5步, 直接升序排列输出.</li>
<li>目前nums&#x3D;[1,3,7,4,2,1], 不用我说你们也看出来还不算下一个排列</li>
<li>对3后面的数, 升序排列, 即最终结果: nums &#x3D; [1,3,1,2,4,7]</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode31</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">nextPermutation</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&lt;nums[i+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> next=i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j]&gt;nums[i] &amp;&amp; nums[j]&lt;nums[next])&#123;</span><br><span class="line">                    next=j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> temp=nums[i];</span><br><span class="line">            nums[i]=nums[next];</span><br><span class="line">            nums[next]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums,i+<span class="number">1</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="56-Merge-Intervals"><a href="#56-Merge-Intervals" class="headerlink" title="56. Merge Intervals"></a><a href="https://leetcode.cn/problems/merge-intervals/">56. Merge Intervals</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] merge(<span class="type">int</span>[][] intervals) &#123;</span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] o1, <span class="type">int</span>[] o2)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1[<span class="number">0</span>]!=o2[<span class="number">0</span>] ? o1[<span class="number">0</span>]-o2[<span class="number">0</span>] : o1[<span class="number">1</span>]-o2[<span class="number">1</span>]; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> n=intervals.length;</span><br><span class="line">        <span class="type">int</span> start=intervals[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> end=intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="type">int</span> left=intervals[i][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> right=intervals[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(left&gt;end)&#123;</span><br><span class="line">                list.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;start,end&#125;);</span><br><span class="line">                start=left;</span><br><span class="line">                end=right;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(right&gt;end)&#123;</span><br><span class="line">                end=right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;start,end&#125;);</span><br><span class="line">        <span class="keyword">return</span> list.toArray(<span class="keyword">new</span> <span class="title class_">int</span>[list.size()][]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="921-Minimum-Add-to-Make-Parentheses-Valid"><a href="#921-Minimum-Add-to-Make-Parentheses-Valid" class="headerlink" title="921. Minimum Add to Make Parentheses Valid"></a><a href="https://leetcode.cn/problems/minimum-add-to-make-parentheses-valid/">921. Minimum Add to Make Parentheses Valid</a></h2><h3 id="法一：用栈"><a href="#法一：用栈" class="headerlink" title="法一：用栈"></a>法一：用栈</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode921</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minAddToMakeValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Deque&lt;Character&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : chars) &#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;)&#x27;</span> &amp;&amp; !stack.isEmpty() &amp;&amp; stack.peek()==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stack.push(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：不用栈"><a href="#法二：不用栈" class="headerlink" title="法二：不用栈"></a>法二：不用栈</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minAddToMakeValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : chars) &#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                right++;</span><br><span class="line">                <span class="keyword">if</span>(left&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    left--;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left+right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="199-Binary-Tree-Right-Side-View"><a href="#199-Binary-Tree-Right-Side-View" class="headerlink" title="199. Binary Tree Right Side View"></a><a href="https://leetcode.cn/problems/binary-tree-right-side-view/">199. Binary Tree Right Side View</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">rightSideView</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Deque&lt;TreeNode&gt; queue=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    queue.offer(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    queue.offer(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(size==<span class="number">0</span>)&#123;</span><br><span class="line">                    res.add(node.val);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="347-Top-K-Frequent-Elements"><a href="#347-Top-K-Frequent-Elements" class="headerlink" title="347. Top K Frequent Elements"></a><a href="https://leetcode.cn/problems/top-k-frequent-elements/">347. Top K Frequent Elements</a></h2><p>一个基于优先级堆的无界优先级[队列]。优先级队列的元素按照其[自然顺序]进行排序，或者根据构造队列时提供的 [<code>Comparator</code>] 进行排序，具体取决于所使用的构造方法。优先级队列不允许使用 <code>null</code>  元素。依靠自然顺序的优先级队列还不允许插入不可比较的对象（这样做可能导致 <code>ClassCastException</code>）。 </p>
<p>此队列的<em>头</em> 是按指定排序方式确定的<em>最小</em>  元素。如果多个元素都是最小值，则头是其中一个元素——选择方法是任意的。队列获取操作  <code>poll</code>、<code>remove</code>、<code>peek</code> 和 <code>element</code>  访问处于队列头的元素。 </p>
<p>实现注意事项：此实现为排队和出队方法（<code>offer</code>、<code>poll</code>、<code>remove()</code> 和  <code>add</code>）提供 O(log(n)) 时间；为 <code>remove(Object)</code> 和  <code>contains(Object)</code>  方法提供线性时间；为获取方法（<code>peek</code>、<code>element</code> 和  <code>size</code>）提供固定时间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] topKFrequent(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; pq=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] o1, <span class="type">int</span>[] o2)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o2[<span class="number">1</span>]-o1[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; nums[i]!=nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">                pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;nums[i-<span class="number">1</span>],count&#125;);</span><br><span class="line">                count=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;nums[n-<span class="number">1</span>],count&#125;);</span><br><span class="line">        <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;k; i++)&#123;</span><br><span class="line">            res[i]=pq.poll()[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="543-Diameter-of-Binary-Tree"><a href="#543-Diameter-of-Binary-Tree" class="headerlink" title="543. Diameter of Binary Tree"></a><a href="https://leetcode.cn/problems/diameter-of-binary-tree/">543. Diameter of Binary Tree</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> max;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">diameterOfBinaryTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        max=Integer.MIN_VALUE;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> leftDepth=dfs(root.left);</span><br><span class="line">        <span class="type">int</span> rightDepth=dfs(root.right);</span><br><span class="line">        max=Math.max(leftDepth+rightDepth,max);</span><br><span class="line">        <span class="keyword">return</span> Math.max(leftDepth,rightDepth)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="227-Basic-Calculator-II"><a href="#227-Basic-Calculator-II" class="headerlink" title="227. Basic Calculator II"></a><a href="https://leetcode.cn/problems/basic-calculator-ii/">227. Basic Calculator II</a></h2><p>基础版：原中缀表达式中所有运算数都是个位数</p>
<p>但本题中操作数可以为任意int</p>
<p>由于没有括号且操作数全部非负，无需使用逆波兰式通法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="type">char</span> <span class="variable">preSign</span> <span class="operator">=</span> <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Character.isDigit(s.charAt(i))) &#123;</span><br><span class="line">                num = num * <span class="number">10</span> + s.charAt(i) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!Character.isDigit(s.charAt(i)) &amp;&amp; s.charAt(i) != <span class="string">&#x27; &#x27;</span> || i == n - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (preSign) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                        stack.push(num);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                        stack.push(-num);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                        stack.push(stack.pop() * num);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        stack.push(stack.pop() / num);</span><br><span class="line">                &#125;</span><br><span class="line">                preSign = s.charAt(i);</span><br><span class="line">                num = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            ans += stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>逆波兰式通法：</p>
<ul>
<li><p>从左到右遍历中缀表达式的每个数字和符号，若是数字就输出，即成为后缀表达式的一部分；</p>
</li>
<li><p>若是符号，则判断其与栈顶符号的优先级，是右括号或优先级不高于栈顶符号（乘除优先加减）则栈元素依次出栈并输出，并将当前符号进栈</p>
<ul>
<li>注意：左括号直接进栈，右括号则需要一直出栈到左括号（包括左括号）</li>
</ul>
</li>
<li><p>一直到最终输出后缀表达式为止。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode227</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> s.trim();</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s1.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s1.charAt(i)!=<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                sb.append(s1.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s1=sb.toString();</span><br><span class="line">        List&lt;String&gt; in=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> start=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s1.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s1.charAt(i)-<span class="string">&#x27;0&#x27;</span>&gt;=<span class="number">0</span> &amp;&amp; s1.charAt(i)-<span class="string">&#x27;0&#x27;</span>&lt;=<span class="number">9</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                in.add(s1.substring(start,i));</span><br><span class="line">                in.add(s1.substring(i,i+<span class="number">1</span>));</span><br><span class="line">                start=i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        in.add(s1.substring(start));</span><br><span class="line">        <span class="type">int</span> n=in.size();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Deque&lt;String&gt; post=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        Deque&lt;String&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            String str=in.get(i);</span><br><span class="line">            <span class="keyword">if</span>(str.length()==<span class="number">1</span> &amp;&amp; (str.charAt(<span class="number">0</span>)==<span class="string">&#x27;+&#x27;</span> ||str.charAt(<span class="number">0</span>)==<span class="string">&#x27;-&#x27;</span> ||</span><br><span class="line">            str.charAt(<span class="number">0</span>)==<span class="string">&#x27;*&#x27;</span> || str.charAt(<span class="number">0</span>)==<span class="string">&#x27;/&#x27;</span>))&#123;</span><br><span class="line">                <span class="keyword">while</span>(!stack.isEmpty())&#123;	<span class="comment">//注意：循环：若操作符栈顶元素优先级大于等于当前符号，则出栈并入队</span></span><br><span class="line">                    <span class="keyword">if</span>(prior(str,stack.peek())&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                        post.offer(stack.pop());</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                stack.push(str);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                post.offer(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            post.offer(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Deque&lt;Integer&gt; postStack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> size=post.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            String str=post.poll();</span><br><span class="line">            <span class="keyword">if</span>(str.length()==<span class="number">1</span> &amp;&amp; (str.charAt(<span class="number">0</span>)==<span class="string">&#x27;+&#x27;</span> ||str.charAt(<span class="number">0</span>)==<span class="string">&#x27;-&#x27;</span> ||</span><br><span class="line">                    str.charAt(<span class="number">0</span>)==<span class="string">&#x27;*&#x27;</span> || str.charAt(<span class="number">0</span>)==<span class="string">&#x27;/&#x27;</span>))&#123;</span><br><span class="line">                <span class="type">int</span> o1=postStack.pop();</span><br><span class="line">                <span class="type">int</span> o2=postStack.pop();</span><br><span class="line">                <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">                <span class="type">char</span> c=str.charAt(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span>(c==<span class="string">&#x27;+&#x27;</span>)&#123;</span><br><span class="line">                    res=o2+o1;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">                    res=o2-o1;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(c==<span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                    res=o2*o1;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(c==<span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">                    res=o2/o1;</span><br><span class="line">                &#125;</span><br><span class="line">                postStack.push(res);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                postStack.push(Integer.valueOf(str));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> postStack.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">prior</span><span class="params">(String s1, String s2)</span>&#123;</span><br><span class="line">        <span class="type">char</span> c1=s1.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="type">char</span> c2=s2.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(c1==<span class="string">&#x27;*&#x27;</span> || c1==<span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c2==<span class="string">&#x27;+&#x27;</span> || c2==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c2==<span class="string">&#x27;+&#x27;</span> || c2==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="71-Simplify-Path"><a href="#71-Simplify-Path" class="headerlink" title="71. Simplify Path"></a><a href="https://leetcode.cn/problems/simplify-path/">71. Simplify Path</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode71</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">simplifyPath</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        String[] split = path.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        LinkedList&lt;String&gt; list=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : split) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.length()==<span class="number">0</span> || s.equals(<span class="string">&quot;.&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">&quot;..&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">if</span>(!list.isEmpty())&#123;</span><br><span class="line">                    list.removeLast();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                list.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> size=list.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">            sb.append(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        String s=sb.toString();</span><br><span class="line">        <span class="keyword">return</span> s.length()==<span class="number">0</span> ? <span class="string">&quot;/&quot;</span> : s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="88-Merge-Sorted-Array"><a href="#88-Merge-Sorted-Array" class="headerlink" title="88. Merge Sorted Array"></a><a href="https://leetcode.cn/problems/merge-sorted-array/">88. Merge Sorted Array</a></h2><p>双指针，从后向前</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode88</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> m, <span class="type">int</span>[] nums2, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> i=m-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> j=n-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> p=m+n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span> &amp;&amp; j&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1[i]&gt;=nums2[j])&#123;</span><br><span class="line">                nums1[p--]=nums1[i--];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                nums1[p--]=nums2[j--];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            nums1[p--]=nums2[j--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="339-Nested-List-Weight-Sum"><a href="#339-Nested-List-Weight-Sum" class="headerlink" title="339. Nested List Weight Sum"></a><a href="https://leetcode.cn/problems/nested-list-weight-sum/">339. Nested List Weight Sum</a></h2><p>每层求和时，需要当前的深度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">depthSum</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dSum(nestedList,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">dSum</span><span class="params">(List&lt;NestedInteger&gt; nestedList, <span class="type">int</span> d)</span>&#123;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(NestedInteger nest: nestedList)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nest.isInteger())&#123;</span><br><span class="line">                sum+=nest.getInteger()*d;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sum+=dSum(nest.getList(),d+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="162-Find-Peak-Element"><a href="#162-Find-Peak-Element" class="headerlink" title="162. Find Peak Element"></a><a href="https://leetcode.cn/problems/find-peak-element/">162. Find Peak Element</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode162</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findPeakElement</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">//nums[i-1]&lt;nums[i]&gt;nums[i+1]</span></span><br><span class="line">        <span class="comment">//nums[i-1]&gt;nums[i]&lt;nums[i+1], i=i+1</span></span><br><span class="line">        <span class="comment">//nums[i-1]&gt;nums[i]&gt;nums[i+1], i=i-1</span></span><br><span class="line">        <span class="comment">//nums[i-1]&lt;nums[i]&lt;nums[i+1], i=i+1</span></span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=n-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="type">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> c=compare(nums,mid-<span class="number">1</span>,mid,mid+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="number">0</span>)&#123;</span><br><span class="line">                res=mid;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> pre, <span class="type">int</span> cur, <span class="type">int</span> post)</span>&#123;</span><br><span class="line">        <span class="type">int</span> preVal= pre==-<span class="number">1</span> ? Integer.MIN_VALUE : nums[pre];</span><br><span class="line">        <span class="type">int</span> postVal= post==nums.length ? Integer.MIN_VALUE : nums[post];</span><br><span class="line">        <span class="type">int</span> curVal=nums[cur];</span><br><span class="line">        <span class="keyword">if</span>(curVal&gt;preVal &amp;&amp; curVal&gt;postVal)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(curVal&lt;preVal &amp;&amp; curVal&gt;postVal)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="125-Valid-Palindrome"><a href="#125-Valid-Palindrome" class="headerlink" title="125. Valid Palindrome"></a><a href="https://leetcode.cn/problems/valid-palindrome/">125. Valid Palindrome</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode125</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        s=s.trim().toLowerCase();</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> n=s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">char</span> c=s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(Character.isLetterOrDigit(c))&#123;</span><br><span class="line">                sb.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        n=sb.length();</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sb.charAt(left)!=sb.charAt(right))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="426-Convert-Binary-Search-Tree-to-Sorted-Doubly-Linked-List"><a href="#426-Convert-Binary-Search-Tree-to-Sorted-Doubly-Linked-List" class="headerlink" title="426. Convert Binary Search Tree to Sorted Doubly Linked List"></a><a href="https://leetcode.cn/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/">426. Convert Binary Search Tree to Sorted Doubly Linked List</a></h2><p>You can think of the left and right pointers as synonymous to the predecessor and successor pointers in a doubly-linked list.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Node pre;</span><br><span class="line">Node head;</span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">treeToDoublyList</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pre=<span class="literal">null</span>;</span><br><span class="line">    head=<span class="literal">null</span>;</span><br><span class="line">    dfs(root);</span><br><span class="line">    pre.right=head;</span><br><span class="line">    head.left=pre;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(Node root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root.left);</span><br><span class="line">    <span class="keyword">if</span>(pre==<span class="literal">null</span>)&#123;</span><br><span class="line">        head=root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pre!=<span class="literal">null</span>)&#123;</span><br><span class="line">        root.left=pre;</span><br><span class="line">        pre.right=root;</span><br><span class="line">    &#125;</span><br><span class="line">    pre=root;</span><br><span class="line">    dfs(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="987-Vertical-Order-Traversal-of-a-Binary-Tree"><a href="#987-Vertical-Order-Traversal-of-a-Binary-Tree" class="headerlink" title="987. Vertical Order Traversal of a Binary Tree"></a><a href="https://leetcode.cn/problems/vertical-order-traversal-of-a-binary-tree/">987. Vertical Order Traversal of a Binary Tree</a></h2><p>注意：同一层同一位置元素必须升序进入结果集</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode987</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">verticalTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        Deque&lt;TreeNode&gt; queue=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        TreeMap&lt;Integer,LinkedList&lt;Integer&gt;&gt; res=<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;TreeNode,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        map.put(root,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            TreeMap&lt;Integer,LinkedList&lt;Integer&gt;&gt; level=<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                <span class="type">int</span> i=map.get(node);</span><br><span class="line">                <span class="keyword">if</span>(!level.containsKey(i))&#123;</span><br><span class="line">                    level.put(i,<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;());</span><br><span class="line">                    level.get(i).add(node.val);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="type">int</span> l=level.get(i).size();</span><br><span class="line">                    <span class="type">boolean</span> added=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; l; j++) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(level.get(i).get(j)&gt;node.val)&#123;</span><br><span class="line">                            level.get(i).add(j,node.val);</span><br><span class="line">                            added=<span class="literal">true</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!added)&#123;</span><br><span class="line">                        level.get(i).add(node.val);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    queue.offer(node.left);</span><br><span class="line">                    map.put(node.left,i-<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    queue.offer(node.right);</span><br><span class="line">                    map.put(node.right,i+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (Integer i : level.keySet()) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!res.containsKey(i))&#123;</span><br><span class="line">                    res.put(i,<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> l=level.get(i).size();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; l; j++) &#123;</span><br><span class="line">                    res.get(i).add(level.get(i).get(j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(res.values());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>官方解法：根据坐标对节点整体排序，依次加入结果集</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">verticalTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; nodes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;<span class="type">int</span>[]&gt;();</span><br><span class="line">        dfs(root, <span class="number">0</span>, <span class="number">0</span>, nodes);</span><br><span class="line">        Collections.sort(nodes, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] tuple1, <span class="type">int</span>[] tuple2)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (tuple1[<span class="number">0</span>] != tuple2[<span class="number">0</span>]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> tuple1[<span class="number">0</span>] - tuple2[<span class="number">0</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tuple1[<span class="number">1</span>] != tuple2[<span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> tuple1[<span class="number">1</span>] - tuple2[<span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> tuple1[<span class="number">2</span>] - tuple2[<span class="number">2</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lastcol</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] tuple : nodes) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> tuple[<span class="number">0</span>], row = tuple[<span class="number">1</span>], value = tuple[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">if</span> (col != lastcol) &#123;</span><br><span class="line">                lastcol = col;</span><br><span class="line">                ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;());</span><br><span class="line">                size++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.get(size - <span class="number">1</span>).add(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode node, <span class="type">int</span> row, <span class="type">int</span> col, List&lt;<span class="type">int</span>[]&gt; nodes)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        nodes.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;col, row, node.val&#125;);</span><br><span class="line">        dfs(node.left, row + <span class="number">1</span>, col - <span class="number">1</span>, nodes);</span><br><span class="line">        dfs(node.right, row + <span class="number">1</span>, col + <span class="number">1</span>, nodes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="408-Valid-Word-Abbreviation"><a href="#408-Valid-Word-Abbreviation" class="headerlink" title="408. Valid Word Abbreviation"></a><a href="https://leetcode.cn/problems/valid-word-abbreviation/">408. Valid Word Abbreviation</a></h2><p>replacing any number of <strong>non-adjacent</strong>, <strong>non-empty</strong> substrings with their lengths</p>
<p>优先判断都是字母的情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validWordAbbreviation</span><span class="params">(String word, String abbr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;abbr.length()&amp;&amp;i&lt;word.length())&#123;</span><br><span class="line">            <span class="keyword">if</span>(Character.isLetter(abbr.charAt(j)))&#123;</span><br><span class="line">                <span class="keyword">if</span>(abbr.charAt(j)!=word.charAt(i))&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(abbr.charAt(j)==<span class="string">&#x27;0&#x27;</span>)&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">                <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(j&lt;abbr.length()&amp;&amp;Character.isDigit(abbr.charAt(j)))&#123;</span><br><span class="line">                    sum=<span class="number">10</span>*sum+abbr.charAt(j)-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">                i+=sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j==abbr.length()&amp;&amp;i==word.length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="138-Copy-List-with-Random-Pointer"><a href="#138-Copy-List-with-Random-Pointer" class="headerlink" title="138. Copy List with Random Pointer"></a><a href="https://leetcode.cn/problems/copy-list-with-random-pointer/">138. Copy List with Random Pointer</a></h2><p>好题！</p>
<h3 id="法一：迭代法"><a href="#法一：迭代法" class="headerlink" title="法一：迭代法"></a>法一：迭代法</h3><p><strong>如何去复制一个带随机指针的链表？</strong></p>
<p>1、在每个节点的后面加上它的复制，并将原链表和复制链表连在一起。</p>
<p>2、 从前往后遍历每一个原链表节点，对于有 random 指针的节点 p，我们让它的 p-&gt;next-&gt;random &#x3D; p-&gt;random-&gt;next，这样我们就完成了对原链表 random 指针的复刻。</p>
<p>3、最后我们把原链表和复制链表拆分出来，并将原链表复原。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Node <span class="title function_">copyRandomList</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在每个原节点后复制一个新节点</span></span><br><span class="line">    Node p=head;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">null</span>)&#123;</span><br><span class="line">        Node next=p.next;</span><br><span class="line">        Node node=<span class="keyword">new</span> <span class="title class_">Node</span>(p.val);</span><br><span class="line">        p.next=node;</span><br><span class="line">        node.next=next;</span><br><span class="line">        p=next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改新节点的random，指向对应的新节点</span></span><br><span class="line">    p=head;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">null</span> )&#123;</span><br><span class="line">        Node next=p.next.next;</span><br><span class="line">        <span class="keyword">if</span>(p.random!=<span class="literal">null</span>)&#123;</span><br><span class="line">            p.next.random=p.random.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p=next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助dummy结点，将新旧链表拆开</span></span><br><span class="line">    p=head;</span><br><span class="line">    Node dummy=<span class="keyword">new</span> <span class="title class_">Node</span>(-<span class="number">1</span>);</span><br><span class="line">    dummy.next=p.next;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">null</span>)&#123;</span><br><span class="line">        Node next=p.next.next;</span><br><span class="line">        p.next.next= next==<span class="literal">null</span> ? <span class="literal">null</span> : next.next;</span><br><span class="line">        p.next=next;</span><br><span class="line">        p=next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：哈希-递归"><a href="#法二：哈希-递归" class="headerlink" title="法二：哈希+递归"></a>法二：哈希+递归</h3><p>建立源节点到复制节点的映射，避免重复复制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Node,Node&gt; map;</span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">copyRandomList</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">    map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">return</span> dfs(head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node <span class="title function_">dfs</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(map.containsKey(node))&#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(node);</span><br><span class="line">    &#125;</span><br><span class="line">    Node clone=<span class="keyword">new</span> <span class="title class_">Node</span>(node.val);</span><br><span class="line">    map.put(node,clone);</span><br><span class="line">    clone.next=dfs(node.next);</span><br><span class="line">    clone.random=dfs(node.random);</span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="146-LRU-Cache"><a href="#146-LRU-Cache" class="headerlink" title="146. LRU Cache"></a><a href="https://leetcode.cn/problems/lru-cache/">146. LRU Cache</a></h2><p><code>LinkedHashMap</code></p>
<p>注意makeRecently，保证头旧尾新（<code>LinkedHashMap</code>是尾插）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line"></span><br><span class="line">    LinkedHashMap&lt;Integer,Integer&gt; cache;</span><br><span class="line">    <span class="type">int</span> cap;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        cache=<span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        cap=capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> val=cache.getOrDefault(key,-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(val!=-<span class="number">1</span>)&#123;</span><br><span class="line">            makeRecently(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(cache.containsKey(key))&#123;</span><br><span class="line">            cache.put(key,value);</span><br><span class="line">            makeRecently(key);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cache.put(key,value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cache.size()&gt;cap)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> cache.keySet().iterator().next();</span><br><span class="line">            cache.remove(first);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">makeRecently</span><span class="params">(<span class="type">int</span> key)</span>&#123;</span><br><span class="line">        <span class="type">int</span> val=cache.get(key);</span><br><span class="line">        cache.remove(key);</span><br><span class="line">        cache.put(key,val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="23-Merge-k-Sorted-Lists"><a href="#23-Merge-k-Sorted-Lists" class="headerlink" title="23. Merge k Sorted Lists"></a><a href="https://leetcode.cn/problems/merge-k-sorted-lists/">23. Merge k Sorted Lists</a></h2><p>divide and conquer</p>
<p>递归    后序遍历    先child后root</p>
<p>把前半部分和后半部分都merge成一个，再合并这两部分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">mergeKLists</span><span class="params">(ListNode[] lists)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(lists.length==<span class="number">0</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">int</span> n=lists.length;</span><br><span class="line">      <span class="keyword">return</span> mergeK(lists,<span class="number">0</span>,n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListNode <span class="title function_">mergeK</span><span class="params">(ListNode[] lists, <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(start==end)&#123;</span><br><span class="line">          <span class="keyword">return</span> lists[start];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">int</span> mid=start+(end-start)/<span class="number">2</span>;</span><br><span class="line">      ListNode headA=mergeK(lists,start,mid);</span><br><span class="line">      ListNode headB=mergeK(lists,mid+<span class="number">1</span>,end);</span><br><span class="line">      <span class="keyword">return</span> mergeTwoLists(headA,headB);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode headA, ListNode headB)</span>&#123;</span><br><span class="line">    ListNode a=headA;</span><br><span class="line">    ListNode b=headB;</span><br><span class="line">    ListNode dummy=<span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">    ListNode pre=dummy;</span><br><span class="line">    <span class="keyword">while</span>(a!=<span class="literal">null</span> &amp;&amp; b!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.val&lt;b.val)&#123;</span><br><span class="line">            pre.next=a;</span><br><span class="line">            pre=a;</span><br><span class="line">            a=a.next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pre.next=b;</span><br><span class="line">            pre=b;</span><br><span class="line">            b=b.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a!=<span class="literal">null</span>)&#123;</span><br><span class="line">        pre.next=a;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        pre.next=b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="415-Add-Strings"><a href="#415-Add-Strings" class="headerlink" title="415. Add Strings"></a><a href="https://leetcode.cn/problems/add-strings/">415. Add Strings</a></h2><p>大整数加法，借助<code>StringBuilder</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">addStrings</span><span class="params">(String num1, String num2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i=num1.length()-<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> j=num2.length()-<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> add=<span class="number">0</span>;</span><br><span class="line">    StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">while</span>(i&gt;=<span class="number">0</span> || j&gt;=<span class="number">0</span> || add&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="type">int</span> a=i&gt;=<span class="number">0</span> ? num1.charAt(i)-<span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> b=j&gt;=<span class="number">0</span> ? num2.charAt(j)-<span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>;</span><br><span class="line">        i--;</span><br><span class="line">        j--;</span><br><span class="line">        <span class="type">int</span> res=a+b+add;</span><br><span class="line">        sb.append(res%<span class="number">10</span>);</span><br><span class="line">        add=res/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="42-Trapping-Rain-Water"><a href="#42-Trapping-Rain-Water" class="headerlink" title="42. Trapping Rain Water"></a><a href="https://leetcode.cn/problems/trapping-rain-water/">42. Trapping Rain Water</a></h2><p>对于一根柱子而言，它能不能蓄水、能蓄多少水取决于它左侧和右侧的最高柱子中的较低者的高度和它本身的高度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=height.length;</span><br><span class="line">    <span class="type">int</span>[] leftMax=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="type">int</span>[] rightMax=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    leftMax[<span class="number">0</span>]=Integer.MIN_VALUE;</span><br><span class="line">    rightMax[n-<span class="number">1</span>]=Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;n; i++)&#123;</span><br><span class="line">        leftMax[i]=Math.max(leftMax[i-<span class="number">1</span>],height[i-<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n-<span class="number">2</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">        rightMax[i]=Math.max(rightMax[i+<span class="number">1</span>],height[i+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;n-<span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="type">int</span> h=Math.min(leftMax[i],rightMax[i]);</span><br><span class="line">        res+= h-height[i]&gt;<span class="number">0</span> ? h-height[i] : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1091-Shortest-Path-in-Binary-Matrix"><a href="#1091-Shortest-Path-in-Binary-Matrix" class="headerlink" title="1091. Shortest Path in Binary Matrix"></a><a href="https://leetcode.cn/problems/shortest-path-in-binary-matrix/">1091. Shortest Path in Binary Matrix</a></h2><p>BFS好题！</p>
<p> <strong>8-directionally</strong> connected</p>
<p>解题思路<br>典型的BFS最短路径问题，用DFS也可以求解，但是容易超时。</p>
<p><strong>在二维矩阵中搜索，什么时候用BFS，什么时候用DFS？</strong></p>
<ol>
<li>如果只是要找到某一个结果是否存在，那么DFS会更高效。因为DFS会首先把一种可能的情况尝试到底，才会回溯去尝试下一种情况，只要找到一种情况，就可以返回了。但是BFS必须所有可能的情况同时尝试，在找到一种满足条件的结果的同时，也尝试了很多不必要的路径；</li>
<li>如果是要找所有可能结果中最短的，那么BFS回更高效。因为DFS是一种一种的尝试，在把所有可能情况尝试完之前，无法确定哪个是最短，所以DFS必须把所有情况都找一遍，才能确定最终答案（DFS的优化就是剪枝，不剪枝很容易超时）。而BFS从一开始就是尝试所有情况，所以只要找到第一个达到的那个点，那就是最短的路径，可以直接返回了，其他情况都可以省略了，所以这种情况下，BFS更高效。</li>
</ol>
<p><strong>BFS解法中的visited为什么可以全局使用？</strong><br>BFS是在尝试所有的可能路径，哪个最快到达终点，哪个就是最短。那么每一条路径走过的路不同，visited（也就是这条路径上走过的点）也应该不同，那么为什么visited可以全局使用呢？<br>因为我们要找的是最短路径，那么如果在此之前某个点已经在visited中，也就是说有其他路径在小于或等于当前步数的情况下，到达过这个点，证明到达这个点的最短路径已经被找到。那么显然这个点没必要再尝试了，因为即便去尝试了，最终的结果也不会是最短路径了，所以直接放弃这个点即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BSF由近到远的特性，天然适配shortest path问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">shortestPathBinaryMatrix</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] delta=&#123;&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,-<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> n=grid.length;</span><br><span class="line">    <span class="keyword">if</span>(grid[<span class="number">0</span>][<span class="number">0</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span>[][] visited=<span class="keyword">new</span> <span class="title class_">boolean</span>[n][n];</span><br><span class="line">    Deque&lt;<span class="type">int</span>[]&gt; queue=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span> size=queue.size();</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span>[] poll = queue.poll();</span><br><span class="line">            <span class="type">int</span> i=poll[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> j=poll[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> d=<span class="number">0</span>; d&lt;<span class="number">8</span>; d++)&#123;</span><br><span class="line">                <span class="type">int</span> nextI=i+delta[d][<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> nextJ=j+delta[d][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(nextI&lt;<span class="number">0</span> || nextI&gt;=n || nextJ&lt;<span class="number">0</span> || nextJ&gt;=n</span><br><span class="line">                        || grid[nextI][nextJ]==<span class="number">1</span> || visited[nextI][nextJ])&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(nextI==n-<span class="number">1</span> &amp;&amp; nextJ==n-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> count;   <span class="comment">//BFS特性，第一次遇到某个点时必定是到该点的最短路径</span></span><br><span class="line">                &#125;</span><br><span class="line">                queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;nextI,nextJ&#125;);</span><br><span class="line">                visited[nextI][nextJ]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="791-Custom-Sort-String"><a href="#791-Custom-Sort-String" class="headerlink" title="791. Custom Sort String"></a><a href="https://leetcode.cn/problems/custom-sort-string/">791. Custom Sort String</a></h2><h3 id="法一：直接法，借助优先队列、自定义Comparator"><a href="#法一：直接法，借助优先队列、自定义Comparator" class="headerlink" title="法一：直接法，借助优先队列、自定义Comparator"></a>法一：直接法，借助优先队列、自定义Comparator</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">customSortString</span><span class="params">(String order, String s)</span> &#123;</span><br><span class="line">    Map&lt;Character,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> n1=order.length();</span><br><span class="line">    <span class="type">char</span>[] chars = order.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n1; i++) &#123;</span><br><span class="line">        map.put(chars[i],n1-i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span>[] arr = s.toCharArray();</span><br><span class="line">    PriorityQueue&lt;Character&gt; pq=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Character&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Character o1, Character o2)</span> &#123;</span><br><span class="line">            <span class="type">int</span> a=map.getOrDefault(o1,<span class="number">0</span>);</span><br><span class="line">            <span class="type">int</span> b=map.getOrDefault(o2,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> b-a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        pq.offer(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">while</span>(!pq.isEmpty())&#123;</span><br><span class="line">        sb.append(pq.poll());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：间接法，计数"><a href="#法二：间接法，计数" class="headerlink" title="法二：间接法，计数"></a>法二：间接法，计数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">customSortString</span><span class="params">(String S, String T)</span> &#123;</span><br><span class="line">        <span class="comment">// count[char] = the number of occurrences of &#x27;char&#x27; in T.</span></span><br><span class="line">        <span class="comment">// This is offset so that count[0] = occurrences of &#x27;a&#x27;, etc.</span></span><br><span class="line">        <span class="comment">// &#x27;count&#x27; represents the current state of characters</span></span><br><span class="line">        <span class="comment">// (with multiplicity) we need to write to our answer.</span></span><br><span class="line">        <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c: T.toCharArray())</span><br><span class="line">            count[c - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ans will be our final answer.  We use StringBuilder to join</span></span><br><span class="line">        <span class="comment">// the answer so that we more efficiently calculate a</span></span><br><span class="line">        <span class="comment">// concatenation of strings.</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write all characters that occur in S, in the order of S.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c: S.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count[c - <span class="string">&#x27;a&#x27;</span>]; ++i)</span><br><span class="line">                ans.append(c);</span><br><span class="line">            <span class="comment">// Setting count[char] to zero to denote that we do</span></span><br><span class="line">            <span class="comment">// not need to write &#x27;char&#x27; into our answer anymore.</span></span><br><span class="line">            count[c - <span class="string">&#x27;a&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write all remaining characters that don&#x27;t occur in S.</span></span><br><span class="line">        <span class="comment">// That information is specified by &#x27;count&#x27;.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>; c &lt;= <span class="string">&#x27;z&#x27;</span>; ++c)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count[c - <span class="string">&#x27;a&#x27;</span>]; ++i)</span><br><span class="line">                ans.append(c);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="65-Valid-Number"><a href="#65-Valid-Number" class="headerlink" title="65. Valid Number"></a><a href="https://leetcode.cn/problems/valid-number/">65. Valid Number</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode65</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isNumber</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> seenDigit=<span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> seenDot=<span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> seenE=<span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> seenSign=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> c=s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;+&#x27;</span> || c==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(seenSign || seenDigit)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                seenSign=<span class="literal">true</span>;	</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(seenDot || seenE)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                seenDot=<span class="literal">true</span>;</span><br><span class="line">                seenSign=<span class="literal">true</span>;		<span class="comment">//出现.后不可以再出现+-号</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;e&#x27;</span> || c==<span class="string">&#x27;E&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(seenE || !seenDigit)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                seenE=<span class="literal">true</span>;</span><br><span class="line">                seenSign=<span class="literal">false</span>;		<span class="comment">//出现e后可以再次出现+-号</span></span><br><span class="line">                seenDigit=<span class="literal">false</span>;	<span class="comment">//出现e后必须出现数字</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Character.isDigit(c))&#123;</span><br><span class="line">                <span class="keyword">if</span>(!seenDigit)&#123;</span><br><span class="line">                    seenDigit=<span class="literal">true</span>;		</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> seenDigit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="827-Making-A-Large-Island"><a href="#827-Making-A-Large-Island" class="headerlink" title="827. Making A Large Island"></a><a href="https://leetcode.cn/problems/making-a-large-island/">827. Making A Large Island</a></h2><p>allowed to change <strong>at most one</strong> <code>0</code> to be <code>1</code></p>
<p>难！</p>
<p>最值问题考虑用<strong>DFS</strong>穷举，但必须考虑去重</p>
<p>也可以用<strong>UnionFind</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode827</span> &#123;</span><br><span class="line">    <span class="type">int</span> row;</span><br><span class="line">    <span class="type">int</span> col;</span><br><span class="line">    <span class="type">int</span> idx;</span><br><span class="line">    <span class="type">int</span>[][] grid;</span><br><span class="line">    <span class="type">int</span>[] area;</span><br><span class="line">    <span class="type">int</span>[] dx;</span><br><span class="line">    <span class="type">int</span>[] dy;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestIsland</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        row=grid.length;</span><br><span class="line">        col=grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="built_in">this</span>.grid=grid;</span><br><span class="line">        idx=<span class="number">2</span>;</span><br><span class="line">        dx=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        dy=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        area=<span class="keyword">new</span> <span class="title class_">int</span>[row*col+<span class="number">2</span>];    <span class="comment">//存储每个岛屿的面积，岛屿下标从2开始</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> max=Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j]==<span class="number">1</span>)&#123;</span><br><span class="line">                    area[idx]=dfs(i,j);</span><br><span class="line">                    max=Math.max(max,area[idx]);</span><br><span class="line">                    idx++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//注意去重，同一个岛屿只加一次</span></span><br><span class="line">        Set&lt;Integer&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j]==<span class="number">0</span>)&#123;</span><br><span class="line">                    set.clear();</span><br><span class="line">                    <span class="type">int</span> s=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                        <span class="type">int</span> x=i+dx[k];</span><br><span class="line">                        <span class="type">int</span> y=j+dy[k];</span><br><span class="line">                        <span class="keyword">if</span>(x&lt;<span class="number">0</span> || x&gt;=row || y&lt;<span class="number">0</span> || y&gt;=col || grid[x][y]==<span class="number">0</span>)&#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(set.contains(grid[x][y]))&#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        s+=area[grid[x][y]];</span><br><span class="line">                        set.add(grid[x][y]);    <span class="comment">//此时grid中存储的已经是岛屿的编号</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    max=Math.max(max,s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算每个岛屿的面积，并给岛屿编号，同一岛屿编号相同</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">        grid[i][j]=idx;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">            <span class="type">int</span> x=i+dx[k];</span><br><span class="line">            <span class="type">int</span> y=j+dy[k];</span><br><span class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span> || x&gt;=row || y&lt;<span class="number">0</span> || y&gt;=col || grid[x][y]!=<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//等于0说明是水，大于等于2说明已经作为岛屿(的一部分)被计算过了</span></span><br><span class="line">            res+=dfs(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="523-Continuous-Subarray-Sum"><a href="#523-Continuous-Subarray-Sum" class="headerlink" title="523. Continuous Subarray Sum"></a><a href="https://leetcode.cn/problems/continuous-subarray-sum/">523. Continuous Subarray Sum</a></h2><p><strong>prefix sum array + hashmap</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkSubarraySum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">0</span>,-<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            sum+=nums[i];</span><br><span class="line">            <span class="type">int</span> mod=sum%k&gt;=<span class="number">0</span> ? sum%k : sum%k+k;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(mod))&#123;</span><br><span class="line">                <span class="keyword">if</span>(i-map.get(mod)&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(mod,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="670-Maximum-Swap"><a href="#670-Maximum-Swap" class="headerlink" title="670. Maximum Swap"></a><a href="https://leetcode.cn/problems/maximum-swap/">670. Maximum Swap</a></h2><p>swap two digits at most once</p>
<p><strong>greedy</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode670</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumSwap</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(num);</span><br><span class="line">        <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="type">int</span>[] last=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            last[chars[i]-<span class="string">&#x27;0&#x27;</span>]=i;	<span class="comment">//记录每个digit的最后一次出现的位置; 针对1993,用最后一个9去换1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> done=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(done)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> digit=chars[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> d=<span class="number">9</span>; d&gt;digit; d--)&#123;	<span class="comment">//只用考虑比当前digit大的数字</span></span><br><span class="line">                <span class="keyword">if</span>(last[d]&gt;i)&#123;	<span class="comment">//若后面有比当前digit大的数字，交换</span></span><br><span class="line">                    <span class="type">char</span> temp=chars[last[d]];</span><br><span class="line">                    chars[last[d]]=chars[i];</span><br><span class="line">                    chars[i]=temp;</span><br><span class="line">                    done=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Integer.valueOf(<span class="keyword">new</span> <span class="title class_">String</span>(chars));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="721-Accounts-Merge"><a href="#721-Accounts-Merge" class="headerlink" title="721. Accounts Merge"></a><a href="https://leetcode.cn/problems/accounts-merge/">721. Accounts Merge</a></h2><p>并查集</p>
<p>以email为帮派，根据属于同一account来合并帮派</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode721</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">accountsMerge</span><span class="params">(List&lt;List&lt;String&gt;&gt; accounts)</span> &#123;</span><br><span class="line">        <span class="comment">//email union</span></span><br><span class="line">        <span class="comment">//email,account map 用于返回结果时对应account和email集</span></span><br><span class="line">        <span class="comment">//email,index map   用于合并同一个account的所有email</span></span><br><span class="line">        Map&lt;String,String&gt; email_account=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String,Integer&gt; email_index=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> emailCount=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; accounts.size(); i++) &#123;</span><br><span class="line">            List&lt;String&gt; account=accounts.get(i);</span><br><span class="line">            String name=account.get(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;account.size(); j++)&#123;</span><br><span class="line">                String email=account.get(j);</span><br><span class="line">                <span class="keyword">if</span>(!email_account.containsKey(email))&#123;<span class="comment">//注意：每个email只记录第一次</span></span><br><span class="line">                    email_account.put(email,name);</span><br><span class="line">                    email_index.put(email,emailCount++);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        UnionFind u=<span class="keyword">new</span> <span class="title class_">UnionFind</span>(emailCount);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//合并同一用户的email</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; accounts.size(); i++) &#123;</span><br><span class="line">            List&lt;String&gt; account=accounts.get(i);</span><br><span class="line">            String head=account.get(<span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> a=email_index.get(head);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>; j&lt;account.size(); j++)&#123;</span><br><span class="line">                String next=account.get(j);</span><br><span class="line">                <span class="type">int</span> b=email_index.get(next);</span><br><span class="line">                u.union(a,b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;Integer,List&lt;String&gt;&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String email : email_index.keySet()) &#123;</span><br><span class="line">            <span class="type">int</span> i=u.find(email_index.get(email));   <span class="comment">//每个email属于哪个帮派</span></span><br><span class="line">            <span class="keyword">if</span>(!map.containsKey(i))&#123;</span><br><span class="line">                map.put(i,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            map.get(i).add(email);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; value : map.values()) &#123;</span><br><span class="line">            String name=email_account.get(value.get(<span class="number">0</span>));</span><br><span class="line">            Collections.sort(value);</span><br><span class="line">            List&lt;String&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            list.add(name);</span><br><span class="line">            list.addAll(value);</span><br><span class="line">            res.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">UnionFind</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] parents;</span><br><span class="line">        <span class="type">int</span>[] sizes;</span><br><span class="line">        <span class="type">int</span> total;</span><br><span class="line"></span><br><span class="line">        UnionFind(<span class="type">int</span> n)&#123;</span><br><span class="line">            parents=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            sizes=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                parents[i]=i;</span><br><span class="line">                sizes[i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            total=n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(parents[i]!=i)&#123;</span><br><span class="line">                i=parents[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">            <span class="type">int</span> rootA=find(a);</span><br><span class="line">            <span class="type">int</span> rootB=find(b);</span><br><span class="line">            <span class="keyword">if</span>(rootA==rootB)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sizes[rootA]&lt;sizes[rootB])&#123;</span><br><span class="line">                parents[rootA]=rootB;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                parents[rootB]=rootA;</span><br><span class="line">            &#125;</span><br><span class="line">            total--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="636-Exclusive-Time-of-Functions"><a href="#636-Exclusive-Time-of-Functions" class="headerlink" title="636. Exclusive Time of Functions"></a><a href="https://leetcode.cn/problems/exclusive-time-of-functions/">636. Exclusive Time of Functions</a></h2><p><em>the exclusive time for a given function</em> </p>
<p>注意：</p>
<ol>
<li>既然用模拟法，就老老实实模拟，不要想当然！</li>
<li>String长度可能大于1，直接String转Integer，不要通过char</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode636</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] exclusiveTime(<span class="type">int</span> n, List&lt;String&gt; logs) &#123;</span><br><span class="line">        <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Deque&lt;Integer&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        String first=logs.get(<span class="number">0</span>);</span><br><span class="line">        String[] f = first.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">        stack.push(Integer.valueOf(f[<span class="number">0</span>]));</span><br><span class="line">        <span class="type">int</span> lastStart=Integer.valueOf(f[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;logs.size(); i++) &#123;</span><br><span class="line">            String[] split = logs.get(i).split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            <span class="type">int</span> cur=Integer.valueOf(split[<span class="number">0</span>]);</span><br><span class="line">            <span class="type">int</span> time=Integer.valueOf(split[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">if</span>(split[<span class="number">1</span>].charAt(<span class="number">0</span>)==<span class="string">&#x27;s&#x27;</span>)&#123;</span><br><span class="line">                <span class="comment">//start</span></span><br><span class="line">                <span class="keyword">if</span>(!stack.isEmpty())&#123;</span><br><span class="line">                    res[stack.peek()]+=time-lastStart;</span><br><span class="line">                &#125;</span><br><span class="line">                stack.push(cur);</span><br><span class="line">                lastStart=time;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//end</span></span><br><span class="line">                res[stack.peek()]+=time-lastStart+<span class="number">1</span>;</span><br><span class="line">                stack.pop();</span><br><span class="line">                lastStart=time+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="498-Diagonal-Traverse"><a href="#498-Diagonal-Traverse" class="headerlink" title="498. Diagonal Traverse"></a><a href="https://leetcode.cn/problems/diagonal-traverse/">498. Diagonal Traverse</a></h2><p>找规律：遍历方向由层数决定，层数为横纵坐标之和，偶数向左上，奇数向右下</p>
<p>注意边界处理：</p>
<ul>
<li>向左上遇到最后一列或第一行</li>
<li>向右下遇到最后一行或第一列</li>
<li>同时遇到边界，优先处理越最后一列和最后一行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode498</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findDiagonalOrder(<span class="type">int</span>[][] mat) &#123;</span><br><span class="line">        <span class="type">int</span> row=mat.length;</span><br><span class="line">        <span class="type">int</span> col=mat[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[row*col];</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; res.length; k++) &#123;</span><br><span class="line">            res[k]=mat[i][j];</span><br><span class="line">            <span class="keyword">if</span>(((i+j)&amp;<span class="number">1</span>)==<span class="number">0</span>)&#123;<span class="comment">//偶数层</span></span><br><span class="line">                <span class="keyword">if</span>(j==col-<span class="number">1</span>)&#123;<span class="comment">//不能调换判断顺序</span></span><br><span class="line">                    i++;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    i--;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//奇数层</span></span><br><span class="line">                <span class="keyword">if</span>(i==row-<span class="number">1</span>)&#123;<span class="comment">//不能调换判断顺序</span></span><br><span class="line">                    j++;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="173-Binary-Search-Tree-Iterator"><a href="#173-Binary-Search-Tree-Iterator" class="headerlink" title="173. Binary Search Tree Iterator"></a><a href="https://leetcode.cn/problems/binary-search-tree-iterator/">173. Binary Search Tree Iterator</a></h2><p>原来这种土方法还有洋名：<strong>扁平化</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BSTIterator</span> &#123;</span><br><span class="line"></span><br><span class="line">        LinkedList&lt;Integer&gt; list;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">BSTIterator</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">            list=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">            dfs(root);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> list.pollFirst();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> !list.isEmpty();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dfs(root.left);</span><br><span class="line">            list.add(root.val);</span><br><span class="line">            dfs(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1047-Remove-All-Adjacent-Duplicates-In-String"><a href="#1047-Remove-All-Adjacent-Duplicates-In-String" class="headerlink" title="1047. Remove All Adjacent Duplicates In String"></a><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">1047. Remove All Adjacent Duplicates In String</a></h2><p>看到匹配想到<strong>Stack</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">removeDuplicates</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n=s.length();</span><br><span class="line">        Deque&lt;Character&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!stack.isEmpty() &amp;&amp; stack.peek()==s.charAt(i))&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stack.push(s.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            sb.append(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="249-Group-Shifted-Strings"><a href="#249-Group-Shifted-Strings" class="headerlink" title="249. Group Shifted Strings"></a><a href="https://leetcode.cn/problems/group-shifted-strings/">249. Group Shifted Strings</a></h2><p>看到分组想到<strong>Map</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode249</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupStrings</span><span class="params">(String[] strings)</span> &#123;</span><br><span class="line">        Map&lt;String,List&lt;String&gt;&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : strings) &#123;</span><br><span class="line">            String r=s;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(<span class="number">0</span>)!=<span class="string">&#x27;a&#x27;</span>)&#123;</span><br><span class="line">                r=reg(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!map.containsKey(r))&#123;</span><br><span class="line">                map.put(r,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            map.get(r).add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(map.values());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">reg</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> shift=chars[<span class="number">0</span>]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            chars[i]-=shift;</span><br><span class="line">            <span class="keyword">if</span>(chars[i]&lt;<span class="string">&#x27;a&#x27;</span>)&#123;	<span class="comment">//注意&quot;ba&quot;的情况，需要调整成&quot;az&quot;</span></span><br><span class="line">                chars[i]+=<span class="number">26</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="139-Word-Break"><a href="#139-Word-Break" class="headerlink" title="139. Word Break"></a><a href="https://leetcode.cn/problems/word-break/">139. Word Break</a></h2><p>好题，一题三解！</p>
<h3 id="法一：DP"><a href="#法一：DP" class="headerlink" title="法一：DP"></a>法一：DP</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> &#123;</span><br><span class="line">    Set&lt;String&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(wordDict);</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    <span class="type">boolean</span>[] dp=<span class="keyword">new</span> <span class="title class_">boolean</span>[n+<span class="number">1</span>];<span class="comment">//dp[i]表示 s[0,i-1]合法</span></span><br><span class="line">    dp[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[j] &amp;&amp; set.contains(s.substring(j,i)))&#123;</span><br><span class="line">                dp[i]=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：DFS"><a href="#法二：DFS" class="headerlink" title="法二：DFS"></a>法二：DFS</h3><h3 id="法三：BFS"><a href="#法三：BFS" class="headerlink" title="法三：BFS"></a>法三：BFS</h3><h2 id="8-String-to-Integer-atoi"><a href="#8-String-to-Integer-atoi" class="headerlink" title="8. String to Integer (atoi)"></a><a href="https://leetcode.cn/problems/string-to-integer-atoi/">8. String to Integer (atoi)</a></h2><p>提早判断（越界时即判断并返回int结果）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">myAtoi</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        s=s.trim();</span><br><span class="line">        <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="type">boolean</span> negative=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> c=s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;+&#x27;</span> || c==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i!=<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">                    negative=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Character.isDigit(c))&#123;</span><br><span class="line">                res*=<span class="number">10</span>;</span><br><span class="line">                res+=c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span>(res&gt;Integer.MAX_VALUE)&#123;</span><br><span class="line">                    <span class="keyword">return</span> negative? Integer.MIN_VALUE :Integer.MAX_VALUE;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> negative? (<span class="type">int</span>)-res : (<span class="type">int</span>)res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="301-Remove-Invalid-Parentheses"><a href="#301-Remove-Invalid-Parentheses" class="headerlink" title="301. Remove Invalid Parentheses"></a><a href="https://leetcode.cn/problems/remove-invalid-parentheses/">301. Remove Invalid Parentheses</a></h2><p>好题！</p>
<h3 id="法一：backtracking："><a href="#法一：backtracking：" class="headerlink" title="法一：backtracking："></a>法一：backtracking：</h3><ol>
<li>先算出misplaced left和misplaced right的数量</li>
<li>遇到每个括号都考虑删去或保留</li>
<li>根据misplaced left和misplaced right剪枝</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode301</span> &#123;</span><br><span class="line">    Set&lt;String&gt; res;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">removeInvalidParentheses</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        res = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (left &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    left--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        backtracking(left,right,<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(),s,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, StringBuilder sb, String s, <span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==s.length())&#123;</span><br><span class="line">            <span class="keyword">if</span>(left!=<span class="number">0</span> || right!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(valid(sb.toString()))&#123;</span><br><span class="line">                res.add(sb.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left&lt;<span class="number">0</span> || right&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span> c=s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(Character.isLetter(c))&#123;</span><br><span class="line">            sb.append(c);</span><br><span class="line">            backtracking(left,right,sb,s,i+<span class="number">1</span>);</span><br><span class="line">            sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">            sb.append(c);</span><br><span class="line">            backtracking(left,right,sb,s,i+<span class="number">1</span>);</span><br><span class="line">            sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">            backtracking(left-<span class="number">1</span>,right,sb,s,i+<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            sb.append(c);</span><br><span class="line">            backtracking(left,right,sb,s,i+<span class="number">1</span>);</span><br><span class="line">            sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">            backtracking(left,right-<span class="number">1</span>,sb,s,i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">valid</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        Deque&lt;Character&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> c=s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(Character.isLetter(c))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                stack.push(c);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!stack.isEmpty())&#123;</span><br><span class="line">                    stack.pop();</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty() ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：BFS"><a href="#法二：BFS" class="headerlink" title="法二：BFS"></a>法二：BFS</h3><p>注意到题目中要求最少删除，这样的描述正是广度优先搜索算法应用的场景，并且题目也要求我们输出所有的结果。我们在进行广度优先搜索时每一轮删除字符串中的 11 个括号，直到出现合法匹配的字符串为止，此时进行轮转的次数即为最少需要删除括号的个数。</p>
<p>我们进行广度优先搜索时，每次保存上一轮搜索的结果，然后对上一轮已经保存的结果中的每一个字符串尝试所有可能的删除一个括号的方法，然后将保存的结果进行下一轮搜索。在保存结果时，我们可以利用哈希表对上一轮生成的结果去重，从而提高效率。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">removeInvalidParentheses</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        List&lt;String&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        Set&lt;String&gt; currSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        currSet.add(s);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String str : currSet) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isValid(str)) &#123;</span><br><span class="line">                    ans.add(str);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ans.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">            Set&lt;String&gt; nextSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">            <span class="keyword">for</span> (String str : currSet) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i ++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; str.charAt(i) == str.charAt(i - <span class="number">1</span>)) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (str.charAt(i) == <span class="string">&#x27;(&#x27;</span> || str.charAt(i) == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                        nextSet.add(str.substring(<span class="number">0</span>, i) + str.substring(i + <span class="number">1</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            currSet = nextSet;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] ss = str.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : ss) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                count--;</span><br><span class="line">                <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">return</span> <span class="variable">count</span> <span class="operator">=</span>= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="317-Shortest-Distance-from-All-Buildings"><a href="#317-Shortest-Distance-from-All-Buildings" class="headerlink" title="317. Shortest Distance from All Buildings"></a><a href="https://leetcode.cn/problems/shortest-distance-from-all-buildings/">317. Shortest Distance from All Buildings</a></h2><h2 id="140-Word-Break-II"><a href="#140-Word-Break-II" class="headerlink" title="140. Word Break II"></a><a href="https://leetcode.cn/problems/word-break-ii/">140. Word Break II</a></h2><p>经典backtracking</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode140</span> &#123;</span><br><span class="line">    List&lt;String&gt; res;</span><br><span class="line">    Set&lt;String&gt; set;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> &#123;</span><br><span class="line">        res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String word : wordDict) &#123;</span><br><span class="line">            set.add(word);</span><br><span class="line">        &#125;</span><br><span class="line">        backtracking(s,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(),<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(String s, List&lt;String&gt; list, <span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==s.length())&#123;</span><br><span class="line">            StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span> (String sub : list) &#123;</span><br><span class="line">                sb.append(sub);</span><br><span class="line">                sb.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">            res.add(sb.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; s.length(); j++) &#123;</span><br><span class="line">            String sub=s.substring(i,j+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(set.contains(sub))&#123;</span><br><span class="line">                list.add(sub);</span><br><span class="line">                backtracking(s,list,j+<span class="number">1</span>);</span><br><span class="line">                list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>Random选编</title>
    <url>/2022/05/31/Random%E9%80%89%E7%BC%96/</url>
    <content><![CDATA[<h1 id="Random选编"><a href="#Random选编" class="headerlink" title="Random选编"></a>Random选编</h1><h2 id="528-Random-Pick-with-Weight"><a href="#528-Random-Pick-with-Weight" class="headerlink" title="528. Random Pick with Weight"></a><a href="https://leetcode.cn/problems/random-pick-with-weight/">528. Random Pick with Weight</a></h2><p>前缀和数组 + 二分查找</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] preSum;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> total;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Solution</span><span class="params">(<span class="type">int</span>[] w)</span> &#123;</span><br><span class="line">        n=w.length;</span><br><span class="line">        preSum=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        preSum[<span class="number">0</span>]=w[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            preSum[i]=preSum[i-<span class="number">1</span>]+w[i];</span><br><span class="line">        &#125;</span><br><span class="line">        total= Arrays.stream(w).sum();	<span class="comment">//整个数组求和</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pickIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> x=(<span class="type">int</span>)(Math.random()*total)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> binarySearch(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span> target)</span>&#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=n;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="type">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(preSum[mid]&lt;target)&#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right=mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="382-Linked-List-Random-Node"><a href="#382-Linked-List-Random-Node" class="headerlink" title="382. Linked List Random Node"></a><a href="https://leetcode.cn/problems/linked-list-random-node/">382. Linked List Random Node</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode382</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">        <span class="type">int</span> count;</span><br><span class="line">        ListNode head;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Solution</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">            count=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">this</span>.head=head;</span><br><span class="line">            ListNode p=head;</span><br><span class="line">            <span class="keyword">while</span>(p!=<span class="literal">null</span>)&#123;</span><br><span class="line">                p=p.next;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRandom</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> index=(<span class="type">int</span>)(Math.random()*count);	<span class="comment">//注意，(int)优先级小于*，必须加括号</span></span><br><span class="line">            ListNode p=head;</span><br><span class="line">            <span class="keyword">while</span>(index--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                p=p.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> p.val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：reservoir-sampling"><a href="#法二：reservoir-sampling" class="headerlink" title="法二：reservoir sampling"></a>法二：reservoir sampling</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247490892&amp;idx=1&amp;sn=c1fe373edc88142cbabd383ef3c0669b">https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247490892&amp;idx=1&amp;sn=c1fe373edc88142cbabd383ef3c0669b</a></p>
<p><strong>总的样本数量未知</strong>，从所有样本中抽取若干个，要求每个样本被抽到的<strong>概率相等</strong>。</p>
<p><strong>从前往后处理每个样本</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    Random random;</span><br><span class="line">    ListNode head;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Solution</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.head=head;</span><br><span class="line">        <span class="built_in">this</span>.random=<span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRandom</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;	<span class="comment">//也可以初始化为 res=head.val;		孰优孰劣?</span></span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        ListNode p=head;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">null</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="type">int</span> ran=random.nextInt(count);  <span class="comment">//	当前1/count的概率被选中</span></span><br><span class="line">            <span class="keyword">if</span>(ran==<span class="number">0</span>)&#123;</span><br><span class="line">                res=p.val;</span><br><span class="line">            &#125;</span><br><span class="line">            p=p.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;	<span class="comment">//最后一个被选中的数的被选中概率就是1/n</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="398-Random-Pick-Index"><a href="#398-Random-Pick-Index" class="headerlink" title="398. Random Pick Index"></a><a href="https://leetcode.cn/problems/random-pick-index/">398. Random Pick Index</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">        Random random;</span><br><span class="line">        Map&lt;Integer, List&lt;Integer&gt;&gt; map;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Solution</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">            random=<span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">            map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!map.containsKey(nums[i]))&#123;</span><br><span class="line">                    map.put(nums[i],<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">                &#125;</span><br><span class="line">                map.get(nums[i]).add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pick</span><span class="params">(<span class="type">int</span> target)</span> &#123;</span><br><span class="line">            List&lt;Integer&gt; list = map.get(target);</span><br><span class="line">            <span class="type">int</span> size=list.size();</span><br><span class="line">            <span class="keyword">return</span> list.get(random.nextInt(size));</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：reservoir-sampling-1"><a href="#法二：reservoir-sampling-1" class="headerlink" title="法二：reservoir sampling"></a>法二：reservoir sampling</h3><p>时间换空间，会超时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] nums;</span><br><span class="line">    Random random;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Solution</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nums=nums;</span><br><span class="line">        <span class="built_in">this</span>.random=<span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pick</span><span class="params">(<span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==target)&#123;</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">if</span>(random.nextInt(count)==<span class="number">0</span>)&#123;</span><br><span class="line">                    res=i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="497-Random-Point-in-Non-overlapping-Rectangles"><a href="#497-Random-Point-in-Non-overlapping-Rectangles" class="headerlink" title="497. Random Point in Non-overlapping Rectangles"></a><a href="https://leetcode.cn/problems/random-point-in-non-overlapping-rectangles/">497. Random Point in Non-overlapping Rectangles</a></h2><p>32&#x2F;35 直接法错误！居然还能过32个测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[][] rects;</span><br><span class="line">    Random random;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Solution</span><span class="params">(<span class="type">int</span>[][] rects)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rects=rects;</span><br><span class="line">        <span class="built_in">this</span>.random=<span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] pick() &#123;</span><br><span class="line">        <span class="type">int</span> n=rects.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> random.nextInt(n);	<span class="comment">//未考虑到各矩形的面积，并不是等概率选</span></span><br><span class="line">        <span class="type">int</span> x1=rects[i][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> x2=rects[i][<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> y1=rects[i][<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> y2=rects[i][<span class="number">3</span>];</span><br><span class="line">        <span class="type">int</span> x=(<span class="type">int</span>)(Math.random()*(x2-x1+<span class="number">1</span>))+x1;</span><br><span class="line">        <span class="type">int</span> y=(<span class="type">int</span>)(Math.random()*(y2-y1+<span class="number">1</span>))+y1;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x,y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>蓄水池采样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[][] rects;</span><br><span class="line">    Random random;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Solution</span><span class="params">(<span class="type">int</span>[][] rects)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rects=rects;</span><br><span class="line">        <span class="built_in">this</span>.random=<span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] pick() &#123;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt; rects.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span>[] rect=rects[i];</span><br><span class="line">            <span class="type">int</span> area=(rect[<span class="number">2</span>]-rect[<span class="number">0</span>]+<span class="number">1</span>)*(rect[<span class="number">3</span>]-rect[<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">            sum+=area;</span><br><span class="line">            <span class="keyword">if</span>(random.nextInt(sum)&lt;area)&#123;   <span class="comment">//[0,sum)   [0,area)</span></span><br><span class="line">                index=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] arr=rects[index];</span><br><span class="line">        <span class="type">int</span> x1=arr[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> y1=arr[<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> x2=arr[<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> y2=arr[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;random.nextInt(x2-x1+<span class="number">1</span>)+x1,random.nextInt(y2-y1+<span class="number">1</span>)+y1&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="478-Generate-Random-Point-in-a-Circle"><a href="#478-Generate-Random-Point-in-a-Circle" class="headerlink" title="478. Generate Random Point in a Circle"></a><a href="https://leetcode.cn/problems/generate-random-point-in-a-circle/">478. Generate Random Point in a Circle</a></h2><p>注意：</p>
<ol>
<li>Math.random():    [0,1)</li>
<li>random().nextInt(x):     [0,x)</li>
<li>random().nextDouble():  [0.0d,1.0d)</li>
<li>random().nextFloat(): [0.0f,1.0f]</li>
</ol>
<h3 id="法一：rejection-sampling-拒绝采样"><a href="#法一：rejection-sampling-拒绝采样" class="headerlink" title="法一：rejection sampling: 拒绝采样"></a>法一：rejection sampling: 拒绝采样</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> r;</span><br><span class="line">    <span class="type">double</span> x_center;</span><br><span class="line">    <span class="type">double</span> y_center;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Solution</span><span class="params">(<span class="type">double</span> radius, <span class="type">double</span> x_center, <span class="type">double</span> y_center)</span> &#123;</span><br><span class="line">        r=radius;</span><br><span class="line">        <span class="built_in">this</span>.x_center=x_center;</span><br><span class="line">        <span class="built_in">this</span>.y_center=y_center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span>[] randPoint() &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">double</span> dx=Math.random()*<span class="number">2</span>*r-r;</span><br><span class="line">            <span class="type">double</span> dy=Math.random()*<span class="number">2</span>*r-r;</span><br><span class="line">            <span class="keyword">if</span>(dx*dx+dy*dy&lt;=r*r)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">double</span>[]&#123;x_center+dx,y_center+dy&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：几何法"><a href="#法二：几何法" class="headerlink" title="法二：几何法"></a>法二：几何法</h3><p>随机生成<code>len</code>和<code>angle</code>，利用三角函数计算出<code>dx</code>,<code>dy</code></p>
<p>注意，随机生成<code>len</code>时不能直接 在[0,r)间random，因为这样不是对每个点等概率的！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    Random random;</span><br><span class="line">    <span class="type">double</span> r;</span><br><span class="line">    <span class="type">double</span> x;</span><br><span class="line">    <span class="type">double</span> y;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Solution</span><span class="params">(<span class="type">double</span> radius, <span class="type">double</span> x_center, <span class="type">double</span> y_center)</span> &#123;</span><br><span class="line">        r=radius;</span><br><span class="line">        x=x_center;</span><br><span class="line">        y=y_center;</span><br><span class="line">        random=<span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span>[] randPoint() &#123;</span><br><span class="line">        <span class="type">double</span> len=Math.sqrt(random.nextDouble()*r*r);</span><br><span class="line">        <span class="type">double</span> angle=random.nextDouble()*Math.PI*<span class="number">2</span>;</span><br><span class="line">        <span class="type">double</span> dx=len*Math.cos(angle);</span><br><span class="line">        <span class="type">double</span> dy=len*Math.sin(angle);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">double</span>[]&#123;x+dx,y+dy&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="380-Insert-Delete-GetRandom-O-1"><a href="#380-Insert-Delete-GetRandom-O-1" class="headerlink" title="380. Insert Delete GetRandom O(1)"></a>380. Insert Delete GetRandom O(1)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RandomizedSet</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; list;</span><br><span class="line">    Map&lt;Integer,Integer&gt; keyToIndex;</span><br><span class="line">    Random rand;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RandomizedSet</span><span class="params">()</span> &#123;</span><br><span class="line">        list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        keyToIndex=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        rand=<span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(keyToIndex.containsKey(val))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        keyToIndex.put(val,list.size());</span><br><span class="line">        list.add(val);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!keyToIndex.containsKey(val))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> idx=keyToIndex.get(val);</span><br><span class="line">        <span class="comment">//delete list[idx]:</span></span><br><span class="line">        <span class="comment">//swap list[idx] and list[list.size()-1]</span></span><br><span class="line">        <span class="comment">//delete list[list.size()-1]</span></span><br><span class="line">        <span class="type">int</span> last=list.get(list.size()-<span class="number">1</span>);</span><br><span class="line">        list.set(idx,last);</span><br><span class="line">        list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">        keyToIndex.put(last,idx);</span><br><span class="line">        keyToIndex.remove(val);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRandom</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> idx=<span class="number">0</span>+rand.nextInt(list.size());</span><br><span class="line">        <span class="keyword">return</span> list.get(idx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>why wrong?!</p>
<p>为何每次iterator.next()都返回相同值？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RandomizedSet</span> &#123;</span><br><span class="line"></span><br><span class="line">    Set&lt;Integer&gt; set;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RandomizedSet</span><span class="params">()</span> &#123;</span><br><span class="line">        set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(set.contains(val))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        set.add(val);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!set.contains(val))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        set.remove(val);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRandom</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> set.iterator().next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>random</tag>
      </tags>
  </entry>
  <entry>
    <title>Serialize&amp;&amp;Deserialize</title>
    <url>/2022/11/09/Serialize&amp;&amp;Deserialize/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>NestedList</title>
    <url>/2022/11/11/NestedList/</url>
    <content><![CDATA[<h1 id="NestedList问题"><a href="#NestedList问题" class="headerlink" title="NestedList问题"></a>NestedList问题</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * // This is the interface that allows for creating nested lists.</span></span><br><span class="line"><span class="comment"> * // You should not implement it, or speculate about its implementation</span></span><br><span class="line"><span class="comment"> * public interface NestedInteger &#123;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     // <span class="doctag">@return</span> true if this NestedInteger holds a single integer, rather than a nested list.</span></span><br><span class="line"><span class="comment"> *     public boolean isInteger();</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     // <span class="doctag">@return</span> the single integer that this NestedInteger holds, if it holds a single integer</span></span><br><span class="line"><span class="comment"> *     // Return null if this NestedInteger holds a nested list</span></span><br><span class="line"><span class="comment"> *     public Integer getInteger();</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     // <span class="doctag">@return</span> the nested list that this NestedInteger holds, if it holds a nested list</span></span><br><span class="line"><span class="comment"> *     // Return empty list if this NestedInteger holds a single integer</span></span><br><span class="line"><span class="comment"> *     public List&lt;NestedInteger&gt; getList();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>



<h2 id="339-Nested-List-Weight-Sum"><a href="#339-Nested-List-Weight-Sum" class="headerlink" title="339. Nested List Weight Sum"></a>339. Nested List Weight Sum</h2><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS:"></a>DFS:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">depthSum</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> dfs(nestedList,<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(List&lt;NestedInteger&gt; nestedList, <span class="type">int</span> depth)</span>&#123;</span><br><span class="line">     <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(NestedInteger i: nestedList)&#123;</span><br><span class="line">         <span class="keyword">if</span>(i.isInteger())&#123;</span><br><span class="line">             res+=i.getInteger()*depth;</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             res+=dfs(i.getList(),depth+<span class="number">1</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> res;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS:"></a>BFS:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">depthSum</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> &#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    Deque&lt;NestedInteger&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(NestedInteger i : nestedList)&#123;</span><br><span class="line">        q.offer(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> depth=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span> size=q.size();</span><br><span class="line">        <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            NestedInteger i=q.poll();</span><br><span class="line">            <span class="keyword">if</span>(i.isInteger())&#123;</span><br><span class="line">                res+=i.getInteger()*depth;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(NestedInteger j: i.getList())&#123;</span><br><span class="line">                    q.offer(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        depth++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="364-Nested-List-Weight-Sum-II"><a href="#364-Nested-List-Weight-Sum-II" class="headerlink" title="364. Nested List Weight Sum II"></a>364. Nested List Weight Sum II</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> maxDepth=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">depthSumInverse</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(NestedInteger i : nestedList)&#123;</span><br><span class="line">        maxDepth=Math.max(maxDepth,getMax(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dfs(nestedList,maxDepth);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">dfs</span><span class="params">(List&lt;NestedInteger&gt; nestedList, <span class="type">int</span> depth)</span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(NestedInteger i : nestedList)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i.isInteger())&#123;</span><br><span class="line">            res+=i.getInteger()*depth;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res+=dfs(i.getList(),depth-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getMax</span><span class="params">(NestedInteger i)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i.isInteger())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> depth=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(NestedInteger next : i.getList())&#123;</span><br><span class="line">        depth=Math.max(depth,getMax(next)+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> depth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="341-Flatten-Nested-List-Iterator"><a href="#341-Flatten-Nested-List-Iterator" class="headerlink" title="341. Flatten Nested List Iterator"></a>341. Flatten Nested List Iterator</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NestedIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; list;</span><br><span class="line">    Iterator&lt;Integer&gt; iterator;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NestedIterator</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> &#123;</span><br><span class="line">        list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        parse(nestedList);</span><br><span class="line">        iterator=list.iterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">parse</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (NestedInteger n : nestedList) &#123;</span><br><span class="line">            <span class="keyword">if</span>(n.isInteger())&#123;</span><br><span class="line">                list.add(n.getInteger());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                parse(n.getList());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> iterator.next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> iterator.hasNext();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>System Design</title>
    <url>/2022/07/29/System%20Design/</url>
    <content><![CDATA[<h1 id="GLOSSARY-OF-SYSTEM-DESIGN-BASICS"><a href="#GLOSSARY-OF-SYSTEM-DESIGN-BASICS" class="headerlink" title="GLOSSARY OF SYSTEM DESIGN BASICS"></a>GLOSSARY OF SYSTEM DESIGN BASICS</h1><h2 id="System-Design-Basics"><a href="#System-Design-Basics" class="headerlink" title="System Design Basics"></a><a href="https://akshay-iyangar.github.io/system-design/grokking-system-design/system-design-basics/system-design-basics.html">System Design Basics</a></h2><h2 id="Key-Characteristics-of-Distributed-Systems"><a href="#Key-Characteristics-of-Distributed-Systems" class="headerlink" title="Key Characteristics of Distributed Systems"></a><a href="https://akshay-iyangar.github.io/system-design/grokking-system-design/system-design-basics/key-charactersitics-of-distributed-systems.html">Key Characteristics of Distributed Systems</a></h2><p><strong>Scalability</strong></p>
<ul>
<li>Scalability is the capability of a system, process, or a network to grow and manage increased demand. </li>
<li>Any distributed system that can continuously evolve in order to support the growing amount of work is considered to be scalable.</li>
<li>horizontal scaling</li>
<li>vertical scaling</li>
</ul>
<p><strong>Reliability</strong></p>
<ul>
<li>By definition, reliability is the probability a system will fail in a given period. </li>
<li>In simple terms, a distributed system is considered reliable if it keeps delivering its services even when one or several of its software or hardware components fail.</li>
<li>A reliable distributed system achieves this through <strong>redundancy of both the software components and data.</strong> </li>
<li>Obviously, redundancy has a cost and a reliable system has to pay that to achieve such resilience for services by <em><strong>eliminating every single point of failure</strong></em>.</li>
</ul>
<p><strong>Availability</strong></p>
<ul>
<li><p>By definition, availability is the time a system remains operational to perform its required function in a specific period.</p>
</li>
<li><p>It is a simple measure of the percentage of time that a system, service, or a machine remains operational under normal conditions.</p>
</li>
<li><p>If a system is reliable, it is available. However, if it is available, it is not necessarily reliable.</p>
</li>
<li><p>In other words, high reliability contributes to high availability, but it is possible to achieve a high availability even with an unreliable product by minimizing repair time and ensuring that spares are always available when they are needed.</p>
</li>
</ul>
<p><strong>Efficiency</strong></p>
<ul>
<li>response time (or latency)</li>
<li>throughput (or bandwidth)</li>
</ul>
<p><strong>Serviceability or Manageability</strong></p>
<ul>
<li>the simplicity and speed with which a system can be repaired or maintained</li>
</ul>
<h2 id="Load-Balancing"><a href="#Load-Balancing" class="headerlink" title="Load Balancing"></a><a href="https://akshay-iyangar.github.io/system-design/grokking-system-design/system-design-basics/load-balancing.html">Load Balancing</a></h2><p>To utilize full scalability and redundancy, we can try to balance the load at each layer of the system. We can add LBs at three places:</p>
<ul>
<li>Between the user and the web server</li>
<li>Between web servers and an internal platform layer, like application servers or cache servers</li>
<li>Between internal platform layer and database.</li>
</ul>
<p>Load Blancing Algorithms:</p>
<ul>
<li><strong>Health Checks</strong></li>
</ul>
<ol>
<li><strong>Least Connection Method</strong></li>
<li><strong>Least Response Time Method</strong></li>
<li><strong>Least Bandwidth Method</strong></li>
<li><strong>Round Robin Method</strong></li>
<li><strong>Weighted Round Robin Method</strong> </li>
<li><strong>IP Hash</strong></li>
</ol>
<h2 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a><a href="https://akshay-iyangar.github.io/system-design/grokking-system-design/system-design-basics/caching.html">Caching</a></h2><ul>
<li><p>Caches take advantage of the locality of reference principle: <strong>recently requested data is likely to be requested again.</strong></p>
</li>
<li><p>They are used in almost every layer of computing: <strong>hardware, operating systems, web browsers, web applications</strong>, and more.</p>
</li>
<li><p>Application server cache</p>
</li>
<li><p>Content Distribution Network (CDN)</p>
</li>
<li><p>Cache Invalidation:</p>
<ol>
<li><p>keep cache coherent with the source of truth (e.g., database).</p>
</li>
<li><p><strong>Write-through cache</strong></p>
<p>Under this scheme, data is written into the cache and the corresponding database at the same time. </p>
</li>
<li><p><strong>Write-around cache</strong></p>
<p>This technique is similar to write through cache, but data is written directly to permanent storage, bypassing the cache.</p>
</li>
<li><p><strong>Write-back cache</strong></p>
<p>Under this scheme, data is written to cache alone and completion is immediately confirmed to the client. The write to the permanent storage is done after specified intervals or under certain conditions.</p>
</li>
</ol>
</li>
<li><p>Cache eviction policies:</p>
<ol>
<li>First In First Out (FIFO)</li>
<li>Last In First Out (LIFO)</li>
<li>Least Recently Used (LRU)</li>
<li>Most Recently Used (MRU)</li>
<li>Least Frequently Used (LFU)</li>
<li>Random Replacement (RR)</li>
</ol>
</li>
</ul>
<h2 id="Data-Partitioning"><a href="#Data-Partitioning" class="headerlink" title="Data Partitioning"></a><a href="https://akshay-iyangar.github.io/system-design/grokking-system-design/system-design-basics/data-partitioning.html">Data Partitioning</a></h2><ul>
<li><p>Data partitioning is a technique to break up a big database (DB) into many smaller parts. </p>
</li>
<li><p>Partitioning methods:</p>
<ol>
<li><p><strong>Horizontal partitioning</strong></p>
<p>In this scheme, we put different rows into different tables. </p>
</li>
<li><p><strong>Vertical Partitioning</strong></p>
<p>In this scheme, we divide our data to store tables related to a specific feature in their own server.</p>
</li>
<li><p><strong>Directory Based Partitioning</strong></p>
</li>
</ol>
</li>
<li><p>Partitioning criteria:</p>
<ol>
<li><strong>Key or Hash-based partitioning</strong></li>
<li><strong>List partitioning</strong></li>
<li><strong>Round-robin partitioning</strong></li>
<li><strong>Composite partitioning</strong></li>
</ol>
</li>
<li><p>Common problems of data partitioning:</p>
<ol>
<li><strong>Joins and Denormalization</strong></li>
<li><strong>Referential integrity</strong></li>
<li><strong>Rebalancing</strong></li>
</ol>
</li>
</ul>
<h2 id="Indexes"><a href="#Indexes" class="headerlink" title="Indexes"></a><a href="https://akshay-iyangar.github.io/system-design/grokking-system-design/system-design-basics/indexes.html">Indexes</a></h2><ul>
<li><p>The goal of creating an index on a particular table in a database is to make it faster to search through the table and find the row or rows that we want. </p>
</li>
<li><p>Indexes can be created using one or more columns of a database table, providing the basis for both <em><strong>rapid random lookups</strong></em> and <em><strong>efficient access of ordered records</strong></em>.</p>
</li>
<li><p>An index can dramatically <strong>speed up data retrieval</strong> but may itself be large due to the additional keys, which <strong>slow down data insertion &amp; update</strong>.</p>
</li>
</ul>
<h2 id="Proxies"><a href="#Proxies" class="headerlink" title="Proxies"></a><a href="https://akshay-iyangar.github.io/system-design/grokking-system-design/system-design-basics/proxies.html">Proxies</a></h2><p>In short, a <a href="https://en.wikipedia.org/wiki/Proxy_server">proxy server</a> is a piece of software or hardware that acts as an intermediary for requests from clients seeking resources from other servers.</p>
<ul>
<li>Typically, proxies are used to <em><strong>filter requests, log requests</strong></em>, or sometimes <em><strong>transform requests</strong></em> (by adding&#x2F;removing headers, encrypting&#x2F;decrypting, or compressing a resource). </li>
<li>Another advantage of a proxy server is that <em><strong>its cache can serve a lot of requests</strong></em>. If multiple clients access a particular resource, the proxy server can cache it and serve it to all the clients without going to the remote server.</li>
</ul>
<p><strong>Open Proxy</strong>:</p>
<ol>
<li><strong>Anonymous Proxy</strong></li>
<li><strong>Trаnspаrent Proxy</strong></li>
</ol>
<p><strong>Reverse Proxy</strong>:    反向代理</p>
<ul>
<li>A <a href="https://en.wikipedia.org/wiki/Reverse_proxy">reverse proxy</a> retrieves resources on behalf of a client from one or more servers. These resources are then returned to the client, appearing as if they originated from the proxy server itself</li>
</ul>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="Redundancy-and-Replication"><a href="#Redundancy-and-Replication" class="headerlink" title="Redundancy and Replication"></a><a href="https://akshay-iyangar.github.io/system-design/grokking-system-design/system-design-basics/redundancy-and-replication.html">Redundancy and Replication</a></h2><p>server redundancy</p>
<p>data replication    master-slave relationship between the original and the copies</p>
<h2 id="SQL-vs-NoSQL"><a href="#SQL-vs-NoSQL" class="headerlink" title="SQL vs. NoSQL"></a><a href="https://akshay-iyangar.github.io/system-design/grokking-system-design/system-design-basics/sql-vs-nosql.html">SQL vs. NoSQL</a></h2><p><strong>SQL</strong>:</p>
<ul>
<li>Relational databases store data in rows and columns. </li>
<li>Each row contains all the information about one entity and each column contains all the separate data points. </li>
<li>Some of the most popular relational databases are MySQL, Oracle, MS SQL Server, SQLite, Postgres, and MariaDB.</li>
</ul>
<p><strong>NoSQL</strong>:</p>
<ol>
<li><strong>Key-Value Stores:</strong> Data is stored in an array of key-value pairs. The ‘key’ is an attribute name which is linked to a ‘value’. Well-known key-value stores include Redis, Voldemort, and Dynamo.</li>
<li><strong>Document Databases:</strong> In these databases, data is stored in documents (instead of rows and columns in a table) and these documents are grouped together in collections. Each document can have an entirely different structure. Document databases include the CouchDB and MongoDB.</li>
<li><strong>Wide-Column Databases:</strong> Instead of ‘tables,’ in <em><strong>columnar</strong></em> databases we have column families, which are containers for rows. Unlike relational databases, we don’t need to know all the columns up front and each row doesn’t have to have the same number of columns. Columnar databases are best suited for analyzing large datasets - big names include Cassandra and HBase.</li>
<li><strong>Graph Databases:</strong> These databases are used to store data whose relations are best represented in a graph. Data is saved in graph structures with nodes (entities), properties (information about the entities), and lines (connections between the entities). Examples of graph database include Neo4J and InfiniteGraph.</li>
</ol>
<table>
<thead>
<tr>
<th></th>
<th>SQL</th>
<th>NoSQL</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Storage</strong></td>
<td>tables</td>
<td>key-value, document, graph, and columnar</td>
</tr>
<tr>
<td><strong>Schema</strong></td>
<td>fixed</td>
<td>dynamic</td>
</tr>
<tr>
<td><strong>Querying</strong></td>
<td>SQL (structured query language)</td>
<td>UnQL (Unstructured Query Language)</td>
</tr>
<tr>
<td><strong>Scalability</strong></td>
<td>vertically scalable, expensive</td>
<td>horizontally scalable, easy</td>
</tr>
<tr>
<td><strong>ACID Compliancy</strong></td>
<td>ACID compliant</td>
<td>sacrifice ACID compliance for performance and scalability</td>
</tr>
</tbody></table>
<p>**ACID :(Atomicity, Consistency, Isolation, Durability) **</p>
<h2 id="CAP-Theorem"><a href="#CAP-Theorem" class="headerlink" title="CAP Theorem"></a><a href="https://akshay-iyangar.github.io/system-design/grokking-system-design/system-design-basics/cap-theorem.html">CAP Theorem</a></h2><p>CAP theorem states that it is impossible for a distributed software system to simultaneously provide more than two out of three of the following guarantees (CAP): Consistency, Availability, and Partition tolerance.</p>
<p>CAP theorem says while designing a distributed system we can pick <strong>only two</strong> of the following three options:</p>
<p><strong>Consistency:</strong> All nodes see the same data at the same time. Consistency is achieved by <em><strong>updating several nodes before allowing further reads</strong></em>.</p>
<p><em>All users see the same data at the same time.</em></p>
<p><strong>Availability:</strong> Every request gets a response on success&#x2F;failure. Availability is achieved by <em><strong>replicating the data across different servers</strong></em>.</p>
<p><em>System continues to function even with node failures.</em></p>
<p><strong>Partition tolerance:</strong> The system continues to work despite message loss or partial failure. A system that is partition-tolerant can sustain any amount of network failure that doesn’t result in a failure of the entire network. *<strong>Data is sufficiently replicated across combinations of nodes and networks</strong> to keep the system up through intermittent outages.</p>
<p><em>System continues to function even if the communication fails between nodes.</em></p>
<h2 id="Consistent-Hashing"><a href="#Consistent-Hashing" class="headerlink" title="Consistent Hashing"></a><a href="https://akshay-iyangar.github.io/system-design/grokking-system-design/system-design-basics/consistent-hashing.html">Consistent Hashing</a></h2><p>Distributed Hash Table (DHT) </p>
<p><strong>index &#x3D; hash_function(key)</strong>    逻辑地址，不一定是物理地址</p>
<p>drawbacks of <code>key % n</code> hash function:</p>
<ol>
<li>It is NOT horizontally scalable.</li>
<li>It may NOT be load balanced, especially for non-uniformly distributed data.</li>
</ol>
<p>In Consistent Hashing, when the hash table is resized (e.g. a new cache host is added to the system), only <code>k/n</code> keys need to be remapped where<code>‘k</code> is the total number of keys and <code>n</code> is the total number of servers. Recall that in a caching system using the <code>mod</code> as the hash function, all keys need to be remapped.</p>
<p>In Consistent Hashing, objects are mapped to the same host if possible. When a host is removed from the system, the objects on that host are shared by other hosts; when a new host is added, it takes its share from a few hosts without touching other’s shares.</p>
<h2 id="Long-Polling-vs-WebSockets-vs-Server-Sent-Events"><a href="#Long-Polling-vs-WebSockets-vs-Server-Sent-Events" class="headerlink" title="Long-Polling vs WebSockets vs Server-Sent Events"></a><a href="https://akshay-iyangar.github.io/system-design/grokking-system-design/system-design-basics/long-polling.html">Long-Polling vs WebSockets vs Server-Sent Events</a></h2><p><strong>standard HTTP web request</strong>:</p>
<ol>
<li>The client opens a connection and requests data from the server.</li>
<li>The server calculates the response.</li>
<li>The server sends the response back to the client on the opened request.</li>
</ol>
<p><strong>Ajax Polling</strong>:</p>
<ul>
<li><p>The basic idea is that the client repeatedly polls (or requests) a server for data. </p>
</li>
<li><p>The client makes a request and waits for the server to respond with data. If no data is available, an empty response is returned.</p>
</li>
</ul>
<ol>
<li>The client opens a connection and requests data from the server using regular HTTP.</li>
<li>The requested webpage sends requests to the server at regular intervals (e.g., 0.5 seconds).</li>
<li>The server calculates the response and sends it back, just like regular HTTP traffic.</li>
<li>The client repeats the above three steps periodically to get updates from the server.</li>
</ol>
<p><strong>HTTP Long-Polling (Hanging GET)</strong>:</p>
<ul>
<li>If the server does not have any data available for the client, instead of sending an empty response, the server holds the request and waits until some data becomes available.</li>
<li>Once the data becomes available, a full response is sent to the client. The client then immediately re-request information from the server so that the server will almost always have an available waiting request that it can use to deliver data in response to an event.</li>
</ul>
<ol>
<li>The client makes an initial request using regular HTTP and then waits for a response.</li>
<li>The server delays its response until an update is available or a timeout has occurred.</li>
<li>When an update is available, the server sends a full response to the client.</li>
<li>The client typically sends a new long-poll request, either immediately upon receiving a response or after a pause to allow an acceptable latency period.</li>
<li>Each Long-Poll request has a timeout. The client has to reconnect periodically after the connection is closed due to timeouts.</li>
</ol>
<p><strong>WebSockets</strong>:</p>
<ul>
<li>full duplex （全双工）</li>
<li>WebSocket provides <a href="https://en.wikipedia.org/wiki/Duplex_(telecommunications)#Full_duplex">Full duplex</a> communication channels over a single TCP connection.</li>
<li>It provides a persistent connection between a client and a server that both parties can use to start sending data at any time.</li>
<li>The client establishes a WebSocket connection through a process known as the WebSocket handshake.</li>
</ul>
<p><strong>Server-Sent Events (SSEs)</strong>:</p>
<ul>
<li>Under SSEs the client establishes a persistent and long-term connection with the server. </li>
<li>The server uses this connection to send data to a client.</li>
</ul>
<ol>
<li>Client requests data from a server using regular HTTP.</li>
<li>The requested webpage opens a connection to the server.</li>
<li>The server sends the data to the client whenever there’s new information available.</li>
</ol>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>String好题</title>
    <url>/2022/06/14/String%E5%A5%BD%E9%A2%98/</url>
    <content><![CDATA[<h1 id="String好题选编"><a href="#String好题选编" class="headerlink" title="String好题选编"></a>String好题选编</h1><h2 id="686-Repeated-String-Match"><a href="#686-Repeated-String-Match" class="headerlink" title="686. Repeated String Match"></a><a href="https://leetcode.cn/problems/repeated-string-match/">686. Repeated String Match</a></h2><p>复制次数的下界和上界：</p>
<ul>
<li><strong>对于「下界」的分析是容易的：至少将 <code>a</code> 复制长度大于等于 <code>b</code> 的长度，才有可能匹配。</strong></li>
<li><strong>由于主串是由 <code>a</code> 复制多次而来，并且是从主串中找到子串 <code>b</code>，因此可以明确子串的起始位置，不会超过 <code>a</code> 的长度。</strong></li>
</ul>
<p>即<strong>长度越过 <code>a</code> 长度的起始匹配位置，必然在此前已经被匹配过了。</strong></p>
<p>由此，我们可知复制次数「上界」最多为「下界 + 1」。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">repeatedStringMatch</span><span class="params">(String a, String b)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (sb.length() &lt; b.length() &amp;&amp; ++ans &gt; <span class="number">0</span>) sb.append(a);</span><br><span class="line">        sb.append(a);</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> sb.indexOf(b);</span><br><span class="line">        <span class="keyword">if</span> (idx == -<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> idx + b.length() &gt; a.length() * ans ? ans + <span class="number">1</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode686</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">repeatedStringMatch</span><span class="params">(String a, String b)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n1=a.length();</span><br><span class="line">        <span class="type">int</span> n2=b.length();</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(sb.length()&lt;n2)&#123;</span><br><span class="line">            sb.append(a);</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(a);</span><br><span class="line">        count++;</span><br><span class="line">        <span class="type">int</span> i=sb.indexOf(b);</span><br><span class="line">        <span class="keyword">if</span>(i==-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i+n2&lt;=n1*(count-<span class="number">1</span>) ? count-<span class="number">1</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="730-Count-Different-Palindromic-Subsequences"><a href="#730-Count-Different-Palindromic-Subsequences" class="headerlink" title="730. Count Different Palindromic Subsequences"></a><a href="https://leetcode.cn/problems/count-different-palindromic-subsequences/">730. Count Different Palindromic Subsequences</a></h2><p>太难！</p>
<h2 id="205-Isomorphic-Strings"><a href="#205-Isomorphic-Strings" class="headerlink" title="205. Isomorphic Strings"></a><a href="https://leetcode.cn/problems/isomorphic-strings/">205. Isomorphic Strings</a></h2><h3 id="格式化："><a href="#格式化：" class="headerlink" title="格式化："></a>格式化：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode205</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isIsomorphic</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> convert(s).equals(convert(t));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">convert</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        Map&lt;Character,Character&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">char</span>[] arr = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> l=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cur=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]==arr[i-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="type">char</span> c=(<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span>+cur);</span><br><span class="line">                    map.put(arr[i],c);</span><br><span class="line">                    cur++;</span><br><span class="line">                &#125;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!map.containsKey(arr[i]))&#123;</span><br><span class="line">                    <span class="type">char</span> c=(<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span>+cur);</span><br><span class="line">                    map.put(arr[i],c);</span><br><span class="line">                    cur++;</span><br><span class="line">                &#125;</span><br><span class="line">                sb.append(map.get(arr[i]));</span><br><span class="line">                sb.append(l);</span><br><span class="line">                sb.append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">                l=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(arr[arr.length-<span class="number">1</span>]))&#123;</span><br><span class="line">            <span class="type">char</span> c=(<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span>+cur);</span><br><span class="line">            map.put(arr[arr.length-<span class="number">1</span>],c);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(map.get(arr[arr.length-<span class="number">1</span>]));</span><br><span class="line">        sb.append(l);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="双表："><a href="#双表：" class="headerlink" title="双表："></a>双表：</h3><p>需要我们判断 <code>s</code> 和 <code>t</code> 每个位置上的字符是否都一一对应，即 <code>s</code> 的任意一个字符被 <code>t</code> 中唯一的字符对应，同时 <code>t</code> 的任意一个字符被 <code>s</code> 中唯一的字符对应。这也被称为<strong>「双射」</strong>的关系。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isIsomorphic</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        Map&lt;Character, Character&gt; s2t = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Character, Character&gt;();</span><br><span class="line">        Map&lt;Character, Character&gt; t2s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Character, Character&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">x</span> <span class="operator">=</span> s.charAt(i), y = t.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> ((s2t.containsKey(x) &amp;&amp; s2t.get(x) != y) || (t2s.containsKey(y) &amp;&amp; t2s.get(y) != x)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            s2t.put(x, y);</span><br><span class="line">            t2s.put(y, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="290-Word-Pattern"><a href="#290-Word-Pattern" class="headerlink" title="290. Word Pattern"></a><a href="https://leetcode.cn/problems/word-pattern/">290. Word Pattern</a></h2><p>依葫芦画瓢，双表</p>
<p>注意：字符数和字符串数可能不等！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode290</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">wordPattern</span><span class="params">(String pattern, String s)</span> &#123;</span><br><span class="line">        Map&lt;Character,String&gt; p2s=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String,Character&gt; s2p=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        String[] strings = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i&lt;pattern.length() &amp;&amp; j&lt;strings.length) &#123;</span><br><span class="line">            <span class="type">char</span> c=pattern.charAt(i);</span><br><span class="line">            String str=strings[j];</span><br><span class="line">            <span class="keyword">if</span>(p2s.containsKey(c) &amp;&amp; !p2s.get(c).equals(str) ||</span><br><span class="line">            s2p.containsKey(str) &amp;&amp; s2p.get(str)!=c)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p2s.put(c,str);</span><br><span class="line">            s2p.put(str,c);</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i==pattern.length() &amp;&amp; j==strings.length ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="91-Decode-Ways"><a href="#91-Decode-Ways" class="headerlink" title="91. Decode Ways"></a>91. Decode Ways</h2><h3 id="backtracking：-Time-Limit-Exceeded"><a href="#backtracking：-Time-Limit-Exceeded" class="headerlink" title="backtracking： Time Limit Exceeded"></a>backtracking： Time Limit Exceeded</h3><p>误区：</p>
<ul>
<li><p>无需用set考虑重复</p>
<p>[i,i], s[i+1] 和 [i,i+1], s[i+2] 不可能相同，因为首字母就不一样</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,Character&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Set&lt;String&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numDecodings</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) &#123;</span><br><span class="line">        map.put(String.valueOf(i),(<span class="type">char</span>)(<span class="string">&#x27;A&#x27;</span>+i-<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    backtracking(s,<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(),<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> set.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(String s, LinkedList&lt;Character&gt; list, <span class="type">int</span> i)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==s.length())&#123;</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : list) &#123;</span><br><span class="line">            sb.append(c);</span><br><span class="line">        &#125;</span><br><span class="line">        set.add(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; i+<span class="number">2</span>; j++) &#123;</span><br><span class="line">        <span class="comment">//[i,j]</span></span><br><span class="line">        <span class="keyword">if</span>(i&gt;=s.length())&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String sub=s.substring(i,j+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(sub))&#123;</span><br><span class="line">            list.add(map.get(sub));</span><br><span class="line">            backtracking(s,list,j+<span class="number">1</span>);</span><br><span class="line">            list.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="recursiveWithMemo"><a href="#recursiveWithMemo" class="headerlink" title="recursiveWithMemo:"></a>recursiveWithMemo:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;Integer, Integer&gt; memo = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numDecodings</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> recursiveWithMemo(<span class="number">0</span>, s);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">recursiveWithMemo</span><span class="params">(<span class="type">int</span> index, String str)</span> &#123;</span><br><span class="line">        <span class="comment">// Have we already seen this substring?</span></span><br><span class="line">        <span class="keyword">if</span> (memo.containsKey(index)) &#123;</span><br><span class="line">            <span class="keyword">return</span> memo.get(index);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// If you reach the end of the string</span></span><br><span class="line">        <span class="comment">// Return 1 for success.</span></span><br><span class="line">        <span class="keyword">if</span> (index == str.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the string starts with a zero, it can&#x27;t be decoded</span></span><br><span class="line">        <span class="keyword">if</span> (str.charAt(index) == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index == str.length() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> recursiveWithMemo(index + <span class="number">1</span>, str);</span><br><span class="line">        <span class="keyword">if</span> (Integer.parseInt(str.substring(index, index + <span class="number">2</span>)) &lt;= <span class="number">26</span>) &#123;</span><br><span class="line">             ans += recursiveWithMemo(index + <span class="number">2</span>, str);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Save for memoization</span></span><br><span class="line">        memo.put(index, ans);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Iterative-Approach"><a href="#Iterative-Approach" class="headerlink" title="Iterative Approach:"></a>Iterative Approach:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numDecodings</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">// DP array to store the subproblem results</span></span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[s.length() + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Ways to decode a string of size 1 is 1. Unless the string is &#x27;0&#x27;.</span></span><br><span class="line">        <span class="comment">// &#x27;0&#x27; doesn&#x27;t have a single digit decode.</span></span><br><span class="line">        dp[<span class="number">1</span>] = s.charAt(<span class="number">0</span>) == <span class="string">&#x27;0&#x27;</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">            <span class="comment">// Check if successful single digit decode is possible.</span></span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) != <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">               dp[i] = dp[i - <span class="number">1</span>];  </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Check if successful two digit decode is possible.</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">twoDigit</span> <span class="operator">=</span> Integer.valueOf(s.substring(i - <span class="number">2</span>, i));</span><br><span class="line">            <span class="keyword">if</span> (twoDigit &gt;= <span class="number">10</span> &amp;&amp; twoDigit &lt;= <span class="number">26</span>) &#123;</span><br><span class="line">                dp[i] += dp[i - <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[s.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="125-Valid-Palindrome"><a href="#125-Valid-Palindrome" class="headerlink" title="125. Valid Palindrome"></a>125. Valid Palindrome</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode125</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n=s.length();</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="type">char</span> l=s.charAt(left);</span><br><span class="line">                <span class="keyword">if</span>(!Character.isAlphabetic(l)</span><br><span class="line">                        &amp;&amp; (l-<span class="string">&#x27;0&#x27;</span>&lt;<span class="number">0</span> || l-<span class="string">&#x27;0&#x27;</span>&gt;<span class="number">9</span>))&#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(left&gt;=right)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="type">char</span> r=s.charAt(right);</span><br><span class="line">                <span class="keyword">if</span>(!Character.isAlphabetic(r)</span><br><span class="line">                        &amp;&amp; (r-<span class="string">&#x27;0&#x27;</span>&lt;<span class="number">0</span> || r-<span class="string">&#x27;0&#x27;</span>&gt;<span class="number">9</span>))&#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(left&gt;=right)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(Character.toLowerCase(s.charAt(left))!=Character.toLowerCase(s.charAt(right)))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="536-Construct-Binary-Tree-from-String"><a href="#536-Construct-Binary-Tree-from-String" class="headerlink" title="536. Construct Binary Tree from String"></a>536. Construct Binary Tree from String</h2><p>We usually utilize <strong>stack</strong> when we face problems related to <strong>parenthesis</strong>. And it’s time to do with the elements lying in the stack if we meet <strong>‘)’</strong>. </p>
<p>In this case, the element we popped should be <code>left child</code> of the element on top of the stack <code>if there is no left child yet</code>, or else, it will be the <code>right child</code>.<br>Please note that if there is only one node, i.e., the root of the Binary Tree, then the element on top of the stack is the <code>root</code>. Or else, the pointer <code>parent</code> points to the root in the last.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">str2tree</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    Deque&lt;TreeNode&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> sign=<span class="number">1</span>;</span><br><span class="line">    TreeNode parent=<span class="literal">null</span>;</span><br><span class="line">    TreeNode cur=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;s.length())&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.charAt(i)==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">            cur=stack.poll();</span><br><span class="line">            parent=stack.peek();</span><br><span class="line">            <span class="keyword">if</span>(parent.left==<span class="literal">null</span>)&#123;</span><br><span class="line">                parent.left=cur;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                parent.right=cur;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i)==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i)==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">            sign=-<span class="number">1</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;s.length() &amp;&amp; Character.isDigit(s.charAt(i)))&#123;</span><br><span class="line">                num*=<span class="number">10</span>;</span><br><span class="line">                num+=s.charAt(i)-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            TreeNode node=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(sign*num);</span><br><span class="line">            stack.push(node);</span><br><span class="line">            sign=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty() ? <span class="literal">null</span> :stack.peek();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="97-Interleaving-String"><a href="#97-Interleaving-String" class="headerlink" title="97. Interleaving String"></a>97. Interleaving String</h2><h3 id="RTE-Brute-Force"><a href="#RTE-Brute-Force" class="headerlink" title="RTE: Brute Force"></a>RTE: Brute Force</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">is_Interleave</span><span class="params">(String s1, <span class="type">int</span> i, String s2, <span class="type">int</span> j, String res, String s3)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(res.equals(s3) &amp;&amp; i == s1.length() &amp;&amp; j == s2.length())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; s1.length())</span><br><span class="line">            ans |= is_Interleave(s1, i + <span class="number">1</span>, s2, j, res + s1.charAt(i), s3);</span><br><span class="line">        <span class="keyword">if</span>(j &lt; s2.length())</span><br><span class="line">            ans |= is_Interleave(s1, i, s2, j + <span class="number">1</span>, res + s2.charAt(j), s3);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isInterleave</span><span class="params">(String s1, String s2, String s3)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1.length() + s2.length() != s3.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> is_Interleave(s1, <span class="number">0</span>, s2, <span class="number">0</span>, <span class="string">&quot;&quot;</span>, s3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Approach-2-Recursion-with-memoization"><a href="#Approach-2-Recursion-with-memoization" class="headerlink" title="Approach 2: Recursion with memoization"></a>Approach 2: Recursion with memoization</h3><p>注意：</p>
<ul>
<li>没必要存储当前String res，只需memo数组</li>
<li>初始判断s1,s2,s3的length</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] memo;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isInterleave</span><span class="params">(String s1, String s2, String s3)</span> &#123;</span><br><span class="line">    <span class="comment">//need to compare their length first</span></span><br><span class="line">    <span class="keyword">if</span>(s1.length()+s2.length()!=s3.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    memo=<span class="keyword">new</span> <span class="title class_">int</span>[s1.length()][s2.length()];</span><br><span class="line">    <span class="keyword">return</span> dfs(s1,<span class="number">0</span>,s2,<span class="number">0</span>,s3,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(String s1, <span class="type">int</span> i, String s2, <span class="type">int</span> j, String s3, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==s1.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> s2.substring(j).equals(s3.substring(k));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j==s2.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> s1.substring(i).equals(s3.substring(k));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(memo[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> memo[i][j]==<span class="number">1</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> res=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;s1.length() &amp;&amp; s1.charAt(i)==s3.charAt(k))&#123;</span><br><span class="line">        res=res || dfs(s1,i+<span class="number">1</span>,s2,j,s3,k+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j&lt;s2.length() &amp;&amp; s2.charAt(j)==s3.charAt(k))&#123;</span><br><span class="line">        res=res || dfs(s1,i,s2,j+<span class="number">1</span>,s3,k+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    memo[i][j]=res ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Approach-3-Using-2D-Dynamic-Programming"><a href="#Approach-3-Using-2D-Dynamic-Programming" class="headerlink" title="Approach 3: Using 2D Dynamic Programming"></a>Approach 3: Using 2D Dynamic Programming</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isInterleave</span><span class="params">(String s1, String s2, String s3)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(s1.length()+s2.length()!=s3.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n1=s1.length();</span><br><span class="line">    <span class="type">int</span> n2=s2.length();</span><br><span class="line">    <span class="type">boolean</span>[][] dp=<span class="keyword">new</span> <span class="title class_">boolean</span>[n1+<span class="number">1</span>][n2+<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//use up every character =&gt; true</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;=n1; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;=n2; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span> &amp;&amp; j==<span class="number">0</span>)&#123;</span><br><span class="line">                dp[i][j]=<span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                dp[i][j]=dp[i][j-<span class="number">1</span>] &amp;&amp; s2.charAt(j-<span class="number">1</span>)==s3.charAt(i+j-<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">                dp[i][j]=dp[i-<span class="number">1</span>][j] &amp;&amp; s1.charAt(i-<span class="number">1</span>)==s3.charAt(i+j-<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dp[i][j]=dp[i-<span class="number">1</span>][j] &amp;&amp; s1.charAt(i-<span class="number">1</span>)==s3.charAt(i+j-<span class="number">1</span>)</span><br><span class="line">                    || dp[i][j-<span class="number">1</span>] &amp;&amp; s2.charAt(j-<span class="number">1</span>)==s3.charAt(i+j-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n1][n2];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Approach-4-Using-1D-Dynamic-Programming"><a href="#Approach-4-Using-1D-Dynamic-Programming" class="headerlink" title="Approach 4: Using 1D Dynamic Programming"></a>Approach 4: Using 1D Dynamic Programming</h3><h2 id="151-Reverse-Words-in-a-String"><a href="#151-Reverse-Words-in-a-String" class="headerlink" title="151. Reverse Words in a String"></a>151. Reverse Words in a String</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reverseWords</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="comment">//the sky is blue</span></span><br><span class="line">    <span class="comment">//eulb si yks eth</span></span><br><span class="line">    <span class="comment">//blue is sky the</span></span><br><span class="line">    StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    s=s.trim();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        sb.append(s.charAt(i));</span><br><span class="line">    &#125;</span><br><span class="line">    String[] words = sb.reverse().toString().split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line">    sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> word.length()-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            sb.append(word.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="161-One-Edit-Distance"><a href="#161-One-Edit-Distance" class="headerlink" title="161. One Edit Distance"></a>161. One Edit Distance</h2><h3 id="法一：一招鲜，计算最短距离，判断是否为1"><a href="#法一：一招鲜，计算最短距离，判断是否为1" class="headerlink" title="法一：一招鲜，计算最短距离，判断是否为1"></a>法一：一招鲜，计算最短距离，判断是否为1</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOneEditDistance</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n1=s.length();</span><br><span class="line">    <span class="type">int</span> n2=t.length();</span><br><span class="line">    <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n1+<span class="number">1</span>][n2+<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 0 1 2 n2</span></span><br><span class="line">    <span class="comment">//0</span></span><br><span class="line">    <span class="comment">//n1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n1; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= n2; j++) &#123;</span><br><span class="line">        dp[<span class="number">0</span>][j]=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n1; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n2; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i-<span class="number">1</span>)==t.charAt(j-<span class="number">1</span>))&#123;</span><br><span class="line">                dp[i][j]=dp[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dp[i][j]=Math.min(Math.min(dp[i][j-<span class="number">1</span>],dp[i-<span class="number">1</span>][j]),dp[i-<span class="number">1</span>][j-<span class="number">1</span>])+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n1][n2]==<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：分类讨论，one-pass"><a href="#法二：分类讨论，one-pass" class="headerlink" title="法二：分类讨论，one-pass"></a>法二：分类讨论，one-pass</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOneEditDistance</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ns</span> <span class="operator">=</span> s.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">nt</span> <span class="operator">=</span> t.length();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Ensure that s is shorter than t.</span></span><br><span class="line">    <span class="keyword">if</span> (ns &gt; nt)</span><br><span class="line">      <span class="keyword">return</span> isOneEditDistance(t, s);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The strings are NOT one edit away distance  </span></span><br><span class="line">    <span class="comment">// if the length diff is more than 1.</span></span><br><span class="line">    <span class="keyword">if</span> (nt - ns &gt; <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ns; i++)</span><br><span class="line">      <span class="keyword">if</span> (s.charAt(i) != t.charAt(i))</span><br><span class="line">        <span class="comment">// if strings have the same length</span></span><br><span class="line">        <span class="keyword">if</span> (ns == nt)</span><br><span class="line">          <span class="keyword">return</span> s.substring(i + <span class="number">1</span>).equals(t.substring(i + <span class="number">1</span>));</span><br><span class="line">        <span class="comment">// if strings have different lengths</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="keyword">return</span> s.substring(i).equals(t.substring(i + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If there is no diffs on ns distance</span></span><br><span class="line">    <span class="comment">// the strings are one edit away only if</span></span><br><span class="line">    <span class="comment">// t has one more character. </span></span><br><span class="line">    <span class="keyword">return</span> (ns + <span class="number">1</span> == nt);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="165-Compare-Version-Numbers"><a href="#165-Compare-Version-Numbers" class="headerlink" title="165. Compare Version Numbers"></a>165. Compare Version Numbers</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareVersion</span><span class="params">(String version1, String version2)</span> &#123;</span><br><span class="line">    <span class="comment">//注意：regex中，&quot;.&quot; means any character</span></span><br><span class="line">    <span class="comment">//&quot;\\.&quot; means dot</span></span><br><span class="line">    <span class="comment">//&quot;\\s+&quot; means one or many space</span></span><br><span class="line">    String[] arr1 = version1.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">    String[] arr2 = version2.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;arr1.length || i&lt;arr2.length)&#123;</span><br><span class="line">        <span class="type">int</span> a= i&lt;arr1.length ? Integer.parseInt(arr1[i]) : <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> b= i&lt;arr2.length ? Integer.parseInt(arr2[i]) : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(a&gt;b)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a&lt;b)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="166-Fraction-to-Recurring-Decimal"><a href="#166-Fraction-to-Recurring-Decimal" class="headerlink" title="166. Fraction to Recurring Decimal"></a>166. Fraction to Recurring Decimal</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">fractionToDecimal</span><span class="params">(<span class="type">int</span> numerator, <span class="type">int</span> denominator)</span> &#123;</span><br><span class="line">    <span class="comment">//0</span></span><br><span class="line">    <span class="keyword">if</span>(numerator==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    StringBuilder res=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="comment">//positive or negative</span></span><br><span class="line">    res.append((numerator&gt;<span class="number">0</span>)^(denominator&gt;<span class="number">0</span>) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;-&quot;</span>);</span><br><span class="line">    <span class="type">long</span> num=Math.abs((<span class="type">long</span>)numerator);</span><br><span class="line">    <span class="type">long</span> den=Math.abs((<span class="type">long</span>)denominator);</span><br><span class="line">    <span class="comment">//integral part</span></span><br><span class="line">    res.append(num/den); <span class="comment">// 4/333</span></span><br><span class="line">    num%=den;   <span class="comment">//4</span></span><br><span class="line">    <span class="keyword">if</span>(num==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//fractional part</span></span><br><span class="line">    res.append(<span class="string">&quot;.&quot;</span>); <span class="comment">//0.</span></span><br><span class="line">    Map&lt;Long,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(num,res.length());</span><br><span class="line">    <span class="keyword">while</span>(num!=<span class="number">0</span>)&#123;</span><br><span class="line">        num*=<span class="number">10</span>;    <span class="comment">//40</span></span><br><span class="line">        res.append(num/den);    <span class="comment">//0.0</span></span><br><span class="line">        num%=den;   <span class="comment">//40</span></span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(num))&#123;</span><br><span class="line">            <span class="type">int</span> index=map.get(num);</span><br><span class="line">            res.insert(index,<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            res.append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.put(num,res.length());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="179-Largest-Number"><a href="#179-Largest-Number" class="headerlink" title="179. Largest Number"></a>179. Largest Number</h2><p>edge cases:</p>
<ol>
<li>3, 33</li>
<li>3, 32</li>
<li>3, 34</li>
<li>34323, 3432</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">largestNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    String[] strs=<span class="keyword">new</span> <span class="title class_">String</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        strs[i]=String.valueOf(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Arrays.sort(strs, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String o1, String o2)</span> &#123;</span><br><span class="line">            <span class="comment">//334 in front of 33</span></span><br><span class="line">            <span class="comment">//33 in front of 332</span></span><br><span class="line">            <span class="keyword">if</span>(o1.equals(o2))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">            <span class="type">char</span> a=o1.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="type">char</span> b=o2.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">while</span>(a==b)&#123;</span><br><span class="line">                a=i&lt;o1.length() ? o1.charAt(i) : o1.charAt(i%o1.length());</span><br><span class="line">                b=i&lt;o2.length() ? o2.charAt(i) : o2.charAt(i%o2.length());</span><br><span class="line">                i++;</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">if</span>(count&gt;=<span class="number">50</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> a&lt;b ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        sb.append(strs[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    String res=sb.toString();</span><br><span class="line">    <span class="keyword">return</span> res.charAt(<span class="number">0</span>)==<span class="string">&#x27;0&#x27;</span> ? <span class="string">&quot;0&quot;</span> : res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="186-Reverse-Words-in-a-String-II"><a href="#186-Reverse-Words-in-a-String-II" class="headerlink" title="186. Reverse Words in a String II"></a>186. Reverse Words in a String II</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseWords</span><span class="params">(<span class="type">char</span>[] s)</span> &#123;</span><br><span class="line">    <span class="comment">//the sky is blue</span></span><br><span class="line">    <span class="comment">//eulb si yks eht</span></span><br><span class="line">    <span class="comment">//blue is sky the</span></span><br><span class="line">    <span class="type">int</span> n=s.length;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> r=n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        swap(s,l++,r--);</span><br><span class="line">    &#125;</span><br><span class="line">    l=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            r=i-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                swap(s,l++,r--);</span><br><span class="line">            &#125;</span><br><span class="line">            l=i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    r=n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        swap(s,l++,r--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">char</span>[] s, <span class="type">int</span> l ,<span class="type">int</span> r)</span>&#123;</span><br><span class="line">    <span class="type">char</span> temp=s[l];</span><br><span class="line">    s[l]=s[r];</span><br><span class="line">    s[r]=temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="187-Repeated-DNA-Sequences"><a href="#187-Repeated-DNA-Sequences" class="headerlink" title="187. Repeated DNA Sequences"></a>187. Repeated DNA Sequences</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">findRepeatedDnaSequences</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    List&lt;String&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Map&lt;String,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n-<span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//[i,i+10)</span></span><br><span class="line">        <span class="comment">//[n-10,n)</span></span><br><span class="line">        String cur=s.substring(i,i+<span class="number">10</span>);</span><br><span class="line">        map.put(cur,map.getOrDefault(cur,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(map.get(cur)==<span class="number">2</span>)&#123;</span><br><span class="line">            res.add(cur);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="168-Excel-Sheet-Column-Title"><a href="#168-Excel-Sheet-Column-Title" class="headerlink" title="168. Excel Sheet Column Title"></a>168. Excel Sheet Column Title</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">convertToTitle</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">//701=26*26+25 =&gt; ZY</span></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        n--;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curr</span> <span class="operator">=</span> n%<span class="number">26</span>;</span><br><span class="line">        n /= <span class="number">26</span>;</span><br><span class="line">        sb.append((<span class="type">char</span>)(curr+<span class="string">&#x27;A&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="171-Excel-Sheet-Column-Number"><a href="#171-Excel-Sheet-Column-Number" class="headerlink" title="171. Excel Sheet Column Number"></a>171. Excel Sheet Column Number</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">titleToNumber</span><span class="params">(String columnTitle)</span> &#123;</span><br><span class="line">           <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i=columnTitle.length()-<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> weight=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="type">char</span> c=columnTitle.charAt(i);</span><br><span class="line">        <span class="type">int</span> val=c-<span class="string">&#x27;A&#x27;</span>+<span class="number">1</span>;</span><br><span class="line">        res+=val*weight;</span><br><span class="line">        weight*=<span class="number">26</span>;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="205-Isomorphic-Strings-1"><a href="#205-Isomorphic-Strings-1" class="headerlink" title="205. Isomorphic Strings"></a>205. Isomorphic Strings</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isIsomorphic</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> transform(s).equals(transform(t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String <span class="title function_">transform</span><span class="params">(String s)</span>&#123;</span><br><span class="line">    StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    Map&lt;Character,Character&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    <span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">char</span> cur=s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(cur))&#123;</span><br><span class="line">            map.put(cur,(<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span>+k++));</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(map.get(cur));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="241-Different-Ways-to-Add-Parentheses"><a href="#241-Different-Ways-to-Add-Parentheses" class="headerlink" title="241. Different Ways to Add Parentheses"></a>241. Different Ways to Add Parentheses</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;String,List&lt;Integer&gt;&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">diffWaysToCompute</span><span class="params">(String expression)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(map.containsKey(expression))&#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(expression);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n=expression.length();</span><br><span class="line">    List&lt;Integer&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">char</span> c=expression.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;+&#x27;</span> || c==<span class="string">&#x27;-&#x27;</span> || c==<span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">            String sub1=expression.substring(<span class="number">0</span>,i);</span><br><span class="line">            String sub2=expression.substring(i+<span class="number">1</span>);</span><br><span class="line">            List&lt;Integer&gt; list1=diffWaysToCompute(sub1);</span><br><span class="line">            List&lt;Integer&gt; list2=diffWaysToCompute(sub2);</span><br><span class="line">            <span class="keyword">for</span> (Integer a : list1) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Integer b : list2) &#123;</span><br><span class="line">                    <span class="keyword">switch</span> (c)&#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                            res.add(a+b);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                            res.add(a-b);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                            res.add(a*b);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(res.isEmpty())&#123;</span><br><span class="line">        res.add(Integer.valueOf(expression));</span><br><span class="line">    &#125;</span><br><span class="line">    map.put(expression,res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="242-Valid-Anagram"><a href="#242-Valid-Anagram" class="headerlink" title="242. Valid Anagram"></a>242. Valid Anagram</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(s.length()!=t.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    <span class="type">int</span>[] counts=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        counts[s.charAt(i)-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        counts[t.charAt(i)-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(counts[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="249-Group-Shifted-Strings"><a href="#249-Group-Shifted-Strings" class="headerlink" title="249. Group Shifted Strings"></a>249. Group Shifted Strings</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupStrings</span><span class="params">(String[] strings)</span> &#123;</span><br><span class="line">    Map&lt;String, List&lt;String&gt;&gt; map= <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String s : strings) &#123;</span><br><span class="line">        String t=transform(s);</span><br><span class="line">        map.putIfAbsent(t,<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;());</span><br><span class="line">        map.get(t).add(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(map.values());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String <span class="title function_">transform</span><span class="params">(String s)</span>&#123;</span><br><span class="line">    StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    <span class="type">int</span> shift=s.charAt(<span class="number">0</span>)-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">char</span> c=s.charAt(i);</span><br><span class="line">        <span class="comment">//&#x27;z&#x27;=(&#x27;a&#x27;+25)</span></span><br><span class="line">        <span class="type">char</span> t=(c-shift&gt;=<span class="string">&#x27;a&#x27;</span>) ? (<span class="type">char</span>)(c-shift) : (<span class="type">char</span>)(c-shift+<span class="number">26</span>);</span><br><span class="line">        sb.append(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="266-Palindrome-Permutation"><a href="#266-Palindrome-Permutation" class="headerlink" title="266. Palindrome Permutation"></a>266. Palindrome Permutation</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public boolean canPermutePalindrome(String s) &#123;</span><br><span class="line">    int[] arr=new int[26];</span><br><span class="line">    int n=s.length();</span><br><span class="line">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        arr[s.charAt(i)-&#x27;a&#x27;]++;</span><br><span class="line">    &#125;</span><br><span class="line">    int c=0;</span><br><span class="line">    for (int i = 0; i &lt; 26; i++) &#123;</span><br><span class="line">        if((arr[i]&amp;1)!=0)&#123;</span><br><span class="line">            c++;</span><br><span class="line">            if(c&gt;1)&#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return c&lt;=1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="267-Palindrome-Permutation-II"><a href="#267-Palindrome-Permutation-II" class="headerlink" title="267. Palindrome Permutation II"></a>267. Palindrome Permutation II</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">generatePalindromes</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        arr[s.charAt(i)-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span>[] skip=<span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="type">int</span> c=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>((arr[i]&amp;<span class="number">1</span>)!=<span class="number">0</span>)&#123;</span><br><span class="line">            c++;</span><br><span class="line">            <span class="keyword">if</span>(c&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            skip[i]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(arr,skip,<span class="keyword">new</span> <span class="title class_">char</span>[n],<span class="number">0</span>,n-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">boolean</span>[] skip, <span class="type">char</span>[] chars, <span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&gt;right)&#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">String</span>(chars));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(left==right)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]==<span class="number">1</span>)&#123;</span><br><span class="line">                chars[left]=(<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span>+i);</span><br><span class="line">                res.add(<span class="keyword">new</span> <span class="title class_">String</span>(chars));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(skip[i] || arr[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">            chars[left]=(<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span>+i);</span><br><span class="line">            chars[right]=(<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span>+i);</span><br><span class="line">            arr[i]-=<span class="number">2</span>;</span><br><span class="line">            dfs(arr,skip,chars,left+<span class="number">1</span>,right-<span class="number">1</span>);</span><br><span class="line">            arr[i]+=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="299-Bulls-and-Cows"><a href="#299-Bulls-and-Cows" class="headerlink" title="299. Bulls and Cows"></a>299. Bulls and Cows</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getHint</span><span class="params">(String secret, String guess)</span> &#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0</span>;    <span class="comment">//bulls</span></span><br><span class="line">    <span class="type">int</span> b=<span class="number">0</span>;    <span class="comment">//cows</span></span><br><span class="line">    <span class="type">int</span> n=secret.length();</span><br><span class="line">    <span class="type">int</span>[] counts=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">char</span> c=secret.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(guess.charAt(i)==c)&#123;</span><br><span class="line">            a++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            counts[c-<span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">char</span> c=guess.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(secret.charAt(i)!=c)&#123;</span><br><span class="line">            <span class="keyword">if</span>(counts[c-<span class="string">&#x27;0&#x27;</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                b++;</span><br><span class="line">                counts[c-<span class="string">&#x27;0&#x27;</span>]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a+<span class="string">&quot;A&quot;</span>+b+<span class="string">&quot;B&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="290-Word-Pattern-1"><a href="#290-Word-Pattern-1" class="headerlink" title="290. Word Pattern"></a>290. Word Pattern</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">wordPattern</span><span class="params">(String pattern, String s)</span> &#123;</span><br><span class="line">    String[] words = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="type">int</span> n=words.length;</span><br><span class="line">    <span class="keyword">if</span>(pattern.length()!=n)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;Character,String&gt; map1=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    Map&lt;String,Character&gt; map2=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        String word=words[i];</span><br><span class="line">        <span class="type">char</span> c=pattern.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(map1.containsKey(c) &amp;&amp; !map1.get(c).equals(word))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(map2.containsKey(word) &amp;&amp; map2.get(word)!=c)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        map1.put(c,word);</span><br><span class="line">        map2.put(word,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="291-Word-Pattern-II"><a href="#291-Word-Pattern-II" class="headerlink" title="291. Word Pattern II"></a>291. Word Pattern II</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">wordPatternMatch</span><span class="params">(String pattern, String str)</span> &#123;</span><br><span class="line">  Map&lt;Character, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> isMatch(str, <span class="number">0</span>, pattern, <span class="number">0</span>, map, set);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isMatch</span><span class="params">(String str, <span class="type">int</span> i, String pat, <span class="type">int</span> j, Map&lt;Character, String&gt; map, Set&lt;String&gt; set)</span> &#123;</span><br><span class="line">  <span class="comment">// base case</span></span><br><span class="line">  <span class="keyword">if</span> (i == str.length() &amp;&amp; j == pat.length()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (i == str.length() || j == pat.length()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// get current pattern character</span></span><br><span class="line">  <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> pat.charAt(j);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// if the pattern character exists</span></span><br><span class="line">  <span class="keyword">if</span> (map.containsKey(c)) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> map.get(c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// then check if we can use it to match str[i...i+s.length()]</span></span><br><span class="line">    <span class="keyword">if</span> (!str.startsWith(s, i)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// if it can match, great, continue to match the rest</span></span><br><span class="line">    <span class="keyword">return</span> isMatch(str, i + s.length(), pat, j + <span class="number">1</span>, map, set);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// pattern character does not exist in the map</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i; k &lt; str.length(); k++) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">p</span> <span class="operator">=</span> str.substring(i, k + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (set.contains(p)) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create or update it</span></span><br><span class="line">    map.put(c, p);</span><br><span class="line">    set.add(p);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// continue to match the rest</span></span><br><span class="line">    <span class="keyword">if</span> (isMatch(str, k + <span class="number">1</span>, pat, j + <span class="number">1</span>, map, set)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// backtracking</span></span><br><span class="line">    map.remove(c);</span><br><span class="line">    set.remove(p);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// we&#x27;ve tried our best but still no luck</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode291</span> &#123;</span><br><span class="line">    Map&lt;Character,String&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    Set&lt;String&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">wordPatternMatch</span><span class="params">(String pattern, String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> match(pattern,s,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">match</span><span class="params">(String pattern, String s, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==pattern.length() &amp;&amp; j==s.length())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==pattern.length() || j==s.length())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span> c=pattern.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(c))&#123;</span><br><span class="line">            String word=map.get(c);</span><br><span class="line">            <span class="comment">//s[j,j+len-1]</span></span><br><span class="line">            <span class="keyword">if</span>(!s.startsWith(word,j))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> match(pattern,s,i+<span class="number">1</span>,j+word.length());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> j; p &lt; s.length(); p++) &#123;</span><br><span class="line">            <span class="comment">//s[j,p]</span></span><br><span class="line">            String next=s.substring(j,p+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(set.contains(next))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(c,next);</span><br><span class="line">            set.add(next);</span><br><span class="line">            <span class="keyword">if</span>(match(pattern,s,i+<span class="number">1</span>,p+<span class="number">1</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map.remove(c);</span><br><span class="line">            set.remove(next);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="316-Remove-Duplicate-Letters"><a href="#316-Remove-Duplicate-Letters" class="headerlink" title="316. Remove Duplicate Letters"></a>316. Remove Duplicate Letters</h2><p>好题！用stack和lastIndex数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">removeDuplicateLetters</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] lastIndex=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        lastIndex[s.charAt(i)-<span class="string">&#x27;a&#x27;</span>]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span>[] seen=<span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">26</span>];</span><br><span class="line">    Deque&lt;Character&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">char</span> cur=s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(seen[cur-<span class="string">&#x27;a&#x27;</span>])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; stack.peek()&gt;cur &amp;&amp; lastIndex[stack.peek()-<span class="string">&#x27;a&#x27;</span>]&gt;i)&#123;</span><br><span class="line">            seen[stack.pop()-<span class="string">&#x27;a&#x27;</span>]=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        stack.push(cur);</span><br><span class="line">        seen[cur-<span class="string">&#x27;a&#x27;</span>]=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">        sb.append(stack.pop());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="318-Maximum-Product-of-Word-Lengths"><a href="#318-Maximum-Product-of-Word-Lengths" class="headerlink" title="318. Maximum Product of Word Lengths"></a>318. Maximum Product of Word Lengths</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProduct</span><span class="params">(String[] words)</span> &#123;</span><br><span class="line">    Arrays.sort(words,(a,b)-&gt;(a.length()-b.length()));</span><br><span class="line">    <span class="type">int</span> n=words.length;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n-<span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        String a=words[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i-<span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            String b=words[j];</span><br><span class="line">            <span class="keyword">if</span>(a.length()*b.length()&lt;=res)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(valid(a,b))&#123;</span><br><span class="line">                res=a.length()*b.length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">valid</span><span class="params">(String a, String b)</span>&#123;</span><br><span class="line">    <span class="type">boolean</span>[] seen=<span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length(); i++) &#123;</span><br><span class="line">        seen[a.charAt(i)-<span class="string">&#x27;a&#x27;</span>]=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; b.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> c=b.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(seen[c-<span class="string">&#x27;a&#x27;</span>])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>Top_Interview_Questions</title>
    <url>/2022/11/03/Top-Interview-Questions/</url>
    <content><![CDATA[<h2 id="128-Longest-Consecutive-Sequence"><a href="#128-Longest-Consecutive-Sequence" class="headerlink" title="128. Longest Consecutive Sequence"></a>128. Longest Consecutive Sequence</h2><p>要求：O(n) time</p>
<h3 id="法一：pq"><a href="#法一：pq" class="headerlink" title="法一：pq"></a>法一：pq</h3><p>此实现为排队和出队方法（<code>offer</code>、<code>poll</code>、<code>remove()</code> 和  <code>add</code>）提供 O(log(n)) 时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode128</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestConsecutive</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        PriorityQueue&lt;Integer&gt; pq=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            pq.offer(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cur=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> pre=Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">while</span>(!pq.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> i=pq.poll();</span><br><span class="line">            <span class="keyword">if</span>(pre!=Integer.MIN_VALUE)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==pre+<span class="number">1</span>)&#123;</span><br><span class="line">                    cur++;</span><br><span class="line">                    res=Math.max(res,cur);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i==pre)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    cur=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            pre=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：set"><a href="#法二：set" class="headerlink" title="法二：set"></a>法二：set</h3><p><strong>HashSet and Intelligent Sequence Building</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestConsecutive</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; num_set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            num_set.add(num);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">longestStreak</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : num_set) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!num_set.contains(num-<span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">currentNum</span> <span class="operator">=</span> num;</span><br><span class="line">                <span class="type">int</span> <span class="variable">currentStreak</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (num_set.contains(currentNum+<span class="number">1</span>)) &#123;</span><br><span class="line">                    currentNum += <span class="number">1</span>;</span><br><span class="line">                    currentStreak += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                longestStreak = Math.max(longestStreak, currentStreak);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> longestStreak;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>Complexity Analysis</strong></p>
<ul>
<li><p>Time complexity : O(n)<em>O</em>(<em>n</em>).</p>
<p>Although the time complexity appears to be quadratic due to the <code>while</code> loop nested within the <code>for</code> loop, closer inspection reveals it to be linear. Because the <code>while</code> loop is reached only when <code>currentNum</code> marks the beginning of a sequence (i.e. <code>currentNum-1</code> is not present in <code>nums</code>), the <code>while</code> loop can only run for <em>n</em> iterations throughout the entire runtime of the algorithm. This means that despite looking like <em>O</em>(<em>n</em>⋅<em>n</em>) complexity, the nested loops actually run in <em>O</em>(<em>n</em>+<em>n</em>)&#x3D;<em>O</em>(<em>n</em>) time. All other computations occur in constant time, so the overall runtime is linear.</p>
</li>
<li><p>Space complexity : O(n)<em>O</em>(<em>n</em>).</p>
<p>In order to set up O(1)<em>O</em>(1) containment lookups, we allocate linear space for a hash table to store the O(n)<em>O</em>(<em>n</em>) numbers in <code>nums</code>. Other than that, the space complexity is identical to that of the brute force solution.</p>
</li>
</ul>
<h2 id="134-Gas-Station"><a href="#134-Gas-Station" class="headerlink" title="134. Gas Station"></a>134. Gas Station</h2><p>Time Limit Exceeded</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">canCompleteCircuit</span><span class="params">(<span class="type">int</span>[] gas, <span class="type">int</span>[] cost)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; starts=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> n=gas.length;</span><br><span class="line">    <span class="type">int</span>[] dif=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="comment">//dif[i]=change of gas from gas[i] to gas[i+1] or gas[0]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dif[i]=gas[i]-cost[i];</span><br><span class="line">        <span class="keyword">if</span>(dif[i]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            starts.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Integer start : starts) &#123;</span><br><span class="line">        <span class="type">int</span> tank=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i=start;</span><br><span class="line">        <span class="keyword">while</span>(count!=n)&#123;</span><br><span class="line">            tank+=gas[i];</span><br><span class="line">            tank-=cost[i];</span><br><span class="line">            <span class="keyword">if</span>(tank&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i=(i+<span class="number">1</span>)%n;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count==n)&#123;</span><br><span class="line">            <span class="keyword">return</span> start;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>“先甜后苦，方能顶住”</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">canCompleteCircuit</span><span class="params">(<span class="type">int</span>[] gas, <span class="type">int</span>[] cost)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; starts=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> n=gas.length;</span><br><span class="line">    <span class="type">int</span> total=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> min=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> start=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//dif[i]=change of gas from gas[i] to gas[i+1] or gas[0]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        total+=gas[i]-cost[i];</span><br><span class="line">        <span class="keyword">if</span>(total&lt;min)&#123;</span><br><span class="line">            start=(i+<span class="number">1</span>)%n;</span><br><span class="line">            min=total;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> tank=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i=start;</span><br><span class="line">    <span class="keyword">while</span>(count!=n)&#123;</span><br><span class="line">        tank+=gas[i];</span><br><span class="line">        tank-=cost[i];</span><br><span class="line">        <span class="keyword">if</span>(tank&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i=(i+<span class="number">1</span>)%n;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(count==n)&#123;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="136-Single-Number"><a href="#136-Single-Number" class="headerlink" title="136. Single Number"></a>136. Single Number</h2><p>You must implement a solution with a <strong>linear runtime complexity</strong> and use only <strong>constant extra space</strong>.</p>
<h3 id="Approach-4-Bit-Manipulation"><a href="#Approach-4-Bit-Manipulation" class="headerlink" title="Approach 4: Bit Manipulation"></a>Approach 4: Bit Manipulation</h3><p><strong>Concept</strong></p>
<ul>
<li>If we take XOR of zero and some bit, it will return that bit<ul>
<li><em>a</em>⊕0&#x3D;<em>a</em></li>
</ul>
</li>
<li>If we take XOR of two same bits, it will return 0<ul>
<li><em>a</em>⊕<em>a</em>&#x3D;0</li>
</ul>
</li>
<li><em>a</em>⊕<em>b</em>⊕<em>a</em>&#x3D;(<em>a</em>⊕<em>a</em>)⊕<em>b</em>&#x3D;0⊕<em>b</em>&#x3D;<em>b</em></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        res^=num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="138-Copy-List-with-Random-Pointer"><a href="#138-Copy-List-with-Random-Pointer" class="headerlink" title="138. Copy List with Random Pointer"></a>138. Copy List with Random Pointer</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode138</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        Node next;</span><br><span class="line">        Node random;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">            <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">            <span class="built_in">this</span>.random = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">copyRandomList</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">        Map&lt;Node,Node&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Node p=head;</span><br><span class="line">        Node pre=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!map.containsKey(p))&#123;</span><br><span class="line">                map.put(p,<span class="keyword">new</span> <span class="title class_">Node</span>(p.val));</span><br><span class="line">            &#125;</span><br><span class="line">            Node cur=map.get(p);</span><br><span class="line">            <span class="keyword">if</span>(pre!=<span class="literal">null</span>)&#123;</span><br><span class="line">                pre.next=cur;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(p.random!=<span class="literal">null</span>)&#123;</span><br><span class="line">                map.putIfAbsent(p.random,<span class="keyword">new</span> <span class="title class_">Node</span>(p.random.val));</span><br><span class="line">                cur.random=map.get(p.random);</span><br><span class="line">            &#125;</span><br><span class="line">            pre=cur;</span><br><span class="line">            p=p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(head);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="139-Word-Break"><a href="#139-Word-Break" class="headerlink" title="139. Word Break"></a>139. Word Break</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    <span class="type">boolean</span>[] dp=<span class="keyword">new</span> <span class="title class_">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//dp[i]: s[0,i-1]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="comment">//[0,j-1] [j,i-1]</span></span><br><span class="line">            <span class="keyword">if</span>(dp[j] &amp;&amp; wordDict.contains(s.substring(j,i)))&#123;</span><br><span class="line">                dp[i]=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="140-Word-Break-II"><a href="#140-Word-Break-II" class="headerlink" title="140. Word Break II"></a>140. Word Break II</h2><p>注意：</p>
<ul>
<li><p>本题用backtracking的参数范围: </p>
<ul>
<li><code>1 &lt;= s.length &lt;= 20</code></li>
<li><code>1 &lt;= wordDict.length &lt;= 1000</code></li>
<li><code>1 &lt;= wordDict[i].length &lt;= 10</code></li>
<li><code>s</code> and <code>wordDict[i]</code> consist of only lowercase English letters.</li>
<li>All the strings of <code>wordDict</code> are <strong>unique</strong>.</li>
</ul>
</li>
<li><p>上一题dp的参数范围: </p>
<ul>
<li><code>1 &lt;= s.length &lt;= 300</code></li>
<li><code>1 &lt;= wordDict.length &lt;= 1000</code></li>
<li><code>1 &lt;= wordDict[i].length &lt;= 20</code></li>
<li><code>s</code> and <code>wordDict[i]</code> consist of only lowercase English letters.</li>
<li>All the strings of <code>wordDict</code> are <strong>unique</strong>.</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode140</span> &#123;</span><br><span class="line">    List&lt;String&gt; res;</span><br><span class="line">    List&lt;String&gt; path;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> &#123;</span><br><span class="line">        res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtracking(s,wordDict,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(String s, List&lt;String&gt; wordDict,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start==s.length())&#123;</span><br><span class="line">            StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span> (String s1 : path) &#123;</span><br><span class="line">                sb.append(s1);</span><br><span class="line">                sb.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">            res.add(sb.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(wordDict.contains(s.substring(start,i+<span class="number">1</span>)))&#123;</span><br><span class="line">                path.add(s.substring(start,i+<span class="number">1</span>));</span><br><span class="line">                backtracking(s,wordDict,i+<span class="number">1</span>);</span><br><span class="line">                path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="148-Sort-List"><a href="#148-Sort-List" class="headerlink" title="148. Sort List"></a>148. Sort List</h2><p><strong>Follow up:</strong> Can you sort the linked list in <code>O(n logn)</code> time and <code>O(1)</code> memory (i.e. constant space)?</p>
<h3 id="Approach-1-Top-Down-Merge-Sort"><a href="#Approach-1-Top-Down-Merge-Sort" class="headerlink" title="Approach 1: Top Down Merge Sort"></a>Approach 1: Top Down Merge Sort</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">sortList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">mid</span> <span class="operator">=</span> getMid(head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">left</span> <span class="operator">=</span> sortList(head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">right</span> <span class="operator">=</span> sortList(mid);</span><br><span class="line">        <span class="keyword">return</span> merge(left, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListNode <span class="title function_">merge</span><span class="params">(ListNode list1, ListNode list2)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">tail</span> <span class="operator">=</span> dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (list1 != <span class="literal">null</span> &amp;&amp; list2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list1.val &lt; list2.val) &#123;</span><br><span class="line">                tail.next = list1;</span><br><span class="line">                list1 = list1.next;</span><br><span class="line">                tail = tail.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tail.next = list2;</span><br><span class="line">                list2 = list2.next;</span><br><span class="line">                tail = tail.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tail.next = (list1 != <span class="literal">null</span>) ? list1 : list2;</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListNode <span class="title function_">getMid</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">midPrev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span> &amp;&amp; head.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            midPrev = (midPrev == <span class="literal">null</span>) ? head : midPrev.next;</span><br><span class="line">            head = head.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">mid</span> <span class="operator">=</span> midPrev.next;</span><br><span class="line">        midPrev.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="Approach-2-Bottom-Up-Merge-Sort"><a href="#Approach-2-Bottom-Up-Merge-Sort" class="headerlink" title="Approach 2: Bottom Up Merge Sort"></a>Approach 2: Bottom Up Merge Sort</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">tail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">nextSubList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">sortList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> getCount(head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">start</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">1</span>; size &lt; n; size = size * <span class="number">2</span>) &#123;</span><br><span class="line">            tail = dummyHead;</span><br><span class="line">            <span class="keyword">while</span> (start != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (start.next == <span class="literal">null</span>) &#123;</span><br><span class="line">                    tail.next = start;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">mid</span> <span class="operator">=</span> split(start, size);</span><br><span class="line">                merge(start, mid);</span><br><span class="line">                start = nextSubList;</span><br><span class="line">            &#125;</span><br><span class="line">            start = dummyHead.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListNode <span class="title function_">split</span><span class="params">(ListNode start, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">midPrev</span> <span class="operator">=</span> start;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">end</span> <span class="operator">=</span> start.next;</span><br><span class="line">        <span class="comment">//use fast and slow approach to find middle and end of second linked list</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">1</span>; index &lt; size &amp;&amp; (midPrev.next != <span class="literal">null</span> || end.next != <span class="literal">null</span>); index++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (end.next != <span class="literal">null</span>) &#123;</span><br><span class="line">                end = (end.next.next != <span class="literal">null</span>) ? end.next.next : end.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (midPrev.next != <span class="literal">null</span>) &#123;</span><br><span class="line">                midPrev = midPrev.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">mid</span> <span class="operator">=</span> midPrev.next;</span><br><span class="line">        midPrev.next = <span class="literal">null</span>;</span><br><span class="line">        nextSubList = end.next;</span><br><span class="line">        end.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// return the start of second linked list</span></span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(ListNode list1, ListNode list2)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newTail</span> <span class="operator">=</span> dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (list1 != <span class="literal">null</span> &amp;&amp; list2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list1.val &lt; list2.val) &#123;</span><br><span class="line">                newTail.next = list1;</span><br><span class="line">                list1 = list1.next;</span><br><span class="line">                newTail = newTail.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                newTail.next = list2;</span><br><span class="line">                list2 = list2.next;</span><br><span class="line">                newTail = newTail.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        newTail.next = (list1 != <span class="literal">null</span>) ? list1 : list2;</span><br><span class="line">        <span class="comment">// traverse till the end of merged list to get the newTail</span></span><br><span class="line">        <span class="keyword">while</span> (newTail.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            newTail = newTail.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// link the old tail with the head of merged list</span></span><br><span class="line">        tail.next = dummyHead.next;</span><br><span class="line">        <span class="comment">// update the old tail to the new tail of merged list</span></span><br><span class="line">        tail = newTail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getCount</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">ptr</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (ptr != <span class="literal">null</span>) &#123;</span><br><span class="line">            ptr = ptr.next;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>ToyWebServer</title>
    <url>/2022/10/10/ToyWebServer/</url>
    <content><![CDATA[<h1 id="Distributed-System-Programming-Assignment"><a href="#Distributed-System-Programming-Assignment" class="headerlink" title="Distributed System Programming Assignment"></a>Distributed System Programming Assignment</h1><h2 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h2><ul>
<li>older and unsafer than ssh</li>
<li>by default, disabled by Windows</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet google.com 80</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br></pre></td></tr></table></figure>



<h2 id="Single-threaded-Python-Web-Server"><a href="#Single-threaded-Python-Web-Server" class="headerlink" title="Single-threaded Python Web Server"></a>Single-threaded Python Web Server</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> Implements a simple HTTP/1.0 Server</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment">#Get current directory</span></span><br><span class="line">currentPath = os.getcwd().replace(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;/&#x27;</span>)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_request</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Handles the HTTP request.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    headers = request.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    filename = headers[<span class="number">0</span>].split()[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> filename == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">        filename = <span class="string">&#x27;/index.html&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        fin = <span class="built_in">open</span>(currentPath + filename)</span><br><span class="line">        content = fin.read()</span><br><span class="line">        fin.close()</span><br><span class="line"></span><br><span class="line">        response = <span class="string">&#x27;HTTP/1.0 200 OK\n\n&#x27;</span> + content</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        response = <span class="string">&#x27;HTTP/1.0 404 NOT FOUND\n\nFile Not Found&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define socket host and port</span></span><br><span class="line">SERVER_HOST = <span class="string">&#x27;0.0.0.0&#x27;</span></span><br><span class="line">SERVER_PORT = <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create socket</span></span><br><span class="line">server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">server_socket.bind((SERVER_HOST, SERVER_PORT))</span><br><span class="line">server_socket.listen(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Listening on port %s ...&#x27;</span> % SERVER_PORT)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># Wait for client connections</span></span><br><span class="line">    client_connection, client_address = server_socket.accept()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get the client request</span></span><br><span class="line">    request = client_connection.recv(<span class="number">1024</span>).decode()</span><br><span class="line">    <span class="built_in">print</span>(request)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Return an HTTP response</span></span><br><span class="line">    response = handle_request(request)</span><br><span class="line">    client_connection.sendall(response.encode())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Close connection</span></span><br><span class="line">    client_connection.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Close socket</span></span><br><span class="line">server_socket.close()</span><br></pre></td></tr></table></figure>





<h2 id="Multi-threaded-Python-Web-Server"><a href="#Multi-threaded-Python-Web-Server" class="headerlink" title="Multi-threaded Python Web Server"></a>Multi-threaded Python Web Server</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#Get current directory</span></span><br><span class="line">currentPath = os.getcwd().replace(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;/&#x27;</span>)    </span><br><span class="line"><span class="comment"># 多线程服务器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_conn</span>(<span class="params">sock, address</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;deal with connection ....&quot;</span>)</span><br><span class="line">    t = threading.Thread(target=process_conn, args=(sock, address))</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_conn</span>(<span class="params">sock, address</span>):</span><br><span class="line">    <span class="built_in">print</span>(threading.current_thread())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:  <span class="comment"># 多次为一个客户端服务</span></span><br><span class="line">        recv_data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="comment"># 如果 recv 解堵塞，客户端有两种方式 1. 发送了数据 2. 关闭了连接</span></span><br><span class="line">        <span class="keyword">if</span> recv_data:</span><br><span class="line">            <span class="comment"># 回送数据到客户端</span></span><br><span class="line">            <span class="comment"># 最好使用 sendall</span></span><br><span class="line">        </span><br><span class="line">            request=recv_data.decode()</span><br><span class="line">            <span class="built_in">print</span>(request)</span><br><span class="line"></span><br><span class="line">            headers = request.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            filename = headers[<span class="number">0</span>].split()[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span> filename == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                filename = <span class="string">&#x27;/index.html&#x27;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                fin = <span class="built_in">open</span>(currentPath+filename)</span><br><span class="line">                content = fin.read()</span><br><span class="line">                fin.close()</span><br><span class="line"></span><br><span class="line">                response = <span class="string">&#x27;HTTP/1.0 200 OK\n\n&#x27;</span> + content</span><br><span class="line">            <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">                response = <span class="string">&#x27;HTTP/1.0 404 NOT FOUND\n\nFile Not Found&#x27;</span>    </span><br><span class="line"></span><br><span class="line">            <span class="comment"># Return an HTTP response</span></span><br><span class="line">            sock.sendall(response.encode())        </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 5. close socket</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;close socket..&quot;</span>)</span><br><span class="line">    sock.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 1. create socket</span></span><br><span class="line">    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. bind local information</span></span><br><span class="line">    tcp_server_socket.bind((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>))</span><br><span class="line">    <span class="comment"># 3.</span></span><br><span class="line">    tcp_server_socket.listen()</span><br><span class="line">    <span class="comment"># 4. accept connection from client</span></span><br><span class="line">    <span class="comment"># 类似你在等待别人的电话到来</span></span><br><span class="line">    <span class="comment"># 元组解包</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(threading.current_thread())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;waitting ........&quot;</span>)</span><br><span class="line">        new_client_socket, client_addr = tcp_server_socket.accept()</span><br><span class="line">        handle_conn(new_client_socket, client_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>





<h3 id="another-local-example"><a href="#another-local-example" class="headerlink" title="another local example"></a>another local example</h3><p>server:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># import socket programming library</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># import thread module</span></span><br><span class="line"><span class="keyword">from</span> _thread <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">print_lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="comment"># thread function</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">threaded</span>(<span class="params">c</span>):</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">		<span class="comment"># data received from client</span></span><br><span class="line">		data = c.recv(<span class="number">1024</span>)</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;Bye&#x27;</span>)</span><br><span class="line">			</span><br><span class="line">			<span class="comment"># lock released on exit</span></span><br><span class="line">			print_lock.release()</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">		<span class="comment"># reverse the given string from client</span></span><br><span class="line">		data = data[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">		<span class="comment"># send back reversed string to client</span></span><br><span class="line">		c.send(data)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># connection closed</span></span><br><span class="line">	c.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Main</span>():</span><br><span class="line">	host = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># reserve a port on your computer</span></span><br><span class="line">	<span class="comment"># in our case it is 8888 but it</span></span><br><span class="line">	<span class="comment"># can be anything</span></span><br><span class="line">	port = <span class="number">8888</span></span><br><span class="line">	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">	s.bind((host, port))</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;socket binded to port&quot;</span>, port)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># put the socket into listening mode</span></span><br><span class="line">	s.listen(<span class="number">5</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;socket is listening&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># a forever loop until client wants to exit</span></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">		<span class="comment"># establish connection with client</span></span><br><span class="line">		c, addr = s.accept()</span><br><span class="line"></span><br><span class="line">		<span class="comment"># lock acquired by client</span></span><br><span class="line">		print_lock.acquire()</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;Connected to :&#x27;</span>, addr[<span class="number">0</span>], <span class="string">&#x27;:&#x27;</span>, addr[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">		<span class="comment"># Start a new thread and return its identifier</span></span><br><span class="line">		start_new_thread(threaded, (c,))</span><br><span class="line">	s.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	Main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>client:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Import socket module</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Main</span>():</span><br><span class="line">	<span class="comment"># local host IP &#x27;127.0.0.1&#x27;</span></span><br><span class="line">	host = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># Define the port on which you want to connect</span></span><br><span class="line">	port = <span class="number">8888</span></span><br><span class="line"></span><br><span class="line">	s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># connect to server on local computer</span></span><br><span class="line">	s.connect((host,port))</span><br><span class="line"></span><br><span class="line">	<span class="comment"># message you send to server</span></span><br><span class="line">	message = <span class="string">&quot;shaurya says geeksforgeeks&quot;</span></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">		<span class="comment"># message sent to server</span></span><br><span class="line">		s.send(message.encode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line"></span><br><span class="line">		<span class="comment"># message received from server</span></span><br><span class="line">		data = s.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">		<span class="comment"># print the received message</span></span><br><span class="line">		<span class="comment"># here it would be a reverse of sent message</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;Received from the server :&#x27;</span>,<span class="built_in">str</span>(data.decode(<span class="string">&#x27;ascii&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">		<span class="comment"># ask the client whether he wants to continue</span></span><br><span class="line">		ans = <span class="built_in">input</span>(<span class="string">&#x27;\nDo you want to continue(y/n) :&#x27;</span>)</span><br><span class="line">		<span class="keyword">if</span> ans == <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">	<span class="comment"># close the connection</span></span><br><span class="line">	s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	Main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="unsolved"><a href="#unsolved" class="headerlink" title="unsolved"></a>unsolved</h3><ol>
<li>why the exception handler is not working?</li>
<li>why can’t open plain text(txt) file?</li>
<li>why more than one threads assigned to a single user?</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#Get current directory</span></span><br><span class="line">currentPath = os.getcwd().replace(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;/&#x27;</span>)    </span><br><span class="line"><span class="comment"># multithreaded server</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_conn</span>(<span class="params">sock, address</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;deal with connection ....&quot;</span>)</span><br><span class="line">    t = threading.Thread(target=process_conn, args=(sock, address))</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_conn</span>(<span class="params">sock, address</span>):</span><br><span class="line">    <span class="built_in">print</span>(threading.current_thread())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:  <span class="comment"># serve one client multiple times</span></span><br><span class="line">        recv_data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># until there is no incoming request</span></span><br><span class="line">        <span class="keyword">if</span> recv_data:</span><br><span class="line">            </span><br><span class="line">        </span><br><span class="line">            request=recv_data.decode()</span><br><span class="line">            <span class="built_in">print</span>(request)</span><br><span class="line"></span><br><span class="line">            headers = request.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            filename = headers[<span class="number">0</span>].split()[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            headers = <span class="string">&quot;HTTP/1.1 200 OK\n&quot;</span> + <span class="string">&quot;Content-Type: text/html\n\n&quot;</span></span><br><span class="line">            <span class="comment"># access HTML file</span></span><br><span class="line">            <span class="keyword">if</span> filename == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                filename = <span class="string">&#x27;/index.html&#x27;</span></span><br><span class="line">            <span class="comment"># access jpg image file</span></span><br><span class="line">            <span class="keyword">elif</span> filename.endswith(<span class="string">&quot;.jpg&quot;</span>) :</span><br><span class="line">                headers = <span class="string">&quot;HTTP/1.1 200 OK\n&quot;</span> + <span class="string">&quot;Content-Type: image/jpeg\n\n&quot;</span></span><br><span class="line">            <span class="comment"># access txt file</span></span><br><span class="line">            <span class="keyword">elif</span> filename.endswith(<span class="string">&quot;.txt&quot;</span>) :</span><br><span class="line">                headers = <span class="string">&quot;HTTP/1.1 200 OK\n&quot;</span> + <span class="string">&quot;Content-Type: text/plain\n\n&quot;</span></span><br><span class="line">            </span><br><span class="line">                </span><br><span class="line">            <span class="comment">#     headers = &quot;HTTP/1.1 200 OK\n&quot; + &quot;Content-Type: text/html\n\n&quot;</span></span><br><span class="line">            <span class="comment">#     fin = open(currentPath+filename, &quot;rb&quot;)</span></span><br><span class="line">            <span class="comment">#     content = fin.read()</span></span><br><span class="line">            <span class="comment">#     fin.close()</span></span><br><span class="line">            <span class="comment">#     sock.send(headers.encode())</span></span><br><span class="line">            <span class="comment">#     sock.send(content)</span></span><br><span class="line">            <span class="comment"># elif filename.endswith(&quot;.jpg&quot;) :</span></span><br><span class="line">            <span class="comment">#     is_img=True</span></span><br><span class="line">            <span class="comment">#     headers = &quot;HTTP/1.1 200 OK\n&quot; + &quot;Content-Type: image/jpeg\n\n&quot;</span></span><br><span class="line">            <span class="comment">#     fin = open(currentPath+filename, &quot;rb&quot;)</span></span><br><span class="line">            <span class="comment">#     content = fin.read()</span></span><br><span class="line">            <span class="comment">#     fin.close()</span></span><br><span class="line">            <span class="comment">#     sock.send(headers.encode())</span></span><br><span class="line">            <span class="comment">#     sock.send(content)</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># is_img or not:</span></span><br><span class="line">                fin = <span class="built_in">open</span>(currentPath+filename, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">                content = fin.read()</span><br><span class="line">                fin.close()</span><br><span class="line">                response=headers.encode()+content</span><br><span class="line">                <span class="comment"># sock.send(headers.encode())</span></span><br><span class="line">                <span class="comment"># sock.send(content)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">#     else :</span></span><br><span class="line">            <span class="comment">#         fin = open(currentPath+filename, &quot;r&quot;)</span></span><br><span class="line">            <span class="comment">#         content = fin.read()</span></span><br><span class="line">            <span class="comment">#         fin.close()</span></span><br><span class="line">            <span class="comment">#         sock.send(headers.encode())</span></span><br><span class="line">            <span class="comment">#         sock.send(content.encode())</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># content = fin.read()</span></span><br><span class="line">                <span class="comment"># fin.close()</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">#response = &#x27;HTTP/1.0 200 OK\n\n&#x27; + content</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Error Handling</span></span><br><span class="line">            <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">                response = <span class="string">&#x27;HTTP/1.0 404 NOT FOUND\n\nFile Not Found&#x27;</span>.encode()    </span><br><span class="line">            <span class="keyword">except</span> PermissionError:</span><br><span class="line">                response = <span class="string">&#x27;HTTP/1.0 403 FORBIDDEN\n\nNo Access Permission&#x27;</span>.encode()</span><br><span class="line">                    </span><br><span class="line">            <span class="comment"># Return an HTTP response</span></span><br><span class="line">            </span><br><span class="line">            sock.send(response)</span><br><span class="line">            <span class="comment"># sock.sendall((headers + content).encode())        </span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 5. close socket</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;close socket..&quot;</span>)</span><br><span class="line">    sock.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 1. create socket</span></span><br><span class="line">    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. bind local information</span></span><br><span class="line">    tcp_server_socket.bind((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>))</span><br><span class="line">    <span class="comment"># 3.</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">5</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 4. wait and accept connection from client</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(threading.current_thread())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;waitting ........&quot;</span>)</span><br><span class="line">        new_client_socket, client_addr = tcp_server_socket.accept()</span><br><span class="line">        handle_conn(new_client_socket, client_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>socket</tag>
      </tags>
  </entry>
  <entry>
    <title>UnionFind</title>
    <url>/2022/06/14/UnionFind/</url>
    <content><![CDATA[<h1 id="Union-Find选编"><a href="#Union-Find选编" class="headerlink" title="Union Find选编"></a>Union Find选编</h1><p>并查集被很多OIer认为是最简洁而优雅的数据结构之一，并查集算法通常用在处理一些不交集（Disjoint Sets）的合并及查询问题，并支持两种操作：</p>
<ul>
<li>合并（Union）：把两个不相交的集合合并为一个集合。</li>
<li>查询（Find）：查询两个元素是否在同一个集合中。</li>
</ul>
<h2 id="547-Number-of-Provinces"><a href="#547-Number-of-Provinces" class="headerlink" title="547. Number of Provinces"></a><a href="https://leetcode.cn/problems/number-of-provinces/">547. Number of Provinces</a></h2><p>江湖上有多少帮派？</p>
<p><a href="http://www.codebaoku.com/it-java/it-java-228674.html">java并查集算法讲解 - 编程宝库 (codebaoku.com)</a></p>
<p>基础版本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode547</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findCircleNum</span><span class="params">(<span class="type">int</span>[][] isConnected)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n=isConnected.length;</span><br><span class="line">        UnionFind u=<span class="keyword">new</span> <span class="title class_">UnionFind</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(isConnected[i][j]==<span class="number">1</span>)&#123;</span><br><span class="line">                    u.union(i,j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> u.total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">UnionFind</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] parents;</span><br><span class="line">        <span class="type">int</span>[] sizes;</span><br><span class="line">        <span class="type">int</span> total;</span><br><span class="line">        UnionFind(<span class="type">int</span> n)&#123;</span><br><span class="line">            parents=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            sizes=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                parents[i]=i;</span><br><span class="line">                sizes[i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            total=n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(i!=parents[i])&#123;</span><br><span class="line">                i=parents[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">            <span class="type">int</span> pA=find(a);</span><br><span class="line">            <span class="type">int</span> pB=find(b);</span><br><span class="line">            <span class="keyword">if</span>(pA==pB)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            total--;</span><br><span class="line">            <span class="keyword">if</span>(sizes[pA]&gt;=sizes[pB])&#123;</span><br><span class="line">                parents[pB]=pA;</span><br><span class="line">                sizes[pA]+=sizes[pB];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                parents[pA]=pB;</span><br><span class="line">                sizes[pB]+=sizes[pA];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="路径压缩优化"><a href="#路径压缩优化" class="headerlink" title="路径压缩优化:"></a>路径压缩优化:</h3><p>对<code>find</code>的优化，当查询的次数远远大于数据量时， find() 的操作就已经变成了一个O(1)级别的查询时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> (i != parent[i]) &#123;</span><br><span class="line">          help[h++] = i;	<span class="comment">//辅助数组，将路径上的所有结点全部直接挂到root下</span></span><br><span class="line">          i = parent[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (h--; h &gt;= <span class="number">0</span>; h--) &#123;</span><br><span class="line">          parent[help[h]] = i;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h2 id="947-Most-Stones-Removed-with-Same-Row-or-Column"><a href="#947-Most-Stones-Removed-with-Same-Row-or-Column" class="headerlink" title="947. Most Stones Removed with Same Row or Column"></a><a href="https://leetcode.cn/problems/most-stones-removed-with-same-row-or-column/">947. Most Stones Removed with Same Row or Column</a></h2><p>并查集中的<code>parents</code>可以不用<code>Array</code>而用<code>HashMap</code></p>
<p>注意：</p>
<ol>
<li>横坐标和纵坐标属于不同维度</li>
<li>可以移除的石头数量 &#x3D; 石头总数 - 连通分量数量(帮派数量)</li>
<li>如果某个点的横纵坐标都未出现过，那它自成一个帮派；否则被纳入已有帮派</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode947</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeStones</span><span class="params">(<span class="type">int</span>[][] stones)</span> &#123;</span><br><span class="line">        UnionFind u=<span class="keyword">new</span> <span class="title class_">UnionFind</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] stone : stones) &#123;</span><br><span class="line">            u.union(stone[<span class="number">0</span>],~stone[<span class="number">1</span>]);<span class="comment">//&amp; | ^ ~</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stones.length-u.total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">UnionFind</span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;Integer,Integer&gt; parents;</span><br><span class="line">        <span class="type">int</span> total;</span><br><span class="line"></span><br><span class="line">        UnionFind()&#123;</span><br><span class="line">            parents=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            total=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!parents.containsKey(i))&#123;</span><br><span class="line">                parents.put(i,i);</span><br><span class="line">                total++;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(parents.get(i)!=i)&#123;</span><br><span class="line">                <span class="keyword">return</span> find(parents.get(i));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">            <span class="type">int</span> rootA=find(a);</span><br><span class="line">            <span class="type">int</span> rootB=find(b);</span><br><span class="line">            <span class="keyword">if</span>(rootA==rootB)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            parents.put(rootA,rootB);	<span class="comment">//合并横坐标、纵坐标的帮派</span></span><br><span class="line">            total--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="721-Accounts-Merge"><a href="#721-Accounts-Merge" class="headerlink" title="721. Accounts Merge"></a><a href="https://leetcode.cn/problems/accounts-merge/">721. Accounts Merge</a></h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、张伟    zw2<span class="variable">@qq</span>.com  zw1<span class="variable">@163</span>.com    zw3<span class="variable">@sina</span>.com </span><br><span class="line"><span class="number">2</span>、张伟    zw1<span class="variable">@163</span>.com</span><br><span class="line"><span class="number">3</span>、李娜    lina<span class="variable">@qq</span>.com</span><br><span class="line"><span class="number">4</span>、张伟    zhangwei<span class="variable">@qq</span>.com</span><br></pre></td></tr></table></figure>

<p>1和2张伟是同一个人，因为有相同的邮箱，4是第二个张伟</p>
<p>之前做并查集有遇到一个“代表节点”的概念，也就是祖宗节点，下文的代表邮箱同理，就是把同一个人的邮箱都挂在这个人暴露出的第一个邮箱下面，像葡萄一样。</p>
<p>一、首先创建map存储每一个【邮箱】和【代表邮箱】之间的映射关系，它的代表邮箱先是它本身。再创建一个名为name的map存储【代表邮箱】和【账号名称】之间的映射关系，这个name的map集合最后一步要用！！！</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">邮箱     zw2<span class="variable">@qq</span>.com    zw1<span class="variable">@163</span>.com    zw3<span class="variable">@sina</span>.com    lina<span class="variable">@qq</span>.com    zhangwei<span class="variable">@qq</span>.com</span><br><span class="line">代表邮箱 zw2<span class="variable">@qq</span>.com    zw1<span class="variable">@163</span>.com    zw3<span class="variable">@sina</span>.com     lina<span class="variable">@qq</span>.com    zhangwei<span class="variable">@qq</span>.com</span><br><span class="line">账号姓名   张伟           张伟           张伟           李娜           张伟</span><br></pre></td></tr></table></figure>

<p>二、合并同一个人的不同邮箱，就是把它的第2、3、4…….个邮箱串在代表邮箱下，像葡萄一样</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">邮箱 (key)       zw2<span class="variable">@qq</span>.com    zw1<span class="variable">@163</span>.com    zw3<span class="variable">@sina</span>.com     lina<span class="variable">@qq</span>.com    zhangwei<span class="variable">@qq</span>.com</span><br><span class="line">代表邮箱(value)  zw2<span class="variable">@qq</span>.com     zw2<span class="variable">@qq</span>.com    zw2<span class="variable">@qq</span>.com       lina<span class="variable">@qq</span>.com    zhangwei<span class="variable">@qq</span>.com</span><br></pre></td></tr></table></figure>

<p>三、创建一个map,key是代表邮箱，value是List类型，也就是代表邮箱底下挂着的同一个人的其他邮箱</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">做法：遍历（二）中的key，找它的代表邮箱作为key,并把它存在代表对象映射的list数组中。</span><br><span class="line">例如（二）中前三个邮箱的代表邮箱都为zw<span class="variable">@qq</span>.com，就把它作为key,并把三个邮箱存入它对应的list中</span><br><span class="line">key             zw2<span class="variable">@qq</span>.com                            lina<span class="variable">@qq</span>.com      zhangwei<span class="variable">@qq</span>.com</span><br><span class="line">value  [ zw2<span class="variable">@qq</span>.com   zw1<span class="variable">@163</span>.com  zw3<span class="variable">@sina</span>.com]      [ lina<span class="variable">@qq</span>.com ]   [zhangwei<span class="variable">@qq</span>.com]</span><br></pre></td></tr></table></figure>

<p>四、给同一个人的不同邮箱排序，通过Collections.sort()实现，例如get到<a href="mailto:&#x7a;&#119;&#x32;&#x40;&#113;&#113;&#x2e;&#x63;&#111;&#x6d;">&#x7a;&#119;&#x32;&#x40;&#113;&#113;&#x2e;&#x63;&#111;&#x6d;</a>的邮箱列表排序后213就成了123</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">key             zw2<span class="variable">@qq</span>.com                            lina<span class="variable">@qq</span>.com      zhangwei<span class="variable">@qq</span>.com</span><br><span class="line">value  [ zw1<span class="variable">@qq</span>.com   zw2<span class="variable">@163</span>.com  zw3<span class="variable">@sina</span>.com]      [ lina<span class="variable">@qq</span>.com ]   [zhangwei<span class="variable">@qq</span>.com]</span><br></pre></td></tr></table></figure>

<p>五、把代表邮箱换成对应的账号名称就OK啦，还记得第一步中创建的名为name的map集合吗，遍历（四）中的key依次获得对应的账号名字，放到数组的第一位即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="built_in">ArrayList</span>();  <span class="comment">//新建结果集</span></span><br><span class="line">       <span class="keyword">for</span>(String root : temp.<span class="built_in">keySet</span>()) &#123;    <span class="comment">//遍历（四）中的key得到代表邮箱</span></span><br><span class="line">           List&lt;String&gt; layer = temp.<span class="built_in">get</span>(root);     <span class="comment">//通过代表邮箱获得同一人的邮箱列表 </span></span><br><span class="line">           Collections.<span class="built_in">sort</span>(layer);  <span class="comment">//同一个人的不同邮箱排序</span></span><br><span class="line">           layer.<span class="built_in">add</span>(names.<span class="built_in">get</span>(root)，<span class="number">0</span>);  <span class="comment">//把名字加入邮箱列表的第一位置</span></span><br><span class="line">           res.<span class="built_in">add</span>(layer); <span class="comment">//把这个人的信息存入结果集</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode721</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">accountsMerge</span><span class="params">(List&lt;List&lt;String&gt;&gt; accounts)</span> &#123;</span><br><span class="line">        <span class="comment">//email union</span></span><br><span class="line">        <span class="comment">//email,account map 用于返回结果时对应account和email集</span></span><br><span class="line">        <span class="comment">//email,index map   用于合并同一个account的所有email</span></span><br><span class="line">        Map&lt;String,String&gt; email_account=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String,Integer&gt; email_index=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> emailCount=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; accounts.size(); i++) &#123;</span><br><span class="line">            List&lt;String&gt; account=accounts.get(i);</span><br><span class="line">            String name=account.get(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;account.size(); j++)&#123;</span><br><span class="line">                String email=account.get(j);</span><br><span class="line">                <span class="keyword">if</span>(!email_account.containsKey(email))&#123;<span class="comment">//注意：每个email只记录第一次</span></span><br><span class="line">                    email_account.put(email,name);</span><br><span class="line">                    email_index.put(email,emailCount++);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        UnionFind u=<span class="keyword">new</span> <span class="title class_">UnionFind</span>(emailCount);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//合并同一用户的email</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; accounts.size(); i++) &#123;</span><br><span class="line">            List&lt;String&gt; account=accounts.get(i);</span><br><span class="line">            String head=account.get(<span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> a=email_index.get(head);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>; j&lt;account.size(); j++)&#123;</span><br><span class="line">                String next=account.get(j);</span><br><span class="line">                <span class="type">int</span> b=email_index.get(next);</span><br><span class="line">                u.union(a,b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;Integer,List&lt;String&gt;&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String email : email_index.keySet()) &#123;</span><br><span class="line">            <span class="type">int</span> i=u.find(email_index.get(email));   <span class="comment">//每个email属于哪个帮派</span></span><br><span class="line">            <span class="keyword">if</span>(!map.containsKey(i))&#123;</span><br><span class="line">                map.put(i,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            map.get(i).add(email);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; value : map.values()) &#123;</span><br><span class="line">            String name=email_account.get(value.get(<span class="number">0</span>));</span><br><span class="line">            Collections.sort(value);</span><br><span class="line">            List&lt;String&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            list.add(name);</span><br><span class="line">            list.addAll(value);</span><br><span class="line">            res.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">UnionFind</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] parents;</span><br><span class="line">        <span class="type">int</span>[] sizes;</span><br><span class="line">        <span class="type">int</span> total;</span><br><span class="line"></span><br><span class="line">        UnionFind(<span class="type">int</span> n)&#123;</span><br><span class="line">            parents=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            sizes=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                parents[i]=i;</span><br><span class="line">                sizes[i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            total=n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(parents[i]!=i)&#123;</span><br><span class="line">                i=parents[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">            <span class="type">int</span> rootA=find(a);</span><br><span class="line">            <span class="type">int</span> rootB=find(b);</span><br><span class="line">            <span class="keyword">if</span>(rootA==rootB)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sizes[rootA]&lt;sizes[rootB])&#123;</span><br><span class="line">                parents[rootA]=rootB;</span><br><span class="line">                sizes[rootA]+=sizes[rootB];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                parents[rootB]=rootA;</span><br><span class="line">                sizes[rootB]+=sizes[rootA];</span><br><span class="line">            &#125;</span><br><span class="line">            total--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="827-Making-A-Large-Island"><a href="#827-Making-A-Large-Island" class="headerlink" title="827. Making A Large Island"></a><a href="https://leetcode.cn/problems/making-a-large-island/">827. Making A Large Island</a></h2><p>DFS思路较好理解</p>
<h3 id="法一：UnionFind"><a href="#法一：UnionFind" class="headerlink" title="法一：UnionFind"></a>法一：UnionFind</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dx = &#123;<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] dy = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] p;</span><br><span class="line">    <span class="type">int</span>[] cnt; <span class="comment">// 额外维护某个连通块的面积</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestIsland</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid.length, m = grid[<span class="number">0</span>].length;</span><br><span class="line">        p = <span class="keyword">new</span> <span class="title class_">int</span>[n * m];</span><br><span class="line">        cnt = <span class="keyword">new</span> <span class="title class_">int</span>[n * m];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> i * m + j;</span><br><span class="line">                    p[idx] = idx;</span><br><span class="line">                    cnt[idx] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i + <span class="number">1</span> &lt; n &amp;&amp; grid[i + <span class="number">1</span>][j] == <span class="number">1</span>) union(i * m + j, (i + <span class="number">1</span>) * m + j);</span><br><span class="line">                    <span class="keyword">if</span> (j + <span class="number">1</span> &lt; m &amp;&amp; grid[i][j + <span class="number">1</span>] == <span class="number">1</span>) union(i * m + j, i * m + j + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 当前这个位置变成1, 则面积至少为1</span></span><br><span class="line">                    Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(); <span class="comment">// 用于去重</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">ni</span> <span class="operator">=</span> i + dx[k];</span><br><span class="line">                        <span class="type">int</span> <span class="variable">nj</span> <span class="operator">=</span> j + dy[k];</span><br><span class="line">                        <span class="keyword">if</span> (ni &lt; <span class="number">0</span> || ni &gt;= n || nj &lt; <span class="number">0</span> || nj &gt;= m || grid[ni][nj] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> ni * m + nj;</span><br><span class="line">                        <span class="keyword">if</span> (set.contains(find(idx))) <span class="keyword">continue</span>; <span class="comment">// 该岛已经计算过, 不重复计算</span></span><br><span class="line">                        temp += cnt[find(idx)];</span><br><span class="line">                        set.add(find(idx));</span><br><span class="line">                    &#125;</span><br><span class="line">                    ans = Math.max(ans, temp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">px</span> <span class="operator">=</span> find(x), py = find(y);</span><br><span class="line">        <span class="keyword">if</span> (px != py) &#123;</span><br><span class="line">            p[px] = py;</span><br><span class="line">            cnt[py] += cnt[px];</span><br><span class="line">            ans = Math.max(cnt[py], ans); <span class="comment">// 先在合并过程中, 让ans等于最大的岛的面积</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x != p[x]) p[x] = find(p[x]);</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：DFS"><a href="#法二：DFS" class="headerlink" title="法二：DFS"></a>法二：DFS</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dx = &#123;<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] dy = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] area; <span class="comment">// 岛屿面积, 下标是岛屿编号</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">2</span>; <span class="comment">// 岛屿编号, 从2开始, 因为0是水域, 1是陆地</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestIsland</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid.length, m = grid[<span class="number">0</span>].length;</span><br><span class="line">        area = <span class="keyword">new</span> <span class="title class_">int</span>[n * m + <span class="number">2</span>]; <span class="comment">// 对于[1] 这样的输入, 由于岛的编号从2开始, 需要多开2个大小</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// 计算这个岛的面积</span></span><br><span class="line">                    area[idx] = dfs(grid, i, j);</span><br><span class="line">                    <span class="comment">// 最大岛屿面积</span></span><br><span class="line">                    ans = Math.max(ans, area[idx]);</span><br><span class="line">                    <span class="comment">// 岛的编号+1</span></span><br><span class="line">                    idx++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对所有的水域, 计算可能形成的最大人工岛面积</span></span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(); <span class="comment">// 用于去重, 声明在外面, 避免频繁创建对象</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    set.clear();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">ni</span> <span class="operator">=</span> i + dx[k];</span><br><span class="line">                        <span class="type">int</span> <span class="variable">nj</span> <span class="operator">=</span> j + dy[k];</span><br><span class="line">                        <span class="keyword">if</span> (ni &lt; <span class="number">0</span> || ni &gt;= n || nj &lt; <span class="number">0</span> || nj &gt;= m || grid[ni][nj] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="keyword">if</span> (set.contains(grid[ni][nj])) <span class="keyword">continue</span>; <span class="comment">// 用set做去重</span></span><br><span class="line">                        t += area[grid[ni][nj]];</span><br><span class="line">                        set.add(grid[ni][nj]); <span class="comment">// 已经出现过, 记得添加到set</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    ans = Math.max(ans, t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[][] grid, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid.length, m = grid[<span class="number">0</span>].length;</span><br><span class="line">        grid[i][j] = idx; <span class="comment">// 将这块陆地编号变为岛屿编号</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 面积</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ni</span> <span class="operator">=</span> i + dx[k];</span><br><span class="line">            <span class="type">int</span> <span class="variable">nj</span> <span class="operator">=</span> j + dy[k];</span><br><span class="line">            <span class="keyword">if</span> (ni &lt; <span class="number">0</span> || ni &gt;= n || nj &lt; <span class="number">0</span> || nj &gt;= m) <span class="keyword">continue</span>; <span class="comment">// 边界</span></span><br><span class="line">            <span class="keyword">if</span> (grid[ni][nj] == <span class="number">0</span> || grid[ni][nj] &gt; <span class="number">1</span>) <span class="keyword">continue</span>; <span class="comment">// 水域或者其他</span></span><br><span class="line">            res += dfs(grid, ni, nj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="130-Surrounded-Regions"><a href="#130-Surrounded-Regions" class="headerlink" title="130. Surrounded Regions"></a><a href="https://leetcode.cn/problems/surrounded-regions/">130. Surrounded Regions</a></h2><h3 id="法一：岛屿DFS"><a href="#法一：岛屿DFS" class="headerlink" title="法一：岛屿DFS"></a>法一：岛屿DFS</h3><p>先用 for 循环遍历棋盘的<strong>四边</strong>，用 DFS 算法把那些与边界相连的 <code>O</code> 换成一个特殊字符，比如 <code>#</code>；然后再遍历整个棋盘，把剩下的 <code>O</code> 换成 <code>X</code>，把 <code>#</code> 恢复成 <code>O</code>。这样就能完成题目的要求，时间复杂度 O(MN)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode130</span> &#123;</span><br><span class="line">    <span class="type">int</span> row;</span><br><span class="line">    <span class="type">int</span> col;</span><br><span class="line">    <span class="type">char</span>[][] board;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">        row=board.length;</span><br><span class="line">        col=board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="built_in">this</span>.board=board;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            flood(i,<span class="number">0</span>);</span><br><span class="line">            flood(i,col-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            flood(<span class="number">0</span>,j);</span><br><span class="line">            flood(row-<span class="number">1</span>,j);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j]==<span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">                    dfs(i,j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j]==<span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                    board[i][j]=<span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">flood</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=row || j&lt;<span class="number">0</span> || j&gt;=col || board[i][j]!=<span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        board[i][j]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        flood(i+<span class="number">1</span>,j);</span><br><span class="line">        flood(i-<span class="number">1</span>,j);</span><br><span class="line">        flood(i,j+<span class="number">1</span>);</span><br><span class="line">        flood(i,j-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=row || j&lt;<span class="number">0</span> || j&gt;=col || board[i][j]!=<span class="string">&#x27;O&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        board[i][j]=<span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">        dfs(i+<span class="number">1</span>,j);</span><br><span class="line">        dfs(i-<span class="number">1</span>,j);</span><br><span class="line">        dfs(i,j+<span class="number">1</span>);</span><br><span class="line">        dfs(i,j-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：UnionFind"><a href="#法二：UnionFind" class="headerlink" title="法二：UnionFind"></a>法二：UnionFind</h3><p>“杀鸡也可用牛刀”</p>
<p>二维坐标 <code>(x,y)</code> 可以转换成 <code>x * n + y</code> 这个数（<code>m</code> 是棋盘的行数，<code>n</code> 是棋盘的列数），<strong>敲黑板，这是将二维坐标映射到一维的常用技巧</strong>。</p>
<p><strong>可以把那些不需要被替换的 <code>O</code> 看成一个拥有独门绝技的门派，它们有一个共同「祖师爷」叫 <code>dummy</code>，这些 <code>O</code> 和 <code>dummy</code> 互相连通，而那些需要被替换的 <code>O</code> 与 <code>dummy</code> 不连通</strong>。</p>
<h2 id="323-Number-of-Connected-Components-in-an-Undirected-Graph"><a href="#323-Number-of-Connected-Components-in-an-Undirected-Graph" class="headerlink" title="323. Number of Connected Components in an Undirected Graph"></a><a href="https://leetcode.cn/problems/number-of-connected-components-in-an-undirected-graph/">323. Number of Connected Components in an Undirected Graph</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode323</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countComponents</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges)</span> &#123;</span><br><span class="line">        UnionFind u=<span class="keyword">new</span> <span class="title class_">UnionFind</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">            u.union(edge[<span class="number">0</span>],edge[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> u.total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">UnionFind</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] parents;</span><br><span class="line">        <span class="type">int</span>[] sizes;	<span class="comment">//平衡性优化</span></span><br><span class="line">        <span class="type">int</span> total;</span><br><span class="line">        <span class="type">int</span>[] help;		<span class="comment">//路径压缩，只关心帮派老大是谁，老大以下众生平等</span></span><br><span class="line">        UnionFind(<span class="type">int</span> n)&#123;</span><br><span class="line">            parents=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            sizes=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            help=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                parents[i]=i;</span><br><span class="line">                sizes[i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            total=n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">            <span class="type">int</span> h=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(parents[i]!=i)&#123;</span><br><span class="line">                help[h++]=i;</span><br><span class="line">                i=parents[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(h--; h&gt;=<span class="number">0</span>; h--)&#123;</span><br><span class="line">                parents[help[h]]=i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">            <span class="type">int</span> rootA=find(a);</span><br><span class="line">            <span class="type">int</span> rootB=find(b);</span><br><span class="line">            <span class="keyword">if</span>(rootA==rootB)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            total--;</span><br><span class="line">            <span class="keyword">if</span>(sizes[rootA]&gt;sizes[rootB])&#123;</span><br><span class="line">                parents[rootB]=rootA;</span><br><span class="line">                sizes[rootA]+=sizes[rootB];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                parents[rootA]=rootB;</span><br><span class="line">                sizes[rootB]+=sizes[rootA];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="990-Satisfiability-of-Equality-Equations"><a href="#990-Satisfiability-of-Equality-Equations" class="headerlink" title="990. Satisfiability of Equality Equations"></a><a href="https://leetcode.cn/problems/satisfiability-of-equality-equations/">990. Satisfiability of Equality Equations</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode990</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equationsPossible</span><span class="params">(String[] equations)</span> &#123;</span><br><span class="line">        UnionFind u=<span class="keyword">new</span> <span class="title class_">UnionFind</span>(<span class="number">26</span>);</span><br><span class="line">        <span class="comment">//先处理等号，再判断不等号是否成立</span></span><br><span class="line">        <span class="keyword">for</span> (String equation : equations) &#123;</span><br><span class="line">            <span class="keyword">if</span>(equation.charAt(<span class="number">1</span>)==<span class="string">&#x27;=&#x27;</span>)&#123;</span><br><span class="line">                <span class="type">char</span> a=equation.charAt(<span class="number">0</span>);</span><br><span class="line">                <span class="type">char</span> b=equation.charAt(<span class="number">3</span>);</span><br><span class="line">                u.union(a-<span class="string">&#x27;a&#x27;</span>,b-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String equation : equations) &#123;</span><br><span class="line">            <span class="keyword">if</span>(equation.charAt(<span class="number">1</span>)==<span class="string">&#x27;!&#x27;</span>)&#123;</span><br><span class="line">                <span class="type">char</span> a=equation.charAt(<span class="number">0</span>);</span><br><span class="line">                <span class="type">char</span> b=equation.charAt(<span class="number">3</span>);</span><br><span class="line">                <span class="keyword">if</span>(u.connected(a-<span class="string">&#x27;a&#x27;</span>,b-<span class="string">&#x27;a&#x27;</span>))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">UnionFind</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] parents;</span><br><span class="line">        <span class="type">int</span> total;</span><br><span class="line"></span><br><span class="line">        UnionFind(<span class="type">int</span> n)&#123;</span><br><span class="line">            total=n;</span><br><span class="line">            parents=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                parents[i]=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(parents[i]!=i)&#123;</span><br><span class="line">                i=parents[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">            <span class="type">int</span> rootA=find(a);</span><br><span class="line">            <span class="type">int</span> rootB=find(b);</span><br><span class="line">            <span class="keyword">if</span>(rootA==rootB)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            total--;</span><br><span class="line">            parents[rootA]=rootB;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">connected</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">            <span class="type">int</span> rootA=find(a);</span><br><span class="line">            <span class="type">int</span> rootB=find(b);</span><br><span class="line">            <span class="keyword">return</span> rootA==rootB;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="684-Redundant-Connection"><a href="#684-Redundant-Connection" class="headerlink" title="684. Redundant Connection"></a>684. Redundant Connection</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] findRedundantConnection(<span class="type">int</span>[][] edges) &#123;</span><br><span class="line">    <span class="type">int</span> n=edges.length;</span><br><span class="line">    UnionFind u=<span class="keyword">new</span> <span class="title class_">UnionFind</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">        <span class="type">int</span> a=edge[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> b=edge[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(u.find(a)==u.find(b))&#123;</span><br><span class="line">            <span class="keyword">return</span> edge;</span><br><span class="line">        &#125;</span><br><span class="line">        u.union(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] parents;</span><br><span class="line">    <span class="type">int</span>[] sizes;</span><br><span class="line">    <span class="type">int</span>[] helper;</span><br><span class="line"></span><br><span class="line">    UnionFind(<span class="type">int</span> n)&#123;</span><br><span class="line">        parents=<span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        sizes=<span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        helper=<span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            parents[i]=i;</span><br><span class="line">            sizes[i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i!=parents[i])&#123;</span><br><span class="line">            helper[count++]=i;</span><br><span class="line">            i=parents[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; count; j++) &#123;</span><br><span class="line">            parents[helper[j]]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="type">int</span> rootA=find(a);</span><br><span class="line">        <span class="type">int</span> rootB=find(b);</span><br><span class="line">        <span class="keyword">if</span>(rootA==rootB)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sizeA=sizes[rootA];</span><br><span class="line">        <span class="type">int</span> sizeB=sizes[rootB];</span><br><span class="line">        <span class="keyword">if</span>(sizeA&gt;sizeB)&#123;</span><br><span class="line">            parents[rootB]=rootA;</span><br><span class="line">            sizes[rootA]+=sizeB;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            parents[rootA]=rootB;</span><br><span class="line">            sizes[rootB]+=sizeA;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="685-Redundant-Connection-II"><a href="#685-Redundant-Connection-II" class="headerlink" title="685. Redundant Connection II"></a>685. Redundant Connection II</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] findRedundantDirectedConnection(<span class="type">int</span>[][] edges) &#123;</span><br><span class="line">    <span class="comment">//no 2-in-degree node: has cycle, same as undirected</span></span><br><span class="line">    <span class="comment">//has a 2-in-degree node: skip those edges one by one, and see</span></span><br><span class="line">    <span class="comment">//if can construct a tree</span></span><br><span class="line">    <span class="type">int</span> n=edges.length;</span><br><span class="line">    <span class="type">int</span>[] ins=<span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> skip=-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">        <span class="type">int</span> to=edge[<span class="number">1</span>];</span><br><span class="line">        ins[to]++;</span><br><span class="line">        <span class="keyword">if</span>(ins[to]==<span class="number">2</span>)&#123;</span><br><span class="line">            skip=to;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(skip==-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> helper(edges,-<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span>[] edge=edges[i];</span><br><span class="line">            <span class="type">int</span> to=edge[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(to==skip)&#123;</span><br><span class="line">                <span class="type">int</span>[] res=helper(edges,i);</span><br><span class="line">                <span class="keyword">if</span>(res==<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> edge;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] helper(<span class="type">int</span>[][] edges, <span class="type">int</span> skip)&#123;</span><br><span class="line">    <span class="type">int</span> n=edges.length;</span><br><span class="line">    UnionFind u=<span class="keyword">new</span> <span class="title class_">UnionFind</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; edges.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i==skip)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> from=edges[i][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> to=edges[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(u.find(from)==u.find(to))&#123;</span><br><span class="line">            <span class="keyword">return</span> edges[i];</span><br><span class="line">        &#125;</span><br><span class="line">        u.union(from,to);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] parents;</span><br><span class="line">    <span class="type">int</span>[] sizes;</span><br><span class="line">    <span class="type">int</span>[] helper;</span><br><span class="line"></span><br><span class="line">    UnionFind(<span class="type">int</span> n)&#123;</span><br><span class="line">        parents=<span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        sizes=<span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        helper=<span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            parents[i]=i;</span><br><span class="line">            sizes[i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i!=parents[i])&#123;</span><br><span class="line">            helper[count++]=i;</span><br><span class="line">            i=parents[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; count; j++) &#123;</span><br><span class="line">            parents[helper[j]]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="type">int</span> rootA=find(a);</span><br><span class="line">        <span class="type">int</span> rootB=find(b);</span><br><span class="line">        <span class="keyword">if</span>(rootA==rootB)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sizes[rootA]&gt;=sizes[rootB])&#123;</span><br><span class="line">            sizes[rootA]+=sizes[rootB];</span><br><span class="line">            parents[rootB]=rootA;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            sizes[rootB]+=sizes[rootA];</span><br><span class="line">            parents[rootA]=rootB;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="721-Accounts-Merge-1"><a href="#721-Accounts-Merge-1" class="headerlink" title="721. Accounts Merge"></a>721. Accounts Merge</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//map&lt;email,index&gt;</span></span><br><span class="line"><span class="comment">//unionFind</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">accountsMerge</span><span class="params">(List&lt;List&lt;String&gt;&gt; accounts)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=accounts.size();</span><br><span class="line">    UnionFind u=<span class="keyword">new</span> <span class="title class_">UnionFind</span>(n);</span><br><span class="line">    Map&lt;String,Integer&gt; emailToIndex=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        List&lt;String&gt; account=accounts.get(i);</span><br><span class="line">        String name=account.get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; account.size(); j++) &#123;</span><br><span class="line">            String email=account.get(j);</span><br><span class="line">            <span class="keyword">if</span>(emailToIndex.containsKey(email))&#123;</span><br><span class="line">                u.union(emailToIndex.get(email),i);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                emailToIndex.put(email,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;Integer,String&gt; indexToName=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    Map&lt;Integer, Set&lt;String&gt;&gt; indexToEmails=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> index=u.find(i);</span><br><span class="line">        indexToEmails.putIfAbsent(index,<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;());</span><br><span class="line">        List&lt;String&gt; account=accounts.get(i);</span><br><span class="line">        String name=account.get(<span class="number">0</span>);</span><br><span class="line">        indexToName.put(index,name);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; account.size(); j++) &#123;</span><br><span class="line">            indexToEmails.get(index).add(account.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Integer index : indexToEmails.keySet()) &#123;</span><br><span class="line">        String name=indexToName.get(index);</span><br><span class="line">        LinkedList&lt;String&gt; list=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(indexToEmails.get(index));</span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        list.addFirst(name);</span><br><span class="line">        res.add(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span>&#123;</span><br><span class="line">    Map&lt;Integer,Integer&gt; map;</span><br><span class="line"></span><br><span class="line">    UnionFind(<span class="type">int</span> n)&#123;</span><br><span class="line">        map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            map.put(i,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(i!=map.get(i))&#123;</span><br><span class="line">            i=map.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="type">int</span> rootA=find(a);</span><br><span class="line">        <span class="type">int</span> rootB=find(b);</span><br><span class="line">        <span class="keyword">if</span>(rootA==rootB)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(rootA,rootB);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>graph</tag>
      </tags>
  </entry>
  <entry>
    <title>electron实战之批量注册工具</title>
    <url>/2022/06/14/electron%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h1 id="批量注册工具-based-on-Node-js-amp-Electron"><a href="#批量注册工具-based-on-Node-js-amp-Electron" class="headerlink" title="批量注册工具 based on Node.js &amp; Electron"></a>批量注册工具 based on Node.js &amp; Electron</h1><p>“披着app外衣的网页”</p>
<p>调试时，在项目根路径npm run start即可</p>
<p>使用时，由于打包后已包含相关node和chomium，用户无需安装其他软件，可直接打开使用</p>
<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>注意：</p>
<ol>
<li><strong>main</strong>指定main process对应的js代码</li>
<li><strong>start</strong>指定启动方式</li>
<li><strong>package</strong>用于打包成exe可执行文件，配置可执行文件的存放路径、图标</li>
<li><strong>devDependencies</strong>是开发时所需的node module，不会一起打包</li>
<li><strong>dependencies</strong>是用户使用时所需的node module，会一起打包<ul>
<li>可以手动修改配置，规定依赖名和版本号，再在命令行npm install</li>
<li>规定global才会全局安装npm module，否则只是本项目内</li>
</ul>
</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prefix-reg&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A minimal Electron application&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon --watch main.js --exec electron .&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;package&quot;</span><span class="punctuation">:</span> <span class="string">&quot;electron-packager . prefix-reg --win --out ../prefix-reg --arch=x64 --app-version=1.0.0 --icon=./icon.ico&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/electron/electron-quick-start&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;Electron&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;quick&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;start&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;tutorial&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;demo&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iic&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CC0-1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;electron&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^19.0.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;electron-packager&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^15.5.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nodemon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.16&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;axios&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.27.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;node-xlsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.21.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>





<h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><p>应用的主进程</p>
<p>不实现具体功能，只是把舞台搭起来</p>
<p>注意：</p>
<ol>
<li>主进程和渲染进程间通过<code>ipcMain</code>和<code>ipcRenderer</code>通信</li>
<li>指定preload.js，供渲染进程调用api</li>
<li>指定main.html，窗体展示</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Modules to control application life and create native browser window</span></span><br><span class="line"><span class="comment">/* const &#123; app, BrowserWindow &#125; = require(&#x27;electron&#x27;)</span></span><br><span class="line"><span class="comment">const path = require(&#x27;path&#x27;) */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span>, ipcMain, dialog &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝electron官网的例子，用于选取文件</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handleFileOpen</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; canceled, filePaths &#125; = <span class="keyword">await</span> dialog.<span class="title function_">showOpenDialog</span>()</span><br><span class="line">  <span class="keyword">if</span> (canceled) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> filePaths[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//参考electron官网的例子，用于选取文件夹</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handlePathOpen</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; canceled, filePaths &#125; = <span class="keyword">await</span> dialog.<span class="title function_">showOpenDialog</span>(&#123; <span class="attr">properties</span>: [<span class="string">&#x27;openDirectory&#x27;</span>] &#125;)</span><br><span class="line">  <span class="keyword">if</span> (canceled) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> filePaths[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Create the browser window.</span></span><br><span class="line">  <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">      <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;preload.js&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// and load the index.html of the app.</span></span><br><span class="line">  mainWindow.<span class="title function_">loadFile</span>(<span class="string">&#x27;./main.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Open the DevTools.</span></span><br><span class="line">  <span class="comment">// mainWindow.webContents.openDevTools()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This method will be called when Electron has finished</span></span><br><span class="line"><span class="comment">// initialization and is ready to create browser windows.</span></span><br><span class="line"><span class="comment">// Some APIs can only be used after this event occurs.</span></span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ipcMain.<span class="title function_">handle</span>(<span class="string">&#x27;dialog:openFile&#x27;</span>, handleFileOpen)</span><br><span class="line">  ipcMain.<span class="title function_">handle</span>(<span class="string">&#x27;dialog:openDirectory&#x27;</span>, handlePathOpen)</span><br><span class="line">  <span class="title function_">createWindow</span>()</span><br><span class="line">  app.<span class="title function_">on</span>(<span class="string">&#x27;activate&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// On macOS it&#x27;s common to re-create a window in the app when the</span></span><br><span class="line">    <span class="comment">// dock icon is clicked and there are no other windows open.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">BrowserWindow</span>.<span class="title function_">getAllWindows</span>().<span class="property">length</span> === <span class="number">0</span>) <span class="title function_">createWindow</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quit when all windows are closed, except on macOS. There, it&#x27;s common</span></span><br><span class="line"><span class="comment">// for applications and their menu bar to stay active until the user quits</span></span><br><span class="line"><span class="comment">// explicitly with Cmd + Q.</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&#x27;darwin&#x27;</span>) app.<span class="title function_">quit</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// In this file you can include the rest of your app&#x27;s specific main process</span></span><br><span class="line"><span class="comment">// code. You can also put them in separate files and require them here.</span></span><br></pre></td></tr></table></figure>





<h2 id="main-html"><a href="#main-html" class="headerlink" title="main.html"></a>main.html</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; connect-src http://* ;script-src &#x27;self&#x27;; style-src &#x27;self&#x27; &#x27;unsafe-inline&#x27;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;./styles.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>前缀批量注册工具<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>前缀批量注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;images&quot;</span>&gt;</span>选择图片文件夹<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>Images Directory path:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span> <span class="attr">id</span>=<span class="string">&quot;imagesPath&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sheet&quot;</span>&gt;</span>选择xlsx文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>Excel File path:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span> <span class="attr">id</span>=<span class="string">&quot;sheetPath&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&#x27;button&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;upload&#x27;</span>&gt;</span>批量注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- You can also require other files to run in this process --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./renderer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="styles-css"><a href="#styles-css" class="headerlink" title="styles.css"></a>styles.css</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* styles.css */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Add styles here to customize the appearance of your app */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ecb0b0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#80624e</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="comment">/* table-layout: fixed; */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffebeb</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">32px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#bf9c94</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="preload-js"><a href="#preload-js" class="headerlink" title="preload.js"></a>preload.js</h2><p>出于安全考虑，渲染进程必须借助preload.js来调node api</p>
<p>借助axios来ajax上传数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// All of the Node.js APIs are available in the preload process.</span></span><br><span class="line"><span class="comment">// It has the same sandbox as a Chrome extension.</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">replaceText</span> = (<span class="params">selector, text</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(selector)</span><br><span class="line">    <span class="keyword">if</span> (element) element.<span class="property">innerText</span> = text</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> type <span class="keyword">of</span> [<span class="string">&#x27;chrome&#x27;</span>, <span class="string">&#x27;node&#x27;</span>, <span class="string">&#x27;electron&#x27;</span>]) &#123;</span><br><span class="line">    <span class="title function_">replaceText</span>(<span class="string">`<span class="subst">$&#123;type&#125;</span>-version`</span>, process.<span class="property">versions</span>[type])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; contextBridge, ipcRenderer, remote, shell &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="comment">// 引入 node-xlsx 模块</span></span><br><span class="line"><span class="keyword">const</span> xlsx = <span class="built_in">require</span>(<span class="string">&#x27;node-xlsx&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>)</span><br><span class="line"></span><br><span class="line">contextBridge.<span class="title function_">exposeInMainWorld</span>(<span class="string">&#x27;electronAPI&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">openFile</span>: <span class="function">() =&gt;</span> ipcRenderer.<span class="title function_">invoke</span>(<span class="string">&#x27;dialog:openFile&#x27;</span>),</span><br><span class="line">  <span class="attr">openDirectory</span>: <span class="function">() =&gt;</span> ipcRenderer.<span class="title function_">invoke</span>(<span class="string">&#x27;dialog:openDirectory&#x27;</span>),</span><br><span class="line">  <span class="attr">parseSheet</span>: <span class="function">(<span class="params">excelFilePath</span>) =&gt;</span> xlsx.<span class="title function_">parse</span>(excelFilePath),</span><br><span class="line">  <span class="attr">readDir</span>: <span class="function">(<span class="params">directory</span>) =&gt;</span> fs.<span class="title function_">readdirSync</span>(directory),</span><br><span class="line">  <span class="attr">joinPath</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> path.<span class="title function_">join</span>(a, b),</span><br><span class="line">  <span class="attr">parseImage</span>: <span class="function">(<span class="params">imageFilePath</span>) =&gt;</span> fs.<span class="title function_">readFileSync</span>(imageFilePath),</span><br><span class="line">  <span class="attr">toBaseString</span>: <span class="function">(<span class="params">image</span>) =&gt;</span> <span class="title class_">Buffer</span>.<span class="title function_">from</span>(image, <span class="string">&#x27;binary&#x27;</span>).<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>), <span class="comment">// base64编码</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">requestHelper</span>: <span class="function">(<span class="params">data</span>) =&gt;</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;https://test-api.gdsinsing.com/safety/prefix/apply&#x27;</span>, data, &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Status: <span class="subst">$&#123;res.status&#125;</span>`</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Body: &#x27;</span>, res.<span class="property">data</span>);</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>





<h2 id="renderer-js"><a href="#renderer-js" class="headerlink" title="renderer.js"></a>renderer.js</h2><p>在渲染进程中实现具体功能</p>
<p>只能通过调用预先在preload.js中写好的函数，来调用api</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// This file is required by the main.html file and will</span></span><br><span class="line"><span class="comment">// be executed in the renderer process for that window.</span></span><br><span class="line"><span class="comment">// No Node.js APIs are available in this process because</span></span><br><span class="line"><span class="comment">// `nodeIntegration` is turned off. Use `preload.js` to</span></span><br><span class="line"><span class="comment">// selectively enable features needed in the rendering</span></span><br><span class="line"><span class="comment">// process.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;images&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> btn2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;sheet&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> btn3 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;upload&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filePathElement1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;sheetPath&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> filePathElement2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;imagesPath&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> images = [] <span class="comment">//存放图片</span></span><br><span class="line"><span class="keyword">var</span> applyDatas = [] <span class="comment">//存放要注册的前缀信息</span></span><br><span class="line"></span><br><span class="line">btn1.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> directoryPath = <span class="keyword">await</span> <span class="variable language_">window</span>.<span class="property">electronAPI</span>.<span class="title function_">openDirectory</span>()</span><br><span class="line">  filePathElement2.<span class="property">innerText</span> = directoryPath</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> files = <span class="variable language_">window</span>.<span class="property">electronAPI</span>.<span class="title function_">readDir</span>(directoryPath);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> len = files.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="title class_">Math</span>.<span class="title function_">floor</span>(i / <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> b = i % <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> imagePath = <span class="variable language_">window</span>.<span class="property">electronAPI</span>.<span class="title function_">joinPath</span>(directoryPath, a + <span class="string">&#x27;_&#x27;</span> + b + <span class="string">&#x27;.png&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> image = <span class="variable language_">window</span>.<span class="property">electronAPI</span>.<span class="title function_">parseImage</span>(imagePath);</span><br><span class="line">    <span class="comment">/* console.log(image);</span></span><br><span class="line"><span class="comment">    console.log(&quot;============&quot;); */</span></span><br><span class="line">    <span class="keyword">let</span> string = <span class="variable language_">window</span>.<span class="property">electronAPI</span>.<span class="title function_">toBaseString</span>(image);</span><br><span class="line">    images.<span class="title function_">push</span>(string);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">btn2.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> filePath = <span class="keyword">await</span> <span class="variable language_">window</span>.<span class="property">electronAPI</span>.<span class="title function_">openFile</span>()</span><br><span class="line">  filePathElement1.<span class="property">innerText</span> = filePath</span><br><span class="line"></span><br><span class="line">  <span class="comment">//解析excel, 获取到所有sheets</span></span><br><span class="line">  <span class="keyword">const</span> sheets = <span class="variable language_">window</span>.<span class="property">electronAPI</span>.<span class="title function_">parseSheet</span>(filePath);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*   // 查看页面数</span></span><br><span class="line"><span class="comment">    console.log(sheets.length);</span></span><br><span class="line"><span class="comment">    console.log(&#x27;===================&#x27;); */</span></span><br><span class="line">  <span class="comment">// 打印页面信息..</span></span><br><span class="line">  <span class="keyword">const</span> sheet = sheets[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">/*     console.log(sheet); //&#123;name: &#x27;Sheet1&#x27;, data: Array(15)&#125;</span></span><br><span class="line"><span class="comment">      console.log(&#x27;===================&#x27;);</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">      // 打印页面数据</span></span><br><span class="line"><span class="comment">      console.log(sheet.data);  //an Array of Array</span></span><br><span class="line"><span class="comment">      console.log(&#x27;===================&#x27;); */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 输出每行内容</span></span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> len = sheet.<span class="property">data</span>.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">var</span> rowLen = sheet.<span class="property">data</span>[<span class="number">0</span>].<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> row = sheet.<span class="property">data</span>[i];</span><br><span class="line">    <span class="keyword">if</span> (row.<span class="property">length</span> != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> applyData = &#123;&#125;;</span><br><span class="line">      applyData.<span class="property">companyName</span> = row[<span class="number">0</span>];</span><br><span class="line">      applyData.<span class="property">companyType</span> = row[<span class="number">1</span>];</span><br><span class="line">      applyData.<span class="property">companyCardNo</span> = row[<span class="number">2</span>];</span><br><span class="line">      applyData.<span class="property">agentName</span> = row[<span class="number">3</span>];</span><br><span class="line">      applyData.<span class="property">agentCardNo</span> = row[<span class="number">4</span>];</span><br><span class="line">      applyData.<span class="property">agentMobile</span> = row[<span class="number">5</span>];</span><br><span class="line">      applyData.<span class="property">agentEmail</span> = row[<span class="number">6</span>];</span><br><span class="line">      applyData.<span class="property">agentPost</span> = row[<span class="number">7</span>];</span><br><span class="line">      applyData.<span class="property">companyIndustry</span> = row[<span class="number">8</span>];</span><br><span class="line">      applyData.<span class="property">companySmallIndustry</span> = row[<span class="number">9</span>];</span><br><span class="line">      applyData.<span class="property">companyArea</span> = row[<span class="number">10</span>];</span><br><span class="line">      applyData.<span class="property">organContactAddress</span> = row[<span class="number">11</span>];</span><br><span class="line">      applyData.<span class="property">handle</span> = row[<span class="number">12</span>];</span><br><span class="line"></span><br><span class="line">      <span class="comment">//图片需另外导入</span></span><br><span class="line">      applyData.<span class="property">ebl_img</span> = images[count++];</span><br><span class="line">      applyData.<span class="property">agent_idcard_front</span> = images[count++];</span><br><span class="line">      applyData.<span class="property">agent_idcard_reverse</span> = images[count++];</span><br><span class="line"></span><br><span class="line">      applyDatas.<span class="title function_">push</span>(applyData);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(applyDatas);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">btn3.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> len = applyDatas.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> _data = &#123;&#125;;</span><br><span class="line">    _data.<span class="property">applyData</span> = applyDatas[i];</span><br><span class="line">    _data.<span class="property">sign</span> = &#123; <span class="string">&quot;username&quot;</span>: <span class="string">&quot;test2&quot;</span>, <span class="string">&quot;pwd&quot;</span>: <span class="string">&quot;123456&quot;</span> &#125;;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(_data);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">electronAPI</span>.<span class="title function_">requestHelper</span>(data);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*   var settings = &#123;</span></span><br><span class="line"><span class="comment">      &quot;url&quot;: &quot;https://test-api.gdsinsing.com/safety/prefix/apply&quot;,</span></span><br><span class="line"><span class="comment">      &quot;method&quot;: &quot;POST&quot;,</span></span><br><span class="line"><span class="comment">      &quot;timeout&quot;: 0,</span></span><br><span class="line"><span class="comment">      &quot;headers&quot;: &#123;</span></span><br><span class="line"><span class="comment">        &quot;Content-Type&quot;: &quot;application/json&quot;</span></span><br><span class="line"><span class="comment">      &#125;,</span></span><br><span class="line"><span class="comment">      &quot;data&quot;: JSON.stringify(data)</span></span><br><span class="line"><span class="comment">    &#125;; */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*   axios.post(&#x27;https://test-ssp.gdsinsing.com/safety/prefix/apply&#x27;, data)</span></span><br><span class="line"><span class="comment">      .then((res) =&gt; &#123;</span></span><br><span class="line"><span class="comment">        console.log(`Status: $&#123;res.status&#125;`);</span></span><br><span class="line"><span class="comment">        console.log(&#x27;Body: &#x27;, res.data);</span></span><br><span class="line"><span class="comment">      &#125;).catch((err) =&gt; &#123;</span></span><br><span class="line"><span class="comment">        console.error(err);</span></span><br><span class="line"><span class="comment">      &#125;); */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
        <tag>Electron</tag>
      </tags>
  </entry>
  <entry>
    <title>graph</title>
    <url>/2022/05/13/graph/</url>
    <content><![CDATA[<h1 id="图好题选编"><a href="#图好题选编" class="headerlink" title="图好题选编"></a>图好题选编</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 记录被遍历过的节点</span></span><br><span class="line"><span class="type">boolean</span>[] visited;</span><br><span class="line"><span class="comment">// 记录从起点到当前节点的路径</span></span><br><span class="line"><span class="type">boolean</span>[] onPath;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 图遍历框架 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">(Graph graph, <span class="type">int</span> s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (visited[s]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 经过节点 s，标记为已遍历</span></span><br><span class="line">    visited[s] = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 做选择：标记节点 s 在路径上</span></span><br><span class="line">    onPath[s] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> neighbor : graph.neighbors(s)) &#123;</span><br><span class="line">        traverse(graph, neighbor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 撤销选择：节点 s 离开路径</span></span><br><span class="line">    onPath[s] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="797-All-Paths-From-Source-to-Target"><a href="#797-All-Paths-From-Source-to-Target" class="headerlink" title="797. All Paths From Source to Target"></a><a href="https://leetcode.cn/problems/all-paths-from-source-to-target/">797. All Paths From Source to Target</a></h2><p>directed acyclic graph (<strong>DAG</strong>) </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode797</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">allPathsSourceTarget</span><span class="params">(<span class="type">int</span>[][] graph)</span> &#123;</span><br><span class="line">        res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        dfs(graph,<span class="number">0</span>,<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;()); <span class="comment">//题目要求找从0到n-1的所有路径，只需遍历从vertex 0出发的路径即可</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[][] graph, <span class="type">int</span> start, LinkedList&lt;Integer&gt; path)</span>&#123;</span><br><span class="line">        path.add(start);</span><br><span class="line">        <span class="type">int</span> n= graph.length;</span><br><span class="line">        <span class="keyword">if</span>(start==n-<span class="number">1</span>)&#123;<span class="comment">//一旦到达了n-1，便可更新res并返回</span></span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            path.removeLast();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : graph[start]) &#123;</span><br><span class="line">            dfs(graph,i,path);</span><br><span class="line">        &#125;</span><br><span class="line">        path.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="207-Course-Schedule"><a href="#207-Course-Schedule" class="headerlink" title="207. Course Schedule"></a><a href="https://leetcode.cn/problems/course-schedule/">207. Course Schedule</a></h2><p><strong>环检测算法</strong></p>
<p><strong>看到依赖问题，首先想到的就是把问题转化成「有向图」这种数据结构，只要图中存在环，那就说明存在循环依赖</strong>。</p>
<p><strong>只要会遍历，就可以判断图中是否存在环了</strong></p>
<h3 id="法一：DFS"><a href="#法一：DFS" class="headerlink" title="法一：DFS"></a>法一：DFS</h3><p>借助 onPath 数组判断是否存在环</p>
<p>遍历所有节点；若某一路径上出现重复节点，则存在环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode207</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt;[] graph;</span><br><span class="line">    <span class="type">boolean</span> isCycle;</span><br><span class="line">    <span class="type">boolean</span>[] visited;</span><br><span class="line">    <span class="type">boolean</span>[] onPath;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canFinish</span><span class="params">(<span class="type">int</span> numCourses, <span class="type">int</span>[][] prerequisites)</span> &#123;</span><br><span class="line">        graph=buildGraph(numCourses,prerequisites);</span><br><span class="line">        visited=<span class="keyword">new</span> <span class="title class_">boolean</span>[graph.length];</span><br><span class="line">        onPath=<span class="keyword">new</span> <span class="title class_">boolean</span>[graph.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; graph.length; i++) &#123; <span class="comment">//需要遍历每一条路径，才能确定不存在环; 因此需要从每个顶点出发</span></span><br><span class="line">            dfs(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> !isCycle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt;[] buildGraph(<span class="type">int</span> num, <span class="type">int</span>[][] pres)&#123;</span><br><span class="line">        List&lt;Integer&gt;[] graph=<span class="keyword">new</span> <span class="title class_">List</span>[num];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; graph.length; i++) &#123;</span><br><span class="line">            graph[i]=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] pre : pres) &#123;</span><br><span class="line">            <span class="type">int</span> from=pre[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> to=pre[<span class="number">0</span>];</span><br><span class="line">            graph[from].add(to);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> graph;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="comment">//注意：onPath和visited的判断不能调换次序</span></span><br><span class="line">        <span class="comment">//否则会漏掉环！！！</span></span><br><span class="line">        <span class="keyword">if</span>(onPath[start])&#123;<span class="comment">//当前路径上第二次遇到该vertex</span></span><br><span class="line">            isCycle=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(visited[start] || isCycle)&#123;<span class="comment">//已经遍历过的顶点无需再次遍历</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[start]=<span class="literal">true</span>;</span><br><span class="line">        onPath[start]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer i : graph[start]) &#123;</span><br><span class="line">            dfs(i);</span><br><span class="line">        &#125;</span><br><span class="line">        onPath[start]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：BFS"><a href="#法二：BFS" class="headerlink" title="法二：BFS"></a>法二：BFS</h3><p>借助 <code>indegree</code> 数组记录每个节点的「入度」</p>
<p>若某节点没有入度，则可以作为topological sort的起点，加入队列进行遍历</p>
<p>如果所有节点都被遍历，则不成环，否则成环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canFinish</span><span class="params">(<span class="type">int</span> numCourses, <span class="type">int</span>[][] prerequisites)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt;[] graph=<span class="keyword">new</span> <span class="title class_">List</span>[numCourses];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; graph.length; i++) &#123;</span><br><span class="line">        graph[i]=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] inDegree=<span class="keyword">new</span> <span class="title class_">int</span>[graph.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] pre : prerequisites) &#123;</span><br><span class="line">        <span class="type">int</span> to=pre[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> from=pre[<span class="number">1</span>];</span><br><span class="line">        graph[from].add(to);</span><br><span class="line">        inDegree[to]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    Deque&lt;Integer&gt; queue=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inDegree.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(inDegree[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            queue.offer(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span> pre=queue.poll();</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> next : graph[pre]) &#123;</span><br><span class="line">            inDegree[next]--;</span><br><span class="line">            <span class="keyword">if</span>(inDegree[next]==<span class="number">0</span>)&#123;</span><br><span class="line">                queue.offer(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count==numCourses ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="210-Course-Schedule-II"><a href="#210-Course-Schedule-II" class="headerlink" title="210. Course Schedule II"></a><a href="https://leetcode.cn/problems/course-schedule-ii/">210. Course Schedule II</a></h2><p>拓扑排序：</p>
<ol>
<li>Topological Sorting</li>
<li><strong>直观地说就是，让你把一幅图「拉平」，而且这个「拉平」的图里面，所有箭头方向都是一致的</strong></li>
<li>如果一幅图是「有向无环图」，那么一定可以进行拓扑排序。</li>
<li><strong>将后序遍历的结果进行反转，就是拓扑排序的结果</strong>。</li>
</ol>
<h3 id="法一：DFS-1"><a href="#法一：DFS-1" class="headerlink" title="法一：DFS"></a>法一：DFS</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode210</span> &#123;</span><br><span class="line">    List&lt;Integer&gt;[] graph;</span><br><span class="line">    <span class="type">boolean</span>[] visited;</span><br><span class="line">    <span class="type">boolean</span>[] onPath;</span><br><span class="line">    <span class="type">boolean</span> hasCycle;</span><br><span class="line">    LinkedList&lt;Integer&gt; path;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findOrder(<span class="type">int</span> numCourses, <span class="type">int</span>[][] prerequisites) &#123;</span><br><span class="line">        graph=build(numCourses,prerequisites);</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        visited=<span class="keyword">new</span> <span class="title class_">boolean</span>[numCourses];</span><br><span class="line">        onPath=<span class="keyword">new</span> <span class="title class_">boolean</span>[numCourses];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">            dfs(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(hasCycle)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Collections.reverse(path);</span><br><span class="line">            <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[path.size()];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">                res[i]=path.get(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt;[] build(<span class="type">int</span> num, <span class="type">int</span>[][] pres)&#123;</span><br><span class="line">        LinkedList&lt;Integer&gt;[] graph=<span class="keyword">new</span> <span class="title class_">LinkedList</span>[num];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            graph[i]=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] pre : pres) &#123;</span><br><span class="line">            <span class="type">int</span> from=pre[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> to=pre[<span class="number">0</span>];</span><br><span class="line">            graph[from].add(to);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> graph;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(onPath[start])&#123;</span><br><span class="line">            hasCycle=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(hasCycle || visited[start])&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[start]=<span class="literal">true</span>;</span><br><span class="line">        onPath[start]=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : graph[start]) &#123;</span><br><span class="line">            dfs(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//后序遍历插入</span></span><br><span class="line">        path.add(start);</span><br><span class="line">        onPath[start]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：BFS-1"><a href="#法二：BFS-1" class="headerlink" title="法二：BFS"></a>法二：BFS</h3><p>同207的BFS算法，入度为0队列弹出节点的顺序即为拓扑排序结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] findOrder(<span class="type">int</span> numCourses, <span class="type">int</span>[][] prerequisites) &#123;</span><br><span class="line">    List&lt;Integer&gt;[] graph=<span class="keyword">new</span> <span class="title class_">List</span>[numCourses];</span><br><span class="line">    <span class="type">int</span>[] inDegree=<span class="keyword">new</span> <span class="title class_">int</span>[numCourses];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; graph.length; i++) &#123;</span><br><span class="line">        graph[i]=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] pre : prerequisites) &#123;</span><br><span class="line">        <span class="type">int</span> to=pre[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> from=pre[<span class="number">1</span>];</span><br><span class="line">        graph[from].add(to);</span><br><span class="line">        inDegree[to]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[numCourses];</span><br><span class="line">    Deque&lt;Integer&gt; queue=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inDegree.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(inDegree[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            queue.offer(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span> pre=queue.poll();</span><br><span class="line">        res[count++]=pre;</span><br><span class="line">        <span class="keyword">for</span> (Integer next : graph[pre]) &#123;</span><br><span class="line">            inDegree[next]--;</span><br><span class="line">            <span class="keyword">if</span>(inDegree[next]==<span class="number">0</span>)&#123;</span><br><span class="line">                queue.offer(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(count&lt;numCourses)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;&#125;;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="743-Network-Delay-Time"><a href="#743-Network-Delay-Time" class="headerlink" title="743. Network Delay Time"></a><a href="https://leetcode.cn/problems/network-delay-time/">743. Network Delay Time</a></h2><p>Dijkstra</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输入一幅图和一个起点 start，计算 start 到其他节点的最短距离</span></span><br><span class="line"><span class="type">int</span>[] dijkstra(<span class="type">int</span> start, List&lt;Integer&gt;[] graph);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回节点 from 到节点 to 之间的边的权重</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">weight</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入节点 s 返回 s 的相邻节点</span></span><br><span class="line">List&lt;Integer&gt; <span class="title function_">adj</span><span class="params">(<span class="type">int</span> s)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入一幅图和一个起点 start，计算 start 到其他节点的最短距离</span></span><br><span class="line"><span class="type">int</span>[] dijkstra(<span class="type">int</span> start, List&lt;Integer&gt;[] graph) &#123;</span><br><span class="line">    <span class="comment">// 图中节点的个数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">V</span> <span class="operator">=</span> graph.length;</span><br><span class="line">    <span class="comment">// 记录最短路径的权重，你可以理解为 dp table</span></span><br><span class="line">    <span class="comment">// 定义：distTo[i] 的值就是节点 start 到达节点 i 的最短路径权重</span></span><br><span class="line">    <span class="type">int</span>[] distTo = <span class="keyword">new</span> <span class="title class_">int</span>[V];</span><br><span class="line">    <span class="comment">// 求最小值，所以 dp table 初始化为正无穷</span></span><br><span class="line">    Arrays.fill(distTo, Integer.MAX_VALUE);</span><br><span class="line">    <span class="comment">// base case，start 到 start 的最短距离就是 0</span></span><br><span class="line">    distTo[start] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 优先级队列，distFromStart 较小的排在前面</span></span><br><span class="line">    Queue&lt;State&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a, b) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> a.distFromStart - b.distFromStart;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从起点 start 开始进行 BFS</span></span><br><span class="line">    pq.offer(<span class="keyword">new</span> <span class="title class_">State</span>(start, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!pq.isEmpty()) &#123;</span><br><span class="line">        <span class="type">State</span> <span class="variable">curState</span> <span class="operator">=</span> pq.poll();</span><br><span class="line">        <span class="type">int</span> <span class="variable">curNodeID</span> <span class="operator">=</span> curState.id;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curDistFromStart</span> <span class="operator">=</span> curState.distFromStart;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//若是求到某一点的最短路径，则增加return判断</span></span><br><span class="line">        <span class="comment">//PriorityQueue保证了第一次遇到end时，就是最短的距离</span></span><br><span class="line">        <span class="keyword">if</span> (curNodeID == end) &#123;</span><br><span class="line">            <span class="keyword">return</span> curDistFromStart;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (curDistFromStart &gt; distTo[curNodeID]) &#123;</span><br><span class="line">            <span class="comment">// 已经有一条更短的路径到达 curNode 节点了</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将 curNode 的相邻节点装入队列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> nextNodeID : adj(curNodeID)) &#123;</span><br><span class="line">            <span class="comment">// 看看从 curNode 达到 nextNode 的距离是否会更短</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">distToNextNode</span> <span class="operator">=</span> distTo[curNodeID] + weight(curNodeID, nextNodeID);</span><br><span class="line">            <span class="keyword">if</span> (distTo[nextNodeID] &gt; distToNextNode) &#123;</span><br><span class="line">                <span class="comment">// 更新 dp table</span></span><br><span class="line">                distTo[nextNodeID] = distToNextNode;</span><br><span class="line">                <span class="comment">// 将这个节点以及距离放入队列</span></span><br><span class="line">                pq.offer(<span class="keyword">new</span> <span class="title class_">State</span>(nextNodeID, distToNextNode));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> distTo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> dist;</span><br><span class="line">    State(<span class="type">int</span> id, <span class="type">int</span> dist)&#123;</span><br><span class="line">        <span class="built_in">this</span>.id=id;</span><br><span class="line">        <span class="built_in">this</span>.dist=dist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">networkDelayTime</span><span class="params">(<span class="type">int</span>[][] times, <span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    List&lt;<span class="type">int</span>[]&gt;[] graph=<span class="keyword">new</span> <span class="title class_">List</span>[n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        graph[i]=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] time : times) &#123;</span><br><span class="line">        <span class="type">int</span> from=time[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> to=time[<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> edge=time[<span class="number">2</span>];</span><br><span class="line">        graph[from].add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;to,edge&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] md=<span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    Arrays.fill(md,Integer.MAX_VALUE);</span><br><span class="line">    md[k]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    PriorityQueue&lt;State&gt; pq=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;State&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(State o1, State o2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> o1.dist-o2.dist;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    pq.offer(<span class="keyword">new</span> <span class="title class_">State</span>(k,<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(!pq.isEmpty())&#123;</span><br><span class="line">        State cur=pq.poll();</span><br><span class="line">        <span class="keyword">if</span>(md[cur.id]&lt;cur.dist)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] next : graph[cur.id]) &#123;</span><br><span class="line">            <span class="type">int</span> to=next[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> edge=next[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(cur.dist+edge&lt;md[to])&#123;</span><br><span class="line">                md[to]=cur.dist+edge;</span><br><span class="line">                pq.offer(<span class="keyword">new</span> <span class="title class_">State</span>(to,md[to]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> max=Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        max=Math.max(max,md[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max==Integer.MAX_VALUE ? -<span class="number">1</span> : max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="787-Cheapest-Flights-Within-K-Stops"><a href="#787-Cheapest-Flights-Within-K-Stops" class="headerlink" title="787. Cheapest Flights Within K Stops"></a><a href="https://leetcode.cn/problems/cheapest-flights-within-k-stops/">787. Cheapest Flights Within K Stops</a></h2><p>相比最正统的dijkstra，注意：</p>
<ol>
<li>只求到某一点的最短距离，可以提前return</li>
<li>考虑经过的节点数的限制，若不满足则continue</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findCheapestPrice</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] flights, <span class="type">int</span> src, <span class="type">int</span> dst, <span class="type">int</span> K)</span> &#123;</span><br><span class="line">    List&lt;<span class="type">int</span>[]&gt;[] graph = <span class="keyword">new</span> <span class="title class_">LinkedList</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        graph[i] = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] edge : flights) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">from</span> <span class="operator">=</span> edge[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">to</span> <span class="operator">=</span> edge[<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">price</span> <span class="operator">=</span> edge[<span class="number">2</span>];</span><br><span class="line">        graph[from].add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;to, price&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动 dijkstra 算法</span></span><br><span class="line">    <span class="comment">// 计算以 src 为起点在 k 次中转到达 dst 的最短路径</span></span><br><span class="line">    K++;</span><br><span class="line">    <span class="keyword">return</span> dijkstra(graph, src, K, dst);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="comment">// 图节点的 id</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="comment">// 从 src 节点到当前节点的花费</span></span><br><span class="line">    <span class="type">int</span> costFromSrc;</span><br><span class="line">    <span class="comment">// 从 src 节点到当前节点经过的节点个数</span></span><br><span class="line">    <span class="type">int</span> nodeNumFromSrc;</span><br><span class="line"></span><br><span class="line">    State(<span class="type">int</span> id, <span class="type">int</span> costFromSrc, <span class="type">int</span> nodeNumFromSrc) &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.costFromSrc = costFromSrc;</span><br><span class="line">        <span class="built_in">this</span>.nodeNumFromSrc = nodeNumFromSrc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入一个起点 src，计算从 src 到其他节点的最短距离</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">dijkstra</span><span class="params">(List&lt;<span class="type">int</span>[]&gt;[] graph, <span class="type">int</span> src, <span class="type">int</span> k, <span class="type">int</span> dst)</span> &#123;</span><br><span class="line">    <span class="comment">// 定义：从起点 src 到达节点 i 的最短路径权重为 distTo[i]</span></span><br><span class="line">    <span class="type">int</span>[] distTo = <span class="keyword">new</span> <span class="title class_">int</span>[graph.length];</span><br><span class="line">    <span class="comment">// 定义：从起点 src 到达节点 i 至少要经过 nodeNumTo[i] 个节点</span></span><br><span class="line">    <span class="type">int</span>[] nodeNumTo = <span class="keyword">new</span> <span class="title class_">int</span>[graph.length];</span><br><span class="line">    Arrays.fill(distTo, Integer.MAX_VALUE);</span><br><span class="line">    Arrays.fill(nodeNumTo, Integer.MAX_VALUE);</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    distTo[src] = <span class="number">0</span>;</span><br><span class="line">    nodeNumTo[src] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 优先级队列，costFromSrc 较小的排在前面</span></span><br><span class="line">    Queue&lt;State&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a, b) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> a.costFromSrc - b.costFromSrc;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 从起点 src 开始进行 BFS</span></span><br><span class="line">    pq.offer(<span class="keyword">new</span> <span class="title class_">State</span>(src, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!pq.isEmpty()) &#123;</span><br><span class="line">        <span class="type">State</span> <span class="variable">curState</span> <span class="operator">=</span> pq.poll();</span><br><span class="line">        <span class="type">int</span> <span class="variable">curNodeID</span> <span class="operator">=</span> curState.id;</span><br><span class="line">        <span class="type">int</span> <span class="variable">costFromSrc</span> <span class="operator">=</span> curState.costFromSrc;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curNodeNumFromSrc</span> <span class="operator">=</span> curState.nodeNumFromSrc;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (curNodeID == dst) &#123;</span><br><span class="line">            <span class="comment">// 找到最短路径</span></span><br><span class="line">            <span class="keyword">return</span> costFromSrc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (curNodeNumFromSrc == k) &#123;</span><br><span class="line">            <span class="comment">// 中转次数耗尽</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 curNode 的相邻节点装入队列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] neighbor : graph[curNodeID]) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">nextNodeID</span> <span class="operator">=</span> neighbor[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">costToNextNode</span> <span class="operator">=</span> costFromSrc + neighbor[<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 中转次数消耗 1</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">nextNodeNumFromSrc</span> <span class="operator">=</span> curNodeNumFromSrc + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新 dp table</span></span><br><span class="line">            <span class="keyword">if</span> (distTo[nextNodeID] &gt; costToNextNode) &#123;</span><br><span class="line">                distTo[nextNodeID] = costToNextNode;</span><br><span class="line">                nodeNumTo[nextNodeID] = nextNodeNumFromSrc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 剪枝，如果中转次数更多，花费还更大，那必然不会是最短路径</span></span><br><span class="line">            <span class="keyword">if</span> (costToNextNode &gt; distTo[nextNodeID]</span><br><span class="line">                &amp;&amp; nextNodeNumFromSrc &gt; nodeNumTo[nextNodeID]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            pq.offer(<span class="keyword">new</span> <span class="title class_">State</span>(nextNodeID, costToNextNode, nextNodeNumFromSrc));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="277-Find-the-Celebrity"><a href="#277-Find-the-Celebrity" class="headerlink" title="277. Find the Celebrity"></a><a href="https://leetcode.cn/problems/find-the-celebrity/">277. Find the Celebrity</a></h2><p>名人节点的出度为 <code>0</code>，入度为 <code>n - 1</code>。</p>
<p>图有两种存储形式，一种是邻接表，一种是邻接矩阵，邻接表的主要优势是<strong>节约存储空间</strong>；邻接矩阵的主要优势是可以<strong>迅速判断两个节点是否相邻</strong>。</p>
<p>虽然判断一个人「是名人」必须用一个 for 循环，但判断一个人「不是名人」就不用这么麻烦了。</p>
<p><strong>因为「名人」的定义保证了「名人」的唯一性，所以我们可以利用排除法，先排除那些显然不是「名人」的人，从而避免 for 循环的嵌套，降低时间复杂度</strong>。</p>
<p><strong>我们可以不断从候选人中选两个出来，然后排除掉一个，直到最后只剩下一个候选人，这时候再使用一个 for 循环判断这个候选人是否是货真价实的「名人」</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findCelebrity</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> candidate=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">other</span> <span class="operator">=</span> <span class="number">0</span>; other &lt; n; other++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(knows(candidate,other) || !knows(other,candidate))&#123;</span><br><span class="line">            candidate=other;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">other</span> <span class="operator">=</span> <span class="number">0</span>; other &lt; n; other++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(other==candidate)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(knows(candidate,other) || !knows(other,candidate))&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> candidate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="997-Find-the-Town-Judge"><a href="#997-Find-the-Town-Judge" class="headerlink" title="997. Find the Town Judge"></a><a href="https://leetcode.cn/problems/find-the-town-judge/">997. Find the Town Judge</a></h2><p>依葫芦画瓢</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode997</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findJudge</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] trust)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[][] matrix=<span class="keyword">new</span> <span class="title class_">boolean</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] arr : trust) &#123;</span><br><span class="line">            <span class="type">int</span> a=arr[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> b=arr[<span class="number">1</span>];</span><br><span class="line">            matrix[a][b]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> candidate=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">other</span> <span class="operator">=</span> <span class="number">2</span>; other &lt;= n; other++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!matrix[other][candidate] || matrix[candidate][other])&#123;</span><br><span class="line">                candidate=other;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i!=candidate &amp;&amp; !matrix[i][candidate] || matrix[candidate][i])&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> candidate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="818-Race-Car"><a href="#818-Race-Car" class="headerlink" title="818. Race Car"></a>818. Race Car</h2><p><a href="https://leetcode.com/problems/race-car/discuss/124326/Summary-of-the-BFS-and-DP-solutions-with-intuitive-explanation">https://leetcode.com/problems/race-car/discuss/124326/Summary-of-the-BFS-and-DP-solutions-with-intuitive-explanation</a></p>
<h3 id="BFS-slow"><a href="#BFS-slow" class="headerlink" title="BFS: slow!"></a>BFS: slow!</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">racecar</span><span class="params">(<span class="type">int</span> target)</span> &#123;</span><br><span class="line">    Set&lt;String&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    PriorityQueue&lt;<span class="type">int</span>[]&gt; pq=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a,b)-&gt;(a[<span class="number">2</span>]-b[<span class="number">2</span>]));</span><br><span class="line">    <span class="comment">//curId, curSpeed, curStep</span></span><br><span class="line">    pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!pq.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span>[] cur=pq.poll();</span><br><span class="line">        <span class="type">int</span> curId=cur[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> curSpeed=cur[<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> curStep=cur[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span>(curId==target)&#123;</span><br><span class="line">            <span class="keyword">return</span> curStep;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> nextStep=curStep+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//accelerate</span></span><br><span class="line">        <span class="type">int</span> nextId=curId+curSpeed;</span><br><span class="line">        <span class="type">int</span> nextSpeed=curSpeed*<span class="number">2</span>;</span><br><span class="line">        String s=nextId+<span class="string">&quot;,&quot;</span>+nextSpeed;</span><br><span class="line">        <span class="keyword">if</span>(nextId&gt;=<span class="number">0</span> &amp;&amp; nextSpeed&lt;=<span class="number">2</span>*target &amp;&amp;!set.contains(s))&#123;</span><br><span class="line">            set.add(s);</span><br><span class="line">            pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;nextId,nextSpeed,nextStep&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//reverse</span></span><br><span class="line">        nextSpeed=curSpeed&gt;<span class="number">0</span> ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">        nextId=curId;</span><br><span class="line">        s=nextId+<span class="string">&quot;,&quot;</span>+nextSpeed;</span><br><span class="line">        <span class="keyword">if</span>(!set.contains(s))&#123;</span><br><span class="line">            set.add(s);</span><br><span class="line">            pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;nextId,nextSpeed,nextStep&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">racecar</span><span class="params">(<span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">K</span> <span class="operator">=</span> <span class="number">33</span> - Integer.numberOfLeadingZeros(target - <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">barrier</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; K;</span><br><span class="line">        <span class="type">int</span>[] dist = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span> * barrier + <span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dist, Integer.MAX_VALUE);</span><br><span class="line">        dist[target] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        PriorityQueue&lt;Node&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Node&gt;(</span><br><span class="line">            (a, b) -&gt; a.steps - b.steps);</span><br><span class="line">        pq.offer(<span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>, target));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!pq.isEmpty()) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> pq.poll();</span><br><span class="line">            <span class="type">int</span> <span class="variable">steps</span> <span class="operator">=</span> node.steps, targ1 = node.target;</span><br><span class="line">            <span class="keyword">if</span> (dist[Math.floorMod(targ1, dist.length)] &gt; steps) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt;= K; ++k) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">walk</span> <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; k) - <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">targ2</span> <span class="operator">=</span> walk - targ1;</span><br><span class="line">                <span class="type">int</span> <span class="variable">steps2</span> <span class="operator">=</span> steps + k + (targ2 != <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (Math.abs(targ2) &lt;= barrier &amp;&amp; steps2 &lt; dist[Math.floorMod(targ2, dist.length)]) &#123;</span><br><span class="line">                    pq.offer(<span class="keyword">new</span> <span class="title class_">Node</span>(steps2, targ2));</span><br><span class="line">                    dist[Math.floorMod(targ2, dist.length)] = steps2;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dist[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> steps, target;</span><br><span class="line">    Node(<span class="type">int</span> s, <span class="type">int</span> t) &#123;</span><br><span class="line">        steps = s;</span><br><span class="line">        target = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>graph</tag>
      </tags>
  </entry>
  <entry>
    <title>Trie</title>
    <url>/2022/06/23/Trie/</url>
    <content><![CDATA[<h1 id="Prefix-Tree选编"><a href="#Prefix-Tree选编" class="headerlink" title="Prefix Tree选编"></a>Prefix Tree选编</h1><h2 id="原理-from-labuladong"><a href="#原理-from-labuladong" class="headerlink" title="原理 (from labuladong)"></a>原理 (from labuladong)</h2><p><a href="https://mp.weixin.qq.com/s/hGrTUmM1zusPZZ0nA9aaNw">https://mp.weixin.qq.com/s/hGrTUmM1zusPZZ0nA9aaNw</a></p>
<p>Trie 树又叫字典树、前缀树、单词查找树，是一种二叉树衍生出来的高级数据结构，主要应用场景是处理字符串前缀相关的操作。</p>
<p><strong>Trie 树用「树枝」存储字符串（键），用「节点」存储字符串（键）对应的数据（值）</strong></p>
<p>关于 <code>Map</code> 和 <code>Set</code>，是两个抽象数据结构（接口），<code>Map</code> 存储一个键值对集合，其中键不重复，<code>Set</code> 存储一个不重复的元素集合。</p>
<p>常见的 <code>Map</code> 和 <code>Set</code> 的底层实现原理有哈希表和二叉搜索树两种，比如 Java 的 HashMap&#x2F;HashSet 和 C++ 的 unorderd_map&#x2F;unordered_set 底层就是用哈希表实现，而 Java 的 TreeMap&#x2F;TreeSet 和 C++ 的 map&#x2F;set 底层使用红黑树这种自平衡 BST 实现的。</p>
<ul>
<li><p>HashMap: 迭代顺序和插入顺序无关，迭代顺序不可预知</p>
</li>
<li><p>LinkedHashMap: 迭代顺序和插入顺序相同，迭代顺序可预知</p>
</li>
<li><p>TreeMap: 基于红黑树，映射基于key的自然顺序进行排序，或根据创建映射时提供的Comparator</p>
</li>
</ul>
<p>而本文实现的 TrieSet&#x2F;TrieMap 底层则用 Trie 树这种结构来实现。</p>
<p>了解数据结构的读者应该知道，本质上 <code>Set</code> 可以视为一种特殊的 <code>Map</code>，<code>Set</code> 其实就是 <code>Map</code> 中的键。</p>
<p><code>HashMap&lt;K, V&gt;</code> 的优势是能够在 O(1) 时间通过键查找对应的值，但要求键的类型 <code>K</code> 必须是「可哈希」的；而 <code>TreeMap&lt;K, V&gt;</code> 的特点是方便根据键的大小进行操作，但要求键的类型 <code>K</code> 必须是「可比较」的。</p>
<p>本文要实现的 <code>TrieMap</code> 也是类似的，由于 Trie 树原理，我们要求 <code>TrieMap&lt;V&gt;</code> 的键必须是字符串类型，值的类型 <code>V</code> 可以随意。</p>
<p>而 <code>TrieMap</code> 中的树节点 <code>TrieNode</code> 的代码实现是这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Trie 树节点实现 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrieNode</span>&lt;V&gt; &#123;</span><br><span class="line">    <span class="type">V</span> <span class="variable">val</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    TrieNode&lt;V&gt;[] children = <span class="keyword">new</span> <span class="title class_">TrieNode</span>[<span class="number">256</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个 <code>val</code> 字段存储键对应的值，<code>children</code> 数组存储指向子节点的指针。</p>
<p><strong>但是和之前的普通多叉树节点不同，<code>TrieNode</code> 中 <code>children</code> 数组的索引是有意义的，代表键中的一个字符</strong>。</p>
<p>比如说 <code>children[97]</code> 如果非空，说明这里存储了一个字符 <code>&#39;a&#39;</code>，因为 <code>&#39;a&#39;</code> 的 ASCII 码为 97。</p>
<p>我们的模板只考虑处理 ASCII 字符，所以 <code>children</code> 数组的大小设置为 256。不过这个可以根据具体问题修改，比如改成更小的数组或者 <code>HashMap&lt;Character, TrieNode&gt;</code> 都是一样的效果。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 底层用 Trie 树实现的键值映射</span></span><br><span class="line"><span class="comment">// 键为 String 类型，值为类型 Vclass TrieMap&lt;V&gt; &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/***** 增/改 *****/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 Map 中添加 key</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">put</span><span class="params">(String key, V val)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***** 删 *****/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除键 key 以及对应的值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">remove</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***** 查 *****/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 搜索 key 对应的值，不存在则返回 null</span></span><br><span class="line">    <span class="comment">// get(&quot;the&quot;) -&gt; 4</span></span><br><span class="line">    <span class="comment">// get(&quot;tha&quot;) -&gt; null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断 key 是否存在在 Map 中</span></span><br><span class="line">    <span class="comment">// containsKey(&quot;tea&quot;) -&gt; false</span></span><br><span class="line">    <span class="comment">// containsKey(&quot;team&quot;) -&gt; true</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">containsKey</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 Map 的所有键中搜索 query 的最短前缀</span></span><br><span class="line">    <span class="comment">// shortestPrefixOf(&quot;themxyz&quot;) -&gt; &quot;the&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">shortestPrefixOf</span><span class="params">(String query)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 Map 的所有键中搜索 query 的最长前缀</span></span><br><span class="line">    <span class="comment">// longestPrefixOf(&quot;themxyz&quot;) -&gt; &quot;them&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPrefixOf</span><span class="params">(String query)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 搜索所有前缀为 prefix 的键</span></span><br><span class="line">    <span class="comment">// keysWithPrefix(&quot;th&quot;) -&gt; [&quot;that&quot;, &quot;the&quot;, &quot;them&quot;]</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">keysWithPrefix</span><span class="params">(String prefix)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是和否存在前缀为 prefix 的键</span></span><br><span class="line">    <span class="comment">// hasKeyWithPrefix(&quot;tha&quot;) -&gt; true</span></span><br><span class="line">    <span class="comment">// hasKeyWithPrefix(&quot;apple&quot;) -&gt; false</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">hasKeyWithPrefix</span><span class="params">(String prefix)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通配符 . 匹配任意字符，搜索所有匹配的键</span></span><br><span class="line">    <span class="comment">// keysWithPattern(&quot;t.a.&quot;) -&gt; [&quot;team&quot;, &quot;that&quot;]</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">keysWithPattern</span><span class="params">(String pattern)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通配符 . 匹配任意字符，判断是否存在匹配的键</span></span><br><span class="line">    <span class="comment">// hasKeyWithPattern(&quot;.ip&quot;) -&gt; true</span></span><br><span class="line">    <span class="comment">// hasKeyWithPattern(&quot;.i&quot;) -&gt; false</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">hasKeyWithPattern</span><span class="params">(String pattern)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回 Map 中键值对的数量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TrieMap</span>&lt;V&gt; &#123;</span><br><span class="line">    <span class="comment">// ASCII 码个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">static</span> <span class="keyword">final</span> <span class="type">int</span> R = <span class="number">256</span>;</span><br><span class="line">    <span class="comment">// 当前存在 Map 中的键值对个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// Trie 树的根节点</span></span><br><span class="line">    <span class="keyword">private</span> TrieNode&lt;V&gt; root = null;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">static</span> <span class="keyword">class</span> <span class="title class_">TrieNode</span>&lt;V&gt; &#123;</span><br><span class="line">        V val = null;</span><br><span class="line">        TrieNode&lt;V&gt;[] children = <span class="keyword">new</span> TrieNode[R];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***** 增/改 *****/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 map 中添加或修改键值对</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">put</span><span class="params">(String key, V val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">containsKey</span>(key)) &#123;</span><br><span class="line">            <span class="comment">// 新增键值对</span></span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 需要一个额外的辅助函数，并接收其返回值</span></span><br><span class="line">        root = <span class="built_in">put</span>(root, key, val, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义：向以 node 为根的 Trie 树中插入 key[i..]，返回插入完成后的根节点</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TrieNode&lt;V&gt; <span class="title">put</span><span class="params">(TrieNode&lt;V&gt; node, String key, V val, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == null) &#123;</span><br><span class="line">            <span class="comment">// 如果树枝不存在，新建</span></span><br><span class="line">            node = <span class="keyword">new</span> TrieNode&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == key.<span class="built_in">length</span>()) &#123;</span><br><span class="line">            <span class="comment">// key 的路径已插入完成，将值 val 存入节点</span></span><br><span class="line">            node.val = val;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span> c = key.<span class="built_in">charAt</span>(i);</span><br><span class="line">        <span class="comment">// 递归插入子节点，并接收返回值</span></span><br><span class="line">        node.children[c] = <span class="built_in">put</span>(node.children[c], key, val, i + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***** 删 *****/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 Map 中删除 key</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">remove</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">containsKey</span>(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 递归修改数据结构要接收函数的返回值</span></span><br><span class="line">        root = <span class="built_in">remove</span>(root, key, <span class="number">0</span>);</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义：在以 node 为根的 Trie 树中删除 key[i..]，返回删除后的根节点</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TrieNode&lt;V&gt; <span class="title">remove</span><span class="params">(TrieNode&lt;V&gt; node, String key, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == null) &#123;</span><br><span class="line">            <span class="keyword">return</span> null;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == key.<span class="built_in">length</span>()) &#123;</span><br><span class="line">            <span class="comment">// 找到了 key 对应的 TrieNode，删除 val</span></span><br><span class="line">            node.val = null;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">char</span> c = key.<span class="built_in">charAt</span>(i);</span><br><span class="line">            <span class="comment">// 递归去子树进行删除</span></span><br><span class="line">            node.children[c] = <span class="built_in">remove</span>(node.children[c], key, i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 后序位置，递归路径上的节点可能需要被清理</span></span><br><span class="line">        <span class="keyword">if</span> (node.val != null) &#123;</span><br><span class="line">            <span class="comment">// 如果该 TireNode 存储着 val，不需要被清理</span></span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 检查该 TrieNode 是否还有后缀</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>; c &lt; R; c++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.children[c] != null) &#123;</span><br><span class="line">                <span class="comment">// 只要存在一个子节点（后缀树枝），就不需要被清理</span></span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 既没有存储 val，也没有后缀树枝，则该节点需要被清理</span></span><br><span class="line">        <span class="keyword">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***** 查 *****/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 搜索 key 对应的值，不存在则返回 null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 从 root 开始搜索 key</span></span><br><span class="line">        TrieNode&lt;V&gt; x = <span class="built_in">getNode</span>(root, key);</span><br><span class="line">        <span class="keyword">if</span> (x == null || x.val == null) &#123;</span><br><span class="line">            <span class="comment">// x 为空或 x 的 val 字段为空都说明 key 没有对应的值</span></span><br><span class="line">            <span class="keyword">return</span> null;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断 key 是否存在在 Map 中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">containsKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">get</span>(key) != null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是和否存在前缀为 prefix 的键</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">hasKeyWithPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 只要能找到一个节点，就是存在前缀</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getNode</span>(root, prefix) != null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在所有键中寻找 query 的最短前缀</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">shortestPrefixOf</span><span class="params">(String query)</span> </span>&#123;</span><br><span class="line">        TrieNode&lt;V&gt; p = root;</span><br><span class="line">        <span class="comment">// 从节点 node 开始搜索 key</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; query.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p == null) &#123;</span><br><span class="line">                <span class="comment">// 无法向下搜索</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p.val != null) &#123;</span><br><span class="line">                <span class="comment">// 找到一个键是 query 的前缀</span></span><br><span class="line">                <span class="keyword">return</span> query.<span class="built_in">substring</span>(<span class="number">0</span>, i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 向下搜索</span></span><br><span class="line">            <span class="type">char</span> c = query.<span class="built_in">charAt</span>(i);</span><br><span class="line">            p = p.children[c];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (p != null &amp;&amp; p.val != null) &#123;</span><br><span class="line">            <span class="comment">// 如果 query 本身就是一个键</span></span><br><span class="line">            <span class="keyword">return</span> query;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在所有键中寻找 query 的最长前缀</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPrefixOf</span><span class="params">(String query)</span> </span>&#123;</span><br><span class="line">        TrieNode&lt;V&gt; p = root;</span><br><span class="line">        <span class="comment">// 记录前缀的最大长度</span></span><br><span class="line">        <span class="type">int</span> max_len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从节点 node 开始搜索 key</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; query.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p == null) &#123;</span><br><span class="line">                <span class="comment">// 无法向下搜索</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p.val != null) &#123;</span><br><span class="line">                <span class="comment">// 找到一个键是 query 的前缀，更新前缀的最大长度</span></span><br><span class="line">                max_len = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 向下搜索</span></span><br><span class="line">            <span class="type">char</span> c = query.<span class="built_in">charAt</span>(i);</span><br><span class="line">            p = p.children[c];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (p != null &amp;&amp; p.val != null) &#123;</span><br><span class="line">            <span class="comment">// 如果 query 本身就是一个键</span></span><br><span class="line">            <span class="keyword">return</span> query;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> query.<span class="built_in">substring</span>(<span class="number">0</span>, max_len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 搜索前缀为 prefix 的所有键</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">keysWithPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 找到匹配 prefix 在 Trie 树中的那个节点</span></span><br><span class="line">        TrieNode&lt;V&gt; x = <span class="built_in">getNode</span>(root, prefix);</span><br><span class="line">        <span class="keyword">if</span> (x == null) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// DFS 遍历以 x 为根的这棵 Trie 树</span></span><br><span class="line">        <span class="built_in">traverse</span>(x, <span class="keyword">new</span> <span class="built_in">StringBuilder</span>(prefix), res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历以 node 节点为根的 Trie 树，找到所有键</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="type">void</span> <span class="title">traverse</span><span class="params">(TrieNode&lt;V&gt; node, StringBuilder path, List&lt;String&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == null) &#123;</span><br><span class="line">            <span class="comment">// 到达 Trie 树底部叶子结点</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.val != null) &#123;</span><br><span class="line">            <span class="comment">// 找到一个 key，添加到结果列表中</span></span><br><span class="line">            res.<span class="built_in">add</span>(path.<span class="built_in">toString</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 回溯算法遍历框架</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c = <span class="number">0</span>; c &lt; R; c++) &#123;</span><br><span class="line">            <span class="comment">// 做选择</span></span><br><span class="line">            path.<span class="built_in">append</span>(c);</span><br><span class="line">            <span class="built_in">traverse</span>(node.children[c], path, res);</span><br><span class="line">            <span class="comment">// 撤销选择</span></span><br><span class="line">            path.<span class="built_in">deleteCharAt</span>(path.<span class="built_in">length</span>() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通配符 . 匹配任意字符</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">keysWithPattern</span><span class="params">(String pattern)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="built_in">traverse</span>(root, <span class="keyword">new</span> <span class="built_in">StringBuilder</span>(), pattern, <span class="number">0</span>, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历函数，尝试在「以 node 为根的 Trie 树中」匹配 pattern[i..]</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="type">void</span> <span class="title">traverse</span><span class="params">(TrieNode&lt;V&gt; node, StringBuilder path, String pattern, <span class="type">int</span> i, List&lt;String&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == null) &#123;</span><br><span class="line">            <span class="comment">// 树枝不存在，即匹配失败</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == pattern.<span class="built_in">length</span>()) &#123;</span><br><span class="line">            <span class="comment">// pattern 匹配完成</span></span><br><span class="line">            <span class="keyword">if</span> (node.val != null) &#123;</span><br><span class="line">                <span class="comment">// 如果这个节点存储着 val，则找到一个匹配的键</span></span><br><span class="line">                res.<span class="built_in">add</span>(path.<span class="built_in">toString</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span> c = pattern.<span class="built_in">charAt</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// pattern[i] 是通配符，可以变化成任意字符</span></span><br><span class="line">            <span class="comment">// 多叉树（回溯算法）遍历框架</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> j = <span class="number">0</span>; j &lt; R; j++) &#123;</span><br><span class="line">                path.<span class="built_in">append</span>(j);</span><br><span class="line">                <span class="built_in">traverse</span>(node.children[j], path, pattern, i + <span class="number">1</span>, res);</span><br><span class="line">                path.<span class="built_in">deleteCharAt</span>(path.<span class="built_in">length</span>() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// pattern[i] 是普通字符 c</span></span><br><span class="line">            path.<span class="built_in">append</span>(c);</span><br><span class="line">            <span class="built_in">traverse</span>(node.children[c], path, pattern, i + <span class="number">1</span>, res);</span><br><span class="line">            path.<span class="built_in">deleteCharAt</span>(path.<span class="built_in">length</span>() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是和否存在前缀为 prefix 的键</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">hasKeyWithPattern</span><span class="params">(String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 从 root 节点开始匹配 pattern[0..]</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hasKeyWithPattern</span>(root, pattern, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数定义：从 node 节点开始匹配 pattern[i..]，返回是否成功匹配</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> boolean <span class="title">hasKeyWithPattern</span><span class="params">(TrieNode&lt;V&gt; node, String pattern, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == null) &#123;</span><br><span class="line">            <span class="comment">// 树枝不存在，即匹配失败</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == pattern.<span class="built_in">length</span>()) &#123;</span><br><span class="line">            <span class="comment">// 模式串走到头了，看看匹配到的是否是一个键</span></span><br><span class="line">            <span class="keyword">return</span> node.val != null;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span> c = pattern.<span class="built_in">charAt</span>(i);</span><br><span class="line">        <span class="comment">// 没有遇到通配符</span></span><br><span class="line">        <span class="keyword">if</span> (c != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 从 node.children[c] 节点开始匹配 pattern[i+1..]</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">hasKeyWithPattern</span>(node.children[c], pattern, i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遇到通配符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; R; j++) &#123;</span><br><span class="line">            <span class="comment">// pattern[i] 可以变化成任意字符，尝试所有可能，只要遇到一个匹配成功就返回</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">hasKeyWithPattern</span>(node.children[j], pattern, i + <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 都没有匹配</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从节点 node 开始搜索 key，如果存在返回对应节点，否则返回 null</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TrieNode&lt;V&gt; <span class="title">getNode</span><span class="params">(TrieNode&lt;V&gt; node, String key)</span> </span>&#123;</span><br><span class="line">        TrieNode&lt;V&gt; p = node;</span><br><span class="line">        <span class="comment">// 从节点 node 开始搜索 key</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; key.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p == null) &#123;</span><br><span class="line">                <span class="comment">// 无法向下搜索</span></span><br><span class="line">                <span class="keyword">return</span> null;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 向下搜索</span></span><br><span class="line">            <span class="type">char</span> c = key.<span class="built_in">charAt</span>(i);</span><br><span class="line">            p = p.children[c];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="208-Implement-Trie-Prefix-Tree"><a href="#208-Implement-Trie-Prefix-Tree" class="headerlink" title="208. Implement Trie (Prefix Tree)"></a><a href="https://leetcode.cn/problems/implement-trie-prefix-tree/">208. Implement Trie (Prefix Tree)</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode208</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line"></span><br><span class="line">        TrieNode root;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">            root=<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">            root=put(root,word,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> TrieNode <span class="title function_">put</span><span class="params">(TrieNode node, String word, <span class="type">int</span> i)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">                node=<span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i==word.length())&#123;</span><br><span class="line">                node.val=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">char</span> c=word.charAt(i);</span><br><span class="line">            node.children[c-<span class="string">&#x27;a&#x27;</span>]=put(node.children[c-<span class="string">&#x27;a&#x27;</span>],word,i+<span class="number">1</span> );</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">            TrieNode x=getNode(root,word);</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="literal">null</span> || x.val==-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getNode(root,prefix)!=<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> TrieNode <span class="title function_">getNode</span><span class="params">(TrieNode root, String word)</span>&#123;</span><br><span class="line">            TrieNode p=root;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(p==<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">char</span> c=word.charAt(i);</span><br><span class="line">                p=p.children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">TrieNode</span>&#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        TrieNode[] children;</span><br><span class="line"></span><br><span class="line">        TrieNode()&#123;</span><br><span class="line">            val=-<span class="number">1</span>;</span><br><span class="line">            children=<span class="keyword">new</span> <span class="title class_">TrieNode</span>[<span class="number">26</span>];  <span class="comment">//&#x27;a&#x27;-&#x27;z&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="1804-Implement-Trie-II-Prefix-Tree"><a href="#1804-Implement-Trie-II-Prefix-Tree" class="headerlink" title="1804. Implement Trie II (Prefix Tree)"></a><a href="https://leetcode.cn/problems/implement-trie-ii-prefix-tree/">1804. Implement Trie II (Prefix Tree)</a></h2><p>优化labuladong:</p>
<ol>
<li>初始root&#x3D;new TrieNode()    ，其值无意义</li>
<li>put该递归为循环，与get相统一</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode1804</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line"></span><br><span class="line">        TrieNode root;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">            root=<span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">            TrieNode p=root;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">                <span class="type">char</span> c=word.charAt(i);</span><br><span class="line">                <span class="keyword">if</span>(p.children[c-<span class="string">&#x27;a&#x27;</span>]==<span class="literal">null</span>)&#123;</span><br><span class="line">                    p.children[c-<span class="string">&#x27;a&#x27;</span>]=<span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                p=p.children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">                p.preCount++;</span><br><span class="line">            &#125;</span><br><span class="line">            p.wordCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> TrieNode <span class="title function_">getNode</span><span class="params">(TrieNode node, String word)</span>&#123;</span><br><span class="line">            TrieNode p=root;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(p==<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">char</span> c=word.charAt(i);</span><br><span class="line">                p=p.children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countWordsEqualTo</span><span class="params">(String word)</span> &#123;</span><br><span class="line">            TrieNode p=getNode(root,word);</span><br><span class="line">            <span class="keyword">return</span> p==<span class="literal">null</span> ? <span class="number">0</span> : p.wordCount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countWordsStartingWith</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">            TrieNode p=getNode(root,prefix);</span><br><span class="line">            <span class="keyword">return</span> p==<span class="literal">null</span> ? <span class="number">0</span> : p.preCount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">erase</span><span class="params">(String word)</span> &#123;</span><br><span class="line">            TrieNode p=root;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">                <span class="type">char</span> c=word.charAt(i);</span><br><span class="line">                p=p.children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">                p.preCount--;</span><br><span class="line">            &#125;</span><br><span class="line">            p.wordCount--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">TrieNode</span> &#123;</span><br><span class="line">        <span class="type">int</span> wordCount;</span><br><span class="line">        <span class="type">int</span> preCount;</span><br><span class="line">        TrieNode[] children;</span><br><span class="line"></span><br><span class="line">        TrieNode()&#123;</span><br><span class="line">            wordCount=<span class="number">0</span>;</span><br><span class="line">            preCount=<span class="number">0</span>;</span><br><span class="line">            children=<span class="keyword">new</span> <span class="title class_">TrieNode</span>[<span class="number">26</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="648-Replace-Words"><a href="#648-Replace-Words" class="headerlink" title="648. Replace Words"></a><a href="https://leetcode.cn/problems/replace-words/">648. Replace Words</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode648</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">replaceWords</span><span class="params">(List&lt;String&gt; dictionary, String sentence)</span> &#123;</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        Trie trie=<span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">        <span class="keyword">for</span> (String s : dictionary) &#123;</span><br><span class="line">            trie.insert(s);</span><br><span class="line">        &#125;</span><br><span class="line">        String[] strings = sentence.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line">            <span class="type">boolean</span> found=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; string.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(trie.containsWord(string.substring(<span class="number">0</span>,i+<span class="number">1</span>)))&#123;</span><br><span class="line">                    sb.append(string.substring(<span class="number">0</span>,i+<span class="number">1</span>));</span><br><span class="line">                    found=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!found)&#123;</span><br><span class="line">                sb.append(string);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Trie</span>&#123;</span><br><span class="line"></span><br><span class="line">        Node root;</span><br><span class="line"></span><br><span class="line">        Trie()&#123;</span><br><span class="line">            root=<span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span>&#123;</span><br><span class="line">            Node p=root;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">                <span class="type">char</span> c=word.charAt(i);</span><br><span class="line">                <span class="keyword">if</span>(p.children[c-<span class="string">&#x27;a&#x27;</span>]==<span class="literal">null</span>)&#123;</span><br><span class="line">                    p.children[c-<span class="string">&#x27;a&#x27;</span>]=<span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                p=p.children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            p.word++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">containsWord</span><span class="params">(String word)</span>&#123;</span><br><span class="line">            Node p=getNode(root,word);</span><br><span class="line">            <span class="keyword">if</span>(p==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> p.word==<span class="number">1</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Node <span class="title function_">getNode</span><span class="params">(Node node, String word)</span>&#123;</span><br><span class="line">            Node p=root;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(p==<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">char</span> c=word.charAt(i);</span><br><span class="line">                p=p.children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">        <span class="type">int</span> word;</span><br><span class="line">        Node[] children;</span><br><span class="line"></span><br><span class="line">        Node()&#123;</span><br><span class="line">            word=<span class="number">0</span>;</span><br><span class="line">            children=<span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">26</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="211-Design-Add-and-Search-Words-Data-Structure"><a href="#211-Design-Add-and-Search-Words-Data-Structure" class="headerlink" title="211. Design Add and Search Words Data Structure"></a><a href="https://leetcode.cn/problems/design-add-and-search-words-data-structure/">211. Design Add and Search Words Data Structure</a></h2><p>dfs</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WordDictionary</span> &#123;</span><br><span class="line"></span><br><span class="line">    Node root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WordDictionary</span><span class="params">()</span> &#123;</span><br><span class="line">        root=<span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addWord</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        Node p=root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> c=word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(p.children[c-<span class="string">&#x27;a&#x27;</span>]==<span class="literal">null</span>)&#123;</span><br><span class="line">                p.children[c-<span class="string">&#x27;a&#x27;</span>]=<span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            p=p.children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        p.word=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dfs(root,word,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(Node node, String word, <span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index==word.length())&#123;</span><br><span class="line">            <span class="keyword">return</span> node.word==<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span> c=word.charAt(index);</span><br><span class="line">        <span class="keyword">if</span>(c!=<span class="string">&#x27;.&#x27;</span>)&#123;<span class="comment">//是字母就继续找</span></span><br><span class="line">            Node next=node.children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span>(next!=<span class="literal">null</span> &amp;&amp; dfs(next,word,index+<span class="number">1</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//是通配符就逐一试，通一个就行</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(node.children[i]!=<span class="literal">null</span> &amp;&amp; dfs(node.children[i],word,index+<span class="number">1</span> ))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;	<span class="comment">//全都走不通则false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> word;</span><br><span class="line">    Node[] children;</span><br><span class="line"></span><br><span class="line">    Node() &#123;</span><br><span class="line">        word=<span class="number">0</span>;</span><br><span class="line">        children=<span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">26</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="677-Map-Sum-Pairs"><a href="#677-Map-Sum-Pairs" class="headerlink" title="677. Map Sum Pairs"></a><a href="https://leetcode.cn/problems/map-sum-pairs/">677. Map Sum Pairs</a></h2><p>注意：sum的prefix可能不存在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MapSum</span> &#123;</span><br><span class="line"></span><br><span class="line">    Node root;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MapSum</span><span class="params">()</span> &#123;</span><br><span class="line">        root=<span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String key, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        Node p=root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; key.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> c=key.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(p.children[c-<span class="string">&#x27;a&#x27;</span>]==<span class="literal">null</span>)&#123;</span><br><span class="line">                p.children[c-<span class="string">&#x27;a&#x27;</span>]=<span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            p=p.children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        p.val=val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        Node p=root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; prefix.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> c=prefix.charAt(i);</span><br><span class="line">            p=p.children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span>(p==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dfs(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum=node.val;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            sum+=dfs(node.children[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    Node[] children;</span><br><span class="line"></span><br><span class="line">    Node()&#123;</span><br><span class="line">        val=<span class="number">0</span>;</span><br><span class="line">        children=<span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">26</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="212-Word-Search-II"><a href="#212-Word-Search-II" class="headerlink" title="212. Word Search II"></a>212. Word Search II</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">TrieNode root=<span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line"><span class="type">int</span> row;</span><br><span class="line"><span class="type">int</span> col;</span><br><span class="line"><span class="type">char</span>[][] board;</span><br><span class="line">String[] words;</span><br><span class="line"><span class="type">int</span>[] dx=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] dy=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">findWords</span><span class="params">(<span class="type">char</span>[][] board, String[] words)</span> &#123;</span><br><span class="line">    row= board.length;</span><br><span class="line">    col=board[<span class="number">0</span>].length;</span><br><span class="line">    <span class="built_in">this</span>.board=board;</span><br><span class="line">    <span class="built_in">this</span>.words=words;</span><br><span class="line">    <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">        TrieNode node=root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> c=word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(!node.children.containsKey(c))&#123;</span><br><span class="line">                node.children.put(c,<span class="keyword">new</span> <span class="title class_">TrieNode</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            node=node.children.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">        node.word=word;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(root.children.containsKey(board[i][j]))&#123;</span><br><span class="line">                backtracking(root,i,j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(TrieNode parent, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">    <span class="type">char</span> c=board[i][j];</span><br><span class="line">    TrieNode node=parent.children.get(c);</span><br><span class="line">    <span class="keyword">if</span>(node.word!=<span class="literal">null</span>)&#123;</span><br><span class="line">        res.add(node.word);</span><br><span class="line">        node.word=<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    board[i][j]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">        <span class="type">int</span> x=i+dx[k];</span><br><span class="line">        <span class="type">int</span> y=j+dy[k];</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span> || x&gt;=row || y&lt;<span class="number">0</span> || y&gt;=col || !node.children.containsKey(board[x][y]))&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        backtracking(node,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    board[i][j]=c;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//important!</span></span><br><span class="line">    <span class="comment">//Optimization: incrementally remove the leaf nodes</span></span><br><span class="line">    <span class="keyword">if</span>(node.children.isEmpty())&#123;</span><br><span class="line">        parent.children.remove(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrieNode</span>&#123;</span><br><span class="line">    Map&lt;Character,TrieNode&gt; children;</span><br><span class="line">    String word;</span><br><span class="line">    TrieNode()&#123;</span><br><span class="line">        children=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>lines</title>
    <url>/2022/11/06/lines/</url>
    <content><![CDATA[<h1 id="lines选编"><a href="#lines选编" class="headerlink" title="lines选编"></a>lines选编</h1><h2 id="149-Max-Points-on-a-Line"><a href="#149-Max-Points-on-a-Line" class="headerlink" title="149. Max Points on a Line"></a>149. Max Points on a Line</h2><p> return <em>the maximum number of points that lie on the same straight line</em>.</p>
<h3 id="Approach-1-Enumeration"><a href="#Approach-1-Enumeration" class="headerlink" title="Approach 1: Enumeration"></a>Approach 1: Enumeration</h3><p>Therefore, it is not wise to use the float&#x2F;double value to represent a unique slope, since they are not accurate.</p>
<blockquote>
<p>To circumvent the above issue, one could use a pair of <a href="https://en.wikipedia.org/wiki/Coprime_integers">co-prime integers</a> to represent unique slope.</p>
</blockquote>
<p>As a reminder, two integers are co-primes, if and only if their greatest common divisor is 1.</p>
<p>注意： 有现成的Pair可以用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2010, 2015, Oracle and/or its affiliates. All rights reserved.</span></span><br><span class="line"><span class="comment"> * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> javafx.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> javafx.beans.NamedArg;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * &lt;p&gt;A convenience class to represent name-value pairs.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@since</span> JavaFX 2.0</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pair</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Key of this &lt;code&gt;Pair&lt;/code&gt;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> K key;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets the key for this pair.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> key for this pair</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> K <span class="title function_">getKey</span><span class="params">()</span> &#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Value of this this &lt;code&gt;Pair&lt;/code&gt;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> V value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets the value for this pair.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> value for this pair</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">getValue</span><span class="params">()</span> &#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new pair</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key The key for this pair</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value The value to use for this pair</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pair</span><span class="params">(<span class="meta">@NamedArg(&quot;key&quot;)</span> K key, <span class="meta">@NamedArg(&quot;value&quot;)</span> V value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;&lt;code&gt;String&lt;/code&gt; representation of this</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;Pair&lt;/code&gt;.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The default name/value delimiter &#x27;=&#x27; is always used.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@return</span> &lt;code&gt;String&lt;/code&gt; representation of this &lt;code&gt;Pair&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Generate a hash code for this &lt;code&gt;Pair&lt;/code&gt;.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The hash code is calculated using both the name and</span></span><br><span class="line"><span class="comment">     * the value of the &lt;code&gt;Pair&lt;/code&gt;.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> hash code for this &lt;code&gt;Pair&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line">        hash = <span class="number">31</span> * hash + (key != <span class="literal">null</span> ? key.hashCode() : <span class="number">0</span>);</span><br><span class="line">        hash = <span class="number">31</span> * hash + (value != <span class="literal">null</span> ? value.hashCode() : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> hash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * &lt;p&gt;Test this &lt;code&gt;Pair&lt;/code&gt; for equality with another</span></span><br><span class="line"><span class="comment">      * &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      * &lt;p&gt;If the &lt;code&gt;Object&lt;/code&gt; to be tested is not a</span></span><br><span class="line"><span class="comment">      * &lt;code&gt;Pair&lt;/code&gt; or is &lt;code&gt;null&lt;/code&gt;, then this method</span></span><br><span class="line"><span class="comment">      * returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      * &lt;p&gt;Two &lt;code&gt;Pair&lt;/code&gt;s are considered equal if and only if</span></span><br><span class="line"><span class="comment">      * both the names and values are equal.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> o the &lt;code&gt;Object&lt;/code&gt; to test for</span></span><br><span class="line"><span class="comment">      * equality with this &lt;code&gt;Pair&lt;/code&gt;</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span> &lt;code&gt;true&lt;/code&gt; if the given &lt;code&gt;Object&lt;/code&gt; is</span></span><br><span class="line"><span class="comment">      * equal to this &lt;code&gt;Pair&lt;/code&gt; else &lt;code&gt;false&lt;/code&gt;</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">         <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Pair) &#123;</span><br><span class="line">             <span class="type">Pair</span> <span class="variable">pair</span> <span class="operator">=</span> (Pair) o;</span><br><span class="line">             <span class="keyword">if</span> (key != <span class="literal">null</span> ? !key.equals(pair.key) : pair.key != <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">             <span class="keyword">if</span> (value != <span class="literal">null</span> ? !value.equals(pair.value) : pair.value != <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>注意：</p>
<ul>
<li><p>分别考察穿过每一点的直线的最大点数</p>
</li>
<li><p>无需考虑某一点之前的点</p>
<p>例如, 若考察点1时，若点1, 点2同线，且点1,点0同线，则点0，点2必同线，已在之前考察过</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javafx.util.Pair;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode149</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Map&lt;Pair&lt;Integer,Integer&gt;, Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> horizontals=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    Pair&lt;Integer,Integer&gt; <span class="title function_">getLine</span><span class="params">(<span class="type">int</span> dx, <span class="type">int</span> dy)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(dy==<span class="number">0</span>)&#123;</span><br><span class="line">            Pair&lt;Integer,Integer&gt; line=<span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;(Integer.MAX_VALUE,Integer.MAX_VALUE);</span><br><span class="line">            <span class="keyword">return</span> line;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dx&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            dx=-dx;</span><br><span class="line">            dy=-dy;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> gcd=BigInteger.valueOf(dx).gcd(BigInteger.valueOf(dy)).intValue();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;(dx/gcd,dy/gcd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxPoints</span><span class="params">(<span class="type">int</span>[][] points)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n=points.length;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            horizontals=<span class="number">1</span>;</span><br><span class="line">            map.clear();</span><br><span class="line">            <span class="comment">//[0,1], [0,2], [0,3]</span></span><br><span class="line">            <span class="comment">//[1,2], [1,3]</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="type">int</span> dx=points[i][<span class="number">0</span>]-points[j][<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> dy=points[i][<span class="number">1</span>]-points[j][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(dx==<span class="number">0</span>)&#123;</span><br><span class="line">                    horizontals++;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Pair&lt;Integer,Integer&gt; line=getLine(dx,dy);</span><br><span class="line">                map.put(line,map.getOrDefault(line,<span class="number">1</span>)+<span class="number">1</span>);</span><br><span class="line">                res=Math.max(res,map.get(line));</span><br><span class="line">            &#125;</span><br><span class="line">            res=Math.max(res,horizontals);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] points;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    HashMap&lt;Pair&lt;Integer, Integer&gt;, Integer&gt; lines = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Pair&lt;Integer, Integer&gt;, Integer&gt;();</span><br><span class="line">    <span class="type">int</span> horizontal_lines;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * To avoid the precision issue with float/double numbers, using a pair of co-prime numbers to</span></span><br><span class="line"><span class="comment">     * represent the slope.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Pair&lt;Integer, Integer&gt; <span class="title function_">slope_coprime</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">deltaX</span> <span class="operator">=</span> x1 - x2, deltaY = y1 - y2;</span><br><span class="line">        <span class="keyword">if</span> (deltaX == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (deltaY == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;(Integer.MAX_VALUE, Integer.MAX_VALUE);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (deltaX &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            deltaX = -deltaX;</span><br><span class="line">            deltaY = -deltaY;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">gcd</span> <span class="operator">=</span> BigInteger.valueOf(deltaX).gcd(BigInteger.valueOf(deltaY)).intValue();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pair</span>&lt;Integer, Integer&gt;(deltaX / gcd, deltaY / gcd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Pair&lt;Integer, Integer&gt; <span class="title function_">add_line</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> count, <span class="type">int</span> duplicates)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Add a line passing through i and j points. Update max number of points on a line</span></span><br><span class="line"><span class="comment">         * containing point i. Update a number of duplicates of i point.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// rewrite points as coordinates</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x1</span> <span class="operator">=</span> points[i][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">y1</span> <span class="operator">=</span> points[i][<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">x2</span> <span class="operator">=</span> points[j][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">y2</span> <span class="operator">=</span> points[j][<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// add a duplicate point</span></span><br><span class="line">        <span class="keyword">if</span> ((x1 == x2) &amp;&amp; (y1 == y2))</span><br><span class="line">            duplicates++;</span><br><span class="line">        <span class="comment">// add a horisontal line : y = const</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (y1 == y2) &#123;</span><br><span class="line">            horizontal_lines += <span class="number">1</span>;</span><br><span class="line">            count = Math.max(horizontal_lines, count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// add a line : x = slope * y + c</span></span><br><span class="line">        <span class="comment">// only slope is needed for a hash-map</span></span><br><span class="line">        <span class="comment">// since we always start from the same point</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Pair&lt;Integer, Integer&gt; slope = <span class="built_in">this</span>.slope_coprime(x1, y1, x2, y2);</span><br><span class="line">            lines.put(slope, lines.getOrDefault(slope, <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">            count = Math.max(lines.get(slope), count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pair</span>(count, duplicates);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">max_points_on_a_line_containing_point_i</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Compute the max number of points for a line containing point i.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// init lines passing through point i</span></span><br><span class="line">        lines.clear();</span><br><span class="line">        horizontal_lines = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// One starts with just one point on a line : point i.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// There is no duplicates of a point i so far.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">duplicates</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Compute lines passing through point i (fixed)</span></span><br><span class="line">        <span class="comment">// and point j.</span></span><br><span class="line">        <span class="comment">// Update in a loop the number of points on a line</span></span><br><span class="line">        <span class="comment">// and the number of duplicates of point i.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            Pair&lt;Integer, Integer&gt; p = add_line(i, j, count, duplicates);</span><br><span class="line">            count = p.getKey();</span><br><span class="line">            duplicates = p.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count + duplicates;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxPoints</span><span class="params">(<span class="type">int</span>[][] points)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.points = points;</span><br><span class="line">        <span class="comment">// If the number of points is less than 3</span></span><br><span class="line">        <span class="comment">// they are all on the same line.</span></span><br><span class="line">        n = points.length;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">max_count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// Compute in a loop a max number of points</span></span><br><span class="line">        <span class="comment">// on a line containing point i.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">            max_count = Math.max(max_points_on_a_line_containing_point_i(i), max_count);</span><br><span class="line">        <span class="keyword">return</span> max_count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="356-Line-Reflection"><a href="#356-Line-Reflection" class="headerlink" title="356. Line Reflection"></a>356. Line Reflection</h2><p>思路：</p>
<ol>
<li>先存入每个点</li>
<li>再考察每个点的reflection是否存在</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isReflected</span><span class="params">(<span class="type">int</span>[][] points)</span> &#123;</span><br><span class="line">    Set&lt;String&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> min=Integer.MAX_VALUE;</span><br><span class="line">    <span class="type">int</span> max=Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] point : points) &#123;</span><br><span class="line">        min=Math.min(min,point[<span class="number">0</span>]);</span><br><span class="line">        max=Math.max(max,point[<span class="number">0</span>]);</span><br><span class="line">        set.add(point[<span class="number">0</span>]+<span class="string">&quot;,&quot;</span>+point[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] point : points) &#123;</span><br><span class="line">        <span class="type">int</span> rx=min+max-point[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(!set.contains(rx+<span class="string">&quot;,&quot;</span>+point[<span class="number">1</span>]))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2152-Minimum-Number-of-Lines-to-Cover-Points"><a href="#2152-Minimum-Number-of-Lines-to-Cover-Points" class="headerlink" title="2152. Minimum Number of Lines to Cover Points"></a>2152. Minimum Number of Lines to Cover Points</h2><h2 id="2280-Minimum-Lines-to-Represent-a-Line-Chart"><a href="#2280-Minimum-Lines-to-Represent-a-Line-Chart" class="headerlink" title="2280. Minimum Lines to Represent a Line Chart"></a>2280. Minimum Lines to Represent a Line Chart</h2>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>filecenter</title>
    <url>/2022/04/24/filecenter/</url>
    <content><![CDATA[<h1 id="1-杂记"><a href="#1-杂记" class="headerlink" title="1. 杂记"></a>1. 杂记</h1><p>SSP: self-service platform<br>IDR: 标识解析展现 ID Read<br>API: </p>
<p>FileCenter</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>handle是通信协议</p>
<p>公共：上传-&gt;重新命名uuid 路径固定<br>加密：无法通过url直接访问，没有密码只是乱码<br>自定义：admin可以改路径 年月日uuid.jpg<br>临时：每天12点清空</p>
<p>有时，上传时，先去临时，再去公告&#x2F;加密<br>选择文件后，已经去服务器了</p>
<p>&#x2F;&#x2F;<br>uploadFile<br>&#x2F;&#x2F;按钮：选择加密或不加密 传到不同的区域 默认<br>全部传到公共区域,不考虑上传到自定义页面</p>
<p>1.控制上传文件的类型 图片&#x2F;视频&#x2F;文档<br>2.调filecenter时 需要先申请令牌？</p>
<p>文件中心是一个服务 下属多个服务器</p>
<p>&#x2F;&#x2F;<br>iic-table 实现了watch searchParams</p>
<h1 id="2-filecenter"><a href="#2-filecenter" class="headerlink" title="2. filecenter"></a>2. filecenter</h1><h2 id="2-1-iic-file-api"><a href="#2-1-iic-file-api" class="headerlink" title="2.1 iic-file-api"></a>2.1 iic-file-api</h2><p>api中的功能，调用web来实现</p>
<h3 id="2-1-1-proxy"><a href="#2-1-1-proxy" class="headerlink" title="2.1.1 proxy"></a>2.1.1 proxy</h3><h4 id="2-1-1-1-LllFileV2"><a href="#2-1-1-1-LllFileV2" class="headerlink" title="2.1.1.1 LllFileV2"></a>2.1.1.1 LllFileV2</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LllFileV2</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">TYPE_COMMON</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">TYPE_SECRET</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">TYPE_TEMP</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> String fileId;</span><br><span class="line">   <span class="keyword">private</span> String userId;</span><br><span class="line">   <span class="keyword">private</span> Integer type;        <span class="comment">//COMMON,SECRET,TEMP</span></span><br><span class="line">   <span class="keyword">private</span> Date createTime;</span><br><span class="line">   <span class="keyword">private</span> String fileName;      <span class="comment">//文件名(包含后缀)</span></span><br><span class="line">   <span class="keyword">private</span> String savePath;      <span class="comment">//文件保存路径   (不包含文件名)</span></span><br><span class="line">   <span class="keyword">private</span> String fileSuffix;    <span class="comment">//文件后缀</span></span><br><span class="line">   <span class="keyword">private</span> String oldName;          <span class="comment">//文件原名</span></span><br><span class="line">   <span class="keyword">private</span> String url;             <span class="comment">//完整的URL访问地址(包含Https)</span></span><br><span class="line">   <span class="keyword">private</span> String secKey;       <span class="comment">//SM4密钥</span></span><br><span class="line">   <span class="keyword">private</span> String hash;         <span class="comment">//文件的Hash值</span></span><br><span class="line">   <span class="keyword">private</span> String appName;          <span class="comment">//系统账号名称,如：IIC</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">byte</span>[] cont;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> LllFileV2 <span class="title function_">create</span><span class="params">(JsonObject data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="type">LllFileV2</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LllFileV2</span>();</span><br><span class="line">      </span><br><span class="line">      <span class="type">String</span> <span class="variable">_fileId</span> <span class="operator">=</span> JsonUtil.getString(data, <span class="string">&quot;fileId&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">_userId</span> <span class="operator">=</span> JsonUtil.getString(data, <span class="string">&quot;userId&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">_type</span> <span class="operator">=</span> JsonUtil.getString(data, <span class="string">&quot;type&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">_createTime</span> <span class="operator">=</span> JsonUtil.getString(data, <span class="string">&quot;createTime&quot;</span>);</span><br><span class="line">      <span class="type">Date</span> <span class="variable">_time</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">if</span>(!ToolUtil.isNull(_createTime)) &#123;</span><br><span class="line">         _time = <span class="keyword">new</span> <span class="title class_">Date</span>(Long.valueOf(_createTime));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">String</span> <span class="variable">_fileName</span> <span class="operator">=</span> JsonUtil.getString(data, <span class="string">&quot;fileName&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">_savePath</span> <span class="operator">=</span> JsonUtil.getString(data, <span class="string">&quot;savePath&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">_fileSuffix</span> <span class="operator">=</span> JsonUtil.getString(data, <span class="string">&quot;fileSuffix&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">_oldName</span> <span class="operator">=</span> JsonUtil.getString(data, <span class="string">&quot;oldName&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">_url</span> <span class="operator">=</span> JsonUtil.getString(data, <span class="string">&quot;url&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">_secKey</span> <span class="operator">=</span> JsonUtil.getString(data, <span class="string">&quot;secKey&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">_hash</span> <span class="operator">=</span> JsonUtil.getString(data, <span class="string">&quot;hash&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">_appName</span> <span class="operator">=</span> JsonUtil.getString(data, <span class="string">&quot;appName&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">_cont64</span> <span class="operator">=</span> JsonUtil.getString(data, <span class="string">&quot;cont&quot;</span>);</span><br><span class="line">      <span class="type">byte</span>[] _cont = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">if</span>(!ToolUtil.isNull(_cont64)) &#123;</span><br><span class="line">         _cont = Base64Util.decode(_cont64);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      file.setFileId(_fileId);</span><br><span class="line">      file.setUserId(_userId);</span><br><span class="line">      file.setType(Integer.valueOf(_type));</span><br><span class="line">      file.setCreateTime(_time);</span><br><span class="line">      file.setFileName(_fileName);</span><br><span class="line">      file.setSavePath(_savePath);</span><br><span class="line">      file.setFileSuffix(_fileSuffix);</span><br><span class="line">      file.setOldName(_oldName);</span><br><span class="line">      file.setUrl(_url);</span><br><span class="line">      file.setSecKey(_secKey);</span><br><span class="line">      file.setHash(_hash);</span><br><span class="line">      file.setAppName(_appName);</span><br><span class="line">      file.setCont(_cont);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> file;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">fetchBase64Cont</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> Base64Util.encode(cont);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(Exception ex) &#123;&#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">fetchContToStr</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(cont, Charset.forName(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getFileId</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> fileId;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFileId</span><span class="params">(String fileId)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.fileId = fileId;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getUserId</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> userId;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserId</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.userId = userId;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> Integer <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> type;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setType</span><span class="params">(Integer type)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.type = type;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> Date <span class="title function_">getCreateTime</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> createTime;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCreateTime</span><span class="params">(Date createTime)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.createTime = createTime;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getFileName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> fileName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFileName</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.fileName = fileName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getSavePath</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> savePath;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSavePath</span><span class="params">(String savePath)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.savePath = savePath;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getFileSuffix</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> fileSuffix;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFileSuffix</span><span class="params">(String fileSuffix)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.fileSuffix = fileSuffix;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getOldName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> oldName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOldName</span><span class="params">(String oldName)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.oldName = oldName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getUrl</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> url;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUrl</span><span class="params">(String url)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.url = url;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getSecKey</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> secKey;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSecKey</span><span class="params">(String secKey)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.secKey = secKey;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getHash</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> hash;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHash</span><span class="params">(String hash)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.hash = hash;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getAppName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> appName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAppName</span><span class="params">(String appName)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.appName = appName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">byte</span>[] getCont() &#123;</span><br><span class="line">      <span class="keyword">return</span> cont;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCont</span><span class="params">(<span class="type">byte</span>[] cont)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.cont = cont;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="2-1-1-2-FileV2Proxy"><a href="#2-1-1-2-FileV2Proxy" class="headerlink" title="2.1.1.2 FileV2Proxy"></a>2.1.1.2 FileV2Proxy</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileV2Proxy</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>:申请文件中心token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 11:13 2022/4/13</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getToken</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">authId</span> <span class="operator">=</span> SpringUtil.getEvnProperty(<span class="string">&quot;file.authId&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> getInSideUrlRoot() + <span class="string">&quot;/api/v2/token?authId=&quot;</span> + authId;</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> HttpUtil2.sendGet(url);</span><br><span class="line">        <span class="type">JsonResult</span> <span class="variable">json</span> <span class="operator">=</span> JSON.parseObject(res, JsonResult.class);</span><br><span class="line">        <span class="keyword">if</span> ( !json.getSuccess() ) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>( String.format(<span class="string">&quot;token申请失败:%s&quot;</span>, res) );</span><br><span class="line">        <span class="keyword">return</span> String.valueOf( json.getData() );</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 读取普通文件</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> fileId</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] readFile(String fileId) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> getOutSideUrlRoot() + <span class="string">&quot;/api/v2/ext/&quot;</span> + fileId;</span><br><span class="line">      </span><br><span class="line">      <span class="type">byte</span>[] file = visitUrl(url);</span><br><span class="line">      <span class="keyword">return</span> file;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 读取加密文件 </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> fileId</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] readFile(String fileId, String key) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>( getOutSideUrlRoot() )</span><br><span class="line">                .append(<span class="string">&quot;/api/v2/ext/&quot;</span>)</span><br><span class="line">                .append(fileId)</span><br><span class="line">                .append(<span class="string">&quot;?key=&quot;</span>)</span><br><span class="line">                .append(key).toString();</span><br><span class="line">      </span><br><span class="line">      <span class="type">byte</span>[] file = visitUrl(url);</span><br><span class="line">      <span class="keyword">return</span> file;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 上传文件</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> fileInfo    上传文件信息对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> cont       文件内容</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> LllFileV2 <span class="title function_">uploadFile</span><span class="params">(ULFileInfoVo fileInfo, <span class="type">byte</span>[] cont)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="keyword">if</span> (ToolUtil.isNull( fileInfo.getToken() ))&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> getToken();</span><br><span class="line">            fileInfo.setToken(token);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> getOutSideUrlRoot() + <span class="string">&quot;/api/v2/ext/uploadFile&quot;</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="type">String</span> <span class="variable">base64Cont</span> <span class="operator">=</span> Base64Util.encode(cont);</span><br><span class="line">      Map&lt;String,String&gt; params = fileInfo.toMap();</span><br><span class="line">      params.put(<span class="string">&quot;base64Cont&quot;</span>, base64Cont);</span><br><span class="line">      </span><br><span class="line">      <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> HttpUtil2.sendPost(url, params);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//解析结果</span></span><br><span class="line">      <span class="type">LllFileV2</span> <span class="variable">file</span> <span class="operator">=</span> parseLllFileV2(res);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> file;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 转存临时文件,自动设置authId</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> fileId         临时文件ID</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> fileInfo       新的文件信息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> LllFileV2 <span class="title function_">transferTempFile</span><span class="params">(String fileId, ULFileInfoVo fileInfo)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> getInSideUrlRoot() + <span class="string">&quot;/api/v2/transfer-temp-file&quot;</span>;</span><br><span class="line">      <span class="comment">//设置authId</span></span><br><span class="line">        <span class="keyword">if</span> ( StringUtil.isNull( fileInfo.getToken() ) )&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">authId</span> <span class="operator">=</span> SpringUtil.getEvnProperty(<span class="string">&quot;file.authId&quot;</span>);</span><br><span class="line">            fileInfo.setToken(authId);</span><br><span class="line">        &#125;</span><br><span class="line">      Map&lt;String,String&gt; params = fileInfo.toMap();</span><br><span class="line">      params.put(<span class="string">&quot;fileId&quot;</span>, fileId);</span><br><span class="line">      </span><br><span class="line">      <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> HttpUtil2.sendPost(url, params);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//解析结果</span></span><br><span class="line">      <span class="type">LllFileV2</span> <span class="variable">file</span> <span class="operator">=</span> parseLllFileV2(res);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> file;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 读取用户图片列表</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> authId      授权id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> params      查询参数</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> isCont      是否包含文件内容(true:包含，false:不包含)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> List&lt;LllFileV2&gt; <span class="title function_">listFile</span><span class="params">(String authId, FileSearchParam params, <span class="type">boolean</span> isCont)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> getInSideUrlRoot() + <span class="string">&quot;/api/v2/list&quot;</span>;</span><br><span class="line">      </span><br><span class="line">      Map&lt;String,String&gt; _params = params.toMap();</span><br><span class="line">      _params.put(<span class="string">&quot;authId&quot;</span>, authId);</span><br><span class="line"></span><br><span class="line">      <span class="type">int</span> <span class="variable">readContent</span> <span class="operator">=</span> isCont ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">      _params.put(<span class="string">&quot;cont&quot;</span>, String.valueOf(readContent));</span><br><span class="line">      </span><br><span class="line">      <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> HttpUtil2.sendPost(url, _params);</span><br><span class="line">      <span class="comment">//解析结果</span></span><br><span class="line">      List&lt;LllFileV2&gt; datas = parseLllFileV2List(res);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> datas;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> List&lt;LllFileV2&gt; <span class="title function_">listFile</span><span class="params">(String authId, FileSearchParam params)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">      <span class="keyword">return</span> listFile(authId, params, <span class="literal">false</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;LllFileV2&gt; <span class="title function_">listFile</span><span class="params">(FileSearchParam params, <span class="type">boolean</span> isCont)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">authId</span> <span class="operator">=</span> SpringUtil.getEvnProperty(<span class="string">&quot;file.authId&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> listFile(authId, params, isCont);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 查询文件总数</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> authId         授权id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> params      查询参数</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">countFile</span><span class="params">(String authId, FileSearchParam params)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> getInSideUrlRoot() + <span class="string">&quot;/api/v2/count&quot;</span>;</span><br><span class="line">      </span><br><span class="line">      Map&lt;String,String&gt; _params = params.toMap();</span><br><span class="line">      _params.put(<span class="string">&quot;authId&quot;</span>, authId);</span><br><span class="line">      </span><br><span class="line">      <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> HttpUtil2.sendPost(url, _params);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//解析结果</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> parseLllFileV2Int(res);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> total;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">countFile</span><span class="params">(FileSearchParam params)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">authId</span> <span class="operator">=</span> SpringUtil.getEvnProperty(<span class="string">&quot;file.authId&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> countFile(authId, params);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 读取文件信息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> authId      授权id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> fileId      文件ID</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> cont       是否包含文件内容(true:包含，false:不包含)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> LllFileV2 <span class="title function_">getFile</span><span class="params">(String authId, String fileId, <span class="type">boolean</span> cont)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> getInSideUrlRoot() + <span class="string">&quot;/api/v2/getFileInfo&quot;</span>;</span><br><span class="line">      </span><br><span class="line">      Map&lt;String, String&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">      params.put(<span class="string">&quot;authId&quot;</span>, authId);</span><br><span class="line">      params.put(<span class="string">&quot;fileId&quot;</span>, fileId);</span><br><span class="line"></span><br><span class="line">      <span class="type">int</span> <span class="variable">readContent</span> <span class="operator">=</span> cont ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">      params.put(<span class="string">&quot;cont&quot;</span>, String.valueOf(readContent));</span><br><span class="line">      </span><br><span class="line">      <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> HttpUtil2.sendPost(url, params);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//解析结果</span></span><br><span class="line">      <span class="type">LllFileV2</span> <span class="variable">file</span> <span class="operator">=</span> parseLllFileV2(res);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> file;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> LllFileV2 <span class="title function_">getFile</span><span class="params">(String authId, String fileId)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">      <span class="keyword">return</span> getFile(authId, fileId, <span class="literal">false</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LllFileV2 <span class="title function_">getFile</span><span class="params">(String fileId, <span class="type">boolean</span> cont)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">authId</span> <span class="operator">=</span> SpringUtil.getEvnProperty(<span class="string">&quot;file.authId&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> getFile(authId, fileId, cont);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除文件</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> authId 授权id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> fileIds</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeFile</span><span class="params">(String authId, List&lt;String&gt; fileIds)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> getInSideUrlRoot() + <span class="string">&quot;/api/v2/removeFile&quot;</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="type">String</span> <span class="variable">_fileIds</span> <span class="operator">=</span> packFileIds(fileIds);</span><br><span class="line">      </span><br><span class="line">      Map&lt;String, String&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">      params.put(<span class="string">&quot;authId&quot;</span>, authId);</span><br><span class="line">      params.put(<span class="string">&quot;fileIds&quot;</span>, _fileIds);</span><br><span class="line">   </span><br><span class="line">      <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> HttpUtil2.sendPost(url, params);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//解析结果</span></span><br><span class="line">      parseResult(res);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeFile</span><span class="params">(List&lt;String&gt; fileIds)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">authId</span> <span class="operator">=</span> SpringUtil.getEvnProperty(<span class="string">&quot;file.authId&quot;</span>);</span><br><span class="line">        removeFile(authId, fileIds);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeFile</span><span class="params">(String authId, String fileId)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">      List&lt;String&gt; ls = Arrays.asList(fileId);</span><br><span class="line">      removeFile(authId, ls);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeFile</span><span class="params">(String fileId)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">authId</span> <span class="operator">=</span> SpringUtil.getEvnProperty(<span class="string">&quot;file.authId&quot;</span>);</span><br><span class="line">        removeFile(authId, fileId);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">packFileIds</span><span class="params">(List&lt;String&gt; fileIds)</span> &#123;</span><br><span class="line">       <span class="type">StringJoiner</span> <span class="variable">joiner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">       fileIds.forEach(s -&gt; joiner.add(s));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> joiner.toString();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getOutSideUrlRoot</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SpringUtil.getEvnProperty(<span class="string">&quot;file.rootUrl.outside&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getInSideUrlRoot</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SpringUtil.getEvnProperty(<span class="string">&quot;file.rootUrl.inside&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] visitUrl(String url) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">      <span class="keyword">return</span> HttpUtil2.sendGet(url, <span class="literal">null</span>, <span class="literal">null</span>, content -&gt; content.asBytes());</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> LllFileV2 <span class="title function_">parseLllFileV2</span><span class="params">(String res)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">      <span class="type">JsonObject</span> <span class="variable">data</span> <span class="operator">=</span> parseJsonObject(res);</span><br><span class="line">      </span><br><span class="line">      <span class="type">LllFileV2</span> <span class="variable">file</span> <span class="operator">=</span> LllFileV2.create(data);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> file;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> List&lt;LllFileV2&gt; <span class="title function_">parseLllFileV2List</span><span class="params">(String res)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">      <span class="type">JsonArray</span> <span class="variable">datas</span> <span class="operator">=</span> parseJsonArray(res);</span><br><span class="line">      </span><br><span class="line">      List&lt;LllFileV2&gt; ls = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;LllFileV2&gt;();</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;datas.size();i++) &#123;</span><br><span class="line">         <span class="type">JsonObject</span> <span class="variable">json</span> <span class="operator">=</span> datas.get(i).getAsJsonObject();</span><br><span class="line">         <span class="type">LllFileV2</span> <span class="variable">file</span> <span class="operator">=</span> LllFileV2.create(json);</span><br><span class="line">         ls.add(file);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> ls;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">parseLllFileV2Int</span><span class="params">(String res)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> parseResult(res);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> Integer.valueOf(data);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">parseResultSucc</span><span class="params">(JsonObject json)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">      <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> JsonUtil.getBoolean(json, <span class="string">&quot;success&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span>(!success) &#123;</span><br><span class="line">         <span class="type">JsonObject</span> <span class="variable">exJson</span> <span class="operator">=</span> JsonUtil.getJsonObject(json, <span class="string">&quot;ex&quot;</span>);</span><br><span class="line">         <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> JsonUtil.getString(exJson, <span class="string">&quot;code&quot;</span>);</span><br><span class="line">         <span class="type">String</span> <span class="variable">reason</span> <span class="operator">=</span> JsonUtil.getString(exJson, <span class="string">&quot;reason&quot;</span>);</span><br><span class="line">         <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;[&quot;</span>+code+<span class="string">&quot;]&quot;</span>+reason;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(msg);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">parseResult</span><span class="params">(String res)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">      <span class="type">JsonObject</span> <span class="variable">json</span> <span class="operator">=</span> JsonUtil.parseJsonObject(res);</span><br><span class="line">      </span><br><span class="line">      parseResultSucc(json);</span><br><span class="line">      </span><br><span class="line">      <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> JsonUtil.getString(json, <span class="string">&quot;data&quot;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> data;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> JsonObject <span class="title function_">parseJsonObject</span><span class="params">(String res)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">      <span class="type">JsonObject</span> <span class="variable">json</span> <span class="operator">=</span> JsonUtil.parseJsonObject(res);</span><br><span class="line">      </span><br><span class="line">      parseResultSucc(json);</span><br><span class="line">      </span><br><span class="line">      <span class="type">JsonObject</span> <span class="variable">data</span> <span class="operator">=</span> JsonUtil.getJsonObject(json, <span class="string">&quot;data&quot;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> data;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> JsonArray <span class="title function_">parseJsonArray</span><span class="params">(String res)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">      <span class="type">JsonObject</span> <span class="variable">json</span> <span class="operator">=</span> JsonUtil.parseJsonObject(res);</span><br><span class="line">      </span><br><span class="line">      parseResultSucc(json);</span><br><span class="line">      </span><br><span class="line">      <span class="type">JsonArray</span> <span class="variable">data</span> <span class="operator">=</span> JsonUtil.getJsonArray(json, <span class="string">&quot;data&quot;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> data;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-2-iic-file-dao"><a href="#2-2-iic-file-dao" class="headerlink" title="2.2 iic-file-dao"></a>2.2 iic-file-dao</h2><p>mapper, model, service+mybatis-xxx.xml 经典四件套</p>
<p>操作GdssFileTeFile.xml和GdssFileTeWhitelist.xml两张表</p>
<h3 id="2-2-1-GdssFileTeFile-xml"><a href="#2-2-1-GdssFileTeFile-xml" class="headerlink" title="2.2.1 GdssFileTeFile.xml"></a>2.2.1 GdssFileTeFile.xml</h3><p>其中SAVE_PATH字段即为文件的保存路径，可以通过<a href="https://test-static.gdsinsing.com/TEMP/83d48b7de7014fb48f427b7d1ee2214b.png%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E5%88%B0%E6%96%87%E4%BB%B6%EF%BC%8C%E5%8D%B3%E5%9F%9F%E5%90%8D+SAVE_PATH">https://test-static.gdsinsing.com/TEMP/83d48b7de7014fb48f427b7d1ee2214b.png直接访问到文件，即域名+SAVE_PATH</a></p>
<p><a href="https://test-static.gdsinsing.com/">https://test-static.gdsinsing.com</a>即为文件中心的公网地址</p>
<h3 id="2-2-2-GdssFileTeWhitelist-xml"><a href="#2-2-2-GdssFileTeWhitelist-xml" class="headerlink" title="2.2.2 GdssFileTeWhitelist.xml"></a>2.2.2 GdssFileTeWhitelist.xml</h3><p>“ID”    “APP_NAME”    “PUBLIC_KEY”    “PRIVATE_KEY”</p>
<p>授予某应用调用http内部接口的权限</p>
<h2 id="2-3-iic-file-web"><a href="#2-3-iic-file-web" class="headerlink" title="2.3 iic-file-web"></a>2.3 iic-file-web</h2><h3 id="2-3-1-cache"><a href="#2-3-1-cache" class="headerlink" title="2.3.1 cache"></a>2.3.1 cache</h3><h3 id="2-3-2-controller"><a href="#2-3-2-controller" class="headerlink" title="2.3.2 controller"></a>2.3.2 controller</h3><h3 id="2-3-3-service"><a href="#2-3-3-service" class="headerlink" title="2.3.3 service"></a>2.3.3 service</h3><h4 id="2-3-3-1-component"><a href="#2-3-3-1-component" class="headerlink" title="2.3.3.1 component"></a>2.3.3.1 component</h4><h5 id="1-BaseUploadFileComponent"><a href="#1-BaseUploadFileComponent" class="headerlink" title="(1) BaseUploadFileComponent"></a>(1) BaseUploadFileComponent</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseUploadFileComponent</span> <span class="keyword">extends</span> <span class="title class_">BaseFileService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> ICfgService iCfgService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> IGdssFileTeFileService iGdssFileTeFileService;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> LllFileV2 <span class="title function_">upload</span><span class="params">(ULFileInfoVo fileInfo, String base64Cont)</span> <span class="keyword">throws</span> BusException;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> LllFileV2 <span class="title function_">upload</span><span class="params">(ULFileInfoVo fileInfo, <span class="type">byte</span>[] contents)</span> <span class="keyword">throws</span> BusException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-UploadFileNormalComponent"><a href="#2-UploadFileNormalComponent" class="headerlink" title="(2) UploadFileNormalComponent"></a>(2) UploadFileNormalComponent</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上传普通文件组件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liangxinyi</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadFileNormalComponent</span> <span class="keyword">extends</span> <span class="title class_">BaseUploadFileComponent</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span> LogFactory.getLog(UploadFileNormalComponent.class);</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> LllFileV2 <span class="title function_">upload</span><span class="params">(ULFileInfoVo fileInfo, String base64Cont)</span> <span class="keyword">throws</span> BusException &#123;</span><br><span class="line">      <span class="comment">//解码</span></span><br><span class="line">        <span class="type">byte</span>[] contents = Base64Util.decode(base64Cont);</span><br><span class="line">        <span class="keyword">return</span> upload(fileInfo, contents);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> LllFileV2 <span class="title function_">upload</span><span class="params">(ULFileInfoVo fileInfo, <span class="type">byte</span>[] contents)</span> <span class="keyword">throws</span> BusException &#123;</span><br><span class="line">       <span class="comment">//入库</span></span><br><span class="line">        <span class="type">GdssFileTeFile</span> <span class="variable">file</span> <span class="operator">=</span> saveToDb(fileInfo, contents);</span><br><span class="line">        <span class="comment">//写入硬盘</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">savePath</span> <span class="operator">=</span> iCfgService.getCfgString(<span class="string">&quot;FILE_ROOT_PATH&quot;</span>) + file.getSavePath();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">dirPath</span> <span class="operator">=</span> findDirectory(savePath);</span><br><span class="line">            <span class="comment">//创建文件夹，如果文件夹不存在</span></span><br><span class="line">            Files.createDirectories( Paths.get(dirPath) );</span><br><span class="line">            <span class="comment">//写入文件</span></span><br><span class="line">            Files.write(Paths.get(savePath), contents, StandardOpenOption.CREATE);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> buildLllFile(file);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            log.error(<span class="string">&quot;&quot;</span>, ex);</span><br><span class="line">            <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> BusException) <span class="keyword">throw</span> (BusException) ex;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusException</span>(<span class="string">&quot;01200002&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> GdssFileTeFile <span class="title function_">saveToDb</span><span class="params">(ULFileInfoVo fileInfoVo, <span class="type">byte</span>[] contents)</span> <span class="keyword">throws</span> BusException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">appName</span> <span class="operator">=</span> getAppName( fileInfoVo.getToken() );</span><br><span class="line">        <span class="type">GdssFileTeFile</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GdssFileTeFile</span>();</span><br><span class="line">        file.setPkidValue( UUID.getUUID() );</span><br><span class="line">        file.setAppName(appName);</span><br><span class="line">        file.setType(GdssFileTeFile.TYPE_COMMON);</span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> FileUtil.getFileExt( fileInfoVo.getOldName() );</span><br><span class="line">        file.setFileSuffix(suffix);</span><br><span class="line">        file.setCreateTime( Calendar.getInstance().getTime() );</span><br><span class="line">        <span class="comment">//处理文件名</span></span><br><span class="line">        <span class="keyword">if</span> ( ToolUtil.isNull( fileInfoVo.getNewName() ) )&#123;</span><br><span class="line">            <span class="comment">//如果newName为空，则以ID作为文件名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">newName</span> <span class="operator">=</span> file.getId();</span><br><span class="line">            <span class="keyword">if</span>( !ToolUtil.isNull( file.getFileSuffix() ) ) &#123;</span><br><span class="line">                newName = newName + file.getFileSuffix();</span><br><span class="line">            &#125;</span><br><span class="line">            file.setFileName(newName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            file.setFileName( fileInfoVo.getNewName() );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">savePath</span> <span class="operator">=</span> packSavePath(fileInfoVo, file.getFileName());</span><br><span class="line">        file.setSavePath(savePath);</span><br><span class="line">        file.setOriginalName( fileInfoVo.getOldName() );</span><br><span class="line">        file.setUserId( fileInfoVo.getUserId() );</span><br><span class="line">        file.setEncrypt(LllBaseModel.NO);</span><br><span class="line">        <span class="comment">//预览url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">domain</span> <span class="operator">=</span> iCfgService.getCfgString(<span class="string">&quot;FILE_ROOT_URL&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> domain + <span class="string">&quot;/&quot;</span> + savePath;</span><br><span class="line">        file.setUrl(url);</span><br><span class="line">        file.setHash( Base64Util.Byte2SHA256(contents) );</span><br><span class="line">        <span class="comment">//入库</span></span><br><span class="line">        iGdssFileTeFileService.addEntity(file);</span><br><span class="line">        <span class="keyword">return</span> file;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-UploadFileEncryptComponent"><a href="#3-UploadFileEncryptComponent" class="headerlink" title="(3) UploadFileEncryptComponent"></a>(3) UploadFileEncryptComponent</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上传加密文件组件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liangxinyi</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadFileEncryptComponent</span> <span class="keyword">extends</span> <span class="title class_">BaseUploadFileComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span> LogFactory.getLog(UploadFileEncryptComponent.class);</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> LllFileV2 <span class="title function_">upload</span><span class="params">(ULFileInfoVo fileInfo, String base64Cont)</span> <span class="keyword">throws</span> BusException &#123;</span><br><span class="line">      <span class="comment">// TODO 解密</span></span><br><span class="line">        <span class="type">byte</span>[] contents = Base64Util.decode(base64Cont);</span><br><span class="line">        <span class="comment">//TODO 保存</span></span><br><span class="line">        <span class="keyword">return</span> upload(fileInfo, contents);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> LllFileV2 <span class="title function_">upload</span><span class="params">(ULFileInfoVo fileInfo, <span class="type">byte</span>[] contents)</span> <span class="keyword">throws</span> BusException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">GdssFileTeFile</span> <span class="variable">file</span> <span class="operator">=</span> saveToDb(fileInfo, contents);</span><br><span class="line">            <span class="comment">//加密</span></span><br><span class="line">            <span class="type">byte</span>[] encryptedBytes = SM4.encrypt(file.getEncryptKey(), contents);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">savePath</span> <span class="operator">=</span> iCfgService.getCfgString(<span class="string">&quot;FILE_ROOT_PATH&quot;</span>) + file.getSavePath();</span><br><span class="line">            <span class="type">String</span> <span class="variable">dirPath</span> <span class="operator">=</span> findDirectory(savePath);</span><br><span class="line">            <span class="comment">//创建文件夹，如果文件夹不存在</span></span><br><span class="line">            Files.createDirectories( Paths.get(dirPath) );</span><br><span class="line">            <span class="comment">//写入文件</span></span><br><span class="line">            Files.write(Paths.get(savePath), encryptedBytes, StandardOpenOption.CREATE);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> buildLllFile(file);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;&quot;</span>, e);</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> BusException) <span class="keyword">throw</span> (BusException) e;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusException</span>(<span class="string">&quot;01200002&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> GdssFileTeFile <span class="title function_">saveToDb</span><span class="params">(ULFileInfoVo fileInfoVo, <span class="type">byte</span>[] contents)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">appName</span> <span class="operator">=</span> getAppName( fileInfoVo.getToken() );</span><br><span class="line">        <span class="type">GdssFileTeFile</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GdssFileTeFile</span>();</span><br><span class="line">        file.setPkidValue( UUID.getUUID() );</span><br><span class="line">        file.setAppName(appName);</span><br><span class="line">        file.setType(GdssFileTeFile.TYPE_SECRET);</span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> FileUtil.getFileExt( fileInfoVo.getOldName() );</span><br><span class="line">        file.setFileSuffix(suffix);</span><br><span class="line">        file.setCreateTime( Calendar.getInstance().getTime() );</span><br><span class="line">        <span class="comment">//处理文件名</span></span><br><span class="line">        <span class="keyword">if</span> ( ToolUtil.isNull( fileInfoVo.getNewName() ) )&#123;</span><br><span class="line">            <span class="comment">//如果newName为空，则以ID作为文件名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">newName</span> <span class="operator">=</span> file.getId();</span><br><span class="line">            <span class="keyword">if</span>( !ToolUtil.isNull( file.getFileSuffix() ) ) &#123;</span><br><span class="line">                newName = newName + file.getFileSuffix();</span><br><span class="line">            &#125;</span><br><span class="line">            file.setFileName(newName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            file.setFileName( fileInfoVo.getNewName() );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">savePath</span> <span class="operator">=</span> packSavePath(fileInfoVo, file.getFileName());</span><br><span class="line">        file.setSavePath(savePath);</span><br><span class="line">        file.setOriginalName( fileInfoVo.getOldName() );</span><br><span class="line">        file.setUserId( fileInfoVo.getUserId() );</span><br><span class="line">        <span class="comment">//密钥</span></span><br><span class="line">        file.setEncrypt(LllBaseModel.YES);</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> SM4.generateBase64KeyStr();</span><br><span class="line">        file.setEncryptKey(key);</span><br><span class="line">        <span class="comment">//预览url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">domain</span> <span class="operator">=</span> iCfgService.getCfgString(<span class="string">&quot;FILE_ROOT_URL&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> domain + <span class="string">&quot;/&quot;</span> + savePath;</span><br><span class="line">        file.setUrl(url);</span><br><span class="line">        file.setHash( Base64Util.Byte2SHA256(contents) );</span><br><span class="line">        <span class="comment">//入库</span></span><br><span class="line">        iGdssFileTeFileService.addEntity(file);</span><br><span class="line">        <span class="keyword">return</span> file;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-UploadFileSpecifyPathComponent"><a href="#4-UploadFileSpecifyPathComponent" class="headerlink" title="(4) UploadFileSpecifyPathComponent"></a>(4) UploadFileSpecifyPathComponent</h5><h5 id="5-UploadFileTempComponent"><a href="#5-UploadFileTempComponent" class="headerlink" title="(5) UploadFileTempComponent"></a>(5) UploadFileTempComponent</h5><h3 id="2-3-4-resources"><a href="#2-3-4-resources" class="headerlink" title="2.3.4 resources"></a>2.3.4 resources</h3><h4 id="2-3-4-1-application-yml"><a href="#2-3-4-1-application-yml" class="headerlink" title="2.3.4.1 application.yml"></a>2.3.4.1 application.yml</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8097</span></span><br><span class="line">    <span class="attr">tomcat:</span></span><br><span class="line">      <span class="attr">basedir:</span> <span class="string">/Users/wit/Desktop/temp</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">http:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">maxFileSize:</span> <span class="string">20MB</span></span><br><span class="line">      <span class="attr">maxRequestSize:</span> <span class="string">20MB</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.html</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">    <span class="comment"># config-location: classpath:mybatis-config.xml</span></span><br><span class="line">    <span class="attr">mapper-locations:</span> <span class="string">classpath*:**/mybatis-*.xml</span></span><br><span class="line">  <span class="comment">#type-aliases-package: cn.lll.tsp.model</span></span><br><span class="line">    <span class="attr">configuration:</span></span><br><span class="line">      <span class="attr">use-actual-param-name:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">cache-enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">#标识业务统计</span></span><br><span class="line"><span class="attr">stat:</span></span><br><span class="line">  <span class="attr">redis-ip:</span> <span class="number">114.67</span><span class="number">.117</span><span class="number">.77</span></span><br><span class="line">  <span class="attr">redis-pwd:</span> <span class="string">y0aoQ67K62pHrPjp</span></span><br><span class="line">  <span class="attr">redis-key:</span> <span class="string">IIC_STAT_DEV</span></span><br><span class="line"><span class="comment">#  配置中心配置</span></span><br><span class="line"><span class="attr">cfg:</span></span><br><span class="line">  <span class="attr">FILE_ROOT_PATH:</span> <span class="string">/home/iic/STATIC_ROOT_PATH/</span></span><br><span class="line"><span class="comment">#  FILE_ROOT_URL: 启动命令传入</span></span><br></pre></td></tr></table></figure>



<h4 id="2-3-4-2-application-dao-prod-yml"><a href="#2-3-4-2-application-dao-prod-yml" class="headerlink" title="2.3.4.2 application-dao-prod.yml"></a>2.3.4.2 application-dao-prod.yml</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">prod</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://mysql-cn-south-1-740dbfbd9a254713.rds.jdcloud.com:3306/iic-filecenter-db?characterEncoding=utf8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">gdxx_file</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">42RsHfmzOdr1eWaHlxo0OmTnTBGfnGSb</span></span><br><span class="line">        <span class="comment"># 使用druid数据源</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">        <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">3600000</span></span><br><span class="line">        <span class="attr">validation-query:</span> <span class="string">SELECT</span> <span class="number">1</span><span class="string">;</span></span><br><span class="line">        <span class="attr">filters:</span> <span class="string">stat</span></span><br><span class="line">        <span class="attr">maxActive:</span> <span class="number">300</span></span><br><span class="line">        <span class="attr">initialSize:</span> <span class="number">20</span></span><br><span class="line">        <span class="attr">maxWait:</span> <span class="number">5000</span></span><br><span class="line">        <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">        <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">maxOpenPreparedStatements:</span> <span class="number">20</span></span><br><span class="line">        <span class="comment"># 数据库备份使用</span></span><br><span class="line">        <span class="attr">databaseName:</span> <span class="string">eb_yunxin</span></span><br><span class="line">        <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.4</span><span class="number">.159</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">4406</span></span><br><span class="line">        <span class="attr">mySqlPath:</span> <span class="string">/usr/local/mysql/</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">basedir:</span> <span class="string">/home/tomcat/dir/file</span></span><br></pre></td></tr></table></figure>



<h1 id="3-HTTP接口"><a href="#3-HTTP接口" class="headerlink" title="3.HTTP接口"></a>3.HTTP接口</h1><h2 id="3-1-HTTP外部接口"><a href="#3-1-HTTP外部接口" class="headerlink" title="3.1 HTTP外部接口"></a>3.1 HTTP外部接口</h2><p>上传文件：<a href="https://static.gdsinsing.com/api/v2/ext/upload">https://static.gdsinsing.com/api/v2/ext/upload</a></p>
<p>查询文件信息：<a href="https://static.gdsinsing.com/api/v2/ext/fileinfo/%7BfileId%7D">https://static.gdsinsing.com/api/v2/ext/fileinfo/{fileId}</a></p>
<p>读取文件：<a href="https://static.gdsinsing.com/api/v2/ext/%7BfileId%7D?key=%7Bkey%7D">https://static.gdsinsing.com/api/v2/ext/{fileId}?key={key}</a></p>
<h2 id="3-2-HTTP内部接口"><a href="#3-2-HTTP内部接口" class="headerlink" title="3.2 HTTP内部接口"></a>3.2 HTTP内部接口</h2><p>申请临时权限令牌：https:&#x2F;&#x2F;{文件中心内网地址}&#x2F;api&#x2F;v2&#x2F;token?authId&#x3D;{authId}</p>
<p>转存临时文件：https:&#x2F;&#x2F;{文件中心内网地址}&#x2F;api&#x2F;v2&#x2F;transfer-temp-file</p>
<p>读取用户图片列表：https:&#x2F;&#x2F;{文件中心内网地址}&#x2F;api&#x2F;v2&#x2F;list</p>
<p>查询文件总数：https:&#x2F;&#x2F;{文件中心内网地址}&#x2F;api&#x2F;v2&#x2F;count</p>
<p>查询文件信息：https:&#x2F;&#x2F;{文件中心内网地址}&#x2F;api&#x2F;v2&#x2F;getFileInfo</p>
<p>删除文件：https:&#x2F;&#x2F;{文件中心内网地址}&#x2F;api&#x2F;v2&#x2F;removeFile</p>
<h2 id="3-3-附件"><a href="#3-3-附件" class="headerlink" title="3.3 附件"></a>3.3 附件</h2><p>LllFileV2</p>
<p>概述</p>
<blockquote>
<p>文件中心文件对象。</p>
</blockquote>
<p>文件类型</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>类型</th>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>LllFileV2.TYPE_COMMON</td>
<td>int</td>
<td>1</td>
<td>公共区文件</td>
</tr>
<tr>
<td>LllFileV2.TYPE_SECRET</td>
<td>int</td>
<td>2</td>
<td>加密区文件</td>
</tr>
<tr>
<td>LllFileV2.TYPE_TEMP</td>
<td>int</td>
<td>3</td>
<td>临时区文件</td>
</tr>
</tbody></table>
<p>属性说明</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td>fileId</td>
<td>String</td>
<td align="left">文件ID</td>
</tr>
<tr>
<td>userId</td>
<td>String</td>
<td align="left">用户ID</td>
</tr>
<tr>
<td>type</td>
<td>Integer</td>
<td align="left">文件类型 (1:公共区 2:加密区 3:临时区)</td>
</tr>
<tr>
<td>createTime</td>
<td>Date</td>
<td align="left">上传时间</td>
</tr>
<tr>
<td>fileName</td>
<td>String</td>
<td align="left">文件名(包含后缀)</td>
</tr>
<tr>
<td>savePath</td>
<td>String</td>
<td align="left">文件保存路径 (不包含文件名)</td>
</tr>
<tr>
<td>fileSuffix</td>
<td>String</td>
<td align="left">文件后缀</td>
</tr>
<tr>
<td>oldName</td>
<td>String</td>
<td align="left">文件原名</td>
</tr>
<tr>
<td>url</td>
<td>String</td>
<td align="left">完整的URL访问地址(包含Https)</td>
</tr>
<tr>
<td>secKey</td>
<td>String</td>
<td align="left">SM4密钥</td>
</tr>
<tr>
<td>hash</td>
<td>String</td>
<td align="left">文件的Hash值</td>
</tr>
<tr>
<td>appName</td>
<td>String</td>
<td align="left">系统账号名称,如：IIC</td>
</tr>
<tr>
<td>cont</td>
<td>byte[]</td>
<td align="left">文件内容</td>
</tr>
</tbody></table>
<h1 id="4-SSP"><a href="#4-SSP" class="headerlink" title="4.SSP"></a>4.SSP</h1><h2 id="4-1-admin-file-controller"><a href="#4-1-admin-file-controller" class="headerlink" title="4.1 admin.file.controller"></a>4.1 admin.file.controller</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(path = &quot;/mgrapi/admin/file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminFileController</span> <span class="keyword">extends</span> <span class="title class_">MgrBaseController</span></span><br></pre></td></tr></table></figure>

<p>内有upload方法</p>
<h2 id="4-2-pages-filecenter-file-upload-js"><a href="#4-2-pages-filecenter-file-upload-js" class="headerlink" title="4.2 pages.filecenter.file-upload.js"></a>4.2 pages.filecenter.file-upload.js</h2><p>Vue组件 调controller中的upload方法</p>
<h2 id="4-3-pages-filecenter-file-upload-html"><a href="#4-3-pages-filecenter-file-upload-html" class="headerlink" title="4.3 pages.filecenter.file-upload.html"></a>4.3 pages.filecenter.file-upload.html</h2>]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>webapi</tag>
        <tag>Springboot</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/05/16/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>meeting room</title>
    <url>/2022/10/07/meeting-room/</url>
    <content><![CDATA[<h1 id="Meeting-Rooms问题"><a href="#Meeting-Rooms问题" class="headerlink" title="Meeting Rooms问题"></a>Meeting Rooms问题</h1><h2 id="252-Meeting-Rooms"><a href="#252-Meeting-Rooms" class="headerlink" title="252. Meeting Rooms"></a>252. Meeting Rooms</h2><p><a href="https://leetcode.com/problems/meeting-rooms/">https://leetcode.com/problems/meeting-rooms/</a></p>
<h3 id="解法一：merge-interval通解"><a href="#解法一：merge-interval通解" class="headerlink" title="解法一：merge interval通解"></a>解法一：merge interval通解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canAttendMeetings</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=intervals.length;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Arrays.sort(intervals, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] o1, <span class="type">int</span>[] o2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> o1[<span class="number">0</span>]!=o2[<span class="number">0</span>] ? o1[<span class="number">0</span>]-o2[<span class="number">0</span>] : o2[<span class="number">0</span>]-o1[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> start=intervals[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> end=intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> left=intervals[i][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> right=intervals[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(left&lt;end)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            end=right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canAttendMeetings</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;</span><br><span class="line">    Arrays.sort(intervals, (a, b) -&gt; Integer.compare(a[<span class="number">0</span>], b[<span class="number">0</span>]));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; intervals.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals[i][<span class="number">1</span>] &gt; intervals[i + <span class="number">1</span>][<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="253-Meeting-Rooms-II"><a href="#253-Meeting-Rooms-II" class="headerlink" title="253. Meeting Rooms II"></a>253. Meeting Rooms II</h2><p><a href="https://leetcode.com/problems/meeting-rooms-ii/">https://leetcode.com/problems/meeting-rooms-ii/</a></p>
<h3 id="法一：greedy-algorithm"><a href="#法一：greedy-algorithm" class="headerlink" title="法一：greedy algorithm"></a>法一：greedy algorithm</h3><p>先interval排序，尽可能让该interval去到end更小的组，并更新该组的end</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minMeetingRooms</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;</span><br><span class="line">    <span class="comment">//minimum number of conference rooms</span></span><br><span class="line">    <span class="comment">//minimum groups of un-overlapping intervals</span></span><br><span class="line">    Arrays.sort(intervals,(a,b)-&gt;(a[<span class="number">0</span>]!=b[<span class="number">0</span>] ? a[<span class="number">0</span>]-b[<span class="number">0</span>] : b[<span class="number">1</span>]-a[<span class="number">1</span>]));</span><br><span class="line">    <span class="type">int</span> n=intervals.length;</span><br><span class="line">    PriorityQueue&lt;Integer&gt; pq=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>();</span><br><span class="line">    pq.add(intervals[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> left=intervals[i][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> right=intervals[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(left&lt;pq.peek())&#123;</span><br><span class="line">            pq.offer(right);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> min=pq.poll();</span><br><span class="line">            pq.offer(right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pq.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2402-Meeting-Rooms-III"><a href="#2402-Meeting-Rooms-III" class="headerlink" title="2402. Meeting Rooms III"></a>2402. Meeting Rooms III</h2><p>注意：</p>
<ul>
<li>end可能越界，要用long</li>
<li>compare的返回值必须是int,也要强转</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mostBooked</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] meetings)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] counts=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    Arrays.sort(meetings,(a,b)-&gt;(a[<span class="number">0</span>]-b[<span class="number">0</span>]));</span><br><span class="line">    <span class="comment">//room number, meeting end time</span></span><br><span class="line">    PriorityQueue&lt;<span class="type">long</span>[]&gt; pq=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a,b)-&gt;(a[<span class="number">1</span>]!=b[<span class="number">1</span>] ? (<span class="type">int</span>)(a[<span class="number">1</span>]-b[<span class="number">1</span>]) : (<span class="type">int</span>)(a[<span class="number">0</span>]-b[<span class="number">0</span>])));</span><br><span class="line">    pq.offer(<span class="keyword">new</span> <span class="title class_">long</span>[]&#123;<span class="number">0</span>,meetings[<span class="number">0</span>][<span class="number">1</span>]&#125;);</span><br><span class="line">    counts[<span class="number">0</span>]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; meetings.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> start=meetings[i][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> end=meetings[i][<span class="number">1</span>];</span><br><span class="line">        List&lt;<span class="type">long</span>[]&gt; rooms=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> count=pq.size();</span><br><span class="line">        <span class="type">long</span>[] room=<span class="literal">null</span>;    <span class="comment">//best room to offer</span></span><br><span class="line">        <span class="keyword">while</span>(!pq.isEmpty() &amp;&amp; pq.peek()[<span class="number">1</span>]&lt;=start)&#123;<span class="comment">//possible rooms to choose from</span></span><br><span class="line">            <span class="type">long</span>[] first=pq.poll();</span><br><span class="line">            <span class="keyword">if</span>(room==<span class="literal">null</span> || first[<span class="number">0</span>]&lt;room[<span class="number">0</span>])&#123;</span><br><span class="line">                room=first;</span><br><span class="line">            &#125;</span><br><span class="line">            rooms.add(first);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(room!=<span class="literal">null</span>)&#123; <span class="comment">//no need to open a new room or wait</span></span><br><span class="line">            room[<span class="number">1</span>]=end;</span><br><span class="line">            counts[(<span class="type">int</span>)room[<span class="number">0</span>]]++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">long</span>[] r : rooms) &#123;</span><br><span class="line">                pq.offer(r);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(count&lt;n)&#123;<span class="comment">// still have empty rooms, no need to wait</span></span><br><span class="line">            counts[count]++;</span><br><span class="line">            pq.offer(<span class="keyword">new</span> <span class="title class_">long</span>[]&#123;count,end&#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  <span class="comment">//have to wait</span></span><br><span class="line">            room=pq.poll();</span><br><span class="line">            counts[(<span class="type">int</span>)room[<span class="number">0</span>]]++;</span><br><span class="line">            room[<span class="number">1</span>]+=end-start;</span><br><span class="line">            pq.offer(room);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> max=counts[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; counts.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(counts[i]&gt;max)&#123;</span><br><span class="line">            res=i;</span><br><span class="line">            max=counts[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>nSum问题</title>
    <url>/2022/05/31/nSum%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="nSum问题选编"><a href="#nSum问题选编" class="headerlink" title="nSum问题选编"></a>nSum问题选编</h1><h2 id="15-3Sum"><a href="#15-3Sum" class="headerlink" title="15. 3Sum"></a><a href="https://leetcode.cn/problems/3sum/">15. 3Sum</a></h2><p>注意：</p>
<ol>
<li>只求值，不求坐标，可以排序！</li>
<li>用左右双指针</li>
<li>考虑去重<ul>
<li>for 循环中</li>
<li>while 循环中</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; nums[i]==nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> left=i+<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> right=n-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="type">int</span> sum=nums[i]+nums[left]+nums[right];</span><br><span class="line">                <span class="keyword">if</span>(sum==<span class="number">0</span>)&#123;</span><br><span class="line">                    res.add(Arrays.asList(nums[i],nums[left],nums[right])); <span class="comment">//注意语法</span></span><br><span class="line">                    <span class="keyword">while</span>(left&lt;n-<span class="number">1</span> &amp;&amp; nums[left]==nums[left+<span class="number">1</span>])&#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    left++;</span><br><span class="line">                    <span class="keyword">while</span>(right&gt;<span class="number">0</span> &amp;&amp; nums[right]==nums[right-<span class="number">1</span>])&#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">while</span>(right&gt;<span class="number">0</span> &amp;&amp; nums[right]==nums[right-<span class="number">1</span>])&#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">while</span>(left&lt;n-<span class="number">1</span> &amp;&amp; nums[left]==nums[left+<span class="number">1</span>])&#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="16-3Sum-Closest"><a href="#16-3Sum-Closest" class="headerlink" title="16. 3Sum Closest"></a><a href="https://leetcode.cn/problems/3sum-closest/">16. 3Sum Closest</a></h2><p>注意：</p>
<ol>
<li>依然以 <code>sum</code> 为判断条件，分别考虑 <code>sum </code>等于、大于、小于<code>target</code>时的情况</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode16</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">threeSumClosest</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        <span class="type">int</span> curSum=Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> cur=Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; nums[i]==nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> left=i+<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> right=n-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="type">int</span> sum=nums[i]+nums[left]+nums[right];</span><br><span class="line">                <span class="keyword">if</span>(sum==target)&#123;</span><br><span class="line">                    cur=<span class="number">0</span>;</span><br><span class="line">                    curSum=sum;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&gt;target)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(sum-target&lt;cur)&#123;</span><br><span class="line">                        cur=sum-target;</span><br><span class="line">                        curSum=sum;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span>(right&gt;<span class="number">0</span> &amp;&amp; nums[right]==nums[right-<span class="number">1</span>])&#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(target-sum&lt;cur)&#123;</span><br><span class="line">                        cur=target-sum;</span><br><span class="line">                        curSum=sum;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span>(left&lt;n-<span class="number">1</span> &amp;&amp; nums[left]==nums[left+<span class="number">1</span>])&#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> curSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="18-4Sum"><a href="#18-4Sum" class="headerlink" title="18. 4Sum"></a><a href="https://leetcode.cn/problems/4sum/">18. 4Sum</a></h2><p>注意去重：</p>
<ol>
<li>外层 for 去重逻辑不变，跳过重复的第一个元素</li>
<li>内层 for 去重逻辑：跳过重复的第二个元素</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; nums[i]==nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;i+<span class="number">1</span> &amp;&amp; nums[j]==nums[j-<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> left=j+<span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> right=n-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                    <span class="type">int</span> sum=nums[i]+nums[j]+nums[left]+nums[right];</span><br><span class="line">                    <span class="keyword">if</span>(sum==target)&#123;</span><br><span class="line">                        res.add(Arrays.asList(nums[i],nums[j],nums[left],nums[right]));</span><br><span class="line">                        <span class="keyword">while</span>(left&lt;n-<span class="number">1</span> &amp;&amp; nums[left]==nums[left+<span class="number">1</span>])&#123;</span><br><span class="line">                            left++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        left++;</span><br><span class="line">                        <span class="keyword">while</span>(right&gt;<span class="number">0</span> &amp;&amp; nums[right]==nums[right-<span class="number">1</span>])&#123;</span><br><span class="line">                            right--;</span><br><span class="line">                        &#125;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&gt;target)&#123;</span><br><span class="line">                        <span class="keyword">while</span>(right&gt;<span class="number">0</span> &amp;&amp; nums[right]==nums[right-<span class="number">1</span>])&#123;</span><br><span class="line">                            right--;</span><br><span class="line">                        &#125;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">while</span>(left&lt;n-<span class="number">1</span> &amp;&amp; nums[left]==nums[left+<span class="number">1</span>])&#123;</span><br><span class="line">                            left++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        left++;  </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="259-3Sum-Smaller"><a href="#259-3Sum-Smaller" class="headerlink" title="259. 3Sum Smaller"></a><a href="https://leetcode.cn/problems/3sum-smaller/">259. 3Sum Smaller</a></h2><p>注意：</p>
<ol>
<li>以 left 为计数基准， 找到符合条件的组合后就更新 left， 避免重复</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode259</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">threeSumSmaller</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> left=i+<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> right=n-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="type">int</span> sum=nums[i]+nums[left]+nums[right];</span><br><span class="line">                <span class="keyword">if</span>(sum&lt;target)&#123;</span><br><span class="line">                    count+=right-left;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&gt;=target)&#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="454-4Sum-II"><a href="#454-4Sum-II" class="headerlink" title="454. 4Sum II"></a><a href="https://leetcode.cn/problems/4sum-ii/">454. 4Sum II</a></h2><p>注意：</p>
<ol>
<li>只要求 count, 无需求值，则考虑用 HashMap 记录前两个数组各 sum 出现的次数</li>
<li>遍历后两个数组，考察 0-sum 的数量</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fourSumCount</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3, <span class="type">int</span>[] nums4)</span> &#123;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n=nums1.length;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="type">int</span> sum=nums1[i]+nums2[j];</span><br><span class="line">                map.put(sum,map.getOrDefault(sum,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="type">int</span> sum=nums3[i]+nums4[j];</span><br><span class="line">                <span class="keyword">if</span>(map.containsKey(<span class="number">0</span>-sum))&#123;</span><br><span class="line">                    count+=map.get(<span class="number">0</span>-sum);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="653-Two-Sum-IV-Input-is-a-BST"><a href="#653-Two-Sum-IV-Input-is-a-BST" class="headerlink" title="653. Two Sum IV - Input is a BST"></a>653. Two Sum IV - Input is a BST</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findTarget</span><span class="params">(TreeNode root, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    Set&lt;Integer&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    Deque&lt;TreeNode&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    q.offer(root);</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        TreeNode cur=q.poll();</span><br><span class="line">        <span class="type">int</span> val=cur.val;</span><br><span class="line">        <span class="keyword">if</span>(set.contains(k-val))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        set.add(val);</span><br><span class="line">        <span class="keyword">if</span>(cur.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            q.offer(cur.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cur.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            q.offer(cur.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>HashMap</tag>
        <tag>two_pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>maze</title>
    <url>/2022/11/09/maze/</url>
    <content><![CDATA[<h1 id="The-Maze三重奏"><a href="#The-Maze三重奏" class="headerlink" title="The Maze三重奏"></a>The Maze三重奏</h1><h2 id="490-The-Maze"><a href="#490-The-Maze" class="headerlink" title="490. The Maze"></a>490. The Maze</h2><h3 id="Approach-1-Depth-First-Search"><a href="#Approach-1-Depth-First-Search" class="headerlink" title="Approach 1: Depth First Search"></a>Approach 1: Depth First Search</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> row;</span><br><span class="line"><span class="type">int</span> col;</span><br><span class="line"><span class="type">int</span>[][] maze;</span><br><span class="line"><span class="type">int</span>[][] dirs=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPath</span><span class="params">(<span class="type">int</span>[][] maze, <span class="type">int</span>[] start, <span class="type">int</span>[] destination)</span> &#123;</span><br><span class="line">    row=maze.length;</span><br><span class="line">    col=maze[<span class="number">0</span>].length;</span><br><span class="line">    <span class="built_in">this</span>.maze=maze;</span><br><span class="line">    <span class="keyword">return</span> dfs(start[<span class="number">0</span>],start[<span class="number">1</span>],destination,<span class="keyword">new</span> <span class="title class_">boolean</span>[row][col]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span>[] end,<span class="type">boolean</span>[][] visited)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==end[<span class="number">0</span>] &amp;&amp; j==end[<span class="number">1</span>])&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    visited[i][j]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] dir : dirs) &#123;</span><br><span class="line">        <span class="type">int</span> x=i+dir[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> y=j+dir[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span>(x&gt;=<span class="number">0</span> &amp;&amp; x&lt;row &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;col &amp;&amp; maze[x][y]==<span class="number">0</span>)&#123;</span><br><span class="line">            x+=dir[<span class="number">0</span>];</span><br><span class="line">            y+=dir[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(!visited[x-dir[<span class="number">0</span>]][y-dir[<span class="number">1</span>]] )&#123;</span><br><span class="line">            <span class="keyword">if</span>(dfs(x-dir[<span class="number">0</span>],y-dir[<span class="number">1</span>],end,visited))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Approach-2-Breadth-First-Search"><a href="#Approach-2-Breadth-First-Search" class="headerlink" title="Approach 2: Breadth First Search"></a>Approach 2: Breadth First Search</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPath</span><span class="params">(<span class="type">int</span>[][] maze, <span class="type">int</span>[] start, <span class="type">int</span>[] destination)</span> &#123;</span><br><span class="line">    Deque&lt;<span class="type">int</span>[]&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> row=maze.length;</span><br><span class="line">    <span class="type">int</span> col=maze[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">boolean</span>[][] visited=<span class="keyword">new</span> <span class="title class_">boolean</span>[row][col];</span><br><span class="line">    <span class="type">int</span>[][] dirs=<span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    visited[start[<span class="number">0</span>]][start[<span class="number">1</span>]]=<span class="literal">true</span>;</span><br><span class="line">    q.offer(start);</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span>[] cur=q.poll();</span><br><span class="line">        <span class="type">int</span> i=cur[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> j=cur[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(i==destination[<span class="number">0</span>] &amp;&amp; j==destination[<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] dir : dirs) &#123;</span><br><span class="line">            <span class="type">int</span> x=i+dir[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> y=j+dir[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">while</span>(x&gt;=<span class="number">0</span> &amp;&amp; x&lt;row &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;col &amp;&amp; maze[x][y]==<span class="number">0</span>)&#123;</span><br><span class="line">                x+=dir[<span class="number">0</span>];</span><br><span class="line">                y+=dir[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!visited[x-dir[<span class="number">0</span>]][y-dir[<span class="number">1</span>]])&#123;</span><br><span class="line">                visited[x-dir[<span class="number">0</span>]][y-dir[<span class="number">1</span>]]=<span class="literal">true</span>;</span><br><span class="line">                q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x-dir[<span class="number">0</span>],y-dir[<span class="number">1</span>]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="505-The-Maze-II"><a href="#505-The-Maze-II" class="headerlink" title="505. The Maze II"></a>505. The Maze II</h2><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS:"></a>DFS:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> row;</span><br><span class="line"><span class="type">int</span> col;</span><br><span class="line"><span class="type">int</span>[][] maze;</span><br><span class="line"><span class="type">int</span>[][] dirs=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">shortestDistance</span><span class="params">(<span class="type">int</span>[][] maze, <span class="type">int</span>[] start, <span class="type">int</span>[] destination)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.maze=maze;</span><br><span class="line">    row=maze.length;</span><br><span class="line">    col=maze[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span>[][] dist=<span class="keyword">new</span> <span class="title class_">int</span>[row][col];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] ints : dist) &#123;</span><br><span class="line">        Arrays.fill(ints,Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    dist[start[<span class="number">0</span>]][start[<span class="number">1</span>]]=<span class="number">0</span>;</span><br><span class="line">    dfs(start[<span class="number">0</span>],start[<span class="number">1</span>],destination,dist);</span><br><span class="line">    <span class="keyword">return</span> dist[destination[<span class="number">0</span>]][destination[<span class="number">1</span>]]==Integer.MAX_VALUE ? -<span class="number">1</span> : dist[destination[<span class="number">0</span>]][destination[<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span>[] end,<span class="type">int</span>[][] dist)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==end[<span class="number">0</span>] &amp;&amp; j==end[<span class="number">1</span>])&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] dir : dirs) &#123;</span><br><span class="line">        <span class="type">int</span> x=i+dir[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> y=j+dir[<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> d=dist[i][j];</span><br><span class="line">        <span class="keyword">while</span>(x&gt;=<span class="number">0</span> &amp;&amp; x&lt;row &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;col &amp;&amp; maze[x][y]==<span class="number">0</span>)&#123;</span><br><span class="line">            x+=dir[<span class="number">0</span>];</span><br><span class="line">            y+=dir[<span class="number">1</span>];</span><br><span class="line">            d++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(d&lt;dist[x-dir[<span class="number">0</span>]][y-dir[<span class="number">1</span>]])&#123;</span><br><span class="line">            dist[x-dir[<span class="number">0</span>]][y-dir[<span class="number">1</span>]]=d;</span><br><span class="line">            dfs(x-dir[<span class="number">0</span>],y-dir[<span class="number">1</span>],end,dist);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS:"></a>BFS:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">shortestDistance</span><span class="params">(<span class="type">int</span>[][] maze, <span class="type">int</span>[] start, <span class="type">int</span>[] destination)</span> &#123;</span><br><span class="line">    <span class="type">int</span> row=maze.length;</span><br><span class="line">    <span class="type">int</span> col=maze[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span>[][] dirs=&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">    Deque&lt;<span class="type">int</span>[]&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span>[][] visited=<span class="keyword">new</span> <span class="title class_">int</span>[row][col];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] ints : visited) &#123;</span><br><span class="line">        Arrays.fill(ints,Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;start[<span class="number">0</span>],start[<span class="number">1</span>]&#125;);</span><br><span class="line">    visited[start[<span class="number">0</span>]][start[<span class="number">1</span>]]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span> size=q.size();</span><br><span class="line">        <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span>[] cur=q.poll();</span><br><span class="line">            <span class="type">int</span> i=cur[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> j=cur[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span>[] dir : dirs) &#123;</span><br><span class="line">                <span class="type">int</span> x=i+dir[<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> y=j+dir[<span class="number">1</span>];</span><br><span class="line">                <span class="type">int</span> dist=visited[i][j];</span><br><span class="line">                <span class="keyword">while</span>(x&gt;=<span class="number">0</span> &amp;&amp; x&lt;row &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;col &amp;&amp; maze[x][y]==<span class="number">0</span>)&#123;</span><br><span class="line">                    x+=dir[<span class="number">0</span>];</span><br><span class="line">                    y+=dir[<span class="number">1</span>];</span><br><span class="line">                    dist++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//only add meaningful updates to queue</span></span><br><span class="line">                <span class="keyword">if</span>(dist&lt;visited[x-dir[<span class="number">0</span>]][y-dir[<span class="number">1</span>]])&#123;</span><br><span class="line">                    visited[x-dir[<span class="number">0</span>]][y-dir[<span class="number">1</span>]]=dist;</span><br><span class="line">                    q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x-dir[<span class="number">0</span>],y-dir[<span class="number">1</span>]&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> visited[destination[<span class="number">0</span>]][destination[<span class="number">1</span>]]==Integer.MAX_VALUE ? -<span class="number">1</span> : visited[destination[<span class="number">0</span>]][destination[<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="499-The-Maze-III"><a href="#499-The-Maze-III" class="headerlink" title="499. The Maze III"></a>499. The Maze III</h2>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>my very fisrt hexo article</title>
    <url>/2022/04/07/new-article/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>sliding window</title>
    <url>/2022/04/28/sliding-window/</url>
    <content><![CDATA[<h1 id="sliding-window选编"><a href="#sliding-window选编" class="headerlink" title="sliding window选编"></a>sliding window选编</h1><h2 id="76-Minimum-Window-Substring"><a href="#76-Minimum-Window-Substring" class="headerlink" title="76. Minimum Window Substring"></a><a href="https://leetcode-cn.com/problems/minimum-window-substring/">76. Minimum Window Substring</a></h2><p>难点：</p>
<ol>
<li>如何判断window满足要求</li>
<li>window满足要求后，如何优化window (start尽可能右移)</li>
</ol>
<p>目标：</p>
<ol>
<li>找start</li>
<li>找len</li>
</ol>
<p>写法一：用HashMap</p>
<p>PS：理论上你可以设计两端都开或者两端都闭的区间，但设计为左闭右开区间是最方便处理的。因为这样初始化 <code>left = right = 0</code> 时区间 <code>[0, 0)</code> 中没有元素，但只要让 <code>right</code> 向右移动（扩大）一位，区间 <code>[0, 1)</code> 就包含一个元素 <code>0</code> 了。如果你设置为两端都开的区间，那么让 <code>right</code> 向右移动一位后开区间 <code>(0, 1)</code> 仍然没有元素；如果你设置为两端都闭的区间，那么初始区间 <code>[0, 0]</code> 就包含了一个元素。这两种情况都会给边界处理带来不必要的麻烦。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">minWindow</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    HashMap&lt;Character,Integer&gt; need = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();<span class="comment">//用来存储匹配串的字符以及其频率</span></span><br><span class="line">    HashMap&lt;Character,Integer&gt; window = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();<span class="comment">//目前窗口中的字符和其出现的频率</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">t_length</span> <span class="operator">=</span> t.length();<span class="comment">//匹配串的长度</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 统计 匹配串t的字符 和 其出现的频率</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t_length; i++) &#123;</span><br><span class="line">        need.put(t.charAt(i),need.getOrDefault(t.charAt(i),<span class="number">0</span>)+<span class="number">1</span>);<span class="comment">//获取指定的key对应的 value 如果找不到key 则返回设置的默认值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span><span class="number">0</span>;<span class="comment">//初始化左指针</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//初始化右指针</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">valid</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//窗口中 满足need条件的字符个数，如果valid和need.size 大小相同 说明 窗口完全满足条件了 可以选择收缩了</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//记录最小覆盖子串的起使索引</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> Integer.MAX_VALUE;<span class="comment">//记录最小覆盖字串的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//右指针到达 目标串s的末尾的时候停止</span></span><br><span class="line">    <span class="keyword">while</span>(right &lt; s.length())&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(right);<span class="comment">//获取右指针所在位置的char</span></span><br><span class="line">        right++;<span class="comment">//右指针右移 窗口扩大</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (need.containsKey(c))&#123;<span class="comment">//如果need中包含当前指针所在的字符c</span></span><br><span class="line">            window.put(c,window.getOrDefault(c,<span class="number">0</span>)+<span class="number">1</span>);<span class="comment">//将当前char c 存入对应的window位置</span></span><br><span class="line">            <span class="keyword">if</span> (window.get(c).equals(need.get(c)))&#123;<span class="comment">//如果目标map 中的 相对应的 字符数量符 和 当前window中的 对应的字符数量相同 则 符合的valid++</span></span><br><span class="line">                valid++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (valid == need.size())&#123;<span class="comment">//如果 window中符合need中的char数量则说明确实找到了可行解</span></span><br><span class="line">            <span class="keyword">if</span> (right - left &lt; len)&#123;<span class="comment">//说明现在的子串的长度比 之前记录的长度还要小</span></span><br><span class="line">                len = right - left;<span class="comment">//更新字串长度记录</span></span><br><span class="line">                start = left;<span class="comment">//更新起使索引到left</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将当前left位置的字符移除窗口</span></span><br><span class="line">            <span class="type">char</span> <span class="variable">d</span> <span class="operator">=</span> s.charAt(left);</span><br><span class="line">            <span class="comment">//左移窗口</span></span><br><span class="line">            left++;</span><br><span class="line">            <span class="keyword">if</span> (need.containsKey(d))&#123;<span class="comment">//如果当前移除的字符 存在于 need中 需要对窗口内的数据进行一系列更新</span></span><br><span class="line">                <span class="keyword">if</span> (window.get(d).equals(need.get(d)))&#123;<span class="comment">//如果当前需要移除的字符数量 和 need中需要移除的字符数量相同 则将 匹配的字符个数 -1</span></span><br><span class="line">                    valid--;</span><br><span class="line">                &#125;</span><br><span class="line">                window.put(d,window.get(d)-<span class="number">1</span>);<span class="comment">//将当前的</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//right到达了字符串的末尾</span></span><br><span class="line">    <span class="type">return</span> <span class="variable">len</span> <span class="operator">=</span>= Integer.MAX_VALUE ? <span class="string">&quot;&quot;</span> : s.substring(start,start+len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>写法二：用数组</p>
<p>to be continued</p>
<h2 id="567-Permutation-in-String"><a href="#567-Permutation-in-String" class="headerlink" title="567. Permutation in String"></a><a href="https://leetcode-cn.com/problems/permutation-in-string/">567. Permutation in String</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkInclusion</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">    Map&lt;Character,Integer&gt; need=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s1.length(); i++) &#123;</span><br><span class="line">        need.put(s1.charAt(i),need.getOrDefault(s1.charAt(i),<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> valid=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">    Map&lt;Character,Integer&gt; window=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span>(right&lt;s2.length())&#123; <span class="comment">//[left,right)</span></span><br><span class="line">        <span class="type">char</span> c=s2.charAt(right);</span><br><span class="line">        window.put(c,window.getOrDefault(c,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        right++;</span><br><span class="line">        <span class="keyword">if</span>(need.containsKey(c)&amp;&amp;need.get(c).equals(window.get(c)))&#123;</span><br><span class="line">            valid++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(valid==need.size())&#123; <span class="comment">//找到包含permutation的substring后开始缩，直到满足条件返回true</span></span><br><span class="line">            <span class="keyword">if</span>(right-left==s1.length())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">char</span> d=s2.charAt(left);</span><br><span class="line">            left++;</span><br><span class="line">            <span class="keyword">if</span>(need.containsKey(d))&#123;</span><br><span class="line">                <span class="keyword">if</span>(need.get(d).equals(window.get(d)))&#123;</span><br><span class="line">                    valid--;</span><br><span class="line">                &#125;</span><br><span class="line">                window.put(d,window.get(d)-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="3-Longest-Substring-Without-Repeating-Characters"><a href="#3-Longest-Substring-Without-Repeating-Characters" class="headerlink" title="3. Longest Substring Without Repeating Characters"></a><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">3. Longest Substring Without Repeating Characters</a></h2><p>sliding window 模板：</p>
<p><strong>现在开始套模板，只需要思考以下四个问题</strong>：</p>
<p>1、当移动 <code>right</code> 扩大窗口，即加入字符时，应该更新哪些数据？</p>
<p>2、什么条件下，窗口应该暂停扩大，开始移动 <code>left</code> 缩小窗口？</p>
<p>3、当移动 <code>left</code> 缩小窗口，即移出字符时，应该更新哪些数据？</p>
<p>4、我们要的结果应该在扩大窗口时还是缩小窗口时进行更新？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    Map&lt;Character,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> max=Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">while</span>(right&lt;s.length())&#123;</span><br><span class="line">        <span class="type">char</span> c=s.charAt(right);</span><br><span class="line">        map.put(c,map.getOrDefault(c,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        right++;</span><br><span class="line">        <span class="keyword">while</span>(map.get(c)!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">char</span> d=s.charAt(left);</span><br><span class="line">            map.put(d,map.get(d)-<span class="number">1</span>);</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        max=Math.max(max,right-left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max==Integer.MIN_VALUE ? <span class="number">0</span> : max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="438-Find-All-Anagrams-in-a-String"><a href="#438-Find-All-Anagrams-in-a-String" class="headerlink" title="438. Find All Anagrams in a String"></a><a href="https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/">438. Find All Anagrams in a String</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findAnagrams</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Map&lt;Character,Integer&gt; need=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    Map&lt;Character,Integer&gt; window=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; p.length(); i++) &#123;</span><br><span class="line">        need.put(p.charAt(i),need.getOrDefault(p.charAt(i),<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> start=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> valid=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(right&lt;s.length())&#123; <span class="comment">//[left,right)</span></span><br><span class="line">        <span class="type">char</span> c=s.charAt(right);</span><br><span class="line">        right++;</span><br><span class="line">        <span class="keyword">if</span>(need.containsKey(c))&#123;</span><br><span class="line">            window.put(c,window.getOrDefault(c,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(need.get(c).equals(window.get(c)))&#123;</span><br><span class="line">                valid++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(valid==need.size())&#123;</span><br><span class="line">            <span class="keyword">if</span>(right-left==p.length())&#123;<span class="comment">//[left,right)</span></span><br><span class="line">                res.add(left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">char</span> d=s.charAt(left);</span><br><span class="line">            left++;</span><br><span class="line">            <span class="keyword">if</span>(window.containsKey(d))&#123;</span><br><span class="line">                window.put(d,window.get(d)-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(need.get(d)&gt;window.get(d))&#123;</span><br><span class="line">                    valid--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="159-Longest-Substring-with-At-Most-Two-Distinct-Characters"><a href="#159-Longest-Substring-with-At-Most-Two-Distinct-Characters" class="headerlink" title="159. Longest Substring with At Most Two Distinct Characters"></a>159. Longest Substring with At Most Two Distinct Characters</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstringTwoDistinct</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> r=<span class="number">0</span>;</span><br><span class="line">    Map&lt;Character,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span>(r&lt;n)&#123;</span><br><span class="line">        <span class="comment">//[l,r)</span></span><br><span class="line">        <span class="type">char</span> c=s.charAt(r++);</span><br><span class="line">        map.put(c,map.getOrDefault(c,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(map.keySet().size()&gt;<span class="number">2</span>)&#123;</span><br><span class="line">            c=s.charAt(l++);</span><br><span class="line">            map.put(c,map.get(c)-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(map.get(c)==<span class="number">0</span>)&#123;</span><br><span class="line">                map.remove(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res=Math.max(res,r-l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="424-Longest-Repeating-Character-Replacement"><a href="#424-Longest-Repeating-Character-Replacement" class="headerlink" title="424. Longest Repeating Character Replacement"></a>424. Longest Repeating Character Replacement</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//longest substring with at most k chars not the same</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">characterReplacement</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    <span class="type">int</span>[] count=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mostFreqCount=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(right&lt;n)&#123;</span><br><span class="line">        <span class="comment">//[left,right)</span></span><br><span class="line">        <span class="type">char</span> c=s.charAt(right++);</span><br><span class="line">        count[c-<span class="string">&#x27;A&#x27;</span>]++;</span><br><span class="line">        mostFreqCount=Math.max(mostFreqCount,count[c-<span class="string">&#x27;A&#x27;</span>]);</span><br><span class="line">        <span class="keyword">while</span>(right-left-mostFreqCount&gt;k)&#123;</span><br><span class="line">            <span class="type">char</span> d=s.charAt(left++);</span><br><span class="line">            count[d-<span class="string">&#x27;A&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        res=Math.max(res,right-left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>sliding-window</tag>
      </tags>
  </entry>
  <entry>
    <title>ssp前端</title>
    <url>/2022/04/24/ssp%E5%89%8D%E7%AB%AF/</url>
    <content><![CDATA[<h1 id="ssp-frontend"><a href="#ssp-frontend" class="headerlink" title="ssp frontend"></a>ssp frontend</h1><h2 id="file-upload前端原理"><a href="#file-upload前端原理" class="headerlink" title="file-upload前端原理"></a>file-upload前端原理</h2><h3 id="1-file-upload-html"><a href="#1-file-upload-html" class="headerlink" title="1. file-upload.html"></a>1. file-upload.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iic-panel-top</span> <span class="attr">title</span>=<span class="string">&quot;上传文件&quot;</span> <span class="attr">chain</span>=<span class="string">&quot;文件管理&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iic-panel-top</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-12&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;upload-select-area&quot;</span> <span class="attr">class</span>=<span class="string">&quot;upload-select-area&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h1</span> @<span class="attr">click</span>=<span class="string">&quot;onSelected()&quot;</span>&gt;</span>拖拽文件到这里<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;upload-btn-area&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;showBtnArea()&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-primary waves-effect waves-light&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onUploadAll()&quot;</span>&gt;</span>全部上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-secondary waves-effect waves-light&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onDelAll()&quot;</span>&gt;</span>全部清除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;upload-preview-area&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;fileinfo in fileDatas&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;preview-item&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;preview-img&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;fileinfo.url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;preview-cont&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">label</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fileinfo.name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>大小<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fileinfo.size&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>状态<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;fileinfo.status==1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-primary&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: 600;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;mdi mdi-checkbox-marked-circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span>已上传<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;fileinfo.status==0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-warning&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: 600;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;mdi mdi-information&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span>未上传<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-top:15px;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onUpload(fileinfo)&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;showUploadBtn(fileinfo)&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-danger&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onDelete(fileinfo)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;preview-loading&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;showLoading(fileinfo)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- end row --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>重点在于：</p>
<ol>
<li>&#96;&#96;&#96;html<li v-for="fileinfo in fileDatas"> 
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   负责展示用户上传的文件经整理后的fileinfo</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">2. ```html</span><br><span class="line">   &lt;a href=&quot;javascript:void(0)&quot; class=&quot;btn btn-sm btn-primary&quot; @click=&quot;onUpload(fileinfo)&quot; :class=&quot;showUploadBtn(fileinfo)&quot;&gt;上传&lt;/a&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>​    </p>
<ol start="3">
<li>&#96;&#96;&#96;html<br>&lt;button class&#x3D;”btn btn-sm btn-primary waves-effect waves-light” @click&#x3D;”onUploadAll()”&gt;全部上传</button><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">用户拖拽一个文件进入上传框后，逻辑如下：</span><br><span class="line"></span><br><span class="line">0. 一进入该html页面，执行该Vue对象的 init 方法，oUpload 对象初始化一系列只与当前用户有关、与所选择上传文件无关的属性</span><br><span class="line"></span><br><span class="line">1. ```js</span><br><span class="line">   var dObj = new Dropzone(&quot;#upload-select-area&quot;, option);</span><br></pre></td></tr></table></figure></li>
</ol>
<p>​        通过Dropzone，绑定对象 option 和 id&#x3D;”upload-select-area” 的 div 组件，一旦拖拽&#x2F;选择文件，便执行 option 中的 addedfile: function(file) 方法</p>
<ol start="2">
<li>addedfile 方法传入用户选择上传的文件 file，进行类型判断，并增加了一些属性，和 file 本身，一起赋给Vue对象中 data 里的fileDatas: []</li>
</ol>
<p>​        若用户选择多个文件，则fileDatas数组中有多个经处理后规范的fileinfo文件对象</p>
<ol start="3">
<li><p>规范的fileinfo对象被页面展示</p>
<p>注意：通过Vue，并非直接操纵DOM树，而是先js操纵Vue组件，再由Vue实现对DOM树的操纵、即页面的展示的变化</p>
</li>
</ol>
<h3 id="2-file-upload-js"><a href="#2-file-upload-js" class="headerlink" title="2. file-upload.js"></a>2. file-upload.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>) &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;iic-panel-top&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&quot;../../assets/libs/dropzone/dropzone.css&quot;</span>);</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&quot;../../assets/libs/dropzone/dropzone.js&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> css = <span class="built_in">require</span>(<span class="string">&quot;./file-upload.css&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> tpl = <span class="built_in">require</span>(<span class="string">&quot;./file-upload.html&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="attr">data</span>: <span class="keyword">function</span> <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">fileDatas</span>: [],  <span class="comment">//&#123;fileId:&#x27;&#x27;, name:&#x27;文件名&#x27;, size:&#x27;12345676&#x27;, url:&#x27;&#x27;, enc:0, status:0未上传1已上传, file:文件&#125;</span></span><br><span class="line">                <span class="attr">uploadUrl</span>: <span class="string">&#x27;/mgrapi/admin/file/upload&#x27;</span>,</span><br><span class="line"></span><br><span class="line">                <span class="attr">maxSize</span>: <span class="string">&#x27;2M&#x27;</span>,</span><br><span class="line">                <span class="attr">suffix</span>: [<span class="string">&#x27;.jpg&#x27;</span>,<span class="string">&#x27;.jpeg&#x27;</span>,<span class="string">&#x27;.png&#x27;</span>,<span class="string">&#x27;.gif&#x27;</span>,<span class="string">&#x27;.bmp&#x27;</span>],</span><br><span class="line"></span><br><span class="line">                <span class="attr">oUpload</span>: <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="attr">mounted</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">initUpload</span>();</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="attr">template</span>: tpl,</span><br><span class="line"></span><br><span class="line">        <span class="attr">methods</span>:&#123;</span><br><span class="line">            <span class="attr">initUpload</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">oUpload</span> = <span class="title class_">IICUpload</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">                    <span class="attr">token</span>: <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">                    <span class="attr">fileElId</span>: <span class="string">&#x27;&#x27;</span>,               <span class="comment">//file组件的ID</span></span><br><span class="line">                    <span class="attr">uploadUrl</span>: _this.<span class="property">uploadUrl</span>,              <span class="comment">//文件上传的后台处理路径</span></span><br><span class="line">                    <span class="attr">infoUrl</span>: <span class="string">&#x27;&#x27;</span>,                <span class="comment">//读取文件信息路径</span></span><br><span class="line">                    <span class="attr">params</span>: &#123;                   <span class="comment">//文件上传的其他参数</span></span><br><span class="line">                        <span class="attr">uploadType</span>: <span class="number">1</span>,         <span class="comment">//上传类型(0:上传一般文件，1:上传临时文件，2:加密上传文件, 3:指定路径上传文件)</span></span><br><span class="line">                        <span class="attr">newName</span>: <span class="string">&#x27;&#x27;</span>,            <span class="comment">//新文件名</span></span><br><span class="line">                        <span class="attr">oldName</span>: <span class="string">&#x27;&#x27;</span>,            <span class="comment">//旧文件名</span></span><br><span class="line">                        <span class="attr">savePath</span>: <span class="string">&#x27;&#x27;</span>            <span class="comment">//保存的目录路径</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">suffix</span>: _this.<span class="property">suffix</span>,                 <span class="comment">//后缀</span></span><br><span class="line">                    <span class="attr">maxsize</span>: _this.<span class="property">maxSize</span>,              <span class="comment">//文件大小</span></span><br><span class="line">                    <span class="attr">succFn</span>: showSuccAlert,               <span class="comment">//成功的回调方法</span></span><br><span class="line">                    <span class="attr">failFn</span>: showErrAlert                <span class="comment">//失败的回调方法</span></span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> option = &#123;</span><br><span class="line">                    <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="attr">addedfile</span>: <span class="keyword">function</span>(<span class="params">file</span>)&#123;</span><br><span class="line">                        <span class="keyword">var</span> _size = _this.<span class="title function_">_getFileSize</span>(file);</span><br><span class="line">                        <span class="keyword">var</span> filename = file.<span class="property">name</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span>(!_this.<span class="title function_">_checkFileSize</span>(file)) <span class="keyword">return</span>;</span><br><span class="line">                        <span class="comment">//判断文件类型</span></span><br><span class="line">                        <span class="keyword">var</span> _type = $FileUtil.<span class="title function_">getFileType</span>(filename);</span><br><span class="line">                        <span class="keyword">if</span>(_type==<span class="string">&quot;Other&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span>(_type == <span class="string">&#x27;Image&#x27;</span>)&#123;</span><br><span class="line">                            <span class="keyword">var</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">                            reader.<span class="title function_">readAsDataURL</span>(file);</span><br><span class="line">                            reader.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">                                _this.<span class="property">fileDatas</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                                    <span class="attr">fileId</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                                    <span class="attr">name</span>: filename,</span><br><span class="line">                                    <span class="attr">size</span>: _size,</span><br><span class="line">                                    <span class="attr">url</span>: e.<span class="property">target</span>.<span class="property">result</span>,</span><br><span class="line">                                    <span class="attr">enc</span>: <span class="number">0</span>,</span><br><span class="line">                                    <span class="attr">status</span>: <span class="number">0</span>,</span><br><span class="line">                                    <span class="attr">file</span>: file</span><br><span class="line">                                &#125;);</span><br><span class="line">                            &#125;;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span> _srcUrl = <span class="string">&#x27;/assets/images/fileicon/file.png&#x27;</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span>(_type == <span class="string">&#x27;PDF&#x27;</span>) _srcUrl=<span class="string">&#x27;/assets/images/fileicon/pdf.png&#x27;</span>;</span><br><span class="line">                        <span class="keyword">if</span>(_type == <span class="string">&#x27;Word&#x27;</span>) _srcUrl=<span class="string">&#x27;/assets/images/fileicon/word.png&#x27;</span>;</span><br><span class="line">                        <span class="keyword">if</span>(_type == <span class="string">&#x27;Excel&#x27;</span>) _srcUrl=<span class="string">&#x27;/assets/images/fileicon/excel.png&#x27;</span>;</span><br><span class="line">                        <span class="keyword">if</span>(_type == <span class="string">&#x27;Video&#x27;</span>) _srcUrl=<span class="string">&#x27;/assets/images/fileicon/video.png&#x27;</span>;</span><br><span class="line">                        <span class="keyword">if</span>(_type == <span class="string">&#x27;Zip&#x27;</span>) _srcUrl=<span class="string">&#x27;/assets/images/fileicon/zip.png&#x27;</span>;</span><br><span class="line"></span><br><span class="line">                        _this.<span class="property">fileDatas</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                            <span class="attr">fileId</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                            <span class="attr">name</span>: filename,</span><br><span class="line">                            <span class="attr">size</span>: _size,</span><br><span class="line">                            <span class="attr">url</span>: _srcUrl,</span><br><span class="line">                            <span class="attr">enc</span>: <span class="number">0</span>,</span><br><span class="line">                            <span class="attr">status</span>: <span class="number">0</span>,</span><br><span class="line">                            <span class="attr">file</span>: file</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">var</span> dObj = <span class="keyword">new</span> <span class="title class_">Dropzone</span>(<span class="string">&quot;#upload-select-area&quot;</span>, option);</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="attr">onUploadAll</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">                <span class="keyword">var</span> cycleFn = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="keyword">var</span> _fileinfo = _this.<span class="title function_">_getNeedFileinfo</span>();</span><br><span class="line">                    <span class="keyword">if</span>(_fileinfo)&#123;</span><br><span class="line">                        _this.<span class="title function_">onUpload</span>(_fileinfo, cycleFn);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="title function_">cycleFn</span>();</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="attr">onUpload</span>: <span class="keyword">function</span>(<span class="params">fileinfo, succFn, failFn</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">                succFn = succFn || showSuccAlert;</span><br><span class="line">                failFn = failFn || showErrAlert;</span><br><span class="line"></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">oUpload</span>.<span class="property">option</span>.<span class="property">params</span>.<span class="property">oldName</span> = fileinfo.<span class="property">name</span>;</span><br><span class="line">                <span class="comment">//如果指定了路径就是上传指定路径文件</span></span><br><span class="line">                <span class="keyword">if</span> (fileinfo.<span class="property">savePath</span>)&#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">oUpload</span>.<span class="property">option</span>.<span class="property">params</span>.<span class="property">savePath</span> = fileinfo.<span class="property">savePath</span>;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">oUpload</span>.<span class="property">option</span>.<span class="property">params</span>.<span class="property">uploadType</span> = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">oUpload</span>.<span class="property">option</span>.<span class="property">params</span>.<span class="property">uploadType</span> = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                fileinfo.<span class="property">loading</span> = <span class="number">1</span>;</span><br><span class="line">                _this.$forceUpdate();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> file = fileinfo.<span class="property">file</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">oUpload</span>.<span class="title function_">uploadFile</span>(file, <span class="keyword">function</span>(<span class="params">info</span>)&#123;</span><br><span class="line">                    fileinfo.<span class="property">fileId</span> = info.<span class="property">fileId</span>;</span><br><span class="line">                    fileinfo.<span class="property">status</span> = <span class="number">1</span>;</span><br><span class="line">                    fileinfo.<span class="property">loading</span> = <span class="number">0</span>;</span><br><span class="line">                    _this.$forceUpdate();</span><br><span class="line"></span><br><span class="line">                    <span class="title function_">succFn</span>(<span class="string">&quot;上传成功&quot;</span>);</span><br><span class="line">                &#125;, <span class="keyword">function</span>(<span class="params">msg</span>)&#123;</span><br><span class="line">                    fileinfo.<span class="property">loading</span> = <span class="number">0</span>;</span><br><span class="line">                    _this.$forceUpdate();</span><br><span class="line">                    <span class="title function_">failFn</span>(msg);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="attr">onDelAll</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">fileDatas</span> = [];</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="attr">onDelete</span>: <span class="keyword">function</span>(<span class="params">fileinfo</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> index = -<span class="number">1</span>;</span><br><span class="line">                $.<span class="title function_">each</span>(<span class="variable language_">this</span>.<span class="property">fileDatas</span>, <span class="keyword">function</span>(<span class="params">i,obj</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(obj==fileinfo)&#123;</span><br><span class="line">                        index = i;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">if</span>(index&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="variable language_">this</span>.$delete(<span class="variable language_">this</span>.<span class="property">fileDatas</span>, index);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="attr">showUploadBtn</span>: <span class="keyword">function</span>(<span class="params">fileinfo</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(fileinfo.<span class="property">status</span>==<span class="number">1</span>) <span class="keyword">return</span> <span class="string">&#x27;disabled&#x27;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="attr">showBtnArea</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">fileDatas</span>.<span class="property">length</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="attr">showLoading</span>: <span class="keyword">function</span>(<span class="params">fileinfo</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> fileinfo.<span class="property">loading</span>;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="attr">onSelected</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                $(<span class="string">&#x27;#upload-select-area&#x27;</span>).<span class="title function_">click</span>();</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="attr">_getNeedFileinfo</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=<span class="variable language_">this</span>.<span class="property">fileDatas</span>.<span class="property">length</span>;i&lt;len;i++)&#123;</span><br><span class="line">                    <span class="keyword">var</span> fileinfo = <span class="variable language_">this</span>.<span class="property">fileDatas</span>[i];</span><br><span class="line">                    <span class="keyword">if</span>(fileinfo.<span class="property">status</span> == <span class="number">0</span>) <span class="keyword">return</span> fileinfo;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="attr">_getFileSize</span>: <span class="keyword">function</span>(<span class="params">file</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> _size = <span class="built_in">parseInt</span>(file.<span class="property">size</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(_size&lt;<span class="number">1024</span>) <span class="keyword">return</span> _size;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(_size&lt;<span class="number">1024</span>*<span class="number">1024</span>)&#123;</span><br><span class="line">                    _size = _size/<span class="number">1024</span>;</span><br><span class="line">                    _size = _size.<span class="title function_">toFixed</span>(<span class="number">1</span>)+<span class="string">&#x27;KB&#x27;</span></span><br><span class="line">                    <span class="keyword">return</span> _size;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                _size = _size/(<span class="number">1024</span>*<span class="number">1024</span>);</span><br><span class="line">                _size = _size.<span class="title function_">toFixed</span>(<span class="number">1</span>)+<span class="string">&#x27;M&#x27;</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> _size;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="attr">_checkFileSize</span>: <span class="keyword">function</span> (<span class="params">file</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> _size=<span class="built_in">parseInt</span>(file.<span class="property">size</span>);</span><br><span class="line">                <span class="keyword">if</span>(_size&lt;<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>点击上传后，文件传到后端Controller的部分逻辑如下:</p>
<ol>
<li><p>向onUpload中传入fileinfo</p>
</li>
<li><p>onUpload 调用 this.oUpload.uploadFile方法，传入 var file &#x3D; fileinfo.file; 以及成功与失败的回调函数</p>
</li>
<li><p>通过this获取到option中的token和回调函数</p>
</li>
<li><p>判断token后通过AJAX POST发送fileData到后端Controller，其中fileData中包含fileinfo中的file属性，token属性以及所有其他属性</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">IICUpload</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">uploadFile</span> = <span class="keyword">function</span>(<span class="params">file, succFn, failFn</span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">succFn</span> = succFn || <span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">succFn</span>;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">failFn</span> = failFn || <span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">failFn</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//判断token</span></span><br><span class="line">   <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">token</span>)&#123;</span><br><span class="line">      _this.<span class="property">option</span>.<span class="title function_">failFn</span>(<span class="string">&#x27;token不能为空&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(!file)&#123;</span><br><span class="line">      _this.<span class="property">option</span>.<span class="title function_">failFn</span>(<span class="string">&#x27;文件不能为空&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> fileData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">   fileData.<span class="title function_">append</span>(<span class="string">&quot;file&quot;</span>, file);</span><br><span class="line">   fileData.<span class="title function_">append</span>(<span class="string">&quot;token&quot;</span>, <span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">token</span>);</span><br><span class="line">   <span class="comment">//加入其他参数</span></span><br><span class="line">   fileData = <span class="variable language_">this</span>.<span class="title function_">__addParams</span>(fileData);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//Ajax提交上传</span></span><br><span class="line">   <span class="keyword">var</span> url = <span class="variable language_">this</span>.<span class="property">option</span>.<span class="property">uploadUrl</span>;</span><br><span class="line">   $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        <span class="attr">url</span>: url,</span><br><span class="line">        <span class="attr">contentType</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">processData</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">data</span>: fileData,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">           <span class="keyword">var</span> success = res.<span class="property">success</span>;</span><br><span class="line">           <span class="keyword">if</span>(success)&#123;</span><br><span class="line">              <span class="keyword">var</span> fileinfo = res.<span class="property">data</span>;</span><br><span class="line">              _this.<span class="property">fileInfo</span> = fileinfo;</span><br><span class="line">              _this.<span class="property">option</span>.<span class="title function_">succFn</span>(fileinfo);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              <span class="keyword">var</span> msg = res.<span class="property">msg</span>;</span><br><span class="line">              _this.<span class="property">option</span>.<span class="title function_">failFn</span>(msg);</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">IICUpload</span>(<span class="params">option</span>)&#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">option</span> = &#123;</span><br><span class="line">      <span class="attr">token</span>: <span class="string">&#x27;&#x27;</span>,             <span class="comment">//上传权限令牌,必填</span></span><br><span class="line">      <span class="attr">fileElId</span>: <span class="string">&#x27;&#x27;</span>,           <span class="comment">//file组件的ID</span></span><br><span class="line">      <span class="attr">uploadUrl</span>: <span class="string">&#x27;&#x27;</span>,          <span class="comment">//文件上传的后台处理路径</span></span><br><span class="line">      <span class="attr">infoUrl</span>: <span class="string">&#x27;&#x27;</span>,            <span class="comment">//读取文件信息路径</span></span><br><span class="line">      <span class="attr">params</span>: &#123;              <span class="comment">//文件上传的其他参数</span></span><br><span class="line">         <span class="attr">uploadType</span>: <span class="string">&#x27;&#x27;</span>,          <span class="comment">//上传类型(1:上传一般文件, 2:指定路径上传文件, 3:加密上传文件, 4:上传临时文件)</span></span><br><span class="line">         <span class="attr">newName</span>: <span class="string">&#x27;&#x27;</span>,         <span class="comment">//新文件名</span></span><br><span class="line">         <span class="attr">oldName</span>: <span class="string">&#x27;&#x27;</span>,         <span class="comment">//旧文件名</span></span><br><span class="line">         <span class="attr">savePath</span>: <span class="string">&#x27;&#x27;</span>         <span class="comment">//保存的目录路径</span></span><br><span class="line">      &#125;,                </span><br><span class="line">      <span class="attr">suffix</span>: [],                <span class="comment">//后缀</span></span><br><span class="line">      <span class="attr">maxsize</span>: <span class="string">&#x27;2M&#x27;</span>,          <span class="comment">//文件大小</span></span><br><span class="line">      <span class="attr">succFn</span>: <span class="literal">null</span>,           <span class="comment">//成功的回调方法</span></span><br><span class="line">      <span class="attr">failFn</span>: <span class="literal">null</span>            <span class="comment">//失败的回调方法</span></span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">fileInfo</span> = &#123;&#125;;             <span class="comment">//文件信息</span></span><br><span class="line"></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">option</span> = <span class="title class_">IICUpload</span>.<span class="title function_">__initOption</span>(option);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>ajax Post发送后，通过注解@RequestParam(value &#x3D; “file”)，Spring MVC将前端的”file”属性自动匹配地赋给对象MultipartFile file，前端”file”中多余属性则忽视，缺失属性则置为null; 其余属性则自动匹配地赋给对象ULFileInfoVo fileInfo，用于后端的后续业务逻辑。</p>
<p>Spring MVC:</p>
<ol>
<li><p>可以在SpringMVC的Controller中具体请求处理方法中，直接使用基本数据类型或者String类型的参数进行对映，只要前端页面和方法中指定的参数名称是完全一致的，这里包括大小写，那么前端这个参数名称所赋有的值，就会传递到后台的请求处理方法中。<br>由SpringMVC底层的拦截器实现</p>
<p>它会将请求中传来的所有参数，请求处理方法中的参数进行对比，如果发现是一模一样的，它就会从请求中把那个参数的值拿出来赋给处理方法中的那个变量，以供后端controller继续操作。</p>
</li>
<li><p>SpringMVC的过滤器不光接收映射同名的参数，而且还会将类型帮助我们转换成功。但是，类型的转换，存在着问题，比如:int类型是整数类型，刚才传来的参数id就是int类型，而值恰好是1，则不会出现问题，可是如果将值改成abc等非数字的内容呢？那肯定是会报错的，因为数字格式异常，无法进行转换。同时，还有传递的时候忘记传递id属性而只传了name属性，或者id属性只给了key，而没有value值，这些情况，都会导致错误的出现。</p>
</li>
<li><p>本例中，后端JavaBean来接收参数 并加入@RequestParam(value &#x3D; “file”)注解</p>
<p>@RequestParam 注解用来<strong>标注在控制器方法的参数上</strong>，springmvc 从 request 中获取请求的值赋值给方法的参数 @RequestParam 指定 name 时，可以获取 request 中指定参数的值，相当于 request.getParameter (name)或 request.getParameters (name)</p>
</li>
<li><p>restful风格传值方式：</p>
<p><a href="https://www.jianshu.com/p/91600da4df95">使用RESTful风格开发Java Web - 简书 (jianshu.com)</a></p>
<p>REST是<strong>REpresentational State Transfer</strong>的缩写（一般中文翻译为表述性状态转移），REST 是一种体系结构，而 HTTP 是一种包含了 REST 架构属性的协议，为了便于理解，我们把它的首字母拆分成不同的几个部分：</p>
<ul>
<li><strong>表述性（REpresentational）：</strong> REST 资源实际上可以用各种形式来进行表述，包括 XML、JSON 甚至 HTML——最适合资源使用者的任意形式；</li>
<li><strong>状态（State）：</strong> 当使用 REST 的时候，我们更关注资源的状态而不是对资源采取的行为；</li>
<li><strong>转义（Transfer）：</strong> REST 涉及到转移资源数据，它以某种表述性形式从一个应用转移到另一个应用。</li>
</ul>
<p><strong>简单地说，REST 就是将资源的状态以适合客户端或服务端的形式从服务端转移到客户端（或者反过来）。</strong>在 REST 中，资源<strong>通过 URL 进行识别和定位</strong>，然后通过**行为(即 HTTP 方法)**来定义 REST 来完成怎样的功能。</p>
</li>
<li><p><a href="https://blog.csdn.net/qq_40437152/article/details/83270264">springMVC接收JSON参数详解_白面小生的博客-CSDN博客_springmvc如何接收json数据</a></p>
<p>GET请求想必大家都不陌生，它将参数以url?username&#x3D;”admin”&amp;password&#x3D;123这种方式发送到服务器，并且request.getParameter可以接收到这种参数，我们在浏览器地址栏上也可以看到这一点。而我们Ajax使用的POST，并且发送的是JSON对象，那么后台是如何获取到的呢？答案就在于这个Content-Type x-www-form-urlencoded的编码方式把JSON数据转换成一个字串,(username&#x3D;”admin”&amp;password&#x3D;123)然后把这个字串添加到url后面，用?分割，（是不是和GET方法很像），提交方式为POST时候，浏览器把数据封装到HTTP BODY中，然后发送到服务器。所以并不会显示在URL上。</p>
<p><strong>注意：</strong><br>（1）当Ajax以application&#x2F;x-www-form-urlencoded格式上传即使用JSON对象，后台需要使用@RequestParam 或者Servlet获取。<br>（2） 当Ajax以application&#x2F;json格式上传即使用JSON字符串，后台需要使用@RquestBody获取。</p>
</li>
<li><p>在 ajax 中 contentType 设置为 false 是为了避免 JQuery 对其操作，从而失去分界符，而使服务器不能正常解析文件。</p>
</li>
<li><p>ajax中<strong>processData:</strong> (默认: true) 默认情况下，发送的数据将被转换为对象(技术上讲并非字符串) 以配合默认内容类型 “application&#x2F;x-www-form-urlencoded”。如果要发送 DOM 树信息或其它不希望转换的信息，请设置为 false。</p>
</li>
</ol>
<h3 id="3-后端Controller"><a href="#3-后端Controller" class="headerlink" title="3. 后端Controller"></a>3. 后端Controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(path = &quot;/mgrapi/admin/file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminFileController</span> <span class="keyword">extends</span> <span class="title class_">MgrBaseController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span> LogFactory.getLog(AdminFileController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAdminFileService iAdminFileService;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">   <span class="meta">@ApiOperation(value = &quot;上传图片&quot;, httpMethod = &quot;POST&quot;)</span></span><br><span class="line">   <span class="meta">@RequestMapping(path = &quot;/upload&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">uploadFile</span><span class="params">(<span class="meta">@RequestParam(value = &quot;file&quot;)</span> MultipartFile file, ULFileInfoVo fileInfo)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">LllFileV2</span> <span class="variable">fileinfo</span> <span class="operator">=</span> iAdminFileService.uploadFile(file,fileInfo);</span><br><span class="line">            <span class="keyword">return</span> JsonResult.createSuccess(fileinfo, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">          log.error(<span class="string">&quot;&quot;</span>,ex);</span><br><span class="line">          <span class="keyword">return</span> JsonResult.createFail(ex);</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping(path = &quot;/token&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">fetchToken</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> iAdminFileService.fetchToken();</span><br><span class="line">            <span class="keyword">return</span> JsonResult.createSuccess(token, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            <span class="keyword">return</span> JsonResult.createFail(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;查询文件列表&quot;, notes = &quot;查询文件列表&quot;, httpMethod = &quot;POST&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(path = &quot;/query&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">queryFileList</span><span class="params">(<span class="meta">@RequestParam</span> <span class="type">int</span> pageno, <span class="meta">@RequestParam</span> <span class="type">int</span> pagesize, String id)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SysUser</span> <span class="variable">sysUser</span> <span class="operator">=</span> <span class="built_in">this</span>.getCurrentSysUser();</span><br><span class="line">            ListPageVo&lt;AdminFileVo&gt; list = iAdminFileService.queryFilePage(pageno, pagesize, id, sysUser);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> JsonResult.createSuccess(list, <span class="string">&quot;OK&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            log.error(ex);</span><br><span class="line">            <span class="keyword">return</span> JsonResult.createFail(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h2><p>SSP: self-service platform<br>IDR: 标识解析展现 ID Read<br>API: </p>
<p>FileCenter</p>
<p>工业互联网标识：国家制定的规范 统一的公共数据格式</p>
<p>88.168.100&#x2F;xxxxxxxx<br>标识前缀：中国.鑫兴.<br>    顶级节点.二级节点.企业节点</p>
<p><a href="https://ssp.gdsinsing.com/#/statis/home/user-home">https://ssp.gdsinsing.com/#/statis/home/user-home</a></p>
<p><a href="https://ssp.gdsinsing.com/index.html#/statis/home/user-home">https://ssp.gdsinsing.com/index.html#/statis/home/user-home</a></p>
<p>https默认端口443</p>
<p>http默认端口80</p>
<p>nginx 443 </p>
<p>ssp 8095</p>
<p>#&#x2F;statis&#x2F;home&#x2F;user-home&#x3D;&gt;#&#x2F;statis&#x2F;home&#x2F;user-home.js</p>
<p>require 异步加载</p>
<p><a href="https://ssp.gdsinsing.com/statis/home/user-home.js">https://ssp.gdsinsing.com/statis/home/user-home.js</a></p>
<p><a href="https://ssp.gdsinsing.com/statis/home/user-home.html">https://ssp.gdsinsing.com/statis/home/user-home.html</a></p>
<p>web页面 一般都是短连接</p>
<p>postman<br>form-data :上传文件<br>x-www-form-urlencoded  :普通post 键值对，表单数据<br>raw :数据写在body内 非键值对  RESTful 手机 流行 整个json传过去</p>
<p>authId对应应用白名单，并不对应每个用户</p>
<p>isCont为false则不读文件内容，只读文件路径等信息</p>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>ssp</title>
    <url>/2022/04/24/ssp/</url>
    <content><![CDATA[<h1 id="1-cfgcenter"><a href="#1-cfgcenter" class="headerlink" title="1. cfgcenter"></a>1. cfgcenter</h1><h2 id="1-1-cfg-api"><a href="#1-1-cfg-api" class="headerlink" title="1.1 cfg-api"></a>1.1 cfg-api</h2><p>理论上，给gdsinsing的其它地方直接使用，只需要调用接口，无需重复实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICfgService</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//根据编号查找一个配置</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getCfgString</span><span class="params">(String code)</span> <span class="keyword">throws</span> BusException;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> Integer <span class="title function_">getCfgInteger</span><span class="params">(String code)</span> <span class="keyword">throws</span> BusException;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> Date <span class="title function_">getCfgDate</span><span class="params">(String code)</span> <span class="keyword">throws</span> BusException;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1-2-cfg-provider"><a href="#1-2-cfg-provider" class="headerlink" title="1.2 cfg-provider"></a>1.2 cfg-provider</h2><h3 id="1-2-1-CfgServiceImpl-java"><a href="#1-2-1-CfgServiceImpl-java" class="headerlink" title="1.2.1 CfgServiceImpl.java"></a>1.2.1 CfgServiceImpl.java</h3><p>理论上，provider实现api的接口，用于分布式，其它模块直接调用api即可</p>
<p>目前没用上，还是必须在其它模块的pom里<dependency>provider</dependency></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CfgServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ICfgService</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> IGdssCfgTeConfigService iGdssCfgTeConfigService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getCfgString</span><span class="params">(String code)</span> <span class="keyword">throws</span> BusException &#123;</span><br><span class="line">      <span class="type">GdssCfgTeConfig</span> <span class="variable">value</span> <span class="operator">=</span> iGdssCfgTeConfigService.getEntityByCode(code);</span><br><span class="line">      <span class="keyword">if</span> (value == <span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> value.getCfgValue();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Integer <span class="title function_">getCfgInteger</span><span class="params">(String code)</span> <span class="keyword">throws</span> BusException &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">val</span> <span class="operator">=</span> <span class="built_in">this</span>.getCfgString(code);</span><br><span class="line">      <span class="keyword">return</span> Integer.valueOf(val);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Date <span class="title function_">getCfgDate</span><span class="params">(String code)</span> <span class="keyword">throws</span> BusException &#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">val</span> <span class="operator">=</span> <span class="built_in">this</span>.getCfgString(code);</span><br><span class="line">         <span class="keyword">return</span> DateUtil.string2Date(val);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">         ex.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-2-2-CfgcenterProviderApp"><a href="#1-2-2-CfgcenterProviderApp" class="headerlink" title="1.2.2 CfgcenterProviderApp"></a>1.2.2 CfgcenterProviderApp</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;cn.lll.**.mapper&quot;)</span></span><br><span class="line"><span class="meta">@ServletComponentScan(value = &#123;&quot;cn.lll.cfgcenter&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CfgcenterProviderApp</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span> LogFactory.getLog(CfgcenterProviderApp.class);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(CfgcenterProviderApp.class, args);</span><br><span class="line">      SpringUtil.setApplicationContext(context);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      log.info(<span class="string">&quot;************************************************************* CfgcenterProviderApp 启动完成!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>Spring boot 框架注解</li>
</ol>
<h3 id="1-2-3-TestCfgService-java"><a href="#1-2-3-TestCfgService-java" class="headerlink" title="1.2.3 TestCfgService.java"></a>1.2.3 TestCfgService.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = CfgcenterProviderApp.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCfgService</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span> LogFactory.getLog(TestCfgService.class);</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> ICfgService iCfgService;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Before</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@After</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">end</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetCfgString</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;001&quot;</span>;</span><br><span class="line">         </span><br><span class="line">         <span class="type">String</span> <span class="variable">val</span> <span class="operator">=</span> iCfgService.getCfgString(code);</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">if</span>(val.equals(<span class="string">&quot;测试&quot;</span>))&#123;</span><br><span class="line">            Assert.assertTrue(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         Assert.assertTrue(<span class="literal">false</span>);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(BusException ex)&#123;</span><br><span class="line">         log.error(<span class="string">&quot;&quot;</span>, ex);</span><br><span class="line">         Assert.assertTrue(<span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>Spring boot 框架注解</li>
</ol>
<h2 id="1-3-cfg-dao"><a href="#1-3-cfg-dao" class="headerlink" title="1.3 cfg-dao"></a>1.3 cfg-dao</h2><p>一张数据库表，一个xml，一个mapper，一个model，一个service，一个serviceImpl</p>
<p>​                        </p>
<h3 id="1-3-1-xml-mybatis-GdssCfgTeConfig-xml"><a href="#1-3-1-xml-mybatis-GdssCfgTeConfig-xml" class="headerlink" title="1.3.1 xml    mybatis-GdssCfgTeConfig.xml"></a>1.3.1 xml    mybatis-GdssCfgTeConfig.xml</h3><p>1.主体是个<mapper> </mapper>, namespace指定sql功能对应的mapper接口，每个sql功能和接口中的方法一一对应</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.lll.cfgcenter.mapper.IGdssCfgTeConfigMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>常用的CRUD操作由<insert></insert>,  <select></select>, <update></update>,<delete></delete>定义好以备试用，id和mapper接口中的方法名对应</p>
<p><parameterType> 输入参数类型</p>
<p><resultType> <resultMap> 输出参数类型</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delEntity&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">   DELETE FROM</span><br><span class="line">   <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;TableName&quot;</span> /&gt;</span></span><br><span class="line">   WHERE ID = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.<resultMap></resultMap>指定sql操作的结果集，由type指定路径，将数据库表中的记录ORM映射到model中定义的java bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;GdssCfgTeConfigMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;cn.lll.cfgcenter.model.GdssCfgTeConfig&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;ID&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;CHAR&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;String&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      &lt;result column=&quot;ID&quot; property=&quot;id&quot; jdbcType=&quot;CHAR&quot; javaType=&quot;String&quot; /&gt;--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;CODE&quot;</span> <span class="attr">property</span>=<span class="string">&quot;code&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">javaType</span>=<span class="string">&quot;String&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;CFG_VALUE&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cfgValue&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">javaType</span>=<span class="string">&quot;String&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;REMARK&quot;</span> <span class="attr">property</span>=<span class="string">&quot;remark&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">javaType</span>=<span class="string">&quot;String&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>3.<sql></sql>自定义可重用的sql语句，减少重复工作</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;TableName&quot;</span>&gt;</span>GDSS_CFG_TE_CONFIG<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delEntity&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">   DELETE FROM</span><br><span class="line">   <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;TableName&quot;</span> /&gt;</span></span><br><span class="line">   WHERE ID = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column_List&quot;</span>&gt;</span></span><br><span class="line">   ID,CODE,CFG_VALUE,REMARK</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addEntity&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;cn.lll.cfgcenter.model.GdssCfgTeConfig&quot;</span>&gt;</span></span><br><span class="line">   INSERT INTO</span><br><span class="line">   <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;TableName&quot;</span> /&gt;</span></span><br><span class="line">   (</span><br><span class="line">   <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column_List&quot;</span> /&gt;</span></span><br><span class="line">   )</span><br><span class="line">   VALUES</span><br><span class="line">   (#&#123;id,jdbcType=CHAR&#125;,#&#123;code,jdbcType=VARCHAR&#125;,#&#123;cfgValue,jdbcType=VARCHAR&#125;,#&#123;remark,jdbcType=VARCHAR&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>这个id&#x3D;”condition”的可重用sql语句较长：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;condition&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span>AND ID = #&#123;id&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;code != null&quot;</span>&gt;</span>AND CODE = #&#123;code&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;cfgValue != null&quot;</span>&gt;</span>AND CFG_VALUE = #&#123;cfgValue&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;remark != null&quot;</span>&gt;</span>AND REMARK = #&#123;remark&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id_like != null&quot;</span>&gt;</span>AND ID LIKE &quot;%&quot;#&#123;id_like&#125;&quot;%&quot;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;code_like != null&quot;</span>&gt;</span>AND CODE LIKE &quot;%&quot;#&#123;code_like&#125;&quot;%&quot;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;cfgValue_like != null&quot;</span>&gt;</span>AND CFG_VALUE LIKE &quot;%&quot;#&#123;cfgValue_like&#125;&quot;%&quot;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;remark_like != null&quot;</span>&gt;</span>AND REMARK LIKE &quot;%&quot;#&#123;remark_like&#125;&quot;%&quot;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>但需要使用时可大大减轻工作量：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delEntityByParam&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;cn.lll.cfgcenter.model.GdssCfgTeConfig&quot;</span>&gt;</span></span><br><span class="line">   DELETE FROM</span><br><span class="line">   <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;TableName&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;condition&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li><p>id_like等like没什么用</p>
</li>
<li><p>ID LIKE “%”#{id_like}”%”，左右加百分号，表示左右都可有0-无穷个字符，用于模糊查询</p>
</li>
</ol>
<p>自定义查询, id&#x3D;”vagueCondition”    &#x2F;&#x2F;没什么用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;vagueCondition&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span>AND ID LIKE &quot;%&quot;#&#123;id&#125;&quot;%&quot;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;code != null&quot;</span>&gt;</span>AND CODE LIKE &quot;%&quot;#&#123;code&#125;&quot;%&quot;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;cfgValue != null&quot;</span>&gt;</span>AND CFG_VALUE LIKE &quot;%&quot;#&#123;cfgValue&#125;&quot;%&quot;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;remark != null&quot;</span>&gt;</span>AND REMARK LIKE &quot;%&quot;#&#123;remark&#125;&quot;%&quot;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;vagueCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Integer&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">parameterType</span>=<span class="string">&quot;cn.lll.cfgcenter.model.param.GdssCfgTeConfigParam&quot;</span>&gt;</span></span><br><span class="line">   SELECT COUNT(0) FROM</span><br><span class="line">   <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;TableName&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;vagueCondition&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-3-2-mapper-IGdssCfgTeConfigMapper-java"><a href="#1-3-2-mapper-IGdssCfgTeConfigMapper-java" class="headerlink" title="1.3.2 mapper    IGdssCfgTeConfigMapper.java"></a>1.3.2 mapper    IGdssCfgTeConfigMapper.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IGdssCfgTeConfigMapper</span> <span class="keyword">extends</span> <span class="title class_">ILllBaseMapper</span>&lt;GdssCfgTeConfig&gt; &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">vagueCount</span><span class="params">(GdssCfgTeConfigParam param)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> List&lt;GdssCfgTeConfig&gt; <span class="title function_">vagueSearch</span><span class="params">(GdssCfgTeConfigParam param)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>:根据id数组，批量删除</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> idList</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@exception</span> </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">batchDelete</span><span class="params">(<span class="meta">@Param(&quot;idList&quot;)</span> List&lt;String&gt; idList)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ILllBaseMapper</span>&lt;T&gt; &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addEntity</span><span class="params">(T entity)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delEntity</span><span class="params">(String id)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delEntityByParam</span><span class="params">(T params)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateEntity</span><span class="params">(T entity)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> T <span class="title function_">getEntityById</span><span class="params">(String id)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">   <span class="keyword">public</span> T <span class="title function_">getEntity</span><span class="params">(T params)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> List&lt;T&gt; <span class="title function_">searchEntity</span><span class="params">(T params)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span> <span class="keyword">throws</span> Exception; </span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countByParam</span><span class="params">(T params)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>在Springboot, mybatis中，mapper无需手动写实现类</li>
<li>mapper接口中的方法名需要与xml中的CRUD标签的id保持一致，mybatis才能自动对应上</li>
<li>mapper只用于数据库表ORM映射到model，为mybatis专用，别无他用！</li>
</ol>
<h3 id="1-3-3-model-GdssCfgConfig-java"><a href="#1-3-3-model-GdssCfgConfig-java" class="headerlink" title="1.3.3 model    GdssCfgConfig.java"></a>1.3.3 model    GdssCfgConfig.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">LllBaseModel</span> <span class="keyword">implements</span> <span class="title class_">IAbleJson</span>,Cloneable</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GdssCfgTeConfig</span> <span class="keyword">extends</span> <span class="title class_">LllBaseModel</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String id;</span><br><span class="line">   <span class="keyword">private</span> String code;</span><br><span class="line">   <span class="keyword">private</span> String cfgValue;</span><br><span class="line">   <span class="keyword">private</span> String remark;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> String id_like;</span><br><span class="line">   <span class="keyword">private</span> String code_like;</span><br><span class="line">   <span class="keyword">private</span> String cfgValue_like;</span><br><span class="line">   <span class="keyword">private</span> String remark_like;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.id;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.code;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(String code)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.code = code;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getCfgValue</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.cfgValue;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCfgValue</span><span class="params">(String cfgValue)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.cfgValue = cfgValue;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getRemark</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.remark;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRemark</span><span class="params">(String remark)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.remark = remark;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIdLike</span><span class="params">(String id)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.id_like = id;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCodeLike</span><span class="params">(String code)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.code_like = code;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCfgValueLike</span><span class="params">(String cfgValue)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.cfgValue_like = cfgValue;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRemarkLike</span><span class="params">(String remark)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.remark_like = remark;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getPkidValue</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPkidValue</span><span class="params">(String id)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>model里的java bean中的参数可以包含数据库表中没有的字段， 但数据库表中的每个字段model里的java bean都必须一一对应！</li>
<li>model里的java bean中基本数据类型字段要用包装类，不要用int，用Integer，和mybatis中定义相一致！</li>
</ol>
<h3 id="1-3-4-service-IGdssCfgConfigService-java-GdssCfgTeConfigServiceImpl-java"><a href="#1-3-4-service-IGdssCfgConfigService-java-GdssCfgTeConfigServiceImpl-java" class="headerlink" title="1.3.4 service    IGdssCfgConfigService.java, GdssCfgTeConfigServiceImpl.java"></a>1.3.4 service    IGdssCfgConfigService.java, GdssCfgTeConfigServiceImpl.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ILllDbRedisBaseService</span>&lt;T&gt; &#123;</span><br><span class="line">    T <span class="title function_">addEntity</span><span class="params">(T entity)</span> <span class="keyword">throws</span> BusException;</span><br><span class="line">    <span class="comment">//arg依照业务，可为usrId,account等</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">delEntityById</span><span class="params">(String id, String arg)</span> <span class="keyword">throws</span> BusException;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateEntityById</span><span class="params">(T t, String id, String arg)</span> <span class="keyword">throws</span> BusException;</span><br><span class="line"></span><br><span class="line">    T <span class="title function_">getEntityById</span><span class="params">(String id)</span> <span class="keyword">throws</span> BusException;</span><br><span class="line">    T <span class="title function_">getEntity</span><span class="params">(T params)</span> <span class="keyword">throws</span> BusException;</span><br><span class="line"></span><br><span class="line">    List&lt;T&gt; <span class="title function_">searchEntity</span><span class="params">(<span class="type">int</span> pagesize, <span class="type">int</span> pageno)</span> <span class="keyword">throws</span> BusException;</span><br><span class="line">    List&lt;T&gt; <span class="title function_">searchEntity</span><span class="params">(T params,<span class="type">int</span> pagesize,<span class="type">int</span> pageno)</span> <span class="keyword">throws</span> BusException;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span> <span class="keyword">throws</span> BusException;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">count</span><span class="params">(T params)</span> <span class="keyword">throws</span> BusException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IGdssCfgTeConfigService</span> <span class="keyword">extends</span> <span class="title class_">ILllDbRedisBaseService</span>&lt;GdssCfgTeConfig&gt; &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">vagueCount</span><span class="params">(GdssCfgTeConfigParam param)</span> <span class="keyword">throws</span> BusException;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> List&lt;GdssCfgTeConfig&gt; <span class="title function_">vagueSearch</span><span class="params">(GdssCfgTeConfigParam param, <span class="type">int</span> pagesize, <span class="type">int</span> pageno)</span> <span class="keyword">throws</span> BusException;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> GdssCfgTeConfig <span class="title function_">getEntityByCode</span><span class="params">(String code)</span> <span class="keyword">throws</span> BusException;</span><br><span class="line"></span><br><span class="line">   <span class="type">int</span> <span class="title function_">batchDelete</span><span class="params">(List&lt;String&gt; idList)</span> <span class="keyword">throws</span> BusException;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">reloadAllConfCache</span><span class="params">()</span> <span class="keyword">throws</span> BusException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>MVC 是一种使用 MVC（Model View Controller 模型-视图-控制器）设计创建 Web 应用程序的模式：</p>
<ul>
<li>Model（模型）表示应用程序核心（如数据库）。</li>
<li>View（视图）显示效果（HTML页面）。</li>
<li>Controller（控制器）处理输入（业务逻辑）。</li>
</ul>
<p><strong>Model（模型）</strong>是应用程序中用于处理应用程序数据逻辑的部分。<br> 　通常模型对象负责在数据库中存取数据。</p>
<p><strong>View（视图）</strong>是应用程序中处理数据显示的部分。<br> 　通常视图是依据模型数据创建的。</p>
<p><strong>Controller（控制器）</strong>是应用程序中处理用户交互的部分。<br> 　通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。</p>
<p>注意：</p>
<ol>
<li>虽然本package名为service，但是仍然属于dao层&#x2F;持久层&#x2F;Model层，而不是业务层&#x2F;Controller层！</li>
<li>serviceImpl中@Autowired自动装载了mapper：<code>private IGdssCfgTeConfigMapper iGdssCfgTeConfigMapper;</code></li>
<li>serviceImpl中的方法实现，直接调用mapper接口中的方法，mybatis自动对应到xml中相应的sql语句：例如delEntityById中调用了mapper接口里的delEntity</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delEntityById</span><span class="params">(String id, String code)</span> <span class="keyword">throws</span> BusException &#123;</span><br><span class="line">   <span class="keyword">if</span> (StringUtil.isEmpty(id))&#123;</span><br><span class="line">      log.error(<span class="string">&quot;id can not be empty&quot;</span>);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusException</span>(<span class="string">&quot;DaoService&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> iGdssCfgTeConfigMapper.delEntity(id);</span><br><span class="line">      <span class="keyword">if</span> (rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">         flushCache(<span class="literal">null</span>, id, <span class="literal">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> rows;</span><br><span class="line">   &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">      log.error(<span class="string">&quot;&quot;</span>, ex);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusException</span>(<span class="string">&quot;DaoService&quot;</span>,ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h1 id="2-app-ssp-mgr-module-conf"><a href="#2-app-ssp-mgr-module-conf" class="headerlink" title="2. app-ssp-mgr-module-conf"></a>2. app-ssp-mgr-module-conf</h1><h2 id="2-1-controller"><a href="#2-1-controller" class="headerlink" title="2.1 controller"></a>2.1 controller</h2><p>ConfController调用ConfService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ConfService confService;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-model"><a href="#2-2-model" class="headerlink" title="2.2 model"></a>2.2 model</h2><h2 id="2-3-service"><a href="#2-3-service" class="headerlink" title="2.3 service"></a>2.3 service</h2><p>ConfServiceImpl调用cfg-dao-service里的IGdssCfgTeConfigService:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IGdssCfgTeConfigService iGdssCfgTeConfigService;</span><br></pre></td></tr></table></figure>





<h1 id="3-Spring-boot注解-amp-配置"><a href="#3-Spring-boot注解-amp-配置" class="headerlink" title="3. Spring boot注解&amp;配置"></a>3. Spring boot注解&amp;配置</h1><h2 id="3-1-常用注解"><a href="#3-1-常用注解" class="headerlink" title="3.1 常用注解"></a>3.1 常用注解</h2><h3 id="3-1-1-Configuration"><a href="#3-1-1-Configuration" class="headerlink" title="3.1.1 @Configuration"></a>3.1.1 @Configuration</h3><p>用来标记类可以当做一个bean的定义，被Spring IOC容器使用。</p>
<h3 id="3-1-2-Bean"><a href="#3-1-2-Bean" class="headerlink" title="3.1.2 @Bean"></a>3.1.2 @Bean</h3><p>表示此方法将要返回一个对象，作为一个bean注册进Spring应用上下文。</p>
<h3 id="3-1-3-Component"><a href="#3-1-3-Component" class="headerlink" title="3.1.3 @Component"></a>3.1.3 @Component</h3><p>将 java 类标记为 bean。它是任何 Spring 管理组件的通用构造型。spring 的组件扫描机制现在可以将其拾取并将其拉入应用程序环境中。</p>
<h3 id="3-1-4-Controller"><a href="#3-1-4-Controller" class="headerlink" title="3.1.4 @Controller"></a>3.1.4 @Controller</h3><p>将一个类标记为 Spring Web MVC 控制器。标有它的 Bean 会自动导入到 IoC 容器中。</p>
<h3 id="3-1-5-Service"><a href="#3-1-5-Service" class="headerlink" title="3.1.5 @Service"></a>3.1.5 @Service</h3><p>此注解是组件注解的特化。它不会对 @Component 注解提供任何其他行为。您可以在服务层类中使用 @Service 而不是 @Component，因为它以更好的方式指定了意图。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span>  <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;执行service中的保存逻辑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line">    context.register(SpringConfig.class);</span><br><span class="line">    context.refresh();</span><br><span class="line">    <span class="comment">//获取接口实例</span></span><br><span class="line">    <span class="type">UserService</span> <span class="variable">service</span> <span class="operator">=</span> context.getBean(UserService.class);</span><br><span class="line">    <span class="comment">//创建实例的代理</span></span><br><span class="line">    <span class="type">UserServiceProxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceProxy</span>(service);</span><br><span class="line">    <span class="comment">//执行方法</span></span><br><span class="line">    proxy.saveUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>context.getBean(Interface.class) 自动装配</li>
</ol>
<h3 id="3-1-6-Repository"><a href="#3-1-6-Repository" class="headerlink" title="3.1.6 @Repository"></a>3.1.6 @Repository</h3><p>表示使用注解实例化此类，并交给 Spring 的容器管理。</p>
<p>这个注解是具有类似用途和功能的 @Component 注解的特化。它为 DAO 提供了额外的好处。它将 DAO 导入 IoC 容器，并使未经检查的异常有资格转换为 Spring DataAccessException。</p>
<h3 id="3-1-7-Required"><a href="#3-1-7-Required" class="headerlink" title="3.1.7 @Required"></a>3.1.7 @Required</h3><p>这个注解表明bean的属性必须在配置的时候设置，通过一个bean定义的显式的属性值或通过自动装配，若@Required注解的bean属性未被设置，容器将抛出BeanInitializationException。</p>
<h3 id="3-1-8-Autowired和-Resource"><a href="#3-1-8-Autowired和-Resource" class="headerlink" title="3.1.8 @Autowired和@Resource"></a>3.1.8 @Autowired和@Resource</h3><p>@Autowired默认是按照类型装配注入的，默认情况下它要求依赖对象必须存在（可以设置它required属性为false）。@Autowired 注解提供了更细粒度的控制，包括在何处以及如何完成自动装配。它的用法和@Required一样，修饰 setter方法、构造器、属性或者具有任意名称和&#x2F;或多个参数的PN方法。</p>
<p>注意：</p>
<ol>
<li>@Autowired可用于：构造函数、成员变量、Setter方法</li>
<li>@Autowired和@Resource之间的区别</li>
<li>@Autowired默认是按照类型装配注入的，默认情况下它要求依赖对象必须存在（可以设置它required<br>属性为false）。</li>
<li>@Resource默认是按照名称来装配注入的，只有当找不到与名称匹配的bean才会按照类型来装配注入。</li>
</ol>
<h3 id="3-1-9-Qualifier"><a href="#3-1-9-Qualifier" class="headerlink" title="3.1.9 @Qualifier"></a>3.1.9 @Qualifier</h3><p>当您创建多个相同类型的 bean 并希望仅使用属性装配其中一个 bean 时，您可以使用@Qualifier 注解和 @Autowired 通过指定应该装配哪个确切的 bean 来消除歧义。</p>
<h3 id="3-1-10-RequestMapping"><a href="#3-1-10-RequestMapping" class="headerlink" title="3.1.10 @RequestMapping"></a>3.1.10 @RequestMapping</h3><p>@RequestMapping 注解用于将特定 HTTP 请求方法映射到将处理相应请求的控制器中的特定类&#x2F;方法。<br>此注释可应用于两个级别：</p>
<ol>
<li>类级别：映射请求的 URL</li>
<li>方法级别：映射 URL 以及 HTTP 请求方法</li>
</ol>
<h3 id="3-1-11-RestController"><a href="#3-1-11-RestController" class="headerlink" title="3.1.11 @RestController"></a>3.1.11 @RestController</h3><p>RestController用于传json数据</p>
<p>@RequestParam(value &#x3D; “file”) 指定拿前端的file属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lll.iic.ssp.mgr.<span class="keyword">module</span>.admin.file.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.lll.iic.ssp.mgr.common.ListPageVo;</span><br><span class="line"><span class="keyword">import</span> cn.lll.iic.ssp.mgr.<span class="keyword">module</span>.admin.file.model.AdminFileVo;</span><br><span class="line"><span class="keyword">import</span> cn.lll.iic.ssp.mgr.<span class="keyword">module</span>.login.model.SysUser;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.lll.framework.controller.JsonResult;</span><br><span class="line"><span class="keyword">import</span> cn.lll.iic.file.proxy.modle.LllFileV2;</span><br><span class="line"><span class="keyword">import</span> cn.lll.iic.file.proxy.modle.ULFileInfoVo;</span><br><span class="line"><span class="keyword">import</span> cn.lll.iic.ssp.mgr.common.MgrBaseController;</span><br><span class="line"><span class="keyword">import</span> cn.lll.iic.ssp.mgr.<span class="keyword">module</span>.admin.file.service.IAdminFileService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span>:2020/6/5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@function</span>:文件控制器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(path = &quot;/mgrapi/admin/file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminFileController</span> <span class="keyword">extends</span> <span class="title class_">MgrBaseController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span> LogFactory.getLog(AdminFileController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAdminFileService iAdminFileService;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;上传文件&quot;, httpMethod = &quot;POST&quot;)</span></span><br><span class="line">   <span class="meta">@RequestMapping(path = &quot;/upload&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">uploadFile</span><span class="params">(<span class="meta">@RequestParam(value = &quot;file&quot;)</span> MultipartFile file, ULFileInfoVo fileInfo)</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">LllFileV2</span> <span class="variable">fileinfo</span> <span class="operator">=</span> iAdminFileService.uploadFile(file,fileInfo);</span><br><span class="line">            <span class="keyword">return</span> JsonResult.createSuccess(fileinfo, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">          log.error(<span class="string">&quot;&quot;</span>,ex);</span><br><span class="line">          <span class="keyword">return</span> JsonResult.createFail(ex);</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* @GetMapping(path = &quot;/token&quot;)</span></span><br><span class="line"><span class="comment">    public JsonResult fetchToken()&#123;</span></span><br><span class="line"><span class="comment">        try&#123;</span></span><br><span class="line"><span class="comment">            String token = iAdminFileService.fetchToken();</span></span><br><span class="line"><span class="comment">            return JsonResult.createSuccess(token, &quot;&quot;);</span></span><br><span class="line"><span class="comment">        &#125;catch (Exception ex)&#123;</span></span><br><span class="line"><span class="comment">            return JsonResult.createFail(ex);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;查询文件列表&quot;, notes = &quot;查询文件列表&quot;, httpMethod = &quot;POST&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(path = &quot;/query&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">queryFileList</span><span class="params">(<span class="meta">@RequestParam</span> <span class="type">int</span> pageno, <span class="meta">@RequestParam</span> <span class="type">int</span> pagesize, String id)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SysUser</span> <span class="variable">sysUser</span> <span class="operator">=</span> <span class="built_in">this</span>.getCurrentSysUser();</span><br><span class="line">            ListPageVo&lt;AdminFileVo&gt; list = iAdminFileService.queryFilePage(pageno, pagesize, id, sysUser);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> JsonResult.createSuccess(list, <span class="string">&quot;OK&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            log.error(ex);</span><br><span class="line">            <span class="keyword">return</span> JsonResult.createFail(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;获取文件详情&quot;, httpMethod = &quot;GET&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(path = &quot;/query/detail&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">queryFileDetailById</span><span class="params">(<span class="meta">@RequestParam</span> String id)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">AdminFileVo</span> <span class="variable">vo</span> <span class="operator">=</span> iAdminFileService.queryFileDetail(id);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> JsonResult.createSuccess(vo, <span class="string">&quot;获取成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;get file detail msg error&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> JsonResult.createFail(<span class="string">&quot;公共服务平台未知异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;通过文件id删除文件&quot;, httpMethod = &quot;POST&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(path = &quot;/delete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">deleteFileById</span><span class="params">(<span class="meta">@RequestParam</span> String ids)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            iAdminFileService.deleteFileByFileId(ids);</span><br><span class="line">            <span class="keyword">return</span> JsonResult.createSuccess(<span class="string">&quot;&quot;</span>, <span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;delete file error&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> JsonResult.createFail(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-2-启动类注解-SpringBootApplication"><a href="#3-2-启动类注解-SpringBootApplication" class="headerlink" title="3.2 启动类注解@SpringBootApplication"></a>3.2 启动类注解@SpringBootApplication</h2><h3 id="3-2-1-SpringBootConfiguration"><a href="#3-2-1-SpringBootConfiguration" class="headerlink" title="3.2.1 @SpringBootConfiguration"></a>3.2.1 @SpringBootConfiguration</h3><p>组合了 @Configuration 注解，实现配置文件的功能。</p>
<h3 id="3-2-2-EnableAutoConfiguration"><a href="#3-2-2-EnableAutoConfiguration" class="headerlink" title="3.2.2 @EnableAutoConfiguration"></a>3.2.2 @EnableAutoConfiguration</h3><p>打开自动配置的功能，也可以关闭某个自动配置的选项，如关闭数据源自动配置功能： </p>
<p>@SpringBootApplication(exclude&#x3D; { DataSourceAutoConfiguration.class })</p>
<h3 id="3-2-3-EnableTransactionManagement"><a href="#3-2-3-EnableTransactionManagement" class="headerlink" title="3.2.3 @EnableTransactionManagement"></a>3.2.3 @EnableTransactionManagement</h3><p>事务处理</p>
<p>proxyTargetClass设置为true表示使用基于子类实现的代理(<code>CGLIB</code>)</p>
<h3 id="3-2-4-ComponentScan"><a href="#3-2-4-ComponentScan" class="headerlink" title="3.2.4 @ComponentScan*"></a>3.2.4 @ComponentScan*</h3><p>Spring组件扫描。</p>
<p>例如：</p>
<ol>
<li>@MapperScan(“cn.lll.**.mapper”)</li>
<li>@ServletComponentScan(value &#x3D; {“cn.lll.iic”})</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.lll.framework.util.SpringUtil;</span><br><span class="line"><span class="keyword">import</span> cn.lll.iic.compile.handler.HandlerFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationArguments;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.ApplicationContextEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;cn.lll.**.mapper&quot;)</span></span><br><span class="line"><span class="meta">@ServletComponentScan(value = &#123;&quot;cn.lll.iic&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement(proxyTargetClass = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IICAppSspApp</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span>, ApplicationListener&lt;ApplicationContextEvent&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span> LogFactory.getLog(IICAppSspApp.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//修复logback bug</span></span><br><span class="line">        HandlerFactory.getLogbackHandler().execute( IICAppSspApp.class.getClassLoader() );</span><br><span class="line"></span><br><span class="line">        SpringApplication.run(IICAppSspApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;************************************************************* IICAppSspApp 启动完成!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationContextEvent event)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> event.getApplicationContext();</span><br><span class="line">        SpringUtil.setApplicationContext(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-3-yml配置"><a href="#3-3-yml配置" class="headerlink" title="3.3 yml配置"></a>3.3 yml配置</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8095</span></span><br><span class="line">    <span class="attr">compression:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">mime-types:</span> <span class="string">text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json,application/xml</span></span><br><span class="line">    <span class="attr">session:</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="number">1800</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">http:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">maxFileSize:</span> <span class="string">20MB</span></span><br><span class="line">      <span class="attr">maxRequestSize:</span> <span class="string">20MB</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.html</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">    <span class="comment"># config-location: classpath:mybatis-config.xml</span></span><br><span class="line">    <span class="attr">mapper-locations:</span> <span class="string">classpath*:**/mybatis-*.xml</span></span><br><span class="line">  <span class="comment">#type-aliases-package: cn.lll.tsp.model</span></span><br><span class="line">    <span class="attr">configuration:</span></span><br><span class="line">      <span class="attr">cache-enabled:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">use-actual-param-name:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#标识业务统计</span></span><br><span class="line"><span class="attr">stat:</span></span><br><span class="line">  <span class="attr">redis-ip:</span> <span class="number">114.67</span><span class="number">.117</span><span class="number">.77</span></span><br><span class="line">  <span class="attr">redis-pwd:</span> <span class="string">y0aoQ67K62pHrPjp</span></span><br><span class="line">  <span class="attr">redis-key:</span> <span class="string">IIC_STAT_SSP</span></span><br></pre></td></tr></table></figure>





<h1 id="4-AOP"><a href="#4-AOP" class="headerlink" title="4. AOP"></a>4. AOP</h1><p>动态代理实现：相比静态代理，同样需要target类实现接口，但无需手动定义proxy类实现同样的接口，而是定义动态代理器implements InvocationHandler</p>
<ol>
<li>动态处理器</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DynamicProxy</span><span class="params">(<span class="keyword">final</span> Object object)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.object = object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                  System.out.println(<span class="string">&quot;执行前逻辑&quot;</span>);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(object, args);</span><br><span class="line">                  System.out.println(<span class="string">&quot;执行后逻辑&quot;</span>);</span><br><span class="line">                   <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>测试类代码</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line">        context.register(SpringConfig.class);</span><br><span class="line">        context.refresh();</span><br><span class="line">        <span class="comment">//获取接口实例</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">service</span> <span class="operator">=</span> context.getBean(UserService.class);</span><br><span class="line">        <span class="comment">//动态创建实例的代理</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">proxy</span> <span class="operator">=</span> (UserService)Proxy.newProxyInstance(UserService.class.getClassLoader(),</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;UserService.class&#125;, <span class="keyword">new</span> <span class="title class_">DynamicProxy</span>(service));</span><br><span class="line">        <span class="comment">//proxy执行方法</span></span><br><span class="line">        proxy.saveUser();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Proxy.newProxyInstance()的参数：</p>
<ul>
<li><strong>ClassLoader loader</strong>: 指定当前目标对象使用的类加载器，获取加载器的方法是固定的</li>
<li><strong>Class&lt;?&gt;[] interfaces</strong>: 指定目标对象实现的接口的类型，使用泛型方式确认类型</li>
<li><strong>InvocationHandler</strong>: 指定动态处理器，执行目标对象的方法时，会触发事件处理器的方法</li>
</ul>
<h1 id="5-IOC"><a href="#5-IOC" class="headerlink" title="5. IOC"></a>5. IOC</h1><h1 id="6-user-list-从html到mysql"><a href="#6-user-list-从html到mysql" class="headerlink" title="6. user-list 从html到mysql"></a>6. user-list 从html到mysql</h1><h2 id="6-1-router-cfg-js"><a href="#6-1-router-cfg-js" class="headerlink" title="6.1 router-cfg.js"></a>6.1 router-cfg.js</h2><p>vue.js 配置文件</p>
<p>第一部分：path与jsFile对应，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">path</span>:<span class="string">&quot;/user/user/user-list&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/user/user/user-list.js&quot;</span>&#125;,</span><br></pre></td></tr></table></figure>

<p>第二部分：组件的alias与component中的js对应，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;iic-table&quot;</span>: <span class="string">&quot;/components/iic-table/iic-table.js&quot;</span>,</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">RouterCfg</span> = [</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/home/home.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/home&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/home/home.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/update-pwd&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/home/update-pwd.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/account&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/home/account.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/account/manage-company-list&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/home/manage-company-list.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/usermod/type/usermod-type-list&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/usermod/type/usermod-type-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/usermod/type/usermod-type-add/:parentId&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/usermod/type/usermod-type-add.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/usermod/type/usermod-type-edit/:id&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/usermod/type/usermod-type-edit.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/usermod/datamod/usermod-datamod-list&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/usermod/datamod/usermod-datamod-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/usermod/datamod/usermod-datamod-add&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/usermod/datamod/usermod-datamod-add.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/usermod/datamod/usermod-datamod-edit/:id&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/usermod/datamod/usermod-datamod-edit.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/usermod/datamod/usermod-datamod-info/:id&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/usermod/datamod/usermod-datamod-info.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/han/detail&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/han/handle-detail/han-handle-detail.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/han/encrypt/detail&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/han/encrypt-handle/encrypt-handle-detail.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/han/middleware/detail&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/han/middleware-handle/middleware-handle-detail.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/han/user-handle&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/han/user-handle/han-user-handle.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/han/admin/user-handle/:account&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/han/user-handle/han-user-handle-admin.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/han/edit&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/han/handle-edit/handle-edit.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/han/create&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/han/handle-create/handle-create.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/han/admin/create/:prefix&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/han/handle-create/handle-create-admin.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/han/admin/create&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/han/handle-create/handle-create-admin.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/bus/han-create-bus&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/bus/han-create-bus.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/bus/han-delete-bus&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/bus/han-delete-bus.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/bus/han-edit-bus&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/bus/han-edit-bus.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/bus/han-detail-bus/:hanId&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/bus/han-detail-bus.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/bus/han-batch-create-process&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/bus/admin-batch-create-bus.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/bus/han-batch-create/list&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/bus/han-create-batch-bus.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/bus/han-batch-create/detail/:busId&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/bus/han-create-batch-detail.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/bus/han&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/bus/han-bus.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/bus/han-error-bus&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/bus/han-error-bus.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/middleware/middleware-add&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/middleware/middleware-add.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/middleware/middleware-list&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/middleware/middleware-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/middleware/middleware-detail/:id&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/middleware/middleware-detail.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/middleware/bus-type-list&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/middleware/handle-bus-type-list.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/api/usystem/usystem-add&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/api/usystem/usystem-add.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/api/usystem/usystem-list&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/api/usystem/usystem-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/api/usystem/usystem-info/:id&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/api/usystem/usystem-info.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/api/usystem/usystem-edit/:id&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/api/usystem/usystem-edit.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/api/system-api/system-api-add&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/api/system-api/system-api-add.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/api/system-api/system-api-edit/:id&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/api/system-api/system-api-edit.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/api/system-api/system-api-list&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/api/system-api/system-api-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/api/system-api/system-api-info/:id&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/api/system-api/system-api-info.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/api/system-api/:apiId/api-method-list&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/api/api-method/api-method-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/api/system-api/:apiId/api-method-add&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/api/api-method/api-method-add.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/api/system-api/:apiId/api-method-edit/:id&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/api/api-method/api-method-edit.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/api/system-api/:apiId/api-method-info/:id&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/api/api-method/api-method-info.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/file/upload&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/file/file-upload.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/file/mine&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/file/file-mine.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/file/detail/:fileId&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/file/file-detail.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/conf/manage&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/conf/conf-manage.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/conf/record&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/conf/conf-record.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/conf/record/detail/:id&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/conf/conf-record-detail.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/conf/add&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/conf/conf-add.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/conf/edit/:confId&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/conf/conf-edit.js&quot;</span>&#125;,</span><br><span class="line">    <span class="comment">//废弃开始 2021.3.31</span></span><br><span class="line">    <span class="comment">// &#123;path: &quot;/assit/sdk/home/&quot;, jsFile: &quot;/pages/assist/sdk-home.js&quot;&#125;,</span></span><br><span class="line">    <span class="comment">// &#123;path: &quot;/assit/sdk/download/&quot;, jsFile: &quot;/pages/assist/sdk-download.js&quot;&#125;,</span></span><br><span class="line">    <span class="comment">// &#123;path: &quot;/assit/demo/download/&quot;, jsFile: &quot;/pages/assist/demo-download.js&quot;&#125;,</span></span><br><span class="line">    <span class="comment">//废弃结束</span></span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/user/sdk-config/record&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/sdk/sdk-user-config.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/user/sdk-config/detail/:recordId&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/sdk/sdk-user-config-detail.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/user/sdk/renew-record&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/sdk/sdk-renew-record.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/admin/sdk/edit/:sdkId&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/sdk/sdk-edit.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/admin/sdk/detail/:sdkId&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/sdk/sdk-detail.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/admin/sdk/manage&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/sdk/sdk-manage.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#123;path: &quot;/assit/sdk-demo/download/&quot;, jsFile: &quot;/pages/assist/sdk-download.js&quot;&#125;,</span></span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/admin/middleware/manage&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/middlewareadmin/middleware-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/admin/middleware/detail&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/middlewareadmin/middleware-detail.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/admin/user-system/manage&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/apiadmin/user-system/usystem-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/admin/user-system/detail/:id&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/apiadmin/user-system/usystem-detail.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/admin/system-api/list&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/apiadmin/system-api/sapi-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/admin/http-api/list&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/apiadmin/system-api/hapi-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/admin/system-api/manage&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/apiadmin/system-api/sapi-manage.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/admin/system-api/detail/:id&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/apiadmin/system-api/sapi-detail.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/admin/http-api/detail/:id&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/apiadmin/system-api/hapi-detail.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/admin/api-method/list&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/apiadmin/api-method/method-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/admin/system-api/:apiId/api-method-info/:id&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/apiadmin/api-method/method-detail.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/admin/log/login-log/list&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/logcenter/login-log-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/admin/audit/user-action/list&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/auditcenter/user-action-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/log/login-log/list&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/log/login-log-list.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/audit/apply-list&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/audit/apply-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/audit/apply-detail/:id&#x27;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/audit/apply-detail.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/audit/apply-edit/:id&#x27;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/audit/apply-edit.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/audit/audited-list&#x27;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/audit/audited-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/audit/audited-record-detail/:id&#x27;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/audit/audited-record-detail.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/admin/file/mine&#x27;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/filecenter/file-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/admin/file/upload&#x27;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/filecenter/file-upload.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/admin/file/detail/:fileId&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/filecenter/file-detail.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/admin/auth/menu/menu-list&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/auth/menu/menu-list.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/han/handle-data-type/handle-data-type-list&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/han/handle-data-type/handle-data-type-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/han/handle-extrainfo/handle-extrainfo-edit&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/han/handle-extrainfo/handle-extrainfo-edit.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/user/user/user-list&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/user/user/user-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/user/user/user-add&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/user/user/user-add.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/user/user/user-edit/:id&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/user/user/user-edit.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/user/user/user-info/:id&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/user/user/user-info.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/user/user/user-role/:id&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/user/user/user-role.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/user/user/bind-company/:id&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/user/user/user-bind-company.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/user/user/user-prefix&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/user/user/user-prefix.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/user/company/company-list&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/user/company/company-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/user/company/company-add&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/user/company/company-add.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/user/company/company-edit/:id&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/user/company/company-edit.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/user/company/company-info/:id&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/user/company/company-info.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/user/company/bind-user/:id&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/user/company/company-bind-user.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/goods/goods/goods-list&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/goods/goods/goods-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/goods/goods/goods-detail/:id&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/goods/goods/goods-detail.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/goods/singlegoods/singlegoods-list&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/goods/singlegoods/singlegoods-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/goods/singlegoods/singlegoods-add&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/goods/singlegoods/singlegoods-add.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/goods/singlegoods/singlegoods-edit/:id&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/goods/singlegoods/singlegoods-edit.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/goods/singlegoods/singlegoods-detail/:id&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/goods/singlegoods/singlegoods-detail.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/goods/saleorder/saleorder-list&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/goods/saleorder/saleorder-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/goods/pay/pay-list&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/goods/pay/pay-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;/goods/pay/pay-saleorder/:id&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/goods/pay/pay-saleorder.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/goods/recharge/recharge-list&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/goods/recharge/recharge-list.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/usermod/viewmod/system-viewmode-list&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/usermod/viewmod/system-viewmode-list.js&quot;</span>&#125;,</span><br><span class="line">    <span class="comment">// &#123;path:&quot;/usermod/viewmod/viewmode-create&quot;, jsFile:&quot;/pages/usermod/viewmod/viewmode-create.js&quot;&#125;,</span></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/usermod/viewmod/viewmode-edit/:id&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/usermod/viewmod/viewmode-edit.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/usermod/viewmod/viewmode-info/:id&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/usermod/viewmod/viewmode-info.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/usermod/viewmod/:vmId/viewmode-datacfg-list&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/usermod/viewmod/viewmode-datacfg-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/usermod/viewmod/:vmId/viewmode-datacfg-create&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/usermod/viewmod/viewmode-datacfg-create.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/usermod/viewmod/:vmId/viewmode-datacfg-info/:id&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/usermod/viewmod/viewmode-datacfg-info.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/usermod/viewmod/:vmId/viewmode-datacfg-edit/:id&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/usermod/viewmod/viewmode-datacfg-edit.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/usermod/viewmod/:vmId/viewmode-pageinfo-list&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/usermod/viewmod/viewmode-pageinfo-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/usermod/viewmod/:vmId/viewmode-pageinfo-add&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/usermod/viewmod/viewmode-pageinfo-add.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/usermod/viewmod/:vmId/viewmode-pageinfo-edit/:id&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/usermod/viewmod/viewmode-pageinfo-edit.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/usermod/viewmod/system-staticfile-list&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/usermod/staticfile/system-staticfile-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/usermod/staticfile/staticfile-create&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/usermod/staticfile/staticfile-create.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/usermod/staticfile/staticfile-info/:id&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/usermod/staticfile/staticfile-info.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/usermod/staticfile/staticfile-edit/:id&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/usermod/staticfile/staticfile-edit.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/usermod/viewmod/user/viewmod-market&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/usermod/viewmod-user/viewmod-market.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/admin/auth/menu/menu-list&quot;</span>, <span class="attr">jsFile</span>:<span class="string">&quot;/pages/auth/menu/menu-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/admin/auth/role/role-list&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/auth/role/role-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/admin/auth/url/url-list&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/auth/url/url-list.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/admin/auth/api/api-list&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/auth/api/api-list.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/statis/home/admin-home&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/statis/home/admin-home.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/statis/home/user-home&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/statis/home/user-home.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/statis/admin/user-statis&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/statis/admin/user-statis.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/statis/user/order-statis&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/statis/user/order-statis.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/statis/user/body-statis&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/statis/user/body-statis.js&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/statis/user/msg-statis&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/statis/user/msg-statis.js&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/statis/user/other-statis&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/statis/user/other-statis.js&quot;</span>&#125;,</span><br><span class="line">    </span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">&quot;/error/403&quot;</span>, <span class="attr">jsFile</span>: <span class="string">&quot;/pages/error/403.js&quot;</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">//组件cfg</span></span><br><span class="line">seajs.<span class="title function_">config</span>(&#123;</span><br><span class="line">    <span class="attr">alias</span>:&#123;</span><br><span class="line">        <span class="string">&quot;iic-checkbox&quot;</span>: <span class="string">&quot;/components/iic-checkbox/iic-checkbox.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-radio&quot;</span>: <span class="string">&quot;/components/iic-radio/iic-radio.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-datamod-html&quot;</span>: <span class="string">&quot;/components/iic-datamod-mgr/type/iic-datamod-html.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-datamod-image&quot;</span>: <span class="string">&quot;/components/iic-datamod-mgr/type/iic-datamod-image.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-datamod-imagebig&quot;</span>: <span class="string">&quot;/components/iic-datamod-mgr/type/iic-datamod-imagebig.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-datamod-text&quot;</span>: <span class="string">&quot;/components/iic-datamod-mgr/type/iic-datamod-text.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-datamod-url&quot;</span>: <span class="string">&quot;/components/iic-datamod-mgr/type/iic-datamod-url.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-datamod-video&quot;</span>: <span class="string">&quot;/components/iic-datamod-mgr/type/iic-datamod-video.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-datamod-mgr&quot;</span>: <span class="string">&quot;/components/iic-datamod-mgr/type/iic-datamod-mgr.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-relateinfo-edit&quot;</span>: <span class="string">&quot;/components/iic-relateinfo-edit/iic-relateinfo-edit.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ri-index-select&quot;</span>: <span class="string">&quot;/components/iic-relateinfo-edit/el/ri-index-select.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ri-type-select&quot;</span>: <span class="string">&quot;/components/iic-relateinfo-edit/el/ri-type-select.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ri-row-btn&quot;</span>: <span class="string">&quot;/components/iic-relateinfo-edit/el/ri-row-btn.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ri-dm-win&quot;</span>: <span class="string">&quot;/components/iic-relateinfo-edit/el/ri-dm-win.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dmr-index&quot;</span>: <span class="string">&quot;/components/iic-datamod-mgr/dmr-index/dmr-index.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-dm-detail-win&quot;</span>: <span class="string">&quot;/components/iic-datamod-mgr/type/iic-dm-detail-win.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-relateinfo-type&quot;</span>: <span class="string">&quot;/components/iic-datamod-mgr/type/iic-relateinfo-type.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-file-upload&quot;</span>: <span class="string">&quot;/components/iic-file-upload/iic-file-upload.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-img-upload&quot;</span>: <span class="string">&quot;/components/iic-img-upload/iic-img-upload.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-input-date&quot;</span>: <span class="string">&quot;/components/iic-input-date/iic-input-date.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-input-datetime&quot;</span>: <span class="string">&quot;/components/iic-input-datetime/iic-input-datetime.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-input-email&quot;</span>: <span class="string">&quot;/components/iic-input-email/iic-input-email.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-input-int&quot;</span>: <span class="string">&quot;/components/iic-input-int/iic-input-int.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-input-number&quot;</span>: <span class="string">&quot;/components/iic-input-number/iic-input-number.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-input-mobile&quot;</span>: <span class="string">&quot;/components/iic-input-mobile/iic-input-mobile.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-input-text&quot;</span>: <span class="string">&quot;/components/iic-input-text/iic-input-text.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-input-code&quot;</span>: <span class="string">&quot;/components/iic-input-code/iic-input-code.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-input-search&quot;</span>: <span class="string">&quot;/components/iic-input-search/iic-input-search.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-page-split&quot;</span>: <span class="string">&quot;/components/iic-page-split/iic-page-split.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-select&quot;</span>: <span class="string">&quot;/components/iic-select/iic-select.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-select-input&quot;</span>: <span class="string">&quot;/components/iic-select-input/iic-select-input.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-select-tree&quot;</span>: <span class="string">&quot;/components/iic-select-tree/iic-select-tree.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-select-area&quot;</span>: <span class="string">&quot;/components/iic-select-area/iic-select-area.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-user-dmtype-tree&quot;</span>: <span class="string">&quot;/components/iic-user-dmtype-tree/iic-user-dmtype-tree.js&quot;</span>,</span><br><span class="line">        <span class="comment">//使用此组件需要引入 iic-vmod-list</span></span><br><span class="line">        <span class="string">&quot;iic-vmod-select&quot;</span>: <span class="string">&quot;/components/iic-vmod-select/iic-vmod-select.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-panel-top&quot;</span>: <span class="string">&quot;/components/iic-panel-top/iic-panel-top.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-table&quot;</span>: <span class="string">&quot;/components/iic-table/iic-table.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-tabs&quot;</span>: <span class="string">&quot;/components/iic-tabs/iic-tabs.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-tool-bars&quot;</span>: <span class="string">&quot;/components/iic-tool-bars/iic-tool-bars.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-form&quot;</span>: <span class="string">&quot;/components/iic-form/iic-form.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-input-select&quot;</span>: <span class="string">&quot;/components/iic-select/iic-input-select.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-input-html&quot;</span>: <span class="string">&quot;/components/iic-input-html/iic-input-html.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-input-textarea&quot;</span>: <span class="string">&quot;/components/iic-textarea/iic-input-textarea.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-readonly&quot;</span>: <span class="string">&quot;/components/iic-readonly/iic-readonly.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-input-file&quot;</span>: <span class="string">&quot;/components/iic-input-file/iic-input-file.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-apimethod-tree&quot;</span>: <span class="string">&quot;/components/iic-apimethod-tree/iic-apimethod-tree.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-apimethod-header&quot;</span>: <span class="string">&quot;/components/iic-apimethod-header/iic-apimethod-header.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-page-menu&quot;</span>: <span class="string">&quot;/components/iic-page-menu/iic-page-menu.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-other&quot;</span>: <span class="string">&quot;/components/iic-other/iic-other.js&quot;</span>,<span class="comment">//无法归类的杂组件</span></span><br><span class="line">        <span class="string">&quot;iic-file&quot;</span>: <span class="string">&quot;/components/iic-file/iic-file.js&quot;</span>,<span class="comment">//文件相关的杂组件</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;iic-handle-detail-item&quot;</span>: <span class="string">&quot;/components/iic-handle-detail-item/iic-handle-detail-item.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-datamodel-select&quot;</span>: <span class="string">&quot;/components/iic-datamodel-select/iic-datamodel-select.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-viewmodel-select&quot;</span>: <span class="string">&quot;/components/iic-viewmodel-select/iic-viewmodel-select.js&quot;</span>,</span><br><span class="line">        <span class="comment">//此组件需要require(&#x27;iic-select-tree&#x27;); require(&#x27;iic-vmod-type-select&#x27;); require(&#x27;iic-table&#x27;);</span></span><br><span class="line">        <span class="string">&quot;iic-vmod-list&quot;</span>: <span class="string">&quot;/components/iic-vmod-list/iic-vmod-list.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-vmod-type-select&quot;</span>: <span class="string">&quot;/components/iic-vmod-type-select/iic-vmod-type-select.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-input-handle&quot;</span>: <span class="string">&quot;/components/iic-input-handle/iic-input-handle.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-admin-input-handle&quot;</span>: <span class="string">&quot;/components/iic-input-handle/iic-admin-input-handle.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iic-select-checktree&quot;</span>: <span class="string">&quot;/components/iic-select-checktree/iic-select-checktree.js&quot;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;statis-base&quot;</span>: <span class="string">&quot;/pages/statis/statis-base.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sha256&quot;</span>: <span class="string">&quot;/assets/js/common/sha256.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;math&quot;</span>: <span class="string">&quot;/assets/libs/math/math.min.js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>





<h2 id="6-2-user-list-html"><a href="#6-2-user-list-html" class="headerlink" title="6.2 user-list.html"></a>6.2 user-list.html</h2><p>只展示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- start page title --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-12&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-title-box d-flex align-items-center justify-content-between&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;mb-0 font-size-18&quot;</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-title-right&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">&quot;breadcrumb m-0&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;breadcrumb-item&quot;</span>&gt;</span>用户中心<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;breadcrumb-item active&quot;</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- end page title --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-12&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 工具栏 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-toolbar&quot;</span> <span class="attr">role</span>=<span class="string">&quot;toolbar&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;go(&#x27;/user/user/user-add&#x27;)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary waves-effect waves-light btn-sm&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-plus&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                                        新增</span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;edit(&#x27;/user/user/user-edit/&#123;id&#125;&#x27;)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary waves-effect waves-light btn-sm&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-edit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                                        编辑</span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;del()&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary waves-effect waves-light btn-sm&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-trash-alt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                                        删除</span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;refresh()&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary waves-effect waves-light btn-sm&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-recycle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                                        刷新</span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onClickCacheAllBus&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary waves-effect waves-light btn-sm&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-recycle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>刷新所有业务</span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;cacheAdmBus&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary waves-effect waves-light btn-sm&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-recycle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>刷新admin业务</span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span> <span class="attr">style</span>=<span class="string">&quot;float: right;&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-control form-control-sm&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyword&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入用户账户&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;queryByAcct()&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary waves-effect waves-light btn-sm&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 40px;&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-search&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                                &lt;a href=&quot;javascript:void(0)&quot; class=&quot;btn btn-primary waves-effect waves-light btn-sm&quot; style=&quot;width: 100px; border-left-color:#ced4da;&quot;&gt;</span></span><br><span class="line"><span class="comment">                                    高级查询</span></span><br><span class="line"><span class="comment">                                &lt;/a&gt;</span></span><br><span class="line"><span class="comment">                                --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;table-responsive mt-3&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table mb-0 table-striped&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>  <span class="attr">style</span>=<span class="string">&quot;width: 50px;&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;custom-control custom-checkbox&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;custom-control-input&quot;</span> <span class="attr">:checked</span>=<span class="string">&quot;selectAll&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;custom-control-label&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onSelectAll()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">th</span>&gt;</span>账号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">th</span>&gt;</span>昵称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">th</span>&gt;</span>账号状态<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">th</span>&gt;</span>接入状态<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">th</span>&gt;</span>接入语言<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">th</span>&gt;</span>角色权限<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">th</span>&gt;</span>注册时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">&quot;240&quot;</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                               <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;obj in datas&quot;</span>&gt;</span></span><br><span class="line">                                   <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                                       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;custom-control custom-checkbox&quot;</span>&gt;</span></span><br><span class="line">                                           <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;custom-control-input&quot;</span> <span class="attr">:checked</span>=<span class="string">&quot;obj.selected&quot;</span> &gt;</span></span><br><span class="line">                                           <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;custom-control-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;customCheck1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onSelectOne(obj)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                   <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                   <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;obj.userName&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                   <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;obj.nickname&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                   <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                                      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;obj.status==1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;mdi mdi-checkbox-blank-circle text-success mr-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 有效<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                                      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;obj.status==-1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;mdi mdi-checkbox-blank-circle text-danger mr-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 无效<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                                   <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;obj.accessStatus==1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;mdi mdi-checkbox-blank-circle text-success mr-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>已接入<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;mdi mdi-checkbox-blank-circle text-danger mr-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>未接入<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;obj.language&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;obj.roleNames | ls-string&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                                   <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;obj.createTime&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                   &lt;td&gt;--&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">iic-table-buttons</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">iic-table-button</span> <span class="attr">label</span>=<span class="string">&quot;查看&quot;</span> <span class="attr">cls</span>=<span class="string">&quot;btn btn-outline-info btn-sm&quot;</span> @<span class="attr">click.native</span>=<span class="string">&quot;onClickView(obj,&#x27;/user/user/user-info/&#x27;+obj.id)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iic-table-button</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">iic-table-button</span> <span class="attr">label</span>=<span class="string">&quot;编辑&quot;</span> <span class="attr">cls</span>=<span class="string">&quot;btn btn-outline-success btn-sm&quot;</span> @<span class="attr">click.native</span>=<span class="string">&quot;onClickEdit(obj,&#x27;/user/user/user-edit/&#x27;+obj.id)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iic-table-button</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">iic-table-button-more</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">iic-table-button-more-item</span> <span class="attr">label</span>=<span class="string">&quot;分配权限&quot;</span> @<span class="attr">click.native</span>=<span class="string">&quot;onClickView(obj,&#x27;/user/user/user-role/&#x27;+obj.id)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iic-table-button-more-item</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">iic-table-button-more-item</span> <span class="attr">label</span>=<span class="string">&quot;关联企业&quot;</span> @<span class="attr">click.native</span>=<span class="string">&quot;onClickView(obj,&#x27;/user/user/bind-company/&#x27;+obj.id)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iic-table-button-more-item</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">iic-table-button-more-item</span> <span class="attr">label</span>=<span class="string">&quot;删除&quot;</span> @<span class="attr">click.native</span>=<span class="string">&quot;onClickDel(obj,&#x27;/mgrapi/user/del&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iic-table-button-more-item</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">iic-table-button-more-item</span> <span class="attr">label</span>=<span class="string">&quot;刷新业务缓存&quot;</span> @<span class="attr">click.native</span>=<span class="string">&quot;onClickCacheBus(obj)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iic-table-button-more-item</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;/<span class="name">iic-table-button-more</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">iic-table-buttons</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                      &lt;button type=&quot;button&quot; @click=&quot;go(&#x27;/user/user/user-info/&#123;id&#125;&#x27;,obj.id)&quot; class=&quot;btn btn-outline-info btn-sm&quot;&gt;查看&lt;/button&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                      &lt;button type=&quot;button&quot; @click=&quot;go(&#x27;/user/user/user-edit/&#123;id&#125;&#x27;,obj.id)&quot; class=&quot;btn btn-outline-success btn-sm&quot;&gt;编辑&lt;/button&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                      &lt;button type=&quot;button&quot; @click=&quot;go(&#x27;/user/user/user-role/&#123;id&#125;&#x27;,obj.id)&quot; class=&quot;btn btn-outline-info btn-sm&quot;&gt;分配权限&lt;/button&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                        &lt;button type=&quot;button&quot; @click=&quot;go(&#x27;/user/user/bind-company/&#123;id&#125;&#x27;,obj.id)&quot; class=&quot;btn btn-outline-success btn-sm&quot;&gt;关联企业&lt;/button&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                        &lt;button type=&quot;button&quot; @click=&quot;del(obj.id)&quot; class=&quot;btn btn-outline-danger btn-sm&quot;&gt;删除&lt;/button&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                   &lt;/td&gt;--&gt;</span></span><br><span class="line">                               <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--分页--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">iic-table-page-split</span> <span class="attr">:totalRows</span>=<span class="string">&quot;pageInfo.recordTotal&quot;</span> <span class="attr">:pageSize</span>=<span class="string">&quot;pageInfo.pagesize&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;pageInfo.pageno&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;changePage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iic-table-page-split</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- end row --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-3-user-list-js"><a href="#6-3-user-list-js" class="headerlink" title="6.3 user-list.js"></a>6.3 user-list.js</h2><p>通过template将js传入html</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tpl = <span class="built_in">require</span>(<span class="string">&#x27;./user-list.html&#x27;</span>); <span class="attr">template</span>: tpl</span><br></pre></td></tr></table></figure>



<p>SeaJs: CMD模块化</p>
<ol>
<li><p>通过require引入依赖，调用其他js模块(接口)</p>
</li>
<li><p>通过module.exports提供接口</p>
</li>
<li><p>Vue.extend创建Vue, 有参数: extends, props, data(function), watch, methods, template</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>,<span class="built_in">exports</span>,<span class="variable language_">module</span></span>)&#123;</span><br><span class="line">   <span class="built_in">require</span>(<span class="string">&quot;iic-panel-top&quot;</span>);</span><br><span class="line">   <span class="built_in">require</span>(<span class="string">&quot;iic-tool-bars&quot;</span>);</span><br><span class="line">   <span class="built_in">require</span>(<span class="string">&quot;iic-table&quot;</span>);</span><br><span class="line">   <span class="keyword">var</span> tpl = <span class="built_in">require</span>(<span class="string">&#x27;./user-list.html&#x27;</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">      <span class="attr">extends</span>: <span class="title class_">IICBaseTable</span>,</span><br><span class="line">      <span class="attr">props</span>: [],</span><br><span class="line">        <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">datas</span>: [],</span><br><span class="line">            <span class="attr">pageInfo</span>: &#123;</span><br><span class="line">               <span class="attr">pagesize</span>: <span class="number">10</span>,</span><br><span class="line">               <span class="attr">pageno</span>: <span class="number">1</span>,</span><br><span class="line">               <span class="attr">recordTotal</span>: <span class="number">0</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">params</span>: &#123;</span><br><span class="line">               <span class="attr">typeId</span>: <span class="string">&#x27;0&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">selectAll</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">keyword</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">watch</span>: &#123;</span><br><span class="line">         <span class="string">&#x27;$route&#x27;</span>: <span class="string">&#x27;initCom&#x27;</span>,</span><br><span class="line">         <span class="attr">keyword</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//删除了查找关键字，回到第一页数据</span></span><br><span class="line">            <span class="keyword">if</span> ( !<span class="variable language_">this</span>.<span class="property">keyword</span>.<span class="title function_">trim</span>() ) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">changePage</span>(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">methods</span>: &#123;</span><br><span class="line">           <span class="attr">initCom</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">              <span class="variable language_">this</span>.<span class="title function_">loadData</span>();</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="title function_">queryByAcct</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">keyword</span>.<span class="title function_">trim</span>()) &#123;</span><br><span class="line">               <span class="title class_">Iic</span>.<span class="title function_">showMessage</span>(<span class="string">&quot;请输入用户账号&quot;</span>);</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">pageInfo</span>.<span class="property">pageno</span> = <span class="number">1</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">loadData</span>(<span class="literal">true</span>);</span><br><span class="line">         &#125;,</span><br><span class="line">           <span class="attr">loadData</span>: <span class="keyword">function</span>(<span class="params">searchByAcct</span>)&#123;</span><br><span class="line">              <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">            <span class="keyword">var</span> url = <span class="string">&#x27;./mgrapi/user/user-list&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (searchByAcct) &#123;</span><br><span class="line">               url += <span class="string">&quot;?usrAcct=&quot;</span> + <span class="title function_">encodeUrl</span>(<span class="variable language_">this</span>.<span class="property">keyword</span>);</span><br><span class="line">            &#125;</span><br><span class="line">              <span class="keyword">var</span> params = &#123;</span><br><span class="line">                 <span class="attr">pagesize</span>: _this.<span class="property">pageInfo</span>.<span class="property">pagesize</span>,</span><br><span class="line">                 <span class="attr">pageno</span>: _this.<span class="property">pageInfo</span>.<span class="property">pageno</span></span><br><span class="line">              &#125;;</span><br><span class="line">              <span class="title function_">ajaxPost</span>(url,params).<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">                 _this.<span class="property">datas</span> = data.<span class="property">datas</span>;</span><br><span class="line">               _this.<span class="property">pageInfo</span>.<span class="property">recordTotal</span> = data.<span class="property">recordTotal</span>;</span><br><span class="line">               _this.<span class="property">selectAll</span> = <span class="literal">false</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="attr">exeDel</span>: <span class="keyword">function</span>(<span class="params">ids</span>)&#123;</span><br><span class="line">              <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">              <span class="keyword">var</span> url = <span class="string">&#x27;./mgrapi/user/del&#x27;</span>;</span><br><span class="line">              <span class="keyword">var</span> params = &#123;<span class="attr">ids</span>:ids&#125;;</span><br><span class="line">              <span class="title function_">ajaxPost</span>(url,params).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                 _this.<span class="title function_">loadData</span>();</span><br><span class="line">              &#125;);</span><br><span class="line">           &#125;,</span><br><span class="line">           </span><br><span class="line">           <span class="comment">///////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">           <span class="comment">///////////////////////////////////  默认方法  //////////////////////////////////////////</span></span><br><span class="line">           <span class="comment">///////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">           <span class="attr">onSelectAll</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">              <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">              _this.<span class="property">selectAll</span> = !_this.<span class="property">selectAll</span>;</span><br><span class="line">              _this.<span class="property">datas</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">                 obj.<span class="property">selected</span> = _this.<span class="property">selectAll</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              _this.<span class="property">datas</span> = _this.<span class="property">datas</span>.<span class="title function_">concat</span>([]);</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="attr">onSelectOne</span>: <span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">              obj.<span class="property">selected</span> = !obj.<span class="property">selected</span>;</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">datas</span> = <span class="variable language_">this</span>.<span class="property">datas</span>.<span class="title function_">concat</span>([]);</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="attr">isSelected</span>: <span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">              <span class="keyword">if</span>(obj.<span class="property">selected</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="attr">go</span>: <span class="keyword">function</span>(<span class="params">url,id</span>)&#123;</span><br><span class="line">              <span class="keyword">if</span>(id)&#123;</span><br><span class="line">                 url = url.<span class="title function_">replace</span>(<span class="string">&#x27;&#123;id&#125;&#x27;</span>,id);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span> = url;</span><br><span class="line">         &#125;,</span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 跳转到指定页</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; pageNo </span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="attr">changePage</span>: <span class="keyword">function</span>(<span class="params">pageNo</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">pageInfo</span>.<span class="property">pageno</span> = pageNo;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">loadData</span>();</span><br><span class="line">            &#125;,</span><br><span class="line">           <span class="attr">edit</span>: <span class="keyword">function</span>(<span class="params">url,id</span>)&#123;</span><br><span class="line">              <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">              <span class="keyword">if</span>(!id)&#123;</span><br><span class="line">                 <span class="keyword">var</span> datas = <span class="variable language_">this</span>.<span class="title function_">_getSelectedData</span>();</span><br><span class="line">                 <span class="keyword">if</span>(datas.<span class="property">length</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                     <span class="title function_">showErrAlert</span>(<span class="string">&#x27;操作错误&#x27;</span>,<span class="string">&#x27;请选择要操作的记录&#x27;</span>);</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                 <span class="keyword">if</span>(datas.<span class="property">length</span>&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="title function_">showErrAlert</span>(<span class="string">&#x27;操作错误&#x27;</span>,<span class="string">&#x27;只能选择一条记录&#x27;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">                 id = datas[<span class="number">0</span>].<span class="property">id</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              url = url.<span class="title function_">replace</span>(<span class="string">&#x27;&#123;id&#125;&#x27;</span>,id);</span><br><span class="line">              <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span> = url;</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="attr">del</span>: <span class="keyword">function</span>(<span class="params">id</span>)&#123;</span><br><span class="line">              <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">              <span class="keyword">var</span> ids = [];</span><br><span class="line">              </span><br><span class="line">              <span class="keyword">if</span>(!id)&#123;</span><br><span class="line">                 <span class="keyword">var</span> datas = <span class="variable language_">this</span>.<span class="title function_">_getSelectedData</span>();</span><br><span class="line">                  <span class="keyword">if</span>(datas.<span class="property">length</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                     <span class="title function_">showErrAlert</span>(<span class="string">&#x27;操作错误&#x27;</span>,<span class="string">&#x27;请选择要删除的记录&#x27;</span>);</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                  datas.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">                     ids.<span class="title function_">push</span>(obj.<span class="property">id</span>);</span><br><span class="line">                  &#125;);</span><br><span class="line">              &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 ids=[id];</span><br><span class="line">              &#125;</span><br><span class="line">              </span><br><span class="line">              <span class="title function_">showConfrim</span>(<span class="string">&#x27;确定要删除吗?&#x27;</span>).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                  _this.<span class="title function_">exeDel</span>(ids.<span class="title function_">join</span>(<span class="string">&#x27;,&#x27;</span>));</span><br><span class="line">              &#125;);</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="attr">_getSelectedData</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">              <span class="keyword">var</span> res = [];</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">datas</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">                 <span class="keyword">if</span>(obj.<span class="property">selected</span>)&#123;</span><br><span class="line">                    res.<span class="title function_">push</span>(obj);</span><br><span class="line">                 &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">return</span> res;</span><br><span class="line">           &#125;,</span><br><span class="line">            <span class="title function_">onClickCacheAllBus</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="title function_">showConfrim</span>(<span class="string">&#x27;确认刷新所有业务缓存&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">var</span> url = <span class="string">&#x27;/mgrapi/user/bus/cache/all&#x27;</span>;</span><br><span class="line">                    <span class="title function_">ajaxPost</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">rs</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">showSuccAlert</span>(<span class="string">&quot;任务提交成功&quot;</span>);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">onClickCacheBus</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">                <span class="title function_">showConfrim</span>(<span class="string">&#x27;确认刷新业务缓存&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> url = <span class="string">&#x27;/mgrapi/user/bus/cache?username=&#x27;</span> + obj.<span class="property">userName</span>;</span><br><span class="line">                    <span class="title function_">ajaxPost</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">rs</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">showSuccAlert</span>(<span class="string">&#x27;操作成功&#x27;</span>);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">cacheAdmBus</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="title function_">showConfrim</span>(<span class="string">&#x27;确认刷新业务缓存&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> url = <span class="string">&#x27;/mgrapi/user/bus/cache/adm&#x27;</span>;</span><br><span class="line">                    <span class="title function_">ajaxPost</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">rs</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">showSuccAlert</span>(<span class="string">&#x27;任务提交成功&#x27;</span>);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">template</span>: tpl</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>,<span class="built_in">exports</span>,<span class="variable language_">module</span></span>)&#123;</span><br><span class="line">   <span class="built_in">require</span>(<span class="string">&quot;iic-panel-top&quot;</span>);</span><br><span class="line">   <span class="built_in">require</span>(<span class="string">&quot;iic-tool-bars&quot;</span>);</span><br><span class="line">   <span class="built_in">require</span>(<span class="string">&quot;iic-table&quot;</span>);</span><br><span class="line">   <span class="keyword">var</span> tpl = <span class="built_in">require</span>(<span class="string">&#x27;./user-list.html&#x27;</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">      <span class="attr">extends</span>: <span class="title class_">IICBaseTable</span>,</span><br><span class="line">      <span class="attr">props</span>: [],</span><br><span class="line">        <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">datas</span>: [],</span><br><span class="line">            <span class="attr">pageInfo</span>: &#123;</span><br><span class="line">               <span class="attr">pagesize</span>: <span class="number">10</span>,</span><br><span class="line">               <span class="attr">pageno</span>: <span class="number">1</span>,</span><br><span class="line">               <span class="attr">recordTotal</span>: <span class="number">0</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">params</span>: &#123;</span><br><span class="line">               <span class="attr">typeId</span>: <span class="string">&#x27;0&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">selectAll</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">keyword</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">watch</span>: &#123;</span><br><span class="line">         <span class="string">&#x27;$route&#x27;</span>: <span class="string">&#x27;initCom&#x27;</span>,</span><br><span class="line">         <span class="attr">keyword</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//删除了查找关键字，回到第一页数据</span></span><br><span class="line">            <span class="keyword">if</span> ( !<span class="variable language_">this</span>.<span class="property">keyword</span>.<span class="title function_">trim</span>() ) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">changePage</span>(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">methods</span>: &#123;</span><br><span class="line">           <span class="attr">initCom</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">              <span class="variable language_">this</span>.<span class="title function_">loadData</span>();</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="title function_">queryByAcct</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">keyword</span>.<span class="title function_">trim</span>()) &#123;</span><br><span class="line">               <span class="title class_">Iic</span>.<span class="title function_">showMessage</span>(<span class="string">&quot;请输入用户账号&quot;</span>);</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">pageInfo</span>.<span class="property">pageno</span> = <span class="number">1</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">loadData</span>(<span class="literal">true</span>);</span><br><span class="line">         &#125;,</span><br><span class="line">           <span class="attr">loadData</span>: <span class="keyword">function</span>(<span class="params">searchByAcct</span>)&#123;</span><br><span class="line">              <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">            <span class="keyword">var</span> url = <span class="string">&#x27;./mgrapi/user/user-list&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (searchByAcct) &#123;</span><br><span class="line">               url += <span class="string">&quot;?usrAcct=&quot;</span> + <span class="title function_">encodeUrl</span>(<span class="variable language_">this</span>.<span class="property">keyword</span>);</span><br><span class="line">            &#125;</span><br><span class="line">              <span class="keyword">var</span> params = &#123;</span><br><span class="line">                 <span class="attr">pagesize</span>: _this.<span class="property">pageInfo</span>.<span class="property">pagesize</span>,</span><br><span class="line">                 <span class="attr">pageno</span>: _this.<span class="property">pageInfo</span>.<span class="property">pageno</span></span><br><span class="line">              &#125;;</span><br><span class="line">              <span class="title function_">ajaxPost</span>(url,params).<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">                 _this.<span class="property">datas</span> = data.<span class="property">datas</span>;</span><br><span class="line">               _this.<span class="property">pageInfo</span>.<span class="property">recordTotal</span> = data.<span class="property">recordTotal</span>;</span><br><span class="line">               _this.<span class="property">selectAll</span> = <span class="literal">false</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="attr">exeDel</span>: <span class="keyword">function</span>(<span class="params">ids</span>)&#123;</span><br><span class="line">              <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">              <span class="keyword">var</span> url = <span class="string">&#x27;./mgrapi/user/del&#x27;</span>;</span><br><span class="line">              <span class="keyword">var</span> params = &#123;<span class="attr">ids</span>:ids&#125;;</span><br><span class="line">              <span class="title function_">ajaxPost</span>(url,params).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                 _this.<span class="title function_">loadData</span>();</span><br><span class="line">              &#125;);</span><br><span class="line">           &#125;,</span><br><span class="line">           </span><br><span class="line">           <span class="comment">///////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">           <span class="comment">///////////////////////////////////  默认方法  //////////////////////////////////////////</span></span><br><span class="line">           <span class="comment">///////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">           <span class="attr">onSelectAll</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">              <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">              _this.<span class="property">selectAll</span> = !_this.<span class="property">selectAll</span>;</span><br><span class="line">              _this.<span class="property">datas</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">                 obj.<span class="property">selected</span> = _this.<span class="property">selectAll</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              _this.<span class="property">datas</span> = _this.<span class="property">datas</span>.<span class="title function_">concat</span>([]);</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="attr">onSelectOne</span>: <span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">              obj.<span class="property">selected</span> = !obj.<span class="property">selected</span>;</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">datas</span> = <span class="variable language_">this</span>.<span class="property">datas</span>.<span class="title function_">concat</span>([]);</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="attr">isSelected</span>: <span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">              <span class="keyword">if</span>(obj.<span class="property">selected</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="attr">go</span>: <span class="keyword">function</span>(<span class="params">url,id</span>)&#123;</span><br><span class="line">              <span class="keyword">if</span>(id)&#123;</span><br><span class="line">                 url = url.<span class="title function_">replace</span>(<span class="string">&#x27;&#123;id&#125;&#x27;</span>,id);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span> = url;</span><br><span class="line">         &#125;,</span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 跳转到指定页</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; pageNo </span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="attr">changePage</span>: <span class="keyword">function</span>(<span class="params">pageNo</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">pageInfo</span>.<span class="property">pageno</span> = pageNo;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">loadData</span>();</span><br><span class="line">            &#125;,</span><br><span class="line">           <span class="attr">edit</span>: <span class="keyword">function</span>(<span class="params">url,id</span>)&#123;</span><br><span class="line">              <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">              <span class="keyword">if</span>(!id)&#123;</span><br><span class="line">                 <span class="keyword">var</span> datas = <span class="variable language_">this</span>.<span class="title function_">_getSelectedData</span>();</span><br><span class="line">                 <span class="keyword">if</span>(datas.<span class="property">length</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                     <span class="title function_">showErrAlert</span>(<span class="string">&#x27;操作错误&#x27;</span>,<span class="string">&#x27;请选择要操作的记录&#x27;</span>);</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                 <span class="keyword">if</span>(datas.<span class="property">length</span>&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="title function_">showErrAlert</span>(<span class="string">&#x27;操作错误&#x27;</span>,<span class="string">&#x27;只能选择一条记录&#x27;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">                 id = datas[<span class="number">0</span>].<span class="property">id</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              url = url.<span class="title function_">replace</span>(<span class="string">&#x27;&#123;id&#125;&#x27;</span>,id);</span><br><span class="line">              <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span> = url;</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="attr">del</span>: <span class="keyword">function</span>(<span class="params">id</span>)&#123;</span><br><span class="line">              <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">              <span class="keyword">var</span> ids = [];</span><br><span class="line">              </span><br><span class="line">              <span class="keyword">if</span>(!id)&#123;</span><br><span class="line">                 <span class="keyword">var</span> datas = <span class="variable language_">this</span>.<span class="title function_">_getSelectedData</span>();</span><br><span class="line">                  <span class="keyword">if</span>(datas.<span class="property">length</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                     <span class="title function_">showErrAlert</span>(<span class="string">&#x27;操作错误&#x27;</span>,<span class="string">&#x27;请选择要删除的记录&#x27;</span>);</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                  datas.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">                     ids.<span class="title function_">push</span>(obj.<span class="property">id</span>);</span><br><span class="line">                  &#125;);</span><br><span class="line">              &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 ids=[id];</span><br><span class="line">              &#125;</span><br><span class="line">              </span><br><span class="line">              <span class="title function_">showConfrim</span>(<span class="string">&#x27;确定要删除吗?&#x27;</span>).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                  _this.<span class="title function_">exeDel</span>(ids.<span class="title function_">join</span>(<span class="string">&#x27;,&#x27;</span>));</span><br><span class="line">              &#125;);</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="attr">_getSelectedData</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">              <span class="keyword">var</span> res = [];</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">datas</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">                 <span class="keyword">if</span>(obj.<span class="property">selected</span>)&#123;</span><br><span class="line">                    res.<span class="title function_">push</span>(obj);</span><br><span class="line">                 &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">return</span> res;</span><br><span class="line">           &#125;,</span><br><span class="line">            <span class="title function_">onClickCacheAllBus</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="title function_">showConfrim</span>(<span class="string">&#x27;确认刷新所有业务缓存&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">var</span> url = <span class="string">&#x27;/mgrapi/user/bus/cache/all&#x27;</span>;</span><br><span class="line">                    <span class="title function_">ajaxPost</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">rs</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">showSuccAlert</span>(<span class="string">&quot;任务提交成功&quot;</span>);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">onClickCacheBus</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">                <span class="title function_">showConfrim</span>(<span class="string">&#x27;确认刷新业务缓存&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> url = <span class="string">&#x27;/mgrapi/user/bus/cache?username=&#x27;</span> + obj.<span class="property">userName</span>;</span><br><span class="line">                    <span class="title function_">ajaxPost</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">rs</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">showSuccAlert</span>(<span class="string">&#x27;操作成功&#x27;</span>);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">cacheAdmBus</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="title function_">showConfrim</span>(<span class="string">&#x27;确认刷新业务缓存&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> url = <span class="string">&#x27;/mgrapi/user/bus/cache/adm&#x27;</span>;</span><br><span class="line">                    <span class="title function_">ajaxPost</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">rs</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">showSuccAlert</span>(<span class="string">&#x27;任务提交成功&#x27;</span>);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">template</span>: tpl</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="6-4-MgrUserController"><a href="#6-4-MgrUserController" class="headerlink" title="6.4 MgrUserController"></a>6.4 MgrUserController</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lll.iic.ssp.mgr.<span class="keyword">module</span>.admin.user.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.lll.framework.controller.JsonResult;</span><br><span class="line"><span class="keyword">import</span> cn.lll.framework.exception.BusException;</span><br><span class="line"><span class="keyword">import</span> cn.lll.iic.ssp.mgr.common.ListPageVo;</span><br><span class="line"><span class="keyword">import</span> cn.lll.iic.ssp.mgr.common.MgrBaseController;</span><br><span class="line"><span class="keyword">import</span> cn.lll.iic.ssp.mgr.<span class="keyword">module</span>.admin.user.model.RoleVo;</span><br><span class="line"><span class="keyword">import</span> cn.lll.iic.ssp.mgr.<span class="keyword">module</span>.admin.user.model.UserVo;</span><br><span class="line"><span class="keyword">import</span> cn.lll.iic.ssp.mgr.<span class="keyword">module</span>.admin.user.service.IMgrUserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/mgrapi/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MgrUserController</span> <span class="keyword">extends</span> <span class="title class_">MgrBaseController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span> LogFactory.getLog(MgrUserController.class);</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> IMgrUserService iMgrUserService;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@ApiOperation(value = &quot;读取用户列表&quot;, notes = &quot;读取用户列表&quot;, httpMethod = &quot;POST&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user-list&quot;, method = RequestMethod.POST)</span></span><br><span class="line">   <span class="keyword">public</span> JsonResult <span class="title function_">loadUserList</span><span class="params">(Integer pagesize, Integer pageno, String usrAcct)</span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         ListPageVo&lt;UserVo&gt; vo = iMgrUserService.loadUserList(pagesize, pageno, usrAcct);</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">return</span> JsonResult.createSuccess(vo, <span class="string">&quot;&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(BusException ex)&#123;</span><br><span class="line">         log.error(<span class="string">&quot;&quot;</span>, ex);</span><br><span class="line">         <span class="keyword">return</span> JsonResult.createFail(ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@ApiOperation(value = &quot;添加用户&quot;, notes = &quot;添加用户&quot;, httpMethod = &quot;POST&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/add&quot;, method = RequestMethod.POST)</span></span><br><span class="line">   <span class="keyword">public</span> JsonResult <span class="title function_">add</span><span class="params">(UserVo vo)</span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         iMgrUserService.addUser(vo);</span><br><span class="line">         <span class="keyword">return</span> JsonResult.createSuccess(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(BusException ex)&#123;</span><br><span class="line">         log.error(<span class="string">&quot;&quot;</span>, ex);</span><br><span class="line">         <span class="keyword">return</span> JsonResult.createFail(ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@ApiOperation(value = &quot;读取用户详细信息&quot;, notes = &quot;读取用户详细信息&quot;, httpMethod = &quot;POST&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/detail&quot;, method = RequestMethod.POST)</span></span><br><span class="line">   <span class="keyword">public</span> JsonResult <span class="title function_">loadUserDetail</span><span class="params">(String id)</span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="type">UserVo</span> <span class="variable">vo</span> <span class="operator">=</span> iMgrUserService.loadUserDetail(id);</span><br><span class="line">         <span class="keyword">return</span> JsonResult.createSuccess(vo,<span class="string">&quot;&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(BusException ex)&#123;</span><br><span class="line">         log.error(<span class="string">&quot;&quot;</span>, ex);</span><br><span class="line">         <span class="keyword">return</span> JsonResult.createFail(ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@ApiOperation(value = &quot;读取所有角色&quot;, notes = &quot;读取所有角色&quot;, httpMethod = &quot;POST&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/load-all-user-role&quot;, method = RequestMethod.POST)</span></span><br><span class="line">   <span class="keyword">public</span> JsonResult <span class="title function_">loadAllUserRole</span><span class="params">(String userId)</span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         List&lt;RoleVo&gt; datas = iMgrUserService.loadAllUserRole(userId);</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">return</span> JsonResult.createSuccess(datas, <span class="string">&quot;&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(BusException ex)&#123;</span><br><span class="line">         log.error(<span class="string">&quot;&quot;</span>, ex);</span><br><span class="line">         <span class="keyword">return</span> JsonResult.createFail(ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@ApiOperation(value = &quot;修改用户角色&quot;, notes = &quot;修改用户角色&quot;, httpMethod = &quot;POST&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/update-user-role&quot;, method = RequestMethod.POST)</span></span><br><span class="line">   <span class="keyword">public</span> JsonResult <span class="title function_">updateUserRole</span><span class="params">(String userId, String roles)</span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         iMgrUserService.updateUserRole(userId, roles);</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">return</span> JsonResult.createSuccess(<span class="string">&quot;&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(BusException ex)&#123;</span><br><span class="line">         log.error(<span class="string">&quot;&quot;</span>, ex);</span><br><span class="line">         <span class="keyword">return</span> JsonResult.createFail(ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@ApiOperation(value = &quot;删除用户&quot;, notes = &quot;删除用户&quot;, httpMethod = &quot;POST&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/del&quot;, method = RequestMethod.POST)</span></span><br><span class="line">   <span class="keyword">public</span> JsonResult <span class="title function_">deleteUser</span><span class="params">(String ids)</span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         iMgrUserService.deleteUser(ids);</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">return</span> JsonResult.createSuccess(<span class="string">&quot;&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(BusException ex)&#123;</span><br><span class="line">         log.error(<span class="string">&quot;&quot;</span>, ex);</span><br><span class="line">         <span class="keyword">return</span> JsonResult.createFail(ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@ApiOperation(value = &quot;修改用户&quot;, notes = &quot;修改用户&quot;, httpMethod = &quot;POST&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/update-user&quot;, method = RequestMethod.POST)</span></span><br><span class="line">   <span class="keyword">public</span> JsonResult <span class="title function_">updateUser</span><span class="params">(UserVo vo)</span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         iMgrUserService.updateUser(vo);</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">return</span> JsonResult.createSuccess(<span class="string">&quot;&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(BusException ex)&#123;</span><br><span class="line">         log.error(<span class="string">&quot;&quot;</span>, ex);</span><br><span class="line">         <span class="keyword">return</span> JsonResult.createFail(ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//将某用户的标识业务id接入redis</span></span><br><span class="line">   <span class="meta">@PostMapping(path = &quot;/bus/cache&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">cacheBus</span><span class="params">(<span class="meta">@RequestParam</span> String username)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            iMgrUserService.cacheBus(username);</span><br><span class="line">            <span class="keyword">return</span> JsonResult.createSuccess(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BusException ex) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;&quot;</span>, ex);</span><br><span class="line">            <span class="keyword">return</span> JsonResult.createFail(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将admin的标识业务id接入redis</span></span><br><span class="line">    <span class="meta">@PostMapping(path = &quot;/bus/cache/adm&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">cacheAllBusForAdm</span><span class="params">()</span>&#123;</span><br><span class="line">        iMgrUserService.cacheAdmBus();</span><br><span class="line">        <span class="keyword">return</span> JsonResult.createSuccess(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将所有非admin用户的标识业务id接入redis</span></span><br><span class="line">    <span class="meta">@PostMapping(path = &quot;/bus/cache/all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">cacheAllBus</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            iMgrUserService.cacheAllBus();</span><br><span class="line">            <span class="keyword">return</span> JsonResult.createSuccess(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BusException ex) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;&quot;</span>, ex);</span><br><span class="line">            <span class="keyword">return</span> JsonResult.createFail(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-5-IMgrUserService"><a href="#6-5-IMgrUserService" class="headerlink" title="6.5 IMgrUserService"></a>6.5 IMgrUserService</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lll.iic.ssp.mgr.<span class="keyword">module</span>.admin.user.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.lll.framework.exception.BusException;</span><br><span class="line"><span class="keyword">import</span> cn.lll.iic.ssp.mgr.common.ListPageVo;</span><br><span class="line"><span class="keyword">import</span> cn.lll.iic.ssp.mgr.<span class="keyword">module</span>.admin.user.model.RoleVo;</span><br><span class="line"><span class="keyword">import</span> cn.lll.iic.ssp.mgr.<span class="keyword">module</span>.admin.user.model.UserVo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IMgrUserService</span></span><br></pre></td></tr></table></figure>

<h2 id="6-6-MgrUserServiceImpl"><a href="#6-6-MgrUserServiceImpl" class="headerlink" title="6.6 MgrUserServiceImpl"></a>6.6 MgrUserServiceImpl</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lll.iic.ssp.mgr.<span class="keyword">module</span>.admin.user.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MgrUserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IMgrUserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">LOG</span> <span class="operator">=</span> LogFactory.getLog(MgrUserServiceImpl.class);</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> IGdssUserTeUserService iGdssUserTeUserService;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> IGdssUserTsUserCompanyService iGdssUserTsUserCompanyService;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IGdssUserTeCompanyService iGdssUserTeCompanyService;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> IGdssCfgTeConfigService iGdssCfgTeConfigService;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> IGdssAuthTeRoleService iGdssAuthTeRoleService;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> IGdssAuthTsUserRoleService iGdssAuthTsUserRoleService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ISecService iSecService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ICfgService iCfgService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ThreadPoolExecutor threadPoolExecutor;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IGdssSecTeKeyService iGdssSecTeKeyService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IGdssBusTeApiBusinessService iGdssBusTeApiBusinessService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IGdssStatTeHistoryAmountsDayMwService iGdssStatTeHistoryAmountsDayMwService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> ListPageVo&lt;UserVo&gt; <span class="title function_">loadUserList</span><span class="params">(Integer pagesize, Integer pageno, String usrAcct)</span> <span class="keyword">throws</span> BusException &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="type">GdssUserTeUser</span> <span class="variable">params</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GdssUserTeUser</span>();</span><br><span class="line">      params.setOrderBy(<span class="string">&quot; CREATE_TIME DESC&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (!StringUtil.isEmpty(usrAcct))&#123;</span><br><span class="line">         params.setUserName(usrAcct);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      List&lt;GdssUserTeUser&gt; ls = iGdssUserTeUserService.searchEntity(params, pagesize, pageno);</span><br><span class="line">      </span><br><span class="line">      List&lt;UserVo&gt; datas = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;UserVo&gt;();</span><br><span class="line">      <span class="keyword">for</span>(GdssUserTeUser user : ls)&#123;</span><br><span class="line">         <span class="type">UserVo</span> <span class="variable">v</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserVo</span>();</span><br><span class="line">         v.setId(user.getId());</span><br><span class="line">         v.setUserName(StringUtil.trim(user.getUserName()));</span><br><span class="line">         v.setNickname(StringUtil.trim(user.getNickname()));</span><br><span class="line">         v.setStatus(user.getStatus());</span><br><span class="line">         <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> v.getUserName();</span><br><span class="line">         v.setLanguage(<span class="built_in">this</span>.getLan(username));</span><br><span class="line"></span><br><span class="line">         v.setMobile(StringUtil.trim(user.getMobile()));</span><br><span class="line">         v.setEmail(StringUtil.trim(user.getEmail()));</span><br><span class="line">         v.setAuthMobile(user.getAuthMobile());</span><br><span class="line">         v.setAuthEmail(user.getAuthEmail());</span><br><span class="line">         v.setCreateTime(user.getCreateTime());</span><br><span class="line">         </span><br><span class="line">         <span class="comment">//读取用户角色</span></span><br><span class="line">         List&lt;GdssAuthTeRoleDao&gt; roles = iGdssAuthTeRoleService.searchUserRoleByUserId(user.getId());</span><br><span class="line">         List&lt;String&gt; roleCodes = roles.stream().map(item -&gt; item.getCode()).collect(Collectors.toList());</span><br><span class="line">         List&lt;String&gt; roleNames = roles.stream().map(item -&gt; item.getName()).collect(Collectors.toList());</span><br><span class="line">         v.setRoleCodes(roleCodes);</span><br><span class="line">         v.setRoleNames(roleNames);</span><br><span class="line">         </span><br><span class="line">         datas.add(v);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="type">int</span> <span class="variable">recordTotal</span> <span class="operator">=</span> iGdssUserTeUserService.count(params);</span><br><span class="line">      <span class="comment">//绑定接入状态</span></span><br><span class="line">        bindAccessStatus(datas);</span><br><span class="line">      <span class="keyword">return</span> ListPageVo.create(datas, recordTotal);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">private</span>  String <span class="title function_">getLan</span><span class="params">(String username)</span>&#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> username.lastIndexOf(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">      String[] lanArr = <span class="string">&quot;Java,C++,Java,Java,C#,Java,PHP,Java,Java,Go,C++,Java,Java,Java,Java,Node.js,Java&quot;</span>.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (index &gt; <span class="number">0</span>)&#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> username.substring(index+<span class="number">1</span>);</span><br><span class="line">         <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> ToolUtil.parseInt(suffix,<span class="number">0</span>) % lanArr.length;</span><br><span class="line">         <span class="type">String</span> <span class="variable">lan</span> <span class="operator">=</span> lanArr[count];</span><br><span class="line">         <span class="keyword">if</span> (username.equals(<span class="string">&quot;88.168.251&quot;</span>))&#123;</span><br><span class="line">            lan = <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (username.equals(<span class="string">&quot;88.168.288&quot;</span>))&#123;</span><br><span class="line">            lan = <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (username.equals(<span class="string">&quot;88.168.200&quot;</span>))&#123;</span><br><span class="line">            lan = <span class="string">&quot;C#&quot;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (username.equals(<span class="string">&quot;88.168.313&quot;</span>))&#123;</span><br><span class="line">            lan = <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (username.equals(<span class="string">&quot;88.168.263&quot;</span>))&#123;</span><br><span class="line">            lan = <span class="string">&quot;PHP&quot;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (username.equals(<span class="string">&quot;88.168.352&quot;</span>))&#123;</span><br><span class="line">            lan = <span class="string">&quot;C++&quot;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> lan;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span>  <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//绑定接入状态</span></span><br><span class="line">   <span class="keyword">private</span> List&lt;UserVo&gt; <span class="title function_">bindAccessStatus</span><span class="params">(List&lt;UserVo&gt; datas)</span> <span class="keyword">throws</span> BusException &#123;</span><br><span class="line">       <span class="keyword">if</span> (datas == <span class="literal">null</span> || datas.isEmpty()) <span class="keyword">return</span> datas;</span><br><span class="line"></span><br><span class="line">       Set&lt;String&gt; userIds = datas.stream().map(item -&gt; item.getId()).collect(Collectors.toSet());</span><br><span class="line">       <span class="comment">//查询关联企业</span></span><br><span class="line">        <span class="type">GdssUserTsUserCompany</span> <span class="variable">tsParam</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GdssUserTsUserCompany</span>();</span><br><span class="line">        tsParam.setUserIdIn(userIds);</span><br><span class="line">        List&lt;GdssUserTsUserCompany&gt; tsList = iGdssUserTsUserCompanyService.searchEntity(tsParam, <span class="number">10_000</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (tsList == <span class="literal">null</span> || tsList.isEmpty()) <span class="keyword">return</span> datas;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; companyIds = tsList.stream().map(item -&gt; item.getCompanyId()).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//查前缀</span></span><br><span class="line">        <span class="type">GdssUserTeCompany</span> <span class="variable">companyParam</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GdssUserTeCompany</span>();</span><br><span class="line">        companyParam.setIdIn(companyIds);</span><br><span class="line">        List&lt;GdssUserTeCompany&gt; companyList = iGdssUserTeCompanyService.searchEntity(companyParam, <span class="number">10_000</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (companyList == <span class="literal">null</span> || companyList.isEmpty()) <span class="keyword">return</span> datas;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; userTsMwCodeMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Set&lt;String&gt; allMwCodes = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">appEnv</span> <span class="operator">=</span> SpringUtil.getEnvironment();</span><br><span class="line">        <span class="keyword">for</span> (UserVo userVo : datas) &#123;</span><br><span class="line">            List&lt;String&gt; companyIdList = tsList.stream().filter(item -&gt; item.getUserId().equals( userVo.getId() ))</span><br><span class="line">                    .map(item -&gt; item.getCompanyId()).collect(Collectors.toList());</span><br><span class="line">            <span class="comment">//筛选前缀</span></span><br><span class="line">            List&lt;String&gt; mwCodes = companyList.stream().filter(item -&gt; companyIdList.contains( item.getId() ))</span><br><span class="line">                    .map(item -&gt; HandleUtil.getMwCodeByPrefix(item.getHandle(), appEnv)).collect(Collectors.toList());</span><br><span class="line">            <span class="keyword">if</span> ( !mwCodes.isEmpty() )&#123;</span><br><span class="line">                userTsMwCodeMap.put(userVo.getId(), mwCodes);</span><br><span class="line">                allMwCodes.addAll(mwCodes);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查统计信息</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">now</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="type">GdssStatTeHistoryAmountsDayMw</span> <span class="variable">statParam</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GdssStatTeHistoryAmountsDayMw</span>();</span><br><span class="line">        statParam.setYearer( now.get(Calendar.YEAR) );</span><br><span class="line">        statParam.setMonther( now.get(Calendar.MONTH) + <span class="number">1</span> );</span><br><span class="line">        statParam.setDateer( now.get(Calendar.DAY_OF_MONTH) );</span><br><span class="line">        statParam.setMwCodeIn(allMwCodes);</span><br><span class="line">        List&lt;GdssStatTeHistoryAmountsDayMw&gt; statList = iGdssStatTeHistoryAmountsDayMwService.searchEntity(statParam, <span class="number">10_000</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (statList == <span class="literal">null</span> || statList.isEmpty()) <span class="keyword">return</span> datas;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (UserVo userVo : datas) &#123;</span><br><span class="line">            List&lt;String&gt; userMwCodes = userTsMwCodeMap.get( userVo.getId() );</span><br><span class="line">            <span class="keyword">if</span> (userMwCodes == <span class="literal">null</span> || userMwCodes.isEmpty()) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            List&lt;GdssStatTeHistoryAmountsDayMw&gt; tempStat = statList.stream().filter(item -&gt; userMwCodes.contains( item.getMwCode() )).collect(Collectors.toList());</span><br><span class="line">            <span class="keyword">if</span> ( tempStat.isEmpty() ) <span class="keyword">continue</span>;</span><br><span class="line">            userVo.setAccessStatus(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> datas;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(UserVo vo)</span> <span class="keyword">throws</span> BusException &#123;</span><br><span class="line">      <span class="comment">//<span class="doctag">TODO:</span> 判断账号是否重复</span></span><br><span class="line">      <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> iGdssUserTeUserService.isRepeatUserName(vo.getUserName());</span><br><span class="line">      <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusException</span>(<span class="string">&quot;00400013&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//<span class="doctag">TODO:</span> 从配置中心读取用户默认密码</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> <span class="built_in">this</span>.readDefaultPwd();</span><br><span class="line">      pwd = Base64Util.String2SHA256(pwd);</span><br><span class="line">      <span class="comment">//<span class="doctag">TODO:</span> 创建用户</span></span><br><span class="line">      <span class="type">GdssUserTeUser</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GdssUserTeUser</span>();</span><br><span class="line">      BeanUtils.copyProperties(vo, user);</span><br><span class="line"></span><br><span class="line">      user.setUserName(StringUtil.trim(user.getUserName()));</span><br><span class="line">      user.setMobile(StringUtil.trim(user.getMobile()));</span><br><span class="line">      user.setEmail(StringUtil.trim(user.getEmail()));</span><br><span class="line">      user.setNickname(StringUtil.trim(user.getNickname()));</span><br><span class="line">      user.setPwd(pwd);</span><br><span class="line">      user.setStatus(GdssUserTeUser.Info.STATUS_VALID);</span><br><span class="line">      user.setAuthMobile(<span class="number">0</span>);</span><br><span class="line">      user.setAuthEmail(<span class="number">0</span>);</span><br><span class="line">      user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        user.setAlteredPwd( (<span class="type">byte</span>)<span class="number">0</span> );</span><br><span class="line">      user.setId( UUID.getUUID() );</span><br><span class="line">      </span><br><span class="line">      iGdssUserTeUserService.addEntity(user);</span><br><span class="line">      <span class="comment">//如果是系统管理员,则默认分配系统管理员角色</span></span><br><span class="line">      <span class="keyword">if</span>(user.getType()==GdssUserTeUser.Info.TYPE_SYSTEM)&#123;</span><br><span class="line">         <span class="type">GdssAuthTeRoleDao</span> <span class="variable">role</span> <span class="operator">=</span> iGdssAuthTeRoleService.getEntityByCode(<span class="string">&quot;system&quot;</span>);</span><br><span class="line">         <span class="type">GdssAuthTsUserRole</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GdssAuthTsUserRole</span>();</span><br><span class="line">         r.setRoleId(role.getId());</span><br><span class="line">         r.setUserId(user.getId());</span><br><span class="line">         iGdssAuthTsUserRoleService.addEntity(r);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//如果是一般用户，默认分配一般用户角色</span></span><br><span class="line">      <span class="keyword">if</span>(user.getType()==GdssUserTeUser.Info.TYPE_COMMON)&#123;</span><br><span class="line">         <span class="type">GdssAuthTeRoleDao</span> <span class="variable">role</span> <span class="operator">=</span> iGdssAuthTeRoleService.getEntityByCode(<span class="string">&quot;common&quot;</span>);</span><br><span class="line">         <span class="type">GdssAuthTsUserRole</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GdssAuthTsUserRole</span>();</span><br><span class="line">         r.setRoleId(role.getId());</span><br><span class="line">         r.setUserId(user.getId());</span><br><span class="line">         iGdssAuthTsUserRoleService.addEntity(r);</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span> 创建用户密钥</span></span><br><span class="line">        iSecService.createUserKeyPair(vo.getUserName(), user.getId());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> UserVo <span class="title function_">loadUserDetail</span><span class="params">(String id)</span> <span class="keyword">throws</span> BusException &#123;</span><br><span class="line">      <span class="type">GdssUserTeUser</span> <span class="variable">user</span> <span class="operator">=</span> iGdssUserTeUserService.getEntityById(id);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//读取用户账号关联的角色</span></span><br><span class="line">      List&lt;GdssAuthTeRoleDao&gt; roles = iGdssAuthTeRoleService.searchUserRoleByUserId(id);</span><br><span class="line">      List&lt;String&gt; roleCodes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt; (roles.size() );</span><br><span class="line">      List&lt;String&gt; roleNames = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;( roles.size() );</span><br><span class="line">      <span class="keyword">for</span>(GdssAuthTeRoleDao role : roles)&#123;</span><br><span class="line">         roleCodes.add(role.getCode());</span><br><span class="line">         roleNames.add(role.getName());</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="type">UserVo</span> <span class="variable">vo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserVo</span>();</span><br><span class="line">        BeanUtils.copyProperties(user, vo);</span><br><span class="line">      vo.setRoleCodes(roleCodes);</span><br><span class="line">      vo.setRoleNames(roleNames);</span><br><span class="line">      <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> vo.getUserName();</span><br><span class="line">      vo.setLanguage(<span class="built_in">this</span>.getLan(username));</span><br><span class="line">      <span class="comment">//绑定</span></span><br><span class="line">        bindAccessStatus( Arrays.asList(vo) );</span><br><span class="line">      <span class="keyword">return</span> vo;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;RoleVo&gt; <span class="title function_">loadAllUserRole</span><span class="params">(String userId)</span> <span class="keyword">throws</span> BusException &#123;</span><br><span class="line">      <span class="type">GdssAuthTeRoleDao</span> <span class="variable">params</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GdssAuthTeRoleDao</span>();</span><br><span class="line">      params.setOrderBy(<span class="string">&quot; CODE ASC&quot;</span>);</span><br><span class="line">      List&lt;GdssAuthTeRoleDao&gt; all = iGdssAuthTeRoleService.searchEntity(params,<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">      </span><br><span class="line">      List&lt;GdssAuthTsUserRole&gt; roles = iGdssAuthTsUserRoleService.searchByUserId(userId);</span><br><span class="line">      </span><br><span class="line">      List&lt;RoleVo&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;RoleVo&gt;();</span><br><span class="line">      <span class="keyword">for</span>(GdssAuthTeRoleDao role : all)&#123;</span><br><span class="line">         <span class="type">RoleVo</span> <span class="variable">vo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleVo</span>();</span><br><span class="line">         vo.setId(role.getId());</span><br><span class="line">         vo.setCode(role.getCode());</span><br><span class="line">         vo.setName(role.getName());</span><br><span class="line">         vo.setRemark(role.getRemark());</span><br><span class="line">         </span><br><span class="line">         <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">         <span class="keyword">for</span>(GdssAuthTsUserRole r : roles)&#123;</span><br><span class="line">            <span class="keyword">if</span>(r.getRoleId().equals(role.getId()))&#123;</span><br><span class="line">               flag = <span class="literal">true</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            vo.setAuth(RoleVo.Info.AUTH_YES);</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            vo.setAuth(RoleVo.Info.AUTH_NO);</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         res.add(vo);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUserRole</span><span class="params">(String userId, String roles)</span> <span class="keyword">throws</span> BusException &#123;</span><br><span class="line">      <span class="comment">//<span class="doctag">TODO:</span> 删除账号所有角色</span></span><br><span class="line">      iGdssAuthTsUserRoleService.deleteByUserId(userId);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//<span class="doctag">TODO:</span> 添加关联的角色</span></span><br><span class="line">      String[] roleIds = roles.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;roleIds.length;i++)&#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">roleId</span> <span class="operator">=</span> roleIds[i];</span><br><span class="line">         <span class="type">GdssAuthTsUserRole</span> <span class="variable">role</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GdssAuthTsUserRole</span>();</span><br><span class="line">         role.setUserId(userId);</span><br><span class="line">         role.setRoleId(roleId);</span><br><span class="line">         iGdssAuthTsUserRoleService.addEntity(role);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(String ids)</span> <span class="keyword">throws</span> BusException &#123;</span><br><span class="line">      String[] idArg = ids.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">      <span class="comment">//如果包含超级管理员，则报错</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;idArg.length;i++)&#123;</span><br><span class="line">         <span class="keyword">if</span>(GdssUserTeUser.ID_ADMIN.equals(idArg[i]))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusException</span>(<span class="string">&quot;00400022&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> idArg[i];</span><br><span class="line">         List&lt;GdssUserTsUserCompany&gt; list = iGdssUserTsUserCompanyService.searchByUserId(id);</span><br><span class="line">         <span class="keyword">if</span>(list!=<span class="literal">null</span>&amp;&amp;list.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusException</span>(<span class="string">&quot;00430010&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;idArg.length;i++)&#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> idArg[i];</span><br><span class="line">         <span class="comment">//删除相关的角色关系</span></span><br><span class="line">         iGdssAuthTsUserRoleService.deleteByUserId(id);</span><br><span class="line">            <span class="type">GdssUserTeUser</span> <span class="variable">thisUser</span> <span class="operator">=</span> iGdssUserTeUserService.getEntityById(id);</span><br><span class="line">         <span class="comment">//删除用户</span></span><br><span class="line">         iGdssUserTeUserService.delEntityById(id, <span class="literal">null</span>);</span><br><span class="line">         <span class="keyword">if</span> (thisUser != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//删除企业的密钥</span></span><br><span class="line">                iGdssSecTeKeyService.deleteByUsername(thisUser.getUserName());</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">(UserVo vo)</span> <span class="keyword">throws</span> BusException &#123;</span><br><span class="line">      <span class="type">GdssUserTeUser</span> <span class="variable">user</span> <span class="operator">=</span> iGdssUserTeUserService.getEntityById(vo.getId());</span><br><span class="line">      <span class="keyword">if</span>(user==<span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusException</span>(<span class="string">&quot;00000005&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      user.setNickname(StringUtil.trim(vo.getNickname()));</span><br><span class="line">      user.setMobile(StringUtil.trim(vo.getMobile()));</span><br><span class="line">      user.setEmail(StringUtil.trim(vo.getEmail()));</span><br><span class="line">      user.setAuditPower( vo.getAuditPower() );</span><br><span class="line">      iGdssUserTeUserService.updateEntityById(user, user.getId(), user.getId());</span><br><span class="line">      </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String <span class="title function_">readDefaultPwd</span><span class="params">()</span> <span class="keyword">throws</span> BusException&#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">cfgCode</span> <span class="operator">=</span> <span class="string">&quot;SSP_USER_DEFAULT_PWD&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> iCfgService.getCfgString(cfgCode);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtil.isEmpty(pwd))&#123;</span><br><span class="line">            <span class="keyword">return</span> pwd;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">GdssCfgTeConfig</span> <span class="variable">cfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GdssCfgTeConfig</span>();</span><br><span class="line">        cfg.setCode(cfgCode);</span><br><span class="line">        cfg.setCfgValue(<span class="string">&quot;gdxx688&quot;</span>);</span><br><span class="line">        cfg.setRemark(<span class="string">&quot;用户默认密码&quot;</span>);</span><br><span class="line">        cfg = iGdssCfgTeConfigService.addEntity(cfg);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> cfg.getCfgValue();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cacheBus</span><span class="params">(String username)</span> <span class="keyword">throws</span> BusException &#123;</span><br><span class="line">       <span class="keyword">if</span> (GdssUserTeUser.Info.ADM_USERNAME.equals(username))&#123;</span><br><span class="line">           threadPoolExecutor.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    cacheBusByUser(username);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (BusException e) &#123; LOG.error(<span class="string">&quot;&quot;</span>, e); &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cacheBusByUser(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">cacheBusByUser</span><span class="params">(String username)</span> <span class="keyword">throws</span> BusException &#123;</span><br><span class="line">       <span class="keyword">if</span> ( ToolUtil.isNull(username) ) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">       Map&lt;String, List&lt;String&gt;&gt; codeKeyMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">        codeKeyMap.put(GdssBusTeApiBusiness.Info.CACHE_BUS_API2_CREATE_PREFIX, Arrays.asList(ApiCodeEnum.CREATE_IDENTIFIER.name()));</span><br><span class="line">        codeKeyMap.put(GdssBusTeApiBusiness.Info.CACHE_BUS_API2_MODIFY_PREFIX, Arrays.asList(ApiCodeEnum.ADD_IDENTIFIER_ATTR.name(), ApiCodeEnum.MODIFY_IDENTIFIER_ATTR.name(), ApiCodeEnum.REMOVE_IDENTIFIER_ATTR.name()) );</span><br><span class="line">        codeKeyMap.put(GdssBusTeApiBusiness.Info.CACHE_BUS_API2_DEL_PREFIX, Arrays.asList(ApiCodeEnum.REMOVE_IDENTIFIER.name()) );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, List&lt;String&gt;&gt; entry : codeKeyMap.entrySet()) &#123;</span><br><span class="line">            List&lt;String&gt; codes = entry.getValue();</span><br><span class="line">            <span class="type">GdssBusTeApiBusiness</span> <span class="variable">param</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GdssBusTeApiBusiness</span>();</span><br><span class="line">            param.setUsername(username);</span><br><span class="line">            param.setApiCodeList(codes);</span><br><span class="line">            param.setOrderBy(<span class="string">&quot;CREATE_TIME desc&quot;</span>);</span><br><span class="line">            List&lt;GdssBusTeApiBusiness&gt; businessesList = iGdssBusTeApiBusinessService.searchEntity(param, GdssBusTeApiBusiness.Info.BUS_API_CACHE_LIMIT, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (businessesList == <span class="literal">null</span> || businessesList.isEmpty()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey() + username;</span><br><span class="line">            List&lt;List&lt;String&gt;&gt; idHandleList = businessesList.stream().map(item -&gt; Arrays.asList(item.getId(), item.getHandle())).collect(Collectors.toList());</span><br><span class="line">            saveBusToRedis(key, idHandleList);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveBusToRedis</span><span class="params">(String key, List&lt;List&lt;String&gt;&gt; cacheList)</span>&#123;</span><br><span class="line">        redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">SessionCallback</span>&lt;List&lt;Object&gt;&gt;() &#123;</span><br><span class="line">            <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">execute</span><span class="params">(RedisOperations operations)</span> <span class="keyword">throws</span> DataAccessException &#123;</span><br><span class="line">                operations.multi();</span><br><span class="line">                operations.delete(key);</span><br><span class="line">                <span class="keyword">if</span> ( !cacheList.isEmpty() )&#123;</span><br><span class="line">                    operations.opsForList().rightPushAll(key, cacheList);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> operations.exec();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cacheAdmBus</span><span class="params">()</span> &#123;</span><br><span class="line">       threadPoolExecutor.submit(() -&gt; &#123;</span><br><span class="line">           <span class="comment">//admin成功</span></span><br><span class="line">            <span class="type">GdssBusTeApiBusiness</span> <span class="variable">param</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GdssBusTeApiBusiness</span>();</span><br><span class="line">            param.setResult(ApiBusinessInstance.Info.RESULT_SUCCESS);</span><br><span class="line">            param.setOrderBy(<span class="string">&quot;CREATE_TIME desc&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                List&lt;GdssBusTeApiBusiness&gt; businessesList = iGdssBusTeApiBusinessService.searchEntity(param, GdssBusTeApiBusiness.Info.BUS_API_CACHE_LIMIT, <span class="number">1</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> GdssBusTeApiBusiness.Info.CACHE_BUS_API2_SUC_PREFIX + GdssUserTeUser.Info.ADM_USERNAME;</span><br><span class="line">                cacheAdminBusToRedis(businessesList, key);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">                LOG.error(<span class="string">&quot;&quot;</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//admin错误业务</span></span><br><span class="line">            param.setResult(ApiBusinessInstance.Info.RESULT_FAILURE);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                List&lt;GdssBusTeApiBusiness&gt; businessesList = iGdssBusTeApiBusinessService.searchEntity(param, GdssBusTeApiBusiness.Info.BUS_API_CACHE_LIMIT, <span class="number">1</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> GdssBusTeApiBusiness.Info.CACHE_BUS_API2_ERROR_PREFIX + GdssUserTeUser.Info.ADM_USERNAME;</span><br><span class="line">                cacheAdminBusToRedis(businessesList, key);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">                LOG.error(<span class="string">&quot;&quot;</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">cacheAdminBusToRedis</span><span class="params">(List&lt;GdssBusTeApiBusiness&gt; businessesList, String key)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (businessesList != <span class="literal">null</span> &amp;&amp; !businessesList.isEmpty())&#123;</span><br><span class="line">            List&lt;List&lt;String&gt;&gt; idHandleList = businessesList.stream().map(item -&gt; Arrays.asList(item.getId(), item.getHandle())).collect(Collectors.toList());</span><br><span class="line">            <span class="comment">//先push，再清除</span></span><br><span class="line">            saveBusToRedis(key, idHandleList);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cacheAllBus</span><span class="params">()</span> <span class="keyword">throws</span> BusException &#123;</span><br><span class="line">        <span class="comment">//查所有开通普通用户</span></span><br><span class="line">        <span class="type">GdssUserTeUser</span> <span class="variable">param</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GdssUserTeUser</span>();</span><br><span class="line">        param.setType(GdssUserTeUser.Info.TYPE_COMMON);</span><br><span class="line">        param.setStatus(GdssUserTeUser.Info.STATUS_VALID);</span><br><span class="line">        List&lt;GdssUserTeUser&gt; userList = iGdssUserTeUserService.searchEntity(param, <span class="number">10_000</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (userList == <span class="literal">null</span> || userList.isEmpty()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        threadPoolExecutor.submit(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (GdssUserTeUser user : userList) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    cacheBusByUser( user.getUserName() );</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex)&#123; LOG.error(<span class="string">&quot;&quot;</span>, ex); &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-7-IGdssUserTeUserService"><a href="#6-7-IGdssUserTeUserService" class="headerlink" title="6.7 IGdssUserTeUserService"></a>6.7 IGdssUserTeUserService</h2><p>usercenter-dao-service  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lll.iic.user.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IGdssUserTeUserService</span> <span class="keyword">extends</span> <span class="title class_">ILllDbRedisBaseService</span>&lt;GdssUserTeUser&gt;</span><br></pre></td></tr></table></figure>

<h2 id="6-8-GdssUserTeUserServiceImpl"><a href="#6-8-GdssUserTeUserServiceImpl" class="headerlink" title="6.8 GdssUserTeUserServiceImpl"></a>6.8 GdssUserTeUserServiceImpl</h2><p>usercenter-dao-service-impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lll.iic.user.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GdssUserTeUserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IGdssUserTeUserService</span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> IGdssUserTeUserMapper iGdssUserTeUserMapper;</span><br><span class="line">	</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="6-9-IGdssUserTeUserMapper"><a href="#6-9-IGdssUserTeUserMapper" class="headerlink" title="6.9 IGdssUserTeUserMapper"></a>6.9 IGdssUserTeUserMapper</h2><p>usercenter-dao-mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lll.iic.user.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IGdssUserTeUserMapper</span> <span class="keyword">extends</span> <span class="title class_">ILllBaseMapper</span>&lt;GdssUserTeUser&gt;</span><br></pre></td></tr></table></figure>



<h2 id="6-10-mybatis-GdssUserTeUser-xml"><a href="#6-10-mybatis-GdssUserTeUser-xml" class="headerlink" title="6.10 mybatis-GdssUserTeUser.xml"></a>6.10 mybatis-GdssUserTeUser.xml</h2><p>usercenter-dao-resource</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.lll.iic.user.mapper.IGdssUserTeUserMapper&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;GdssUserTeUserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;cn.lll.iic.user.model.GdssUserTeUser&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>Springboot</tag>
        <tag>Mybatis</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树好题</title>
    <url>/2022/05/15/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%A5%BD%E9%A2%98/</url>
    <content><![CDATA[<h1 id="binary-tree好题选编"><a href="#binary-tree好题选编" class="headerlink" title="binary tree好题选编"></a>binary tree好题选编</h1><h2 id="530-Minimum-Absolute-Difference-in-BST"><a href="#530-Minimum-Absolute-Difference-in-BST" class="headerlink" title="530. Minimum Absolute Difference in BST"></a><a href="https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst/">530. Minimum Absolute Difference in BST</a></h2><p>注意：binary search tree中序遍历即得递增数组</p>
<h3 id="法一：递归-暴力搜索"><a href="#法一：递归-暴力搜索" class="headerlink" title="法一：递归 暴力搜索"></a>法一：递归 暴力搜索</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归 暴力搜索</span></span><br><span class="line">List&lt;Integer&gt; nodes;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMinimumDifference</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.nodes=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="type">int</span> min=Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nodes.size(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> dif=Math.abs(nodes.get(i)-nodes.get(i-<span class="number">1</span>));</span><br><span class="line">        min=Math.min(min,dif);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//左 根 右</span></span><br><span class="line">    dfs(root.left);</span><br><span class="line">    nodes.add(root.val);</span><br><span class="line">    dfs(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：双指针优化"><a href="#法二：双指针优化" class="headerlink" title="法二：双指针优化"></a>法二：双指针优化</h3><p>在中序遍历过程中，记录之前的最小值，与当前差值比较</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归 双指针</span></span><br><span class="line"><span class="type">int</span> min;</span><br><span class="line">TreeNode pre;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMinimumDifference</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.min=Integer.MAX_VALUE;</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root.left);</span><br><span class="line">    <span class="keyword">if</span>(pre!=<span class="literal">null</span>)&#123;</span><br><span class="line">        min=Math.min(root.val-pre.val,min);</span><br><span class="line">    &#125;</span><br><span class="line">    pre=root;</span><br><span class="line">    dfs(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法三：双指针优化的非递归写法（统一风格）："><a href="#法三：双指针优化的非递归写法（统一风格）：" class="headerlink" title="法三：双指针优化的非递归写法（统一风格）："></a>法三：双指针优化的非递归写法（统一风格）：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//非递归</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMinimumDifference</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    TreeNode pre=<span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> min=Integer.MAX_VALUE;</span><br><span class="line">    Deque&lt;TreeNode&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//出栈：左 根 右</span></span><br><span class="line">    <span class="comment">//进栈：右 根 左</span></span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">        TreeNode node=stack.pop();</span><br><span class="line">        <span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(node);</span><br><span class="line">            stack.push(<span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            TreeNode cur=stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(pre!=<span class="literal">null</span>)&#123;</span><br><span class="line">                min=Math.min(min,cur.val-pre.val);</span><br><span class="line">            &#125;</span><br><span class="line">            pre=cur;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="501-Find-Mode-in-Binary-Search-Tree"><a href="#501-Find-Mode-in-Binary-Search-Tree" class="headerlink" title="501. Find Mode in Binary Search Tree"></a><a href="https://leetcode-cn.com/problems/find-mode-in-binary-search-tree/">501. Find Mode in Binary Search Tree</a></h2><h3 id="法一：笨方法，未利用BST特性"><a href="#法一：笨方法，未利用BST特性" class="headerlink" title="法一：笨方法，未利用BST特性"></a>法一：笨方法，未利用BST特性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode501</span> &#123;</span><br><span class="line">    Map&lt;Integer,Integer&gt; map;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findMode(TreeNode root) &#123;</span><br><span class="line">        <span class="built_in">this</span>.map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        inorder(root);</span><br><span class="line">        <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer i : map.keySet()) &#123;</span><br><span class="line">            max=Math.max(max,map.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Integer i : map.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(map.get(i)==max)&#123;</span><br><span class="line">                list.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[list.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">            res[i]=list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">inorder</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="comment">//左 根 右</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inorder(root.left);</span><br><span class="line">        map.put(root.val,map.getOrDefault(root.val,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        inorder(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：利用BST的中序遍历特性，递归写法"><a href="#法二：利用BST的中序遍历特性，递归写法" class="headerlink" title="法二：利用BST的中序遍历特性，递归写法"></a>法二：利用BST的中序遍历特性，递归写法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list;</span><br><span class="line"><span class="type">int</span> maxCount;</span><br><span class="line"><span class="type">int</span> pre;</span><br><span class="line"><span class="type">int</span> curCount;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] findMode(TreeNode root) &#123;</span><br><span class="line">    <span class="built_in">this</span>.list=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="built_in">this</span>.maxCount=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.pre=Integer.MIN_VALUE;</span><br><span class="line">    <span class="built_in">this</span>.curCount=<span class="number">0</span>;</span><br><span class="line">    inorder(root);</span><br><span class="line">    <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[list.size()];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">        res[i]=list.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">inorder</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inorder(root.left);</span><br><span class="line">    <span class="keyword">if</span>(pre!=root.val || pre==Integer.MIN_VALUE)&#123;</span><br><span class="line">        curCount=<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        curCount++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(curCount&gt;maxCount)&#123;</span><br><span class="line">        maxCount=curCount;</span><br><span class="line">        list.removeAll(list);</span><br><span class="line">        list.add(root.val);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(curCount==maxCount)&#123;</span><br><span class="line">        list.add(root.val);</span><br><span class="line">    &#125;</span><br><span class="line">    pre=root.val;</span><br><span class="line">    inorder(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：利用BST的中序遍历特性，统一风格非递归写法"><a href="#法二：利用BST的中序遍历特性，统一风格非递归写法" class="headerlink" title="法二：利用BST的中序遍历特性，统一风格非递归写法"></a>法二：利用BST的中序遍历特性，统一风格非递归写法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] findMode(TreeNode root) &#123;</span><br><span class="line">    List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> maxCount=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> curCount=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> pre=Integer.MIN_VALUE;</span><br><span class="line">    Deque&lt;TreeNode&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">        TreeNode node=stack.pop();</span><br><span class="line">        <span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123; <span class="comment">//只负责访问</span></span><br><span class="line">            <span class="comment">//出栈 左 根 右</span></span><br><span class="line">            <span class="comment">//进栈 右 根 左</span></span><br><span class="line">            <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(node);</span><br><span class="line">            stack.push(<span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; <span class="comment">//只负责处理</span></span><br><span class="line">            node=stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(pre==Integer.MIN_VALUE || pre!=node.val)&#123;</span><br><span class="line">                curCount=<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                curCount++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(curCount&gt;maxCount)&#123;</span><br><span class="line">                maxCount=curCount;</span><br><span class="line">                list.removeAll(list);</span><br><span class="line">                list.add(node.val);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(curCount==maxCount)&#123;</span><br><span class="line">                list.add(node.val);</span><br><span class="line">            &#125;</span><br><span class="line">            pre=node.val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[list.size()];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">        res[i]=list.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="222-Count-Complete-Tree-Nodes"><a href="#222-Count-Complete-Tree-Nodes" class="headerlink" title="222. Count Complete Tree Nodes"></a><a href="https://leetcode-cn.com/problems/count-complete-tree-nodes/">222. Count Complete Tree Nodes</a></h2><p>利用完全二叉树的特点：完全二叉树的左右子树中至少有一棵是满二叉树，另一棵为完全二叉树：</p>
<ul>
<li>若左右子树高度相同，则左子树必为满二叉树</li>
<li>若左右子树高度不同，则右子树必为满二叉树</li>
</ul>
<p>那么满二叉树和根节点的总个数为2^n，其中n为满二叉树的深度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode222</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> leftDepth=depth(root.left);</span><br><span class="line">        <span class="type">int</span> rightDepth=depth(root.right);</span><br><span class="line">        <span class="keyword">if</span>(leftDepth==rightDepth)&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="number">1</span>&lt;&lt;leftDepth)+countNodes(root.right); <span class="comment">//括号不能省略，&lt;&lt;优先级低于+</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="number">1</span>&lt;&lt;rightDepth)+countNodes(root.left);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">depth</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="comment">/*if(root==null)&#123;</span></span><br><span class="line"><span class="comment">            return 0;</span></span><br><span class="line"><span class="comment">        &#125;else&#123;</span></span><br><span class="line"><span class="comment">            return 1+Math.max(depth(root.left),depth(root.right));</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="type">int</span> depth=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(root!=<span class="literal">null</span>)&#123;</span><br><span class="line">            root=root.left;</span><br><span class="line">            depth++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="701-Insert-into-a-Binary-Search-Tree"><a href="#701-Insert-into-a-Binary-Search-Tree" class="headerlink" title="701. Insert into a Binary Search Tree"></a><a href="https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/">701. Insert into a Binary Search Tree</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode701</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">insertIntoBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            TreeNode node=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.val&lt;val)&#123;</span><br><span class="line">            root.right=insertIntoBST(root.right,val);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            root.left=insertIntoBST(root.left,val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="450-Delete-Node-in-a-BST"><a href="#450-Delete-Node-in-a-BST" class="headerlink" title="450. Delete Node in a BST"></a><a href="https://leetcode-cn.com/problems/delete-node-in-a-bst/">450. Delete Node in a BST</a></h2><p>当找到待删除node时，分三类讨论：</p>
<ul>
<li>若为叶子节点，则直接删除，返回null即可</li>
<li>若左子树或右子树为空，则直接删除，返回右子树或左子树即可</li>
<li>若左右子树都非空，则找到右子树中的最小节点min；从右子树中删除min；调换root与min，使min成为新的root并返回</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode450</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">deleteNode</span><span class="params">(TreeNode root, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.val==key)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(root.left==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> root.right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(root.right==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            TreeNode node=findMin(root.right);</span><br><span class="line">            root.right=deleteNode(root.right,node.val);</span><br><span class="line">            node.left=root.left;</span><br><span class="line">            node.right=root.right;</span><br><span class="line">            root=node;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val&lt;key)&#123;</span><br><span class="line">            root.right=deleteNode(root.right,key);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            root.left=deleteNode(root.left,key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeNode <span class="title function_">findMin</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            root=root.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="669-Trim-a-Binary-Search-Tree"><a href="#669-Trim-a-Binary-Search-Tree" class="headerlink" title="669. Trim a Binary Search Tree"></a><a href="https://leetcode.cn/problems/trim-a-binary-search-tree/">669. Trim a Binary Search Tree</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode669</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">trimBST</span><span class="params">(TreeNode root, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="comment">//trim:root.val&lt;low时，删除root和root.left</span></span><br><span class="line">        <span class="comment">//trim:root.val&gt;high时，删除root和root.right</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.val&gt;=low &amp;&amp; root.val&lt;=high)&#123;</span><br><span class="line">            root.left=trimBST(root.left,low,high);</span><br><span class="line">            root.right=trimBST(root.right,low,high);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val&lt;low)&#123;</span><br><span class="line">            root=trimBST(root.right,low,high);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val&gt;high)&#123;</span><br><span class="line">            root=trimBST(root.left,low,high);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="108-Convert-Sorted-Array-to-Binary-Search-Tree"><a href="#108-Convert-Sorted-Array-to-Binary-Search-Tree" class="headerlink" title="108. Convert Sorted Array to Binary Search Tree"></a><a href="https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/">108. Convert Sorted Array to Binary Search Tree</a></h2><h3 id="法一：递归"><a href="#法一：递归" class="headerlink" title="法一：递归"></a>法一：递归</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode108</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">sortedArrayToBST</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">//find mid</span></span><br><span class="line">        <span class="keyword">return</span> helper(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeNode <span class="title function_">helper</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left&gt;right)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">        TreeNode root=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(nums[mid]);</span><br><span class="line">        root.left=helper(nums,left,mid-<span class="number">1</span>);</span><br><span class="line">        root.right=helper(nums,mid+<span class="number">1</span>,right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="法二：迭代-难想"><a href="#法二：迭代-难想" class="headerlink" title="法二：迭代(难想!)"></a>法二：迭代(难想!)</h3><p>迭代法可以通过三个队列来模拟，一个队列放遍历的节点，一个队列放左区间下标，一个队列放右区间下标。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">sortedArrayToBST</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">0</span>);   <span class="comment">// 初始根节点</span></span><br><span class="line">        queue&lt;TreeNode*&gt; nodeQue;           <span class="comment">// 放遍历的节点</span></span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; leftQue;                 <span class="comment">// 保存左区间下标</span></span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; rightQue;                <span class="comment">// 保存右区间下标</span></span><br><span class="line">        nodeQue.<span class="built_in">push</span>(root);                 <span class="comment">// 根节点入队列</span></span><br><span class="line">        leftQue.<span class="built_in">push</span>(<span class="number">0</span>);                    <span class="comment">// 0为左区间下标初始位置</span></span><br><span class="line">        rightQue.<span class="built_in">push</span>(nums.<span class="built_in">size</span>() - <span class="number">1</span>);     <span class="comment">// nums.size() - 1为右区间下标初始位置</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!nodeQue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode* curNode = nodeQue.<span class="built_in">front</span>();</span><br><span class="line">            nodeQue.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> left = leftQue.<span class="built_in">front</span>(); leftQue.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> right = rightQue.<span class="built_in">front</span>(); rightQue.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> mid = left + ((right - left) / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            curNode-&gt;val = nums[mid];       <span class="comment">// 将mid对应的元素给中间节点</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (left &lt;= mid - <span class="number">1</span>) &#123;          <span class="comment">// 处理左区间</span></span><br><span class="line">                curNode-&gt;left = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">0</span>);</span><br><span class="line">                nodeQue.<span class="built_in">push</span>(curNode-&gt;left);</span><br><span class="line">                leftQue.<span class="built_in">push</span>(left);</span><br><span class="line">                rightQue.<span class="built_in">push</span>(mid - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (right &gt;= mid + <span class="number">1</span>) &#123;         <span class="comment">// 处理右区间</span></span><br><span class="line">                curNode-&gt;right = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">0</span>);</span><br><span class="line">                nodeQue.<span class="built_in">push</span>(curNode-&gt;right);</span><br><span class="line">                leftQue.<span class="built_in">push</span>(mid + <span class="number">1</span>);</span><br><span class="line">                rightQue.<span class="built_in">push</span>(right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>







<h2 id="538-Convert-BST-to-Greater-Tree"><a href="#538-Convert-BST-to-Greater-Tree" class="headerlink" title="538. Convert BST to Greater Tree"></a><a href="https://leetcode.cn/problems/convert-bst-to-greater-tree/">538. Convert BST to Greater Tree</a></h2><p>法一：递归</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode538</span> &#123;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">convertBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        sum=<span class="number">0</span>;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="comment">//left root right</span></span><br><span class="line">        <span class="comment">//right root left</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root.right);</span><br><span class="line">        sum+=root.val;</span><br><span class="line">        root.val=sum;</span><br><span class="line">        dfs(root.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>法二：迭代</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">convertBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Deque&lt;TreeNode&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">        TreeNode node=stack.pop();</span><br><span class="line">        <span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//left root right   inorder出栈顺序	ASC</span></span><br><span class="line">            <span class="comment">//right root left	reverse_inorder出栈顺序	DESC</span></span><br><span class="line">            <span class="comment">//left root right	reverse_inorder进栈顺序	</span></span><br><span class="line">            <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(node);</span><br><span class="line">            stack.push(<span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            node=stack.pop();</span><br><span class="line">            sum+=node.val;</span><br><span class="line">            node.val=sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="114-Flatten-Binary-Tree-to-Linked-List"><a href="#114-Flatten-Binary-Tree-to-Linked-List" class="headerlink" title="114. Flatten Binary Tree to Linked List"></a><a href="https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/">114. Flatten Binary Tree to Linked List</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode114</span> &#123;</span><br><span class="line"></span><br><span class="line">    TreeNode pre;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flatten</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        dfs(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode cur)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode right=cur.right;</span><br><span class="line">        <span class="keyword">if</span>(pre!=<span class="literal">null</span>)&#123;</span><br><span class="line">            pre.left=<span class="literal">null</span>;</span><br><span class="line">            pre.right=cur;</span><br><span class="line">        &#125;</span><br><span class="line">        pre=cur;</span><br><span class="line">        dfs(cur.left);</span><br><span class="line">        dfs(right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="96-Unique-Binary-Search-Trees"><a href="#96-Unique-Binary-Search-Trees" class="headerlink" title="96. Unique Binary Search Trees"></a><a href="https://leetcode.cn/problems/unique-binary-search-trees/">96. Unique Binary Search Trees</a></h2><p>思路：</p>
<ol>
<li><p>一棵BST由root,left和right构成</p>
<p>其中left和right也是BST</p>
</li>
<li><p>n个节点的BST共有一下几种可能：</p>
<table>
<thead>
<tr>
<th>left</th>
<th>right</th>
</tr>
</thead>
<tbody><tr>
<td>n-1</td>
<td>0</td>
</tr>
<tr>
<td>n-2</td>
<td>1</td>
</tr>
<tr>
<td>n-3</td>
<td>2</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
<tr>
<td>1</td>
<td>n-2</td>
</tr>
<tr>
<td>0</td>
<td>n-1</td>
</tr>
</tbody></table>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode96</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numTrees</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i-<span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                dp[i]+=dp[j]*dp[i-<span class="number">1</span>-j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="95-Unique-Binary-Search-Trees-II"><a href="#95-Unique-Binary-Search-Trees-II" class="headerlink" title="95. Unique Binary Search Trees II"></a><a href="https://leetcode.cn/problems/unique-binary-search-trees-ii/">95. Unique Binary Search Trees II</a></h2><p>思路：</p>
<ol>
<li>穷举root</li>
<li>穷举left</li>
<li>穷举right</li>
<li>构造树</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode95</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title function_">generateTrees</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> build(<span class="number">1</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;TreeNode&gt; <span class="title function_">build</span><span class="params">(<span class="type">int</span> low, <span class="type">int</span> high)</span>&#123;</span><br><span class="line">        List&lt;TreeNode&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(low&gt;high)&#123;</span><br><span class="line">            res.add(<span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=low; i&lt;=high; i++)&#123;</span><br><span class="line">            List&lt;TreeNode&gt; left=build(low,i-<span class="number">1</span>);</span><br><span class="line">            List&lt;TreeNode&gt; right=build(i+<span class="number">1</span>,high);</span><br><span class="line">            <span class="keyword">for</span> (TreeNode leftNode : left) &#123;</span><br><span class="line">                <span class="keyword">for</span> (TreeNode rightNode : right) &#123;</span><br><span class="line">                    TreeNode root=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(i);</span><br><span class="line">                    root.left=leftNode;</span><br><span class="line">                    root.right=rightNode;</span><br><span class="line">                    res.add(root);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="101-Symmetric-Tree"><a href="#101-Symmetric-Tree" class="headerlink" title="101. Symmetric Tree"></a><a href="https://leetcode.cn/problems/symmetric-tree/">101. Symmetric Tree</a></h2><h3 id="法一：递归-1"><a href="#法一：递归-1" class="headerlink" title="法一：递归"></a>法一：递归</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode101</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> helper(root.left,root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">helper</span><span class="params">(TreeNode left, TreeNode right)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left==<span class="literal">null</span> &amp;&amp; right==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left==<span class="literal">null</span> || right==<span class="literal">null</span> || left.val!=right.val)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> helper(left.left,right.right) &amp;&amp; helper(left.right,right.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="法二：迭代"><a href="#法二：迭代" class="headerlink" title="法二：迭代"></a>法二：迭代</h3><p>注意：</p>
<ol>
<li>不能直接由中序遍历结果或层序遍历结果判断</li>
<li>可以参考层序遍历，只是null也进队</li>
<li>每次判断头尾是否相等，直到队为空</li>
<li>更新队列时，分别在头和尾插入</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    Deque&lt;TreeNode&gt; deque=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    deque.push(root.left);</span><br><span class="line">    deque.push(root.right);</span><br><span class="line">    <span class="keyword">while</span>(!deque.isEmpty())&#123;</span><br><span class="line">        TreeNode left=deque.pollFirst();</span><br><span class="line">        TreeNode right=deque.pollLast();</span><br><span class="line">        <span class="keyword">if</span>(left==<span class="literal">null</span> &amp;&amp; right==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left==<span class="literal">null</span> || right==<span class="literal">null</span> || left.val!=right.val)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        deque.offerFirst(left.right);</span><br><span class="line">        deque.offerFirst(left.left);</span><br><span class="line">        deque.offerLast(right.left);</span><br><span class="line">        deque.offerLast(right.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="297-Serialize-and-Deserialize-Binary-Tree"><a href="#297-Serialize-and-Deserialize-Binary-Tree" class="headerlink" title="297. Serialize and Deserialize Binary Tree"></a>297. Serialize and Deserialize Binary Tree</h2><ul>
<li>tree to string</li>
<li>string to tree</li>
</ul>
<h3 id="DFS-correct-but-slow"><a href="#DFS-correct-but-slow" class="headerlink" title="DFS: correct but slow"></a>DFS: correct but slow</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">rserialize</span><span class="params">(TreeNode root, String str)</span> &#123;</span><br><span class="line">  <span class="comment">// Recursive serialization.</span></span><br><span class="line">  <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">    str += <span class="string">&quot;null,&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    str += str.valueOf(root.val) + <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    str = rserialize(root.left, str);</span><br><span class="line">    str = rserialize(root.right, str);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Encodes a tree to a single string.</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">serialize</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> rserialize(root, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">rdeserialize</span><span class="params">(List&lt;String&gt; l)</span> &#123;</span><br><span class="line">  <span class="comment">// Recursive deserialization.</span></span><br><span class="line">  <span class="keyword">if</span> (l.get(<span class="number">0</span>).equals(<span class="string">&quot;null&quot;</span>)) &#123;</span><br><span class="line">    l.remove(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(Integer.valueOf(l.get(<span class="number">0</span>)));</span><br><span class="line">  l.remove(<span class="number">0</span>);</span><br><span class="line">  root.left = rdeserialize(l);</span><br><span class="line">  root.right = rdeserialize(l);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Decodes your encoded data to tree.</span></span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">deserialize</span><span class="params">(String data)</span> &#123;</span><br><span class="line">  String[] data_array = data.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">  List&lt;String&gt; data_list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;String&gt;(Arrays.asList(data_array));</span><br><span class="line">  <span class="keyword">return</span> rdeserialize(data_list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="DFS-wrong-answer"><a href="#DFS-wrong-answer" class="headerlink" title="DFS: wrong answer"></a>DFS: wrong answer</h3><p>注意：val可以重复，无法通过preOrder中root的值定位其在inOrder中的位置！！！！！！！！！！！！！！！！！！！！！！！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder sb;</span><br><span class="line"><span class="comment">// Encodes a tree to a single string.</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">serialize</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    pre(root);</span><br><span class="line">    sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">    sb.append(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">    in(root);</span><br><span class="line">    sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Decodes your encoded data to tree.</span></span><br><span class="line"><span class="comment">// 1,2,3,4,5</span></span><br><span class="line"><span class="comment">// 2,1,4,3,5</span></span><br><span class="line"><span class="comment">// 1, 2, 3 4 5</span></span><br><span class="line"><span class="comment">// 2, 1, 4 3 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//exception: </span></span><br><span class="line"><span class="comment">//3 2 3 4</span></span><br><span class="line"><span class="comment">//3 2 3 4</span></span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">deserialize</span><span class="params">(String data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(data==<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String[] split = data.split(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">    String[] pre=split[<span class="number">0</span>].split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    String[] in=split[<span class="number">1</span>].split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    <span class="type">int</span> n=pre.length;</span><br><span class="line">    <span class="keyword">return</span> build(pre,in,<span class="number">0</span>,n-<span class="number">1</span>,<span class="number">0</span>,n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TreeNode <span class="title function_">build</span><span class="params">(String[] pre, String[] in, <span class="type">int</span> pLeft, <span class="type">int</span> pRight, <span class="type">int</span> iLeft, <span class="type">int</span> iRight)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pLeft&gt;pRight || iLeft&gt;iRight)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String s=pre[pLeft];</span><br><span class="line">    <span class="type">int</span> val=Integer.valueOf(s);</span><br><span class="line">    TreeNode root=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">    <span class="type">int</span> i=iLeft;</span><br><span class="line">    <span class="keyword">for</span>(; i&lt;=iRight; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(in[i].equals(s))&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    root.left=build(pre,in,pLeft+<span class="number">1</span>,pLeft+i-iLeft,iLeft,i-<span class="number">1</span>);</span><br><span class="line">    root.right=build(pre,in,pLeft+i-iLeft+<span class="number">1</span>,pRight,i+<span class="number">1</span>,iRight);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">    <span class="comment">//[iLeft,i-1]</span></span><br><span class="line">    <span class="comment">//[i+1,iRight]</span></span><br><span class="line">    <span class="comment">//[pLeft+1,pLeft+1+i-1-iLeft]=&gt; [pLeft+1,pLeft+i-iLeft]</span></span><br><span class="line">    <span class="comment">//[pLeft+i-iLeft+1,pRight]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">pre</span><span class="params">(TreeNode cur)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sb.append(cur.val);</span><br><span class="line">    sb.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    pre(cur.left);</span><br><span class="line">    pre(cur.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">in</span><span class="params">(TreeNode cur)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    in(cur.left);</span><br><span class="line">    sb.append(cur.val);</span><br><span class="line">    sb.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    in(cur.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS:"></a>BFS:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Encodes a tree to a single string.</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">serialize</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">n</span> <span class="operator">=</span> <span class="string">&quot;null&quot;</span>, sep = <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        Queue&lt;TreeNode&gt; dq = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        dq.offer(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        TreeNode cur;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!dq.isEmpty()) &#123;</span><br><span class="line">            size = dq.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">                cur = dq.poll();</span><br><span class="line">                <span class="keyword">if</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">                    sb.append(cur.val);</span><br><span class="line">                    dq.offer(cur.left);</span><br><span class="line">                    dq.offer(cur.right);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sb.append(n);</span><br><span class="line">                &#125;</span><br><span class="line">                sb.append(sep);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes your encoded data to tree.</span></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">deserialize</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="literal">null</span> || data.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        String[] vals = data.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (vals == <span class="literal">null</span> || vals.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">n</span> <span class="operator">=</span> <span class="string">&quot;null&quot;</span>;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(Integer.parseInt(vals[<span class="number">0</span>]));</span><br><span class="line">        TreeNode cur, next;</span><br><span class="line">        Deque&lt;TreeNode&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>, index = <span class="number">1</span>;</span><br><span class="line">        dq.offer(root);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!dq.isEmpty()) &#123;</span><br><span class="line">            size = dq.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">                cur = dq.poll();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> index; j &lt; index + <span class="number">2</span> &amp;&amp; j &lt; vals.length; ++j) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (vals[j].equals(n)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (j % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                            cur.left = <span class="literal">null</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            cur.right = <span class="literal">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        next = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(Integer.parseInt(vals[j]));</span><br><span class="line">                        dq.offer(next);</span><br><span class="line">                        <span class="keyword">if</span> (j % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                            cur.left = next;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            cur.right = next;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                index += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h2 id="314-Binary-Tree-Vertical-Order-Traversal"><a href="#314-Binary-Tree-Vertical-Order-Traversal" class="headerlink" title="314. Binary Tree Vertical Order Traversal"></a>314. Binary Tree Vertical Order Traversal</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">      <span class="type">int</span> index;</span><br><span class="line">      TreeNode node;</span><br><span class="line">      Node(TreeNode node, <span class="type">int</span> index)&#123;</span><br><span class="line">          <span class="built_in">this</span>.index=index;</span><br><span class="line">          <span class="built_in">this</span>.node=node;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">verticalOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">      <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> res;</span><br><span class="line">      &#125;</span><br><span class="line">    TreeMap&lt;Integer,List&lt;Integer&gt;&gt; map=<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">    Deque&lt;Node&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    q.offer(<span class="keyword">new</span> <span class="title class_">Node</span>(root,<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        Node node=q.poll();</span><br><span class="line">        <span class="type">int</span> index=node.index;</span><br><span class="line">        TreeNode treeNode=node.node;</span><br><span class="line">        map.putIfAbsent(index,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        map.get(index).add(treeNode.val);</span><br><span class="line">        <span class="keyword">if</span>(treeNode.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            q.offer(<span class="keyword">new</span> <span class="title class_">Node</span>(treeNode.left,index-<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(treeNode.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            q.offer(<span class="keyword">new</span> <span class="title class_">Node</span>(treeNode.right,index+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (List&lt;Integer&gt; list : map.values()) &#123;</span><br><span class="line">        res.add(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="331-Verify-Preorder-Serialization-of-a-Binary-Tree"><a href="#331-Verify-Preorder-Serialization-of-a-Binary-Tree" class="headerlink" title="331. Verify Preorder Serialization of a Binary Tree"></a>331. Verify Preorder Serialization of a Binary Tree</h2><p>Some used stack. Some used the depth of a stack. Here I use a different perspective. In a binary tree, if we consider null as leaves, then</p>
<ul>
<li>all non-null node provides 2 outdegree and 1 indegree (2 children and 1 parent), except root</li>
<li>all null node provides 0 outdegree and 1 indegree (0 child and 1 parent).</li>
</ul>
<p>Suppose we try to build this tree. During building, we record the difference between out degree and in degree <code>diff</code> &#x3D; <code>outdegree - indegree</code>. When the next node comes, we then decrease <code>diff</code> by 1, because the node provides an in degree. If the node is not <code>null</code>, we increase diff by <code>2</code>, because it provides two out degrees. If a serialization is correct, diff should never be negative and diff will be zero when finished.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidSerialization</span><span class="params">(String preorder)</span> &#123;</span><br><span class="line">    String[] nodes = preorder.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">diff</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (String node: nodes) &#123;</span><br><span class="line">        <span class="keyword">if</span> (--diff &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (!node.equals(<span class="string">&quot;#&quot;</span>)) diff += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">return</span> <span class="variable">diff</span> <span class="operator">=</span>= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="951-Flip-Equivalent-Binary-Trees"><a href="#951-Flip-Equivalent-Binary-Trees" class="headerlink" title="951. Flip Equivalent Binary Trees"></a>951. Flip Equivalent Binary Trees</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">flipEquiv</span><span class="params">(TreeNode root1, TreeNode root2)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root1==<span class="literal">null</span> &amp;&amp; root2==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root1==<span class="literal">null</span> || root2==<span class="literal">null</span> || root1.val!=root2.val)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flipEquiv(root1.left,root2.left) &amp;&amp; flipEquiv(root1.right,root2.right)</span><br><span class="line">            || flipEquiv(root1.left,root2.right) &amp;&amp; flipEquiv(root1.right,root2.left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="814-Binary-Tree-Pruning"><a href="#814-Binary-Tree-Pruning" class="headerlink" title="814. Binary Tree Pruning"></a>814. Binary Tree Pruning</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">pruneTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode l=pruneTree(root.left);</span><br><span class="line">    TreeNode r=pruneTree(root.right);</span><br><span class="line">    <span class="keyword">if</span>(l==<span class="literal">null</span> &amp;&amp; r==<span class="literal">null</span> &amp;&amp; root.val==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    root.left=l;</span><br><span class="line">    root.right=r;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="958-Check-Completeness-of-a-Binary-Tree"><a href="#958-Check-Completeness-of-a-Binary-Tree" class="headerlink" title="958. Check Completeness of a Binary Tree"></a>958. Check Completeness of a Binary Tree</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCompleteTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    Deque&lt;TreeNode&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    q.offer(root);</span><br><span class="line">    <span class="type">boolean</span> lastLevel=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span> size=q.size();</span><br><span class="line">        <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            TreeNode cur=q.poll();</span><br><span class="line">            <span class="keyword">if</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(lastLevel)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                q.offer(cur.left);</span><br><span class="line">                q.offer(cur.right);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                lastLevel=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="1110-Delete-Nodes-And-Return-Forest"><a href="#1110-Delete-Nodes-And-Return-Forest" class="headerlink" title="1110. Delete Nodes And Return Forest"></a>1110. Delete Nodes And Return Forest</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;TreeNode&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Set&lt;Integer&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title function_">delNodes</span><span class="params">(TreeNode root, <span class="type">int</span>[] to_delete)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : to_delete) &#123;</span><br><span class="line">        set.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="keyword">if</span>(root.val!=<span class="number">0</span>)&#123;</span><br><span class="line">        res.add(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(node.left);</span><br><span class="line">    dfs(node.right);</span><br><span class="line">    <span class="keyword">if</span>(node.left!=<span class="literal">null</span> &amp;&amp; node.left.val==<span class="number">0</span>)&#123;</span><br><span class="line">        node.left=<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node.right!=<span class="literal">null</span> &amp;&amp; node.right.val==<span class="number">0</span>)&#123;</span><br><span class="line">        node.right=<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(set.contains(node.val))&#123;</span><br><span class="line">        <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            res.add(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            res.add(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        node.val=<span class="number">0</span>; <span class="comment">//to be deleted by its parent</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="654-Maximum-Binary-Tree"><a href="#654-Maximum-Binary-Tree" class="headerlink" title="654. Maximum Binary Tree"></a>654. Maximum Binary Tree</h2><p>This is also called a Cartesian Tree. One interesting property is that if we do an in-order traversal, we get the array back which we used to create it.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr;</span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">constructMaximumBinaryTree</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    arr=nums;</span><br><span class="line">    <span class="keyword">return</span> dfs(<span class="number">0</span>,arr.length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TreeNode <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&gt;right)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(left==right)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(arr[left]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> idx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=left; i&lt;=right; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]&gt;max)&#123;</span><br><span class="line">            max=arr[i];</span><br><span class="line">            idx=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode node=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(arr[idx]);</span><br><span class="line">    node.left=dfs(left,idx-<span class="number">1</span>);</span><br><span class="line">    node.right=dfs(idx+<span class="number">1</span>,right);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>binary_tree</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的统一风格迭代法</title>
    <url>/2022/04/18/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%BB%9F%E4%B8%80%E9%A3%8E%E6%A0%BC%E8%BF%AD%E4%BB%A3%E6%B3%95/</url>
    <content><![CDATA[<h1 id="1-统一风格迭代法原理"><a href="#1-统一风格迭代法原理" class="headerlink" title="1. 统一风格迭代法原理"></a>1. 统一风格迭代法原理</h1><h2 id="1-1-问题描述"><a href="#1-1-问题描述" class="headerlink" title="1.1 问题描述"></a>1.1 问题描述</h2><p>前序和后序本质一样： 根左右 -&gt; 根右左 -&gt; 左右根</p>
<p>只需改变前序遍历的左右子树处理顺序，再reverse最终结果，即得后序遍历</p>
<p>但是难以统一前序后序与中序</p>
<p>核心问题：节点访问顺序与处理顺序不同！</p>
<p>以中序遍历为例，先访问根节点，但此时不能处理（输出结果），必须等左子树处理完毕，才能处理根节点。</p>
<h2 id="1-2-解决思路"><a href="#1-2-解决思路" class="headerlink" title="1.2 解决思路"></a>1.2 解决思路</h2><p>preorder 根左右       进栈顺序应为右左根</p>
<p>inorder 左根右          进栈顺序应为右根左</p>
<p>postorder 左右根      进栈顺序应为根右左</p>
<p><strong>将访问的节点放入栈中，把要处理的节点也放入栈中但是要紧接着放入一个空指针作为标记。</strong></p>
<p>只有当遇到空指针时，才将栈顶下一个节点放进结果集</p>
<h2 id="1-3-前序遍历代码"><a href="#1-3-前序遍历代码" class="headerlink" title="1.3 前序遍历代码"></a>1.3 前序遍历代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">       List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">       Stack&lt;TreeNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">if</span> (root != <span class="literal">null</span>) st.push(root);</span><br><span class="line">       <span class="keyword">while</span> (!st.empty()) &#123;</span><br><span class="line">           <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> st.peek();</span><br><span class="line">           <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">               st.pop(); <span class="comment">// 将该节点弹出，避免重复操作，下面再将右左根节点添加到栈中</span></span><br><span class="line">               <span class="keyword">if</span> (node.right!=<span class="literal">null</span>) st.push(node.right);  <span class="comment">// 添加右节点（空节点不入栈）</span></span><br><span class="line">               <span class="keyword">if</span> (node.left!=<span class="literal">null</span>) st.push(node.left);    <span class="comment">// 添加左节点（空节点不入栈）</span></span><br><span class="line">               st.push(node);                          <span class="comment">// 添加中节点</span></span><br><span class="line">               st.push(<span class="literal">null</span>); <span class="comment">// 中节点访问过，但是还没有处理，加入空节点做为标记。</span></span><br><span class="line">               </span><br><span class="line">           &#125; <span class="keyword">else</span> &#123; <span class="comment">// 只有遇到空节点的时候，才将下一个节点放进结果集</span></span><br><span class="line">               st.pop();           <span class="comment">// 将空节点弹出</span></span><br><span class="line">               node = st.peek();    <span class="comment">// 重新取出栈中元素</span></span><br><span class="line">               st.pop();</span><br><span class="line">               result.add(node.val); <span class="comment">// 加入到结果集</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h2 id="1-4-中序遍历代码"><a href="#1-4-中序遍历代码" class="headerlink" title="1.4 中序遍历代码"></a>1.4 中序遍历代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    Stack&lt;TreeNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>) st.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!st.empty()) &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> st.peek();</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            st.pop(); <span class="comment">// 将该节点弹出，避免重复操作，下面再将右根左节点添加到栈中</span></span><br><span class="line">            <span class="keyword">if</span> (node.right!=<span class="literal">null</span>) st.push(node.right);  <span class="comment">// 添加右节点（空节点不入栈）</span></span><br><span class="line">            st.push(node);                          <span class="comment">// 添加中节点</span></span><br><span class="line">            st.push(<span class="literal">null</span>); <span class="comment">// 中节点访问过，但是还没有处理，加入空节点做为标记。</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node.left!=<span class="literal">null</span>) st.push(node.left);    <span class="comment">// 添加左节点（空节点不入栈）</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 只有遇到空节点的时候，才将下一个节点放进结果集</span></span><br><span class="line">            st.pop();           <span class="comment">// 将空节点弹出</span></span><br><span class="line">            node = st.peek();    <span class="comment">// 重新取出栈中元素</span></span><br><span class="line">            st.pop();</span><br><span class="line">            result.add(node.val); <span class="comment">// 加入到结果集</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1-5-后序遍历代码"><a href="#1-5-后序遍历代码" class="headerlink" title="1.5 后序遍历代码"></a>1.5 后序遍历代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">       List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">       Stack&lt;TreeNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">if</span> (root != <span class="literal">null</span>) st.push(root);</span><br><span class="line">       <span class="keyword">while</span> (!st.empty()) &#123;</span><br><span class="line">           <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> st.peek();</span><br><span class="line">           <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">               st.pop(); <span class="comment">// 将该节点弹出，避免重复操作，下面再将根右左节点添加到栈中</span></span><br><span class="line">               st.push(node);                          <span class="comment">// 添加中节点</span></span><br><span class="line">               st.push(<span class="literal">null</span>); <span class="comment">// 中节点访问过，但是还没有处理，加入空节点做为标记。</span></span><br><span class="line">               <span class="keyword">if</span> (node.right!=<span class="literal">null</span>) st.push(node.right);  <span class="comment">// 添加右节点（空节点不入栈）</span></span><br><span class="line">               <span class="keyword">if</span> (node.left!=<span class="literal">null</span>) st.push(node.left);    <span class="comment">// 添加左节点（空节点不入栈）         </span></span><br><span class="line">                              </span><br><span class="line">           &#125; <span class="keyword">else</span> &#123; <span class="comment">// 只有遇到空节点的时候，才将下一个节点放进结果集</span></span><br><span class="line">               st.pop();           <span class="comment">// 将空节点弹出</span></span><br><span class="line">               node = st.peek();    <span class="comment">// 重新取出栈中元素</span></span><br><span class="line">               st.pop();</span><br><span class="line">               result.add(node.val); <span class="comment">// 加入到结果集</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>binary_tree</tag>
      </tags>
  </entry>
  <entry>
    <title>tiny_URL</title>
    <url>/2022/07/29/tiny-URL/</url>
    <content><![CDATA[<h1 id="Shorten-URL"><a href="#Shorten-URL" class="headerlink" title="Shorten URL"></a>Shorten URL</h1><p>system design，很实用！</p>
<h2 id="535-Encode-and-Decode-TinyURL"><a href="#535-Encode-and-Decode-TinyURL" class="headerlink" title="535. Encode and Decode TinyURL"></a><a href="https://leetcode.cn/problems/encode-and-decode-tinyurl/">535. Encode and Decode TinyURL</a></h2><p>如果想要实现相同的<code>URL</code> 加密成同一个 <code>TinyURL</code>，则额外保存一个从<code>URL</code> 到 <code>TinyURL</code> 的映射。</p>
<h3 id="法一：自增"><a href="#法一：自增" class="headerlink" title="法一：自增"></a>法一：自增</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Codec</span> &#123;</span><br><span class="line">    Map&lt;Integer,String&gt; database=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    String prefix=<span class="string">&quot;https://ivn.com/&quot;</span>;</span><br><span class="line">    <span class="comment">// Encodes a URL to a shortened URL.</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encode</span><span class="params">(String longUrl)</span> &#123;</span><br><span class="line">        database.put(++count,longUrl);</span><br><span class="line">        <span class="keyword">return</span> prefix+count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes a shortened URL to its original URL.</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decode</span><span class="params">(String shortUrl)</span> &#123;</span><br><span class="line">        <span class="type">int</span> p=shortUrl.lastIndexOf(<span class="string">&#x27;/&#x27;</span>)+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> val=Integer.parseInt(shortUrl.substring(p));</span><br><span class="line">        <span class="keyword">return</span> database.get(val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：哈希生成"><a href="#法二：哈希生成" class="headerlink" title="法二：哈希生成"></a>法二：哈希生成</h3><p>为了防止相同的 longUrl 多次调用，确保 encode 服务的「幂等性」，我们再额外建立哈希表 origin2Tiny 来记录原串和映射标识的对应关系。</p>
<h3 id="法三：随机"><a href="#法三：随机" class="headerlink" title="法三：随机"></a>法三：随机</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Codec</span> &#123;</span><br><span class="line"></span><br><span class="line">    Random random=<span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    Map&lt;Integer,String&gt; database=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    String prefix=<span class="string">&quot;https://ivn.com/&quot;</span>;</span><br><span class="line">    <span class="comment">// Encodes a URL to a shortened URL.</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encode</span><span class="params">(String longUrl)</span> &#123;</span><br><span class="line">        <span class="type">int</span> num= random.nextInt();</span><br><span class="line">        <span class="keyword">while</span>(database.containsKey(num))&#123;</span><br><span class="line">            num= random.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        database.put(num,longUrl);</span><br><span class="line">        <span class="keyword">return</span> prefix+num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes a shortened URL to its original URL.</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decode</span><span class="params">(String shortUrl)</span> &#123;</span><br><span class="line">        <span class="type">int</span> p=shortUrl.lastIndexOf(<span class="string">&#x27;/&#x27;</span>)+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> num=Integer.parseInt(shortUrl.substring(p));</span><br><span class="line">        <span class="keyword">return</span> database.get(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>再看二分</title>
    <url>/2022/06/06/%E5%86%8D%E7%9C%8B%E4%BA%8C%E5%88%86/</url>
    <content><![CDATA[<h1 id="二分好题选编"><a href="#二分好题选编" class="headerlink" title="二分好题选编"></a>二分好题选编</h1><h2 id="852-Peak-Index-in-a-Mountain-Array"><a href="#852-Peak-Index-in-a-Mountain-Array" class="headerlink" title="852. Peak Index in a Mountain Array"></a><a href="https://leetcode.cn/problems/peak-index-in-a-mountain-array/">852. Peak Index in a Mountain Array</a></h2><p>找最小的<code>arr[i]</code>大于<code>arr[i+1]</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode852</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peakIndexInMountainArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">//[1, n-2]</span></span><br><span class="line">        <span class="type">int</span> n=arr.length;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> right=n-<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="comment">//[left,right]</span></span><br><span class="line">            <span class="type">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(arr[mid]&gt;arr[mid-<span class="number">1</span>])&#123;</span><br><span class="line">                res=mid;</span><br><span class="line">                right=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="162-Find-Peak-Element"><a href="#162-Find-Peak-Element" class="headerlink" title="162. Find Peak Element"></a><a href="https://leetcode.cn/problems/find-peak-element/">162. Find Peak Element</a></h2><p><strong>You must write an algorithm that runs in <code>O(log n)</code> time.</strong></p>
<p>俗话说「人往高处走，水往低处流」。如果我们从一个位置开始，不断地向高处走，那么最终一定可以到达一个峰值位置。</p>
<p>但没有回头路，每当选择向一边走，另一边的路就再也不可能走到了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findPeakElement</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right=n-<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        <span class="type">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> l=mid-<span class="number">1</span>&gt;=<span class="number">0</span> ? nums[mid-<span class="number">1</span>] : Integer.MIN_VALUE;</span><br><span class="line">        <span class="type">int</span> r=mid+<span class="number">1</span>&lt;n ? nums[mid+<span class="number">1</span>] : Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid]&gt;l &amp;&amp; nums[mid]&gt;r)&#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;nums[mid] &amp;&amp; nums[mid]&gt;r)&#123;</span><br><span class="line">            right=mid-<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode162</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findPeakElement</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">//nums[i-1]&lt;nums[i]&gt;nums[i+1]</span></span><br><span class="line">        <span class="comment">//nums[i-1]&gt;nums[i]&lt;nums[i+1], i=i+1	波谷时向左向右都可</span></span><br><span class="line">        <span class="comment">//nums[i-1]&gt;nums[i]&gt;nums[i+1], i=i-1</span></span><br><span class="line">        <span class="comment">//nums[i-1]&lt;nums[i]&lt;nums[i+1], i=i+1</span></span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=n-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="type">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> c=compare(nums,mid-<span class="number">1</span>,mid,mid+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="number">0</span>)&#123;</span><br><span class="line">                res=mid;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> pre, <span class="type">int</span> cur, <span class="type">int</span> post)</span>&#123;</span><br><span class="line">        <span class="type">int</span> preVal= pre==-<span class="number">1</span> ? Integer.MIN_VALUE : nums[pre];</span><br><span class="line">        <span class="type">int</span> postVal= post==nums.length ? Integer.MIN_VALUE : nums[post];</span><br><span class="line">        <span class="type">int</span> curVal=nums[cur];</span><br><span class="line">        <span class="keyword">if</span>(curVal&gt;preVal &amp;&amp; curVal&gt;postVal)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(curVal&lt;preVal &amp;&amp; curVal&gt;postVal)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="167-Two-Sum-II-Input-Array-Is-Sorted"><a href="#167-Two-Sum-II-Input-Array-Is-Sorted" class="headerlink" title="167. Two Sum II - Input Array Is Sorted"></a>167. Two Sum II - Input Array Is Sorted</h2><p>注意：</p>
<ol>
<li>already <strong>sorted in non-decreasing order</strong></li>
<li>there is <strong>exactly one solution</strong></li>
<li>must use <strong>only constant extra space</strong></li>
</ol>
<p>time and space complexity:</p>
<ul>
<li>Two pointers: O(n) time and O(1) space</li>
<li>Dictionary: O(n) time and O(n) space</li>
<li>Binary search: O(nlogn) time and O(1) space</li>
</ul>
<h3 id="法一：-two-pointers"><a href="#法一：-two-pointers" class="headerlink" title="法一： two pointers"></a>法一： two pointers</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] numbers, <span class="type">int</span> target) &#123;</span><br><span class="line">    <span class="type">int</span> n=numbers.length;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right=n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="type">int</span> sum=numbers[left]+numbers[right];</span><br><span class="line">        <span class="keyword">if</span>(sum==target)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;left+<span class="number">1</span>,right+<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&gt;target)&#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：-binary-search"><a href="#法二：-binary-search" class="headerlink" title="法二： binary search"></a>法二： binary search</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] numbers, <span class="type">int</span> target) &#123;</span><br><span class="line">            <span class="type">int</span> n=numbers.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> temp=target-numbers[i];</span><br><span class="line">        <span class="type">int</span> left=i+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> right=n-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> mid=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(numbers[mid]==temp)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i+<span class="number">1</span>,mid+<span class="number">1</span>&#125;;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(numbers[mid]&lt;temp)&#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="209-Minimum-Size-Subarray-Sum"><a href="#209-Minimum-Size-Subarray-Sum" class="headerlink" title="209. Minimum Size Subarray Sum"></a>209. Minimum Size Subarray Sum</h2><h3 id="法一：-sliding-window"><a href="#法一：-sliding-window" class="headerlink" title="法一： sliding window"></a>法一： sliding window</h3><p>O(n)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span> min=Integer.MAX_VALUE;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> r=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(r&lt;n)&#123;</span><br><span class="line">        <span class="comment">//[l,r)</span></span><br><span class="line">        sum+=nums[r++];</span><br><span class="line">        <span class="keyword">while</span>(sum&gt;=target)&#123;</span><br><span class="line">            min=Math.min(min,r-l);</span><br><span class="line">            sum-=nums[l++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min==Integer.MAX_VALUE ? <span class="number">0</span> : min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：-binary-search-1"><a href="#法二：-binary-search-1" class="headerlink" title="法二： binary search"></a>法二： binary search</h3><p>O(n log(n))</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lo</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">hi</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(lo &lt;= hi) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lo + (hi - lo)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(isPossible(nums, target, mid))&#123;</span><br><span class="line">            hi = mid - <span class="number">1</span>;</span><br><span class="line">            result = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> lo = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isPossible</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">        <span class="keyword">if</span>(sum &gt;= target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; nums.length) &#123;</span><br><span class="line">        sum = sum + nums[i++] - nums[j++];</span><br><span class="line">        <span class="keyword">if</span>(sum &gt;= target)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> r=n-<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">        <span class="type">int</span> mid=l+(r-l)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(possible(nums,target,mid+<span class="number">1</span>))&#123;</span><br><span class="line">            res=mid+<span class="number">1</span>;</span><br><span class="line">            r=mid-<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">possible</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target, <span class="type">int</span> size)</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; size; i++) &#123;</span><br><span class="line">        sum+=nums[i];</span><br><span class="line">        <span class="keyword">if</span>(sum&gt;=target)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//[0,end]</span></span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//[j,i]</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;nums.length)&#123;</span><br><span class="line">        sum+=nums[i++];</span><br><span class="line">        sum-=nums[j++];</span><br><span class="line">        <span class="keyword">if</span>(sum&gt;=target)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="240-Search-a-2D-Matrix-II"><a href="#240-Search-a-2D-Matrix-II" class="headerlink" title="240. Search a 2D Matrix II"></a>240. Search a 2D Matrix II</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">searchMatrix</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> row=matrix.length;</span><br><span class="line">    <span class="type">int</span> col=matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(find(matrix[i],target,col))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target, <span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right=n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        <span class="type">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr[mid]==target)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[mid]&lt;target)&#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right=mid-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="278-First-Bad-Version"><a href="#278-First-Bad-Version" class="headerlink" title="278. First Bad Version"></a>278. First Bad Version</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">firstBadVersion</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> r=n;</span><br><span class="line">    <span class="type">int</span> res=n;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">        <span class="type">int</span> mid=l+(r-l)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(isBadVersion(mid))&#123;</span><br><span class="line">            res=mid;</span><br><span class="line">            r=mid-<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="287-Find-the-Duplicate-Number"><a href="#287-Find-the-Duplicate-Number" class="headerlink" title="287. Find the Duplicate Number"></a>287. Find the Duplicate Number</h2><p>You must solve the problem <strong>without</strong> modifying the array <code>nums</code> and uses only constant extra space.</p>
<h3 id="Approach-3-Negative-Marking"><a href="#Approach-3-Negative-Marking" class="headerlink" title="Approach 3: Negative Marking"></a>Approach 3: Negative Marking</h3><p>Given an array of integers <code>nums</code> containing <code>n + 1</code> integers where each integer is in the range <code>[1, n]</code> inclusive.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span> res=-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        <span class="type">int</span> cur=Math.abs(num);</span><br><span class="line">        <span class="keyword">if</span>(nums[cur]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            res=cur;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        nums[cur]*=-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            nums[i]*=-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Approach-7-Floyd’s-Tortoise-and-Hare-Cycle-Detection"><a href="#Approach-7-Floyd’s-Tortoise-and-Hare-Cycle-Detection" class="headerlink" title="Approach 7: Floyd’s Tortoise and Hare (Cycle Detection)"></a>Approach 7: Floyd’s Tortoise and Hare (Cycle Detection)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> head=nums[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> fast=head;</span><br><span class="line">    <span class="type">int</span> slow=head;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        fast=nums[nums[fast]];</span><br><span class="line">        slow=nums[slow];</span><br><span class="line">    &#125;<span class="keyword">while</span>(fast!=slow);</span><br><span class="line">    <span class="type">int</span> p=head;</span><br><span class="line">    <span class="keyword">while</span>(slow!=p)&#123;</span><br><span class="line">        slow=nums[slow];</span><br><span class="line">        p=nums[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="41-First-Missing-Positive"><a href="#41-First-Missing-Positive" class="headerlink" title="41. First Missing Positive"></a>41. First Missing Positive</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">firstMissingPositive</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">        <span class="comment">//[1,2,3,...,n]</span></span><br><span class="line">        <span class="type">int</span> correct=nums[i]-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span> &amp;&amp; nums[i]&lt;=n &amp;&amp; nums[i]!=nums[correct])&#123;</span><br><span class="line">            <span class="type">int</span> temp=nums[i];</span><br><span class="line">            nums[i]=nums[correct];</span><br><span class="line">            nums[correct]=temp;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[j-<span class="number">1</span>]!=j)&#123;</span><br><span class="line">            <span class="keyword">return</span> j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="392-Is-Subsequence"><a href="#392-Is-Subsequence" class="headerlink" title="392. Is Subsequence"></a>392. Is Subsequence</h2><p><strong>Follow up:</strong> Suppose there are lots of incoming <code>s</code>, say <code>s1, s2, ..., sk</code> where <code>k &gt;= 109</code>, and you want to check one by one to see if <code>t</code> has its subsequence. In this scenario, how would you change your code?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubsequence</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt;[] lists=<span class="keyword">new</span> <span class="title class_">List</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> c=t.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(lists[c-<span class="string">&#x27;a&#x27;</span>]==<span class="literal">null</span>)&#123;</span><br><span class="line">            lists[c-<span class="string">&#x27;a&#x27;</span>]=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        lists[c-<span class="string">&#x27;a&#x27;</span>].add(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> cur=s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(lists[cur-<span class="string">&#x27;a&#x27;</span>]==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> pos=leftBound(j,lists[cur-<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">        <span class="keyword">if</span>(pos==-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        j=lists[cur-<span class="string">&#x27;a&#x27;</span>].get(pos)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">leftBound</span><span class="params">(<span class="type">int</span> target, List&lt;Integer&gt; list)</span>&#123;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right=list.size();</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="comment">//[left,right)</span></span><br><span class="line">        <span class="type">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(target&gt;list.get(mid))&#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right=mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left==list.size() ? -<span class="number">1</span> : left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="792-Number-of-Matching-Subsequences"><a href="#792-Number-of-Matching-Subsequences" class="headerlink" title="792. Number of Matching Subsequences"></a>792. Number of Matching Subsequences</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numMatchingSubseq</span><span class="params">(String s, String[] words)</span> &#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    List&lt;Integer&gt;[] lists=<span class="keyword">new</span> <span class="title class_">List</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> c=s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(lists[c-<span class="string">&#x27;a&#x27;</span>]==<span class="literal">null</span>)&#123;</span><br><span class="line">            lists[c-<span class="string">&#x27;a&#x27;</span>]=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        lists[c-<span class="string">&#x27;a&#x27;</span>].add(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; word.length(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> cur=word.charAt(i)-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(lists[cur]==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> pos=leftBound(j,lists[cur]);</span><br><span class="line">            <span class="keyword">if</span>(pos==-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            j=lists[cur].get(pos)+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==word.length())&#123;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">leftBound</span><span class="params">(<span class="type">int</span> target, List&lt;Integer&gt; list)</span>&#123;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right=list.size();</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="comment">//[left,right)</span></span><br><span class="line">        <span class="type">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(target&gt;list.get(mid))&#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right=mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left==list.size() ? -<span class="number">1</span> : left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="275-H-Index-II"><a href="#275-H-Index-II" class="headerlink" title="275. H-Index II"></a>275. H-Index II</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hIndex</span><span class="params">(<span class="type">int</span>[] citations)</span> &#123;</span><br><span class="line">    <span class="comment">//1,1,3</span></span><br><span class="line">    <span class="type">int</span> n=citations.length;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right=n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        <span class="type">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(citations[mid]==n-mid)&#123;</span><br><span class="line">            <span class="comment">//[mid,n-1]</span></span><br><span class="line">            <span class="keyword">return</span> n-mid;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(citations[mid]&gt;n-mid)&#123;</span><br><span class="line">            right=mid-<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//[left,n-1]</span></span><br><span class="line">    <span class="keyword">return</span> n-left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>找满足条件的最小整数值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">    <span class="comment">//[left,right)</span></span><br><span class="line">    <span class="type">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">while</span>(!condition)&#123;</span><br><span class="line">        left=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        right=mid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> left; <span class="comment">//or right, since left=right</span></span><br></pre></td></tr></table></figure>



<p>找满足条件的最小小数值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(right-left&gt;<span class="number">1e-6</span>)&#123;</span><br><span class="line">    <span class="comment">//[left,right)</span></span><br><span class="line">    <span class="type">double</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(!valid)&#123;</span><br><span class="line">        left=mid;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        right=mid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> left;</span><br></pre></td></tr></table></figure>



<p>找满足条件的最大整数值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">    <span class="comment">//(left,right]</span></span><br><span class="line">    <span class="type">int</span> mid=(left+right+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">while</span>(!condition)&#123;</span><br><span class="line">        right=mid-<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        left=mid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> right;	<span class="comment">//or left, since left=right</span></span><br></pre></td></tr></table></figure>



<p>找满足条件的</p>
<h2 id="2560-House-Robber-IV"><a href="#2560-House-Robber-IV" class="headerlink" title="2560. House Robber IV"></a>2560. House Robber IV</h2><p><a href="https://leetcode.com/problems/house-robber-iv/discuss/3143697/JavaC%2B%2BPython-Binary-Search-O(1)-Space">https://leetcode.com/problems/house-robber-iv/discuss/3143697/JavaC%2B%2BPython-Binary-Search-O(1)-Space</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCapability</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left= Arrays.stream(nums).min().getAsInt();</span><br><span class="line">    <span class="type">int</span> right= Arrays.stream(nums).max().getAsInt();</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="comment">//[left,right)</span></span><br><span class="line">        <span class="type">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> take=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&lt;=mid)&#123;</span><br><span class="line">                take++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(take&lt;k)&#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right=mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="875-Koko-Eating-Bananas"><a href="#875-Koko-Eating-Bananas" class="headerlink" title="875. Koko Eating Bananas"></a>875. Koko Eating Bananas</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minEatingSpeed</span><span class="params">(<span class="type">int</span>[] piles, <span class="type">int</span> h)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=piles.length;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> right=<span class="number">1000000000</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="comment">//[left,right)</span></span><br><span class="line">        <span class="type">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> take=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            take+=piles[i]/mid;</span><br><span class="line">            <span class="keyword">if</span>(piles[i]%mid!=<span class="number">0</span>)&#123;</span><br><span class="line">                take++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(take&gt;h)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(take&gt;h)&#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right=mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="774-Minimize-Max-Distance-to-Gas-Station"><a href="#774-Minimize-Max-Distance-to-Gas-Station" class="headerlink" title="774. Minimize Max Distance to Gas Station"></a>774. Minimize Max Distance to Gas Station</h2><p>double也能玩二分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">minmaxGasDist</span><span class="params">(<span class="type">int</span>[] stations, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">double</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> right=<span class="number">1e8</span>;</span><br><span class="line">    <span class="keyword">while</span>(right-left&gt;<span class="number">1e-6</span>)&#123;</span><br><span class="line">        <span class="comment">//[left,right)</span></span><br><span class="line">        <span class="type">double</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(!valid(stations,k,mid))&#123;</span><br><span class="line">            left=mid;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right=mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">valid</span><span class="params">(<span class="type">int</span>[] stations, <span class="type">int</span> k, <span class="type">double</span> p)</span>&#123;</span><br><span class="line">    <span class="type">int</span> need=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; stations.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">        need+=(stations[i+<span class="number">1</span>]-stations[i])/p;</span><br><span class="line">        <span class="keyword">if</span>(need&gt;k)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> need&lt;=k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="1011-Capacity-To-Ship-Packages-Within-D-Days"><a href="#1011-Capacity-To-Ship-Packages-Within-D-Days" class="headerlink" title="1011. Capacity To Ship Packages Within D Days"></a>1011. Capacity To Ship Packages Within D Days</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">shipWithinDays</span><span class="params">(<span class="type">int</span>[] weights, <span class="type">int</span> days)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=weights.length;</span><br><span class="line">    <span class="type">int</span> left= Arrays.stream(weights).max().getAsInt();</span><br><span class="line">    <span class="type">int</span> right=(<span class="type">int</span>)<span class="number">1e8</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="comment">//[left,right)</span></span><br><span class="line">        <span class="type">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> take=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cur=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            cur+=weights[i];</span><br><span class="line">            <span class="keyword">if</span>(i&lt;n-<span class="number">1</span> &amp;&amp; cur+weights[i+<span class="number">1</span>]&gt;mid)&#123;</span><br><span class="line">                cur=<span class="number">0</span>;</span><br><span class="line">                take++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        take++;</span><br><span class="line">        <span class="keyword">if</span>(take&gt;days)&#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right=mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="1231-Divide-Chocolate"><a href="#1231-Divide-Chocolate" class="headerlink" title="1231. Divide Chocolate"></a>1231. Divide Chocolate</h2><p>非常规！</p>
<ul>
<li>求最大可能值，而非最小可能值，因此需返回 right</li>
<li>返回右边边界，注意 mid</li>
<li>无需判断存在正好等于 mid的块 ？？</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximizeSweetness</span><span class="params">(<span class="type">int</span>[] sweetness, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="comment">//maximize my piece</span></span><br><span class="line">    <span class="comment">//minimize others&#x27; pieces</span></span><br><span class="line">    <span class="type">int</span> n=sweetness.length;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> right=(<span class="type">int</span>)<span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="comment">//(left,right]</span></span><br><span class="line">        <span class="type">int</span> mid=(right+left+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> cur=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            cur+=sweetness[i];</span><br><span class="line">            <span class="keyword">if</span>(cur&gt;=mid)&#123;</span><br><span class="line"> </span><br><span class="line">                count++;</span><br><span class="line">                cur=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( count&gt;k)&#123;</span><br><span class="line">            left=mid;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right=mid-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right;	<span class="comment">//or return left</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="1283-Find-the-Smallest-Divisor-Given-a-Threshold"><a href="#1283-Find-the-Smallest-Divisor-Given-a-Threshold" class="headerlink" title="1283. Find the Smallest Divisor Given a Threshold"></a>1283. Find the Smallest Divisor Given a Threshold</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">smallestDivisor</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> threshold)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> right=(<span class="type">int</span>)<span class="number">1e6</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="comment">//[left,right)</span></span><br><span class="line">        <span class="type">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            sum+=num%mid==<span class="number">0</span> ? num/mid : num/mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(sum&gt;threshold)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum&gt;threshold)&#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right=mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="1482-Minimum-Number-of-Days-to-Make-m-Bouquets"><a href="#1482-Minimum-Number-of-Days-to-Make-m-Bouquets" class="headerlink" title="1482. Minimum Number of Days to Make m Bouquets"></a>1482. Minimum Number of Days to Make m Bouquets</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDays</span><span class="params">(<span class="type">int</span>[] bloomDay, <span class="type">int</span> m, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=bloomDay.length;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;m || n&lt;m*k)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> right=(<span class="type">int</span>)<span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="comment">//[left,right)</span></span><br><span class="line">        <span class="type">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cur=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(bloomDay[i]&lt;=mid)&#123;</span><br><span class="line">                cur++;</span><br><span class="line">                <span class="keyword">if</span>(cur==k)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    cur=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count&lt;m)&#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right=mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="1539-Kth-Missing-Positive-Number"><a href="#1539-Kth-Missing-Positive-Number" class="headerlink" title="1539. Kth Missing Positive Number"></a>1539. Kth Missing Positive Number</h2><p>easy题的edge case也不easy</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthPositive</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=arr.length;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=arr[<span class="number">0</span>]-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">    k-=arr[<span class="number">0</span>]-<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> cur=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n-<span class="number">1</span>; i++) &#123;</span><br><span class="line">        cur=arr[i+<span class="number">1</span>]-arr[i]-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(k&gt;cur)&#123;</span><br><span class="line">            k-=cur;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> arr[i]+k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr[n-<span class="number">1</span>]+k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Could you solve this problem in less than O(n) complexity?</p>
<p>开背！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthPositive</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// If number of positive integers</span></span><br><span class="line">        <span class="comment">// which are missing before arr[pivot]</span></span><br><span class="line">        <span class="comment">// is less than k --&gt;</span></span><br><span class="line">        <span class="comment">// continue to search on the right.</span></span><br><span class="line">        <span class="keyword">if</span> (arr[pivot] - pivot - <span class="number">1</span> &lt; k) &#123;</span><br><span class="line">            left = pivot + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// Otherwise, go left.</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = pivot - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// At the end of the loop, left = right + 1,</span></span><br><span class="line">    <span class="comment">// and the kth missing is in-between arr[right] and arr[left].</span></span><br><span class="line">    <span class="comment">// The number of integers missing before arr[right] is</span></span><br><span class="line">    <span class="comment">// arr[right] - right - 1 --&gt;</span></span><br><span class="line">    <span class="comment">// the number to return is</span></span><br><span class="line">    <span class="comment">// arr[right] + k - (arr[right] - right - 1) = k + left</span></span><br><span class="line">    <span class="keyword">return</span> left + k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="1802-Maximum-Value-at-a-Given-Index-in-a-Bounded-Array"><a href="#1802-Maximum-Value-at-a-Given-Index-in-a-Bounded-Array" class="headerlink" title="1802. Maximum Value at a Given Index in a Bounded Array"></a>1802. Maximum Value at a Given Index in a Bounded Array</h2><p><a href="https://leetcode.com/problems/maximum-value-at-a-given-index-in-a-bounded-array/discuss/1119801/JavaC%2B%2BPython-Binary-Search">https://leetcode.com/problems/maximum-value-at-a-given-index-in-a-bounded-array/discuss/1119801/JavaC%2B%2BPython-Binary-Search</a></p>
<p>注意：</p>
<ul>
<li>为简便计算，初始所有值均减一</li>
<li>最后返回值时需加上一</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxValue</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> index, <span class="type">int</span> maxSum)</span> &#123;</span><br><span class="line">    maxSum -= n;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = maxSum, mid;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        mid = (left + right + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (test(n, index, mid) &lt;= maxSum)</span><br><span class="line">            left = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> index, <span class="type">int</span> a)</span> &#123;</span><br><span class="line">    <span class="comment">//左边到0或到头</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> Math.max(a - index, <span class="number">0</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> (<span class="type">long</span>)(a + b) * (a - b + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//右边到0或到头</span></span><br><span class="line">    b = Math.max(a - ((n - <span class="number">1</span>) - index), <span class="number">0</span>);</span><br><span class="line">    res += (<span class="type">long</span>)(a + b) * (a - b + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> res - a;		<span class="comment">//中间加了两次，需减掉</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>累加求和，超时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxValue</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> index, <span class="type">int</span> maxSum)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> right=(<span class="type">int</span>)<span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="comment">//(left,right]</span></span><br><span class="line">        <span class="type">int</span> mid=(left+right+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> pre=mid;</span><br><span class="line">        a:&#123;            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            sum+=pre==<span class="number">1</span> ? <span class="number">1</span> : --pre;</span><br><span class="line">            <span class="keyword">if</span>(sum&gt;maxSum)&#123;</span><br><span class="line">                <span class="keyword">break</span> a;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            pre=mid;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index+<span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">                sum+=pre==<span class="number">1</span> ? <span class="number">1</span> : --pre;</span><br><span class="line">                <span class="keyword">if</span>(sum&gt;maxSum)&#123;</span><br><span class="line">                    <span class="keyword">break</span> a;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sum&lt;=maxSum)&#123;</span><br><span class="line">            left=mid;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right=mid-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="2226-Maximum-Candies-Allocated-to-K-Children"><a href="#2226-Maximum-Candies-Allocated-to-K-Children" class="headerlink" title="2226. Maximum Candies Allocated to K Children"></a>2226. Maximum Candies Allocated to K Children</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumCandies</span><span class="params">(<span class="type">int</span>[] candies, <span class="type">long</span> k)</span> &#123;</span><br><span class="line">    <span class="type">long</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> candy : candies) &#123;</span><br><span class="line">        sum+=candy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum&lt;k)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> right= Arrays.stream(candies).max().getAsInt();</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="comment">//(left,right]</span></span><br><span class="line">        <span class="type">int</span> mid=(left+right+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="type">long</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> candy : candies) &#123;</span><br><span class="line">            count+=candy/mid;</span><br><span class="line">            <span class="keyword">if</span>(count&gt;=k)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count&lt;k)&#123;</span><br><span class="line">            right=mid-<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            left=mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="719-Find-K-th-Smallest-Pair-Distance"><a href="#719-Find-K-th-Smallest-Pair-Distance" class="headerlink" title="719. Find K-th Smallest Pair Distance"></a>719. Find K-th Smallest Pair Distance</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">smallestDistancePair</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="comment">//kth smallest dif =&gt;</span></span><br><span class="line">    <span class="comment">//smallest dif satisfying count&gt;=k</span></span><br><span class="line">    <span class="comment">//count: number of pairs with distance &lt;= mi</span></span><br><span class="line">    <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> high=nums[n-<span class="number">1</span>]-nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">while</span>(low&lt;high)&#123;</span><br><span class="line">        <span class="type">int</span> mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; n; right++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(nums[right]-nums[left]&gt;mid)&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//([left,right-1] right)</span></span><br><span class="line">            count+=right-left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count&lt;k)&#123;</span><br><span class="line">            low=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            high=mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>binary_search</tag>
      </tags>
  </entry>
  <entry>
    <title>区间问题</title>
    <url>/2022/05/11/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="区间问题选编"><a href="#区间问题选编" class="headerlink" title="区间问题选编"></a>区间问题选编</h1><h2 id="maximum-number-of-non-overlapping-intervals"><a href="#maximum-number-of-non-overlapping-intervals" class="headerlink" title="maximum number of non-overlapping intervals:"></a>maximum number of non-overlapping intervals:</h2><ol>
<li>按interval的end升序排序 </li>
<li>选中集合中end最小的interval</li>
<li>删去所有与该interval重叠的interval(s)</li>
<li>重复2、3, 直到集合为空</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">eraseOverlapIntervals</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n=intervals.length;</span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] o1, <span class="type">int</span>[] o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1[<span class="number">1</span>]-o2[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> count=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> end=intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] interval : intervals) &#123;</span><br><span class="line">            <span class="type">int</span> start=interval[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(start&gt;=end)&#123;</span><br><span class="line">                count++;</span><br><span class="line">                end=interval[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n-count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1288-Remove-Covered-Intervals"><a href="#1288-Remove-Covered-Intervals" class="headerlink" title="1288. Remove Covered Intervals"></a><a href="https://leetcode.cn/problems/remove-covered-intervals/">1288. Remove Covered Intervals</a></h2><p>start升序、end降序</p>
<p>对于两个起点相同的区间，需要保证长的那个区间在上面（按照终点降序），这样才会被判定为覆盖，否则会被错误地判定为相交，少算一个覆盖区间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode1288</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeCoveredIntervals</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;</span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] o1, <span class="type">int</span>[] o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1[<span class="number">0</span>]!=o2[<span class="number">0</span>] ? o1[<span class="number">0</span>]-o2[<span class="number">0</span>] : o2[<span class="number">1</span>]-o1[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> start=intervals[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> end=intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> count=-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> n=intervals.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] interval : intervals) &#123;</span><br><span class="line">            <span class="type">int</span> left=interval[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> right=interval[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(right&lt;=end)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(left&lt;end)&#123;</span><br><span class="line">                end=right;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                start=left;</span><br><span class="line">                end=right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n-count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="56-Merge-Intervals"><a href="#56-Merge-Intervals" class="headerlink" title="56. Merge Intervals"></a><a href="https://leetcode.cn/problems/merge-intervals/">56. Merge Intervals</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode56</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] merge(<span class="type">int</span>[][] intervals) &#123;</span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] o1, <span class="type">int</span>[] o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1[<span class="number">0</span>]!=o2[<span class="number">0</span>] ? o1[<span class="number">0</span>]-o2[<span class="number">0</span>] : o2[<span class="number">1</span>]-o1[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> start=intervals[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> end=intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; intervals.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> left=intervals[i][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> right=intervals[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(right&lt;=end)&#123;<span class="comment">//contains</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(left&lt;=end)&#123;<span class="comment">//overlap</span></span><br><span class="line">                end=right;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//non-overlapping</span></span><br><span class="line">                res.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;start,end&#125;);</span><br><span class="line">                start=left;</span><br><span class="line">                end=right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;start,end&#125;);</span><br><span class="line">        <span class="type">int</span>[][] array=<span class="keyword">new</span> <span class="title class_">int</span>[res.size()][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            array[i][<span class="number">0</span>]=res.get(i)[<span class="number">0</span>];</span><br><span class="line">            array[i][<span class="number">1</span>]=res.get(i)[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="986-Interval-List-Intersections"><a href="#986-Interval-List-Intersections" class="headerlink" title="986. Interval List Intersections"></a><a href="https://leetcode.cn/problems/interval-list-intersections/">986. Interval List Intersections</a></h2><p>两个区间集合已升序</p>
<p>找交集：双指针i , j </p>
<ul>
<li>a1, a2, b1, b2</li>
<li>无交集：</li>
<li>有交集：</li>
<li>无论有无交集，指针都要后移：</li>
<li>一旦某一集合遍历完毕，则退出</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode986</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] intervalIntersection(<span class="type">int</span>[][] firstList, <span class="type">int</span>[][] secondList) &#123;</span><br><span class="line">        <span class="type">int</span> n1=firstList.length;</span><br><span class="line">        <span class="type">int</span> n2=secondList.length;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n1 &amp;&amp; j&lt;n2)&#123;</span><br><span class="line">            <span class="type">int</span> a1=firstList[i][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> a2=firstList[i][<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> b1=secondList[j][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> b2=secondList[j][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(b1&lt;=a2 &amp;&amp; a1&lt;=b2)&#123;</span><br><span class="line">                <span class="type">int</span> c1=Math.max(a1,b1);</span><br><span class="line">                <span class="type">int</span> c2=Math.min(a2,b2);</span><br><span class="line">                list.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;c1,c2&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a2&lt;b2)&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[][] res=<span class="keyword">new</span> <span class="title class_">int</span>[list.size()][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">            res[i][<span class="number">0</span>]=list.get(i)[<span class="number">0</span>];</span><br><span class="line">            res[i][<span class="number">1</span>]=list.get(i)[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="452-Minimum-Number-of-Arrows-to-Burst-Balloons"><a href="#452-Minimum-Number-of-Arrows-to-Burst-Balloons" class="headerlink" title="452. Minimum Number of Arrows to Burst Balloons"></a>452. Minimum Number of Arrows to Burst Balloons</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMinArrowShots</span><span class="params">(<span class="type">int</span>[][] points)</span> &#123;</span><br><span class="line">    <span class="comment">//[[-2147483646,-2147483645],[2147483646,2147483647]]</span></span><br><span class="line">    <span class="comment">//Arrays.sort(points,(a,b)-&gt;(a[1]-b[1]));</span></span><br><span class="line">    Arrays.sort(points, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] o1, <span class="type">int</span>[] o2)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(o1[<span class="number">1</span>]&lt;=o2[<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">int</span> n=points.length;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> start=points[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> end=points[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> left=points[i][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> right=points[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(left&gt;end)&#123;</span><br><span class="line">            start=left;</span><br><span class="line">            end=right;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="646-Maximum-Length-of-Pair-Chain"><a href="#646-Maximum-Length-of-Pair-Chain" class="headerlink" title="646. Maximum Length of Pair Chain"></a>646. Maximum Length of Pair Chain</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findLongestChain</span><span class="params">(<span class="type">int</span>[][] pairs)</span> &#123;</span><br><span class="line">    Arrays.sort(pairs,(a,b)-&gt;(a[<span class="number">1</span>]-b[<span class="number">1</span>]));</span><br><span class="line">    <span class="comment">//2,5   1,5    6,8</span></span><br><span class="line">    <span class="type">int</span> n=pairs.length;</span><br><span class="line">    <span class="type">int</span> end=pairs[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> cur=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span>[] pair=pairs[i];</span><br><span class="line">        <span class="keyword">if</span>(end&lt;pair[<span class="number">0</span>])&#123;</span><br><span class="line">            end=pair[<span class="number">1</span>];</span><br><span class="line">            cur++;</span><br><span class="line">            res=Math.max(res,cur);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="218-The-Skyline-Problem"><a href="#218-The-Skyline-Problem" class="headerlink" title="218. The Skyline Problem"></a>218. The Skyline Problem</h2><p>不愧是hard题！</p>
<p>注意：</p>
<ol>
<li>SortedSet去重，同一x坐标只保留一根</li>
<li>根据每个building，更新每个x坐标的最大高度</li>
<li>遍历，当最大高度改变时，则更新res</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">getSkyline</span><span class="params">(<span class="type">int</span>[][] buildings)</span> &#123;</span><br><span class="line">    SortedSet&lt;Integer&gt; set=<span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] building : buildings) &#123;</span><br><span class="line">        <span class="type">int</span> left=building[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> right=building[<span class="number">1</span>];</span><br><span class="line">        set.add(left);</span><br><span class="line">        set.add(right);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Integer&gt; edges=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(set);</span><br><span class="line">    Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; edges.size(); i++) &#123;</span><br><span class="line">        map.put(edges.get(i),i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] heights=<span class="keyword">new</span> <span class="title class_">int</span>[edges.size()];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] building : buildings) &#123;</span><br><span class="line">        <span class="type">int</span> left=building[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> right=building[<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> height=building[<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> iLeft=map.get(left);</span><br><span class="line">        <span class="type">int</span> iRight=map.get(right);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=iLeft; i&lt;iRight; i++)&#123;</span><br><span class="line">            heights[i]=Math.max(heights[i],height);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; heights.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> cur=edges.get(i);</span><br><span class="line">        <span class="type">int</span> curHeight=heights[i];</span><br><span class="line">        <span class="keyword">if</span>(res.isEmpty() || res.get(res.size()-<span class="number">1</span>).get(<span class="number">1</span>)!=curHeight)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(cur,curHeight)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>动态规划(2)</title>
    <url>/2022/05/23/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-2/</url>
    <content><![CDATA[<h1 id="Dynamic-Programming选编-2"><a href="#Dynamic-Programming选编-2" class="headerlink" title="Dynamic Programming选编(2)"></a>Dynamic Programming选编(2)</h1><h2 id="labuladong"><a href="#labuladong" class="headerlink" title="labuladong"></a>labuladong</h2><h3 id="787-Cheapest-Flights-Within-K-Stops"><a href="#787-Cheapest-Flights-Within-K-Stops" class="headerlink" title="787. Cheapest Flights Within K Stops"></a><a href="https://leetcode.cn/problems/cheapest-flights-within-k-stops/">787. Cheapest Flights Within K Stops</a></h3><ol>
<li><p><strong>加权有向图中求最短路径</strong></p>
</li>
<li><p>同时要满足，<strong>这条路径最多不能超过 <code>K + 1</code> 条边</strong>（经过 <code>K</code> 个节点相当于经过 <code>K + 1</code> 条边）。</p>
</li>
</ol>
<ul>
<li>BFS 算法相当于从起始点开始，一步一步向外扩散，那当然是离起点越近的节点越先被遍历到，如果 BFS 遍历的过程中遇到终点，那么走的肯定是最短路径。</li>
<li>对于加权图的最短路径来说，普通的队列不管用了，得用优先级队列 <code>PriorityQueue</code></li>
</ul>
<p>Dijkstra算法，从某一点到其余点的最短路径</p>
<p><strong>从起点 <code>src</code> 出发，<code>k</code> 步之内（一步就是一条边）到达节点 <code>s</code> 的最小路径权重为 <code>dp(s, k)</code></strong></p>
<h3 id="10-Regular-Expression-Matching"><a href="#10-Regular-Expression-Matching" class="headerlink" title="10. Regular Expression Matching"></a><a href="https://leetcode.cn/problems/regular-expression-matching/">10. Regular Expression Matching</a></h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (s[i] == p[j] || p[j] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 匹配</span></span><br><span class="line">    <span class="keyword">if</span> (j &lt; p.size() - <span class="number">1</span> &amp;&amp; p[j + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 有 * 通配符，可以匹配 0 次或多次</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 无 * 通配符，老老实实匹配 1 次</span></span><br><span class="line">        i++; j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 不匹配</span></span><br><span class="line">    <span class="keyword">if</span> (j &lt; p.size() - <span class="number">1</span> &amp;&amp; p[j + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 有 * 通配符，只能匹配 0 次</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 无 * 通配符，匹配无法进行下去了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>难点：</p>
<ul>
<li><p>通配符匹配多次？</p>
<ul>
<li>前提：模式串*的前一个字符能够跟文本串的末位匹配上</li>
<li>匹配多次，即先匹配一次，再继续匹配，模式串指针不动，文本串指针前移</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isMatch</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] cs = s.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] cp = p.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// dp[i][j]:表示s的前i个字符，p的前j个字符是否能够匹配</span></span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[cs.length + <span class="number">1</span>][cp.length + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初期值</span></span><br><span class="line">        <span class="comment">// s为空，p为空，能匹配上</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// p为空，s不为空，必为false(boolean数组默认值为false，无需处理)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// s为空，p不为空，由于*可以匹配0个字符，所以有可能为true</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= cp.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cp[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 填格子</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= cs.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= cp.length; j++) &#123;</span><br><span class="line">                <span class="comment">// 文本串和模式串末位字符能匹配上</span></span><br><span class="line">                <span class="keyword">if</span> (cs[i - <span class="number">1</span>] == cp[j - <span class="number">1</span>] || cp[j - <span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cp[j - <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123; <span class="comment">// 模式串末位是*</span></span><br><span class="line">                    <span class="comment">// 模式串*的前一个字符能够跟文本串的末位匹配上</span></span><br><span class="line">                    <span class="keyword">if</span> (cs[i - <span class="number">1</span>] == cp[j - <span class="number">2</span>] || cp[j - <span class="number">2</span>] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                        dp[i][j] = dp[i][j - <span class="number">2</span>]      <span class="comment">// *匹配0次的情况</span></span><br><span class="line">                                || dp[i - <span class="number">1</span>][j];     <span class="comment">// *匹配1次或多次的情况</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 模式串*的前一个字符不能够跟文本串的末位匹配</span></span><br><span class="line">                        dp[i][j] = dp[i][j - <span class="number">2</span>];     <span class="comment">// *只能匹配0次</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[cs.length][cp.length];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="背包问题选编"><a href="#背包问题选编" class="headerlink" title="背包问题选编"></a>背包问题选编</h2><p><a href="https://mp.weixin.qq.com/s/xmgK7SrTnFIM3Owpk-emmg">https://mp.weixin.qq.com/s/xmgK7SrTnFIM3Owpk-emmg</a></p>
<h3 id="0-1背包模板"><a href="#0-1背包模板" class="headerlink" title="0-1背包模板"></a>0-1背包模板</h3><ol>
<li><p><strong>dp[N] [C+1] 解法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxValue</span><span class="params">(<span class="type">int</span> N, <span class="type">int</span> C, <span class="type">int</span>[] weight, <span class="type">int</span>[] value)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[N][C+<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 先处理「考虑第一件物品」的情况</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= C; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = i &gt;= weight[<span class="number">0</span>] ? value[<span class="number">0</span>] : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 再处理「考虑其余物品」的情况</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; C + <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="comment">// 不选该物品</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> dp[i-<span class="number">1</span>][j]; </span><br><span class="line">                <span class="comment">// 选择该物品，前提「剩余容量」大于等于「物品体积」</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> j &gt;= weight[i] ? dp[i-<span class="number">1</span>][j-weight[i]] + value[i] : <span class="number">0</span>; </span><br><span class="line">                dp[i][j] = Math.max(n, y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[N-<span class="number">1</span>][C];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p><strong>dp[2] [C+1] 解法</strong>  </p>
<ul>
<li><p>滚动数组优化</p>
</li>
<li><p>根据「转移方程」，我们知道计算第 <code>i</code> 行格子只需要第<code>i-1</code>行中的某些值。</p>
</li>
<li><p>也就是计算「某一行」的时候只需要依赖「前一行」。</p>
</li>
<li><p>因此可以用一个只有两行的数组来存储中间结果，根据当前计算的行号是偶数还是奇数来交替使用第 0 行和第 1 行</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxValue</span><span class="params">(<span class="type">int</span> N, <span class="type">int</span> C, <span class="type">int</span>[] weight, <span class="type">int</span>[] value)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][C+<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 先处理「考虑第一件物品」的情况</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; C + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = i &gt;= weight[<span class="number">0</span>] ? weight[<span class="number">0</span>] : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 再处理「考虑其余物品」的情况</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; C + <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="comment">// 不选该物品</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> dp[(i-<span class="number">1</span>)&amp;<span class="number">1</span>][j]; </span><br><span class="line">                <span class="comment">// 选择该物品</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> j &gt;= weight[i] ? dp[(i-<span class="number">1</span>)&amp;<span class="number">1</span>][j-weight[i]] + value[i] : <span class="number">0</span>;</span><br><span class="line">                dp[i&amp;<span class="number">1</span>][j] = Math.max(n, y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[(N-<span class="number">1</span>)&amp;<span class="number">1</span>][C];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p><strong>dp[C+1] 解法</strong></p>
<ul>
<li><p>不难发现当求解第<code>i</code> 行格子的值时，不仅是只依赖第<code>i-1</code> 行，还明确只依赖第<code>i-1</code> 行的第<code>c</code> 个格子和第<code>c-weight[i]</code> 个格子（也就是对应着第<code>i</code> 个物品不选和选的两种情况）。</p>
</li>
<li><p>换句话说，只依赖于「上一个格子的位置」以及「上一个格子的左边位置」。</p>
</li>
<li><p>dp数组可以只保留代表「剩余容量」的维度</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxValue</span><span class="params">(<span class="type">int</span> N, <span class="type">int</span> C, <span class="type">int</span>[] weight, <span class="type">int</span>[] value)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[C + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> C; j &gt;= weight[i]; j--) &#123;	<span class="comment">//若当前物品的i的weight大于当前容量C，则无需考虑</span></span><br><span class="line">                <span class="comment">// 不选该物品</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> dp[j];	<span class="comment">//此时dp[j]相当于dp[i-1][j]</span></span><br><span class="line">                <span class="comment">// 选择该物品	由于是从右往左更新，此时左侧的dp仍然是上一行的结果</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> dp[j-weight[i]] + value[i];	<span class="comment">//此时dp[j-weight[i]]相当于dp[i-1][j-weight[i]]</span></span><br><span class="line">                dp[j] = Math.max(n, y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[C];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="416-Partition-Equal-Subset-Sum"><a href="#416-Partition-Equal-Subset-Sum" class="headerlink" title="416. Partition Equal Subset Sum"></a><a href="https://leetcode.cn/problems/partition-equal-subset-sum/">416. Partition Equal Subset Sum</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartition</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        sum+=nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((sum&amp;<span class="number">1</span>)==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> target=sum/<span class="number">2</span>;</span><br><span class="line">    <span class="type">boolean</span>[] dp=<span class="keyword">new</span> <span class="title class_">boolean</span>[target+<span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> target; j &gt;= nums[i]; j--) &#123;</span><br><span class="line">            <span class="type">boolean</span> not_choose=dp[j];</span><br><span class="line">            <span class="type">boolean</span> choose=dp[j-nums[i]];</span><br><span class="line">            dp[j]=not_choose || choose;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[target];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartition</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        sum+=num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> target=sum/<span class="number">2</span>;</span><br><span class="line">    <span class="type">boolean</span>[][] dp=<span class="keyword">new</span> <span class="title class_">boolean</span>[n][target+<span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(nums[<span class="number">0</span>]&lt;=target)&#123;</span><br><span class="line">        dp[<span class="number">0</span>][nums[<span class="number">0</span>]]=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= target; j++) &#123;</span><br><span class="line">            <span class="type">boolean</span> not_choose=dp[i-<span class="number">1</span>][j];</span><br><span class="line">            <span class="type">boolean</span> choose= j-nums[i]&gt;=<span class="number">0</span> ? dp[i-<span class="number">1</span>][j-nums[i]] : <span class="literal">false</span>;</span><br><span class="line">            dp[i][j]=not_choose || choose;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n-<span class="number">1</span>][target];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1049-Last-Stone-Weight-II"><a href="#1049-Last-Stone-Weight-II" class="headerlink" title="1049. Last Stone Weight II"></a><a href="https://leetcode.cn/problems/last-stone-weight-ii/">1049. Last Stone Weight II</a></h3><p> <em>the smallest possible weight of the left stone</em></p>
<p>尽量让石头分成重量相同的两堆，相撞之后剩下的石头最小，<strong>这样就化解成01背包问题了</strong></p>
<p><a href="https://leetcode.cn/problems/last-stone-weight-ii/solution/gong-shui-san-xie-xiang-jie-wei-he-neng-jgxik/">https://leetcode.cn/problems/last-stone-weight-ii/solution/gong-shui-san-xie-xiang-jie-wei-he-neng-jgxik/</a></p>
<p><strong>所谓不断「合并」&amp;「重放」，本质只是在构造一个折叠的计算表达式，最终的结果仍然可以使用「为原来 stones 数组中的数字添加 +&#x2F;− 符号，形成的“计算表达式”」所表示。</strong></p>
<p>问题转换为：<strong>为 stones中的每个数字添加 +&#x2F;−，使得形成的「计算表达式」结果绝对值最小。</strong></p>
<p><strong>从 stones数组中选择，凑成总和不超过</strong><br>$$<br>\frac{sum}{2}<br>$$<br><strong>的最大价值。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode1049</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastStoneWeightII</span><span class="params">(<span class="type">int</span>[] stones)</span> &#123;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n=stones.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            sum+=stones[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> target=sum/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span>[] dp=<span class="keyword">new</span> <span class="title class_">int</span>[target+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> target; j &gt;=stones[i]; j--) &#123;</span><br><span class="line">                <span class="type">int</span> not_choose=dp[j];</span><br><span class="line">                <span class="type">int</span> choose=dp[j-stones[i]]+stones[i];</span><br><span class="line">                dp[j]=Math.max(not_choose,choose);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum-dp[target]*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="474-Ones-and-Zeroes"><a href="#474-Ones-and-Zeroes" class="headerlink" title="474. Ones and Zeroes"></a>474. Ones and Zeroes</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMaxForm</span><span class="params">(String[] strs, <span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">   <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (String s : strs) &#123;</span><br><span class="line">        <span class="type">int</span> zeros=count0(s);</span><br><span class="line">        <span class="type">int</span> ones=s.length()-zeros;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m; i &gt;= zeros; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n; j &gt;= ones; j--) &#123;</span><br><span class="line">                <span class="type">int</span> choose=dp[i-zeros][j-ones]+<span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> not_choose=dp[i][j];</span><br><span class="line">                dp[i][j]=Math.max(dp[i][j],Math.max(choose,not_choose));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">count0</span><span class="params">(String s)</span>&#123;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.charAt(i)==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="494-Target-Sum"><a href="#494-Target-Sum" class="headerlink" title="494. Target Sum"></a>494. Target Sum</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//a+b=sum</span></span><br><span class="line"><span class="comment">//a-b=target</span></span><br><span class="line"><span class="comment">//a=(sum+target)/2</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findTargetSumWays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> num : nums)&#123;</span><br><span class="line">        sum+=num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((sum+target)%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> k=(sum+target)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] dp=<span class="keyword">new</span> <span class="title class_">int</span>[k+<span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=k; j&gt;=nums[i]; j--)&#123;</span><br><span class="line">            dp[j]+=dp[j-nums[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="完全背包模板"><a href="#完全背包模板" class="headerlink" title="完全背包模板"></a>完全背包模板</h3><ol>
<li><p><strong>dp[N] [C+1] 解法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxValue</span><span class="params">(<span class="type">int</span> N, <span class="type">int</span> C, <span class="type">int</span>[] v, <span class="type">int</span>[] w)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[N][C + <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 先预处理第一件物品</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= C; j++) &#123;</span><br><span class="line">            <span class="comment">// 显然当只有一件物品的时候，在容量允许的情况下，能选多少件就选多少件</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">maxK</span> <span class="operator">=</span> j / v[<span class="number">0</span>];</span><br><span class="line">            dp[<span class="number">0</span>][j] = maxK * w[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理剩余物品</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= C; j++) &#123;</span><br><span class="line">                <span class="comment">// 不考虑第 i 件物品的情况（选择 0 件物品 i）</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> dp[i - <span class="number">1</span>][j];</span><br><span class="line">                <span class="comment">// 考虑第 i 件物品的情况</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span> ;; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j &lt; v[i] * k) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    y = Math.max(y, dp[i - <span class="number">1</span>][j - k * v[i]] + k * w[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i][j] = Math.max(n, y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[N - <span class="number">1</span>][C];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p><strong>dp[2] [C+1] 解法</strong>  </p>
<ul>
<li><p>滚动数组优化</p>
</li>
<li><p>根据「转移方程」，我们知道计算第 <code>i</code> 行格子只需要第<code>i-1</code>行中的某些值。</p>
</li>
<li><p>也就是计算「某一行」的时候只需要依赖「前一行」。</p>
</li>
<li><p>因此可以用一个只有两行的数组来存储中间结果，根据当前计算的行号是偶数还是奇数来交替使用第 0 行和第 1 行</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxValue</span><span class="params">(<span class="type">int</span> N, <span class="type">int</span> C, <span class="type">int</span>[] v, <span class="type">int</span>[] w)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][C + <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 先预处理第一件物品</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= C; j++) &#123;</span><br><span class="line">            <span class="comment">// 显然当我们只有一件物品的时候，在容量允许的情况下，能选多少件就选多少件</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">maxK</span> <span class="operator">=</span> j / v[<span class="number">0</span>];</span><br><span class="line">            dp[<span class="number">0</span>][j] = maxK * w[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理剩余物品</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= C; j++) &#123;</span><br><span class="line">                <span class="comment">// 不考虑第 i 件物品的情况（选择 0 件物品 i）</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> dp[(i - <span class="number">1</span>)&amp;<span class="number">1</span>][j];</span><br><span class="line">                <span class="comment">// 考虑第 i 件物品的情况</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span> ;; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j &lt; v[i] * k) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    y = Math.max(y, dp[(i - <span class="number">1</span>)&amp;<span class="number">1</span>][j - k * v[i]] + k * w[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i&amp;<span class="number">1</span>][j] = Math.max(n, y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[(N - <span class="number">1</span>)&amp;<span class="number">1</span>][C];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p><strong>dp[C+1] 解法</strong></p>
<ul>
<li><p>不难发现当求解第<code>i</code> 行格子的值时，不仅是只依赖第<code>i-1</code> 行，还明确只依赖第<code>i-1</code> 行的第<code>c</code> 个格子和第<code>c-weight[i]</code> 个格子（也就是对应着第<code>i</code> 个物品不选和选的两种情况）。</p>
</li>
<li><p>换句话说，只依赖于「上一个格子的位置」以及「上一个格子的左边位置」。</p>
</li>
<li><p>dp数组可以只保留代表「剩余容量」的维度</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxValue</span><span class="params">(<span class="type">int</span> N, <span class="type">int</span> C, <span class="type">int</span>[] v, <span class="type">int</span>[] w)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[C + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= C; j++) &#123;</span><br><span class="line">                <span class="comment">// 不考虑第 i 件物品的情况（选择 0 件物品 i）</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> dp[j];</span><br><span class="line">                <span class="comment">// 考虑第 i 件物品的情况</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> j - v[i] &gt;= <span class="number">0</span> ? dp[j - v[i]] + w[i] : <span class="number">0</span>; </span><br><span class="line">                dp[j] = Math.max(n, y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[C];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="279-Perfect-Squares"><a href="#279-Perfect-Squares" class="headerlink" title="279. Perfect Squares"></a><a href="https://leetcode.cn/problems/perfect-squares/">279. Perfect Squares</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode279</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numSquares</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dp,<span class="number">6666</span>);</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j*j&lt;=i; j++)&#123;</span><br><span class="line">                <span class="type">int</span> s=j*j;</span><br><span class="line">                dp[i]=Math.min(dp[i],dp[i-s]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Subarray选编"><a href="#Subarray选编" class="headerlink" title="Subarray选编"></a>Subarray选编</h2><h3 id="718-Maximum-Length-of-Repeated-Subarray"><a href="#718-Maximum-Length-of-Repeated-Subarray" class="headerlink" title="718. Maximum Length of Repeated Subarray"></a><a href="https://leetcode.cn/problems/maximum-length-of-repeated-subarray/">718. Maximum Length of Repeated Subarray</a></h3><p>类似<strong>maximum subarray sum</strong>，随时比较并更新<code>res</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode718</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findLength</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n1=nums1.length;</span><br><span class="line">        <span class="type">int</span> n2=nums2.length;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n1+<span class="number">1</span>][n2+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n1-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n2-<span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums1[i]==nums2[j])&#123;</span><br><span class="line">                    dp[i][j]=<span class="number">1</span>+dp[i+<span class="number">1</span>][j+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                res=Math.max(res,dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="代码随想录"><a href="#代码随想录" class="headerlink" title="代码随想录"></a>代码随想录</h2><h3 id="1035-Uncrossed-Lines"><a href="#1035-Uncrossed-Lines" class="headerlink" title="1035. Uncrossed Lines"></a><a href="https://leetcode.cn/problems/uncrossed-lines/">1035. Uncrossed Lines</a></h3><p>有意思的题:</p>
<p>直线不能相交，这就是说明在字符串A中 找到一个与字符串B相同的子序列，且这个子序列不能改变相对顺序，只要相对顺序不改变，链接相同数字的直线就不会相交。</p>
<p>precisely the same as <code>longest common subsequence</code>! </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode1035</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxUncrossedLines</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n1=nums1.length;</span><br><span class="line">        <span class="type">int</span> n2=nums2.length;</span><br><span class="line">        <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n1+<span class="number">1</span>][n2+<span class="number">1</span>]; <span class="comment">//[0,i-1]  [0,j-1]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n1; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n2; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums1[i-<span class="number">1</span>]==nums2[j-<span class="number">1</span>])&#123;</span><br><span class="line">                    dp[i][j]=dp[i-<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j]=Math.max(dp[i-<span class="number">1</span>][j],dp[i][j-<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n1][n2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="115-Distinct-Subsequences"><a href="#115-Distinct-Subsequences" class="headerlink" title="115. Distinct Subsequences"></a><a href="https://leetcode.cn/problems/distinct-subsequences/">115. Distinct Subsequences</a></h3><p>backtracking果不其然超时，配得上hard题</p>
<p>若要求返回所有结果，则只能<strong>backtracking</strong>硬干;但注意到本题只要求返回结果数，考虑用<strong>dp</strong>优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode115</span> &#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numDistinct</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        backtracking(s,t,<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(),<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(String s, String t, StringBuilder sb, <span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sb.length()==t.length() || i==s.length())&#123;</span><br><span class="line">            <span class="keyword">if</span>(sb.length()==t.length())&#123;</span><br><span class="line">                <span class="keyword">if</span>(sb.toString().equals(t))&#123;</span><br><span class="line">                    res++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; s.length(); j++) &#123;</span><br><span class="line">            sb.append(s.charAt(j));</span><br><span class="line">            backtracking(s,t,sb,j+<span class="number">1</span>);</span><br><span class="line">            sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numDistinct</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n1=s.length();</span><br><span class="line">    <span class="type">int</span> n2=t.length();</span><br><span class="line">    <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n1+<span class="number">1</span>][n2+<span class="number">1</span>]; <span class="comment">//s[i:]和t[j:]匹配子序列数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n1; i++) &#123;</span><br><span class="line">        dp[i][n2]=<span class="number">1</span>;    <span class="comment">//空序列是任何序列的子序列</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n1-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n2-<span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i)==t.charAt(j))&#123;<span class="comment">//只有元素相等才可能派上用场</span></span><br><span class="line">                dp[i][j]=dp[i+<span class="number">1</span>][j+<span class="number">1</span>]+dp[i+<span class="number">1</span>][j];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dp[i][j]=dp[i+<span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="自选"><a href="#自选" class="headerlink" title="自选"></a>自选</h2><h3 id="120-Triangle"><a href="#120-Triangle" class="headerlink" title="120. Triangle"></a>120. Triangle</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumTotal</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> &#123;</span><br><span class="line">    <span class="comment">//dp[i][j]=Math.min(dp[i+1][j],dp[i+1][j+1])+dp[i][j]</span></span><br><span class="line">    <span class="type">int</span> n=triangle.size();</span><br><span class="line">    <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        List&lt;Integer&gt; list=triangle.get(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==n-<span class="number">1</span>)&#123;</span><br><span class="line">                dp[i][j]=list.get(j);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dp[i][j]=list.get(j)+Math.min(dp[i+<span class="number">1</span>][j],dp[i+<span class="number">1</span>][j+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>Follow up:</strong> Could you do this using only <code>O(n)</code> extra space, where <code>n</code> is the total number of rows in the triangle?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumTotal</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> &#123;</span><br><span class="line">    <span class="comment">//dp[i][j]=Math.min(dp[i+1][j],dp[i+1][j+1])+dp[i][j]</span></span><br><span class="line">    <span class="type">int</span> n=triangle.size();</span><br><span class="line">    <span class="type">int</span>[] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        List&lt;Integer&gt; list=triangle.get(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==n-<span class="number">1</span>)&#123;</span><br><span class="line">                dp[j]=list.get(j);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dp[j]=list.get(j)+Math.min(dp[j],dp[j+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="256-Paint-House"><a href="#256-Paint-House" class="headerlink" title="256. Paint House"></a>256. Paint House</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCost</span><span class="params">(<span class="type">int</span>[][] costs)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n= costs.length;</span><br><span class="line">    <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">3</span>];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=costs[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">1</span>]=costs[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">2</span>]=costs[<span class="number">0</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>; c &lt; <span class="number">3</span>; c++) &#123;</span><br><span class="line">            <span class="type">int</span> min=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="number">0</span>)&#123;</span><br><span class="line">                min=Math.min(dp[i-<span class="number">1</span>][<span class="number">1</span>],dp[i-<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="number">1</span>)&#123;</span><br><span class="line">                min=Math.min(dp[i-<span class="number">1</span>][<span class="number">0</span>],dp[i-<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                min=Math.min(dp[i-<span class="number">1</span>][<span class="number">0</span>],dp[i-<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i][c]=costs[i][c]+min;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        res=Math.min(res,dp[n-<span class="number">1</span>][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="518-Coin-Change-II"><a href="#518-Coin-Change-II" class="headerlink" title="518. Coin Change II"></a>518. Coin Change II</h3><p><a href="https://leetcode.com/problems/coin-change-ii/discuss/99212/Knapsack-problem-Java-solution-with-thinking-process-O(nm)-Time-and-O(m)-Space">https://leetcode.com/problems/coin-change-ii/discuss/99212/Knapsack-problem-Java-solution-with-thinking-process-O(nm)-Time-and-O(m)-Space</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> amount, <span class="type">int</span>[] coins)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[coins.length+<span class="number">1</span>][amount+<span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= coins.length; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= amount; j++) &#123;</span><br><span class="line">            dp[i][j] = dp[i-<span class="number">1</span>][j] + (j &gt;= coins[i-<span class="number">1</span>] ? dp[i][j-coins[i-<span class="number">1</span>]] : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[coins.length][amount];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>for each coin: </p>
<ol>
<li>not use it</li>
<li>use it</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> amount, <span class="type">int</span>[] coins)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=coins.length;</span><br><span class="line">    <span class="type">int</span>[] dp=<span class="keyword">new</span> <span class="title class_">int</span>[amount+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> coin : coins) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> coin; i &lt;= amount; i++) &#123;</span><br><span class="line">            dp[i]+=dp[i-coin];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[amount];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="486-Predict-the-Winner"><a href="#486-Predict-the-Winner" class="headerlink" title="486. Predict the Winner"></a>486. Predict the Winner</h3><p>好题！</p>
<p>注意：</p>
<ol>
<li>recurison的返回值不同：<ol>
<li>由于recursion函数返回值代表player 1与player 2的最大差值，在player 1的轮次与player 2的轮次，目标是不同的</li>
<li>轮到player 1时，应该尽可能最大化分数</li>
<li>轮到player 2时，应该尽可能最小化分数</li>
</ol>
</li>
</ol>
<h4 id="Approach-1-Using-Recursion-Accepted"><a href="#Approach-1-Using-Recursion-Accepted" class="headerlink" title="Approach #1 Using Recursion [Accepted]"></a>Approach #1 Using Recursion [Accepted]</h4><p>This is done because, looking from Player 1’s perspective, for any move made by Player 1, it tends to leave the remaining subarray in a situation which minimizes the best score possible for Player 2, even if it plays in the best possible manner. But, when the turn passes to Player 1 again, for Player 1 to win, the remaining subarray should be left in a state such that the score obtained from this subarrray is maximum(for Player 1).</p>
<p>This is a general criteria for any arbitrary two player game and is commonly known as the <a href="https://en.wikipedia.org/wiki/Minimax">Min-Max algorithm</a>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">PredictTheWinner</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> winner(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>, <span class="number">1</span>) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">winner</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> s, <span class="type">int</span> e, <span class="type">int</span> turn)</span> &#123;</span><br><span class="line">    <span class="comment">//when turn==1, player 1&#x27;s round</span></span><br><span class="line">    <span class="comment">//when turn==-1, palyer 2&#x27;s round</span></span><br><span class="line">    <span class="keyword">if</span> (s == e)</span><br><span class="line">        <span class="keyword">return</span> turn * nums[s];</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> turn * nums[s] + winner(nums, s + <span class="number">1</span>, e, -turn);</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> turn * nums[e] + winner(nums, s, e - <span class="number">1</span>, -turn);</span><br><span class="line">    <span class="keyword">return</span> turn * Math.max(turn * a, turn * b);</span><br><span class="line">    <span class="comment">//max(a,b) for 1 and min(a,b) for -1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="Approach-2-Similar-Approach-Accepted"><a href="#Approach-2-Similar-Approach-Accepted" class="headerlink" title="Approach #2 Similar Approach [Accepted]"></a>Approach #2 Similar Approach [Accepted]</h4><h4 id="Approach-3-Dynamic-Programming-Accepted"><a href="#Approach-3-Dynamic-Programming-Accepted" class="headerlink" title="Approach #3 Dynamic Programming [Accepted]:"></a>Approach #3 Dynamic Programming [Accepted]:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">PredictTheWinner</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">    <span class="comment">//a=nums[s]-dp[s+1][e]</span></span><br><span class="line">    <span class="comment">//b=nums[e]-dp[s][e-1]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==j)&#123;</span><br><span class="line">                dp[i][j]=nums[i];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="type">int</span> a=nums[i]-dp[i+<span class="number">1</span>][j];</span><br><span class="line">                <span class="type">int</span> b=nums[j]-dp[i][j-<span class="number">1</span>];</span><br><span class="line">                dp[i][j]=Math.max(a,b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>][n-<span class="number">1</span>]&gt;=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="2420-Find-All-Good-Indices"><a href="#2420-Find-All-Good-Indices" class="headerlink" title="2420. Find All Good Indices"></a>2420. Find All Good Indices</h3><p>转化新题为旧题！</p>
<p>longest non-increasing subarray </p>
<p>longest non-decreasing subarray</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">goodIndices</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span>[] dp1=<span class="keyword">new</span> <span class="title class_">int</span>[n];   <span class="comment">//non-increasing order on the left</span></span><br><span class="line">    <span class="type">int</span>[] dp2=<span class="keyword">new</span> <span class="title class_">int</span>[n];   <span class="comment">//non-decreasing order on the right</span></span><br><span class="line">    dp1[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp1[i]= nums[i]&lt;=nums[i-<span class="number">1</span>] ? dp1[i-<span class="number">1</span>]+<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dp2[n-<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n-<span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        dp2[i]= nums[i]&lt;=nums[i+<span class="number">1</span>] ? dp2[i+<span class="number">1</span>]+<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Integer&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k; i &lt; n-k; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(dp1[i-<span class="number">1</span>]&gt;=k &amp;&amp; dp2[i+<span class="number">1</span>]&gt;=k)&#123;</span><br><span class="line">            res.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/2022/04/28/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h1 id="Dynamic-Programming-选编"><a href="#Dynamic-Programming-选编" class="headerlink" title="Dynamic Programming 选编"></a>Dynamic Programming 选编</h1><p>算法的优化就是这么一个过程:</p>
<ol>
<li><p>先写出可读性很好的暴力递归算法  </p>
</li>
<li><p>然后尝试运用动态规划技巧优化重叠子问题</p>
</li>
<li><p>最后尝试用空间压缩技巧优化空间复杂度</p>
</li>
</ol>
<h2 id="代码随想录"><a href="#代码随想录" class="headerlink" title="代码随想录"></a>代码随想录</h2><h3 id="746-Min-Cost-Climbing-Stairs"><a href="#746-Min-Cost-Climbing-Stairs" class="headerlink" title="746. Min Cost Climbing Stairs"></a><a href="https://leetcode-cn.com/problems/min-cost-climbing-stairs/">746. Min Cost Climbing Stairs</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode746</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCostClimbingStairs</span><span class="params">(<span class="type">int</span>[] cost)</span> &#123;</span><br><span class="line">        <span class="comment">//dp[n]=min(dp[n-1]+cost[n-1],dp[n-2]+cost[n-2])</span></span><br><span class="line">        <span class="type">int</span> a=<span class="number">0</span>; <span class="comment">//dp[0]</span></span><br><span class="line">        <span class="type">int</span> b=<span class="number">0</span>; <span class="comment">//dp[1]</span></span><br><span class="line">        <span class="type">int</span> c=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= cost.length; i++) &#123;</span><br><span class="line">            c=Math.min(a+cost[i-<span class="number">2</span>],b+cost[i-<span class="number">1</span>]);</span><br><span class="line">            a=b;</span><br><span class="line">            b=c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="343-Integer-Break"><a href="#343-Integer-Break" class="headerlink" title="343. Integer Break"></a><a href="https://leetcode-cn.com/problems/integer-break/">343. Integer Break</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode343</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">integerBreak</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>; j &lt; i; j++) &#123;</span><br><span class="line">                dp[i]=Math.max(dp[i],Math.max(dp[j]*(i-j),j*(i-j)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="96-Unique-Binary-Search-Trees"><a href="#96-Unique-Binary-Search-Trees" class="headerlink" title="96. Unique Binary Search Trees"></a><a href="https://leetcode-cn.com/problems/unique-binary-search-trees/">96. Unique Binary Search Trees</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode96</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numTrees</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i-<span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                dp[i]+=dp[j]*dp[i-<span class="number">1</span>-j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h3><p><a href="https://programmercarl.com/%E8%83%8C%E5%8C%85%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%8001%E8%83%8C%E5%8C%85-1.html">https://programmercarl.com/%E8%83%8C%E5%8C%85%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%8001%E8%83%8C%E5%8C%85-1.html</a></p>
<p>先遍历物品还是先遍历背包容量？</p>
<h2 id="labuladong"><a href="#labuladong" class="headerlink" title="labuladong"></a>labuladong</h2><p><a href="https://labuladong.github.io/algo/3/23/68/">https://labuladong.github.io/algo/3/23/68/</a></p>
<p>dp关键词：</p>
<ul>
<li>核心思想：穷举求最值</li>
<li>存在重叠子问题：引入备忘录或dp数组，避免不必要的计算</li>
<li>具备最优子结构：<ul>
<li><strong>要符合「最优子结构」，子问题间必须互相独立</strong></li>
</ul>
</li>
<li><strong>明确 base case -&gt; 明确「状态」-&gt; 明确「选择」 -&gt; 定义 dp 数组&#x2F;函数的含义</strong></li>
</ul>
<h3 id="322-Coin-Change"><a href="#322-Coin-Change" class="headerlink" title="322. Coin Change"></a><a href="https://leetcode-cn.com/problems/coin-change/">322. Coin Change</a></h3><p>那么，既然知道了这是个动态规划问题，就要思考<strong>如何列出正确的状态转移方程</strong>？</p>
<p>1、<strong>确定 base case</strong>，这个很简单，显然目标金额 <code>amount</code> 为 0 时算法返回 0，因为不需要任何硬币就已经凑出目标金额了。</p>
<p>2、<strong>确定「状态」，也就是原问题和子问题中会变化的变量</strong>。由于硬币数量无限，硬币的面额也是题目给定的，只有目标金额会不断地向 base case 靠近，所以唯一的「状态」就是目标金额 <code>amount</code>。</p>
<p>3、<strong>确定「选择」，也就是导致「状态」产生变化的行为</strong>。目标金额为什么变化呢，因为你在选择硬币，你每选择一枚硬币，就相当于减少了目标金额。所以说所有硬币的面值，就是你的「选择」。</p>
<p>4、<strong>明确 <code>dp</code> 函数&#x2F;数组的定义</strong>。我们这里讲的是自顶向下的解法，所以会有一个递归的 <code>dp</code> 函数，一般来说函数的参数就是状态转移中会变化的量，也就是上面说到的「状态」；函数的返回值就是题目要求我们计算的量。就本题来说，状态只有一个，即「目标金额」，题目要求我们计算凑出目标金额所需的最少硬币数量。</p>
<p><strong>所以我们可以这样定义 <code>dp</code> 函数：<code>dp(n)</code> 表示，输入一个目标金额 <code>n</code>，返回凑出目标金额 <code>n</code> 所需的最少硬币数量</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode322</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">coinChange</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="comment">//dp[n]表示amount=n时，所需最少coin数</span></span><br><span class="line">        <span class="type">int</span>[] dp=<span class="keyword">new</span> <span class="title class_">int</span>[amount+<span class="number">1</span>]; <span class="comment">//0~amount</span></span><br><span class="line">        Arrays.fill(dp,amount+<span class="number">1</span>);</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> coin : coins) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i&lt;coin)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i]=Math.min(dp[i],dp[i-coin]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount]==amount+<span class="number">1</span> ? -<span class="number">1</span> : dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="300-Longest-Increasing-Subsequence"><a href="#300-Longest-Increasing-Subsequence" class="headerlink" title="300. Longest Increasing Subsequence"></a><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/">300. Longest Increasing Subsequence</a></h3><h4 id="法一：brute-force-O-N-2"><a href="#法一：brute-force-O-N-2" class="headerlink" title="法一：brute force  O(N^2)"></a>法一：brute force  O(N^2)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">//dp[i] 以i结尾的increasing subsequence的最大长度</span></span><br><span class="line">    <span class="comment">//dp[i]=max(dp[j])+1,if j&lt;i &amp;&amp; nums[i]&gt;nums[j]</span></span><br><span class="line">    <span class="type">int</span>[] dp=<span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> max=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        dp[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span> ; j &lt; i ; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j]&lt;nums[i])&#123;</span><br><span class="line">                dp[i]=Math.max(dp[j]+<span class="number">1</span>,dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        max=Math.max(max,dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="法二：binary-serach-O-NlogN"><a href="#法二：binary-serach-O-NlogN" class="headerlink" title="法二：binary serach O(NlogN)"></a>法二：binary serach O(NlogN)</h4><p>patience sort</p>
<p>牌的堆数就是最长递增子序列的长度</p>
<p><a href="https://labuladong.github.io/algo/3/23/69/">https://labuladong.github.io/algo/3/23/69/</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">//寻找左侧边界的二分搜索 [left,right)左闭右开区间搜索</span></span><br><span class="line">    <span class="type">int</span>[] top=<span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">    top[<span class="number">0</span>]=nums[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> pile=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=pile;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;<span class="comment">//[left,right)</span></span><br><span class="line">            <span class="type">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(top[mid]&gt;nums[i])&#123;</span><br><span class="line">                right=mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(top[mid]&lt;nums[i])&#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//注意此处逻辑，midVal==target不停止，继续缩小右侧边界，直到left==right</span></span><br><span class="line">                right=mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//退出循环时,leftVal==target(查找)或left是第一个比target大的元素</span></span><br><span class="line">        top[left]=nums[i];</span><br><span class="line">        <span class="keyword">if</span>(left==pile)&#123;</span><br><span class="line">            pile++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="354-Russian-Doll-Envelopes"><a href="#354-Russian-Doll-Envelopes" class="headerlink" title="354. Russian Doll Envelopes"></a><a href="https://leetcode-cn.com/problems/russian-doll-envelopes/">354. Russian Doll Envelopes</a></h3><p><strong>先对宽度 <code>w</code> 进行升序排序，如果遇到 <code>w</code> 相同的情况，则按照高度 <code>h</code> 降序排序；之后把所有的 <code>h</code> 作为一个数组，在这个数组上计算 LIS 的长度就是答案</strong>。</p>
<p>注意：暴力搜索会超时，必须二分搜索！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxEnvelopes</span><span class="params">(<span class="type">int</span>[][] envelopes)</span> &#123;</span><br><span class="line">    Arrays.sort(envelopes, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] o1, <span class="type">int</span>[] o2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> o1[<span class="number">0</span>]!=o2[<span class="number">0</span>] ? o1[<span class="number">0</span>]-o2[<span class="number">0</span>] : o2[<span class="number">1</span>]-o1[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">int</span>[] top=<span class="keyword">new</span> <span class="title class_">int</span>[envelopes.length];</span><br><span class="line">    top[<span class="number">0</span>]=envelopes[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> pile=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; envelopes.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> target=envelopes[i][<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=pile;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="type">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(top[mid]&gt;target)&#123;</span><br><span class="line">                right=mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(top[mid]&lt;target)&#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right=mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        top[left]=target;</span><br><span class="line">        <span class="keyword">if</span>(left==pile)&#123;</span><br><span class="line">            pile++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="494-Target-Sum"><a href="#494-Target-Sum" class="headerlink" title="494. Target Sum"></a><a href="https://leetcode-cn.com/problems/target-sum/">494. Target Sum</a></h3><h4 id="法一：backtracking"><a href="#法一：backtracking" class="headerlink" title="法一：backtracking"></a>法一：backtracking</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode494</span> &#123;</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findTargetSumWays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        count=<span class="number">0</span>;</span><br><span class="line">        backtracking(nums,target,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target, <span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==nums.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target==<span class="number">0</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        backtracking(nums,target-nums[i],i+<span class="number">1</span>); <span class="comment">//+i</span></span><br><span class="line">        backtracking(nums,target+nums[i],i+<span class="number">1</span>); <span class="comment">//-i</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>注意：可以用memo优化</p>
<h4 id="法二：dp"><a href="#法二：dp" class="headerlink" title="法二：dp"></a>法二：dp</h4><p>动态规划之所以比暴力算法快，是因为动态规划技巧消除了重叠子问题。</p>
<p>其实，这个问题可以转化为一个子集划分问题，而子集划分问题又是一个典型的背包问题。</p>
<p>首先，如果我们把 <code>nums</code> 划分成两个子集 <code>A</code> 和 <code>B</code>，分别代表分配 <code>+</code> 的数和分配 <code>-</code> 的数，那么他们和 <code>target</code> 存在如下关系：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sum(A) - sum(B) = target</span><br><span class="line">sum(A) = target + sum(B)</span><br><span class="line">sum(A) + sum(A) = target + sum(B) + sum(A)</span><br><span class="line">2 * sum(A) = target + sum(nums)</span><br></pre></td></tr></table></figure>

<p>综上，可以推出 <code>sum(A) = (target + sum(nums)) / 2</code>，也就是把原问题转化成：**<code>nums</code> 中存在几个子集 <code>A</code>，使得 <code>A</code> 中元素的和为 <code>(target + sum(nums)) / 2</code>**？</p>
<p>注意base case与416的不同！</p>
<ul>
<li><p>只问存不存在子集（划分）时:</p>
<ul>
<li><p>dp[i] [0] &#x3D; true, 用任意物品都能塞满0空间 </p>
</li>
<li><p>j&gt;0时，dp[0] [j] &#x3D;false，用0个物品塞满大于0的空间，不可能</p>
</li>
<li><p>至此 i&#x3D;0 和 j&#x3D;0 时都讨论完毕，i 和 j 都从 1 开始 dp</p>
</li>
</ul>
</li>
<li><p>问存在多少个子集（划分）时：</p>
<ul>
<li><p>j&#x3D;0 时 , 虽然用任意物品都能塞满0空间， 但不能确定总共有多少种可能， 除非同时 i&#x3D;0</p>
<ul>
<li>dp[0] [0] &#x3D; 1, 用0个物品可以塞满0空间，有1种可能</li>
</ul>
</li>
<li><p>j&gt;0时，dp[0] [j] &#x3D;0，用0个物品塞满大于0的空间，有0种可能</p>
</li>
<li><p>至此，i&#x3D;0 时讨论完毕，但 j&#x3D;0 时未讨论完毕，i 从 1 开始，j 从 0 开始 dp</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findTargetSumWays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="comment">//sumA-sumB=target</span></span><br><span class="line">    <span class="comment">//sumA=target+sumB</span></span><br><span class="line">    <span class="comment">//sumA+sumA=target+sumB+sumA</span></span><br><span class="line">    <span class="comment">//sumA=(target+sum)/2</span></span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        sum+=num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum&lt;Math.abs(target) ||  ((target+sum)&amp;<span class="number">1</span>)==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> subsetSum(nums,(target+sum)/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">subsetSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> sum)</span>&#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>][sum+<span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>; <span class="comment">//base case: 没有物品可选，有一种情况能塞满0空间</span></span><br><span class="line">    <span class="comment">//base case: j&gt;0时,dp[0][j]=0，因为没有物品可选，有0种情况能塞满j空间</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123; <span class="comment">//由于i=0时已讨论完毕，可以从i=1开始</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= sum; j++) &#123; <span class="comment">//j=0时并未讨论，j从0开始</span></span><br><span class="line">            <span class="keyword">if</span>(j-nums[i-<span class="number">1</span>]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                dp[i][j]=dp[i-<span class="number">1</span>][j]+dp[i-<span class="number">1</span>][j-nums[i-<span class="number">1</span>]];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dp[i][j]=dp[i-<span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][sum];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="72-Edit-Distance"><a href="#72-Edit-Distance" class="headerlink" title="72. Edit Distance"></a><a href="https://leetcode.cn/problems/edit-distance/">72. Edit Distance</a></h3><ul>
<li><em>minimum number of operations</em> </li>
<li><em>convert <code>word1</code> to <code>word2</code></em></li>
</ul>
<p><strong>解决两个字符串的动态规划问题，一般都是用两个指针 <code>i, j</code> 分别指向两个字符串的最后，然后一步步往前移动，缩小问题的规模</strong>。</p>
<ul>
<li>若字符相等，则skip</li>
<li>若字符不等，则三选一：<ul>
<li>insert </li>
<li>delete</li>
<li>replace</li>
</ul>
</li>
</ul>
<p><strong>递归解法是自顶向下求解，DP table 是自底向上求解</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode72</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> s1=word1.length();</span><br><span class="line">        <span class="type">int</span> s2=word2.length();</span><br><span class="line">        <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[s1+<span class="number">1</span>][s2+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= s2; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= s1; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= s1; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= s2; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(word1.charAt(i-<span class="number">1</span>)==word2.charAt(j-<span class="number">1</span>))&#123;</span><br><span class="line">                    dp[i][j]=dp[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j]=Math.min(Math.min(dp[i-<span class="number">1</span>][j]+<span class="number">1</span>,dp[i][j-<span class="number">1</span>]+<span class="number">1</span>),dp[i-<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[s1][s2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="174-Dungeon-Game"><a href="#174-Dungeon-Game" class="headerlink" title="174. Dungeon Game"></a><a href="https://leetcode.cn/problems/dungeon-game/">174. Dungeon Game</a></h3><p> <em>minimum initial health</em></p>
<p>这道题的dp是倒序的，这点很重要，为什么不能像【最小路径和】一样是正序的？因为【最小路径和】是无状态的，你会发现【最小路径和】倒序dp也是可以的，这道题由于有“加血”的过程，只能依赖后面的值判断需要的血量。所以这里的dp [i] [j]表达的意思是：“从（i，j）出发，到达终点需要最少的血量”。因此，正序的含义为“从起点出发，到达位置（i，j）所需要的最少血量”；倒序的含义是“从（i，j）出发，到达终点需要最少的血量”。初始血量本来就是要求的，所以只能倒序dp</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode174</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculateMinimumHP</span><span class="params">(<span class="type">int</span>[][] dungeon)</span> &#123;</span><br><span class="line">        <span class="type">int</span> row=dungeon.length;</span><br><span class="line">        <span class="type">int</span> col=dungeon[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[row][col];</span><br><span class="line">        <span class="comment">//dp[i][j]表示从i,j出发到达终点所需的最少血量</span></span><br><span class="line">        dp[row-<span class="number">1</span>][col-<span class="number">1</span>]=dungeon[row-<span class="number">1</span>][col-<span class="number">1</span>]&gt;=<span class="number">0</span> ? <span class="number">1</span> : <span class="number">1</span>-dungeon[row-<span class="number">1</span>][col-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> row-<span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            dp[i][col-<span class="number">1</span>]=dp[i+<span class="number">1</span>][col-<span class="number">1</span>]-dungeon[i][col-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(dp[i][col-<span class="number">1</span>]&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                dp[i][col-<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> col-<span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            dp[row-<span class="number">1</span>][i]=dp[row-<span class="number">1</span>][i+<span class="number">1</span>]-dungeon[row-<span class="number">1</span>][i];</span><br><span class="line">            <span class="keyword">if</span>(dp[row-<span class="number">1</span>][i]&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                dp[row-<span class="number">1</span>][i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> row-<span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> col-<span class="number">2</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                dp[i][j]=Math.min(dp[i+<span class="number">1</span>][j],dp[i][j+<span class="number">1</span>])-dungeon[i][j];</span><br><span class="line">                <span class="keyword">if</span>(dp[i][j]&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i][j]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="514-Freedom-Trail"><a href="#514-Freedom-Trail" class="headerlink" title="514. Freedom Trail"></a><a href="https://leetcode.cn/problems/freedom-trail/">514. Freedom Trail</a></h3><p><strong>「状态」就是「当前需要输入的字符」和「当前圆盘指针的位置」</strong>。</p>
<p><strong>「选择」就是「如何拨动指针得到待输入的字符」</strong>。</p>
<h4 id="法一："><a href="#法一：" class="headerlink" title="法一："></a>法一：</h4><pre><code>     * 定义转移方程：
     * dp[i][j] 代表到key[i]为止拼接所需要的最少步数，
     * 并且这个key[i]是第j个在圆盘上出现的key[i]
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findRotateSteps</span><span class="params">(String ring, String key)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 贪心的算法：-&gt;举出了反例，是不正确的</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 最直观的转移方程：</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * dp[i]: 代表到key[i]为止，拼接所需要的最少步数</span></span><br><span class="line"><span class="comment">         * dp[i-1]: 到key[i - 1]为止，拼接所需要的最少步数</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * dp[i] = dp[i - 1] + (从key[i-1]到key[i]在圆盘上所要走的最短距离) + 1 （按button需要的步数为1）</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 下标x和下标y在圆盘上的最短距离： |x - y| 或者 n - |x - y|</span></span><br><span class="line"><span class="comment">         * 即Math.min(Math.abs(x - y), n - Math.abs(x - y))</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 但是，</span></span><br><span class="line"><span class="comment">         * key[i-1] 在圆盘上可以出现多次</span></span><br><span class="line"><span class="comment">         * key[i] 在圆盘上可以出现多次</span></span><br><span class="line"><span class="comment">         * 因此一个维度是不够的，再增加一个维度</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 定义转移方程：</span></span><br><span class="line"><span class="comment">         * dp[i][j] 代表到key[i]为止拼接所需要的最少步数，</span></span><br><span class="line"><span class="comment">         * 并且这个key[i]是第j个在圆盘上出现的key[i]</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 比如说key[i] = &#x27;d&#x27;，在ring圆盘上出现位置的下标：2, 7, 8</span></span><br><span class="line"><span class="comment">         * dp[i][0] 代表到key[i]为止拼接所需要的最少步数，并且这个key[i]是位于下标位置为2的key[i]</span></span><br><span class="line"><span class="comment">         * dp[i][1] 代表到key[i]为止拼接所需要的最少步数，并且这个key[i]是位于下标位置为7的key[i]</span></span><br><span class="line"><span class="comment">         * ...以此类推</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 上一个字符是key[i-1] = &#x27;a&#x27;，在ring圆盘上出现的位置下标是: 4, 9</span></span><br><span class="line"><span class="comment">         * dp[i][0] 代表到key[i - 1]为止拼接所需要的最少步数，并且这个key[i - 1]是位于下标位置为4的key[i]</span></span><br><span class="line"><span class="comment">         * dp[i][1] 代表到key[i - 1]为止拼接所需要的最少步数，并且这个key[i - 1]是位于下标位置为9的key[i]</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * dp[i][j] =</span></span><br><span class="line"><span class="comment">         * Math.min(</span></span><br><span class="line"><span class="comment">         * dp[i-1][0] + 上一个字符key[i-1]（第0个出现的key[i - 1]）到这一个字符key[i]（第j个出现的key[i]）的最短距离,</span></span><br><span class="line"><span class="comment">         * dp[i-1][1] + 上一个字符key[i-1]（第1个出现的key[i - 1]）到这一个字符key[i]（第j个出现的key[i]）的最短距离,</span></span><br><span class="line"><span class="comment">         * ....</span></span><br><span class="line"><span class="comment">         * dp[i-1][k] + 上一个字符key[i-1]（第k个出现的key[i - 1]）到这一个字符key[i]（第j个出现的key[i]）的最短距离,</span></span><br><span class="line"><span class="comment">         * )  + 1 (按button的步数为1)</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] ringChar = ring.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] keyChar = key.toCharArray();</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt;[] lists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>[<span class="number">26</span>];<span class="comment">// an array of ArrayList&lt;Integer&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;<span class="comment">//[0,25], represents every lowercase letter </span></span><br><span class="line">            lists[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历ring，存储每个字符出现的位置，即下标</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> ringChar.length, m = keyChar.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> ringChar[i];</span><br><span class="line">            <span class="comment">// 找到对应的arraylist，存储下标</span></span><br><span class="line">            lists[c - <span class="string">&#x27;a&#x27;</span>].add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ring 和 key的长度最多100，所以定个101很安全</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// dp[0][j] 只需要计算从12点方向到key[0]所需要走的最短距离</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; lists[keyChar[<span class="number">0</span>] - <span class="string">&#x27;a&#x27;</span>].size(); j++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 每一个key[0]字符所在的下标</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> lists[keyChar[<span class="number">0</span>] - <span class="string">&#x27;a&#x27;</span>].get(j);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 第一个12点方向的字符的下标，其实就是0</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> lists[ringChar[<span class="number">0</span>] - <span class="string">&#x27;a&#x27;</span>].get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            dp[<span class="number">0</span>][j] = Math.min(Math.abs(x - y), n - Math.abs(x - y)) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; keyChar.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 列出当前的字符，和上一个的字符分别是什么</span></span><br><span class="line">            <span class="type">char</span> <span class="variable">cur</span> <span class="operator">=</span> keyChar[i], pre = keyChar[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; lists[cur - <span class="string">&#x27;a&#x27;</span>].size(); j++) &#123;</span><br><span class="line">                <span class="comment">// 当前字符cur出现在ring圆盘上每一个位置的下标</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> lists[cur - <span class="string">&#x27;a&#x27;</span>].get(j);</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">minSteps</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; lists[pre - <span class="string">&#x27;a&#x27;</span>].size(); k++) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 上一个字符pre出现在ring圆盘上每一个位置的下标</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> lists[pre - <span class="string">&#x27;a&#x27;</span>].get(k);</span><br><span class="line"></span><br><span class="line">                    <span class="type">int</span> <span class="variable">steps</span> <span class="operator">=</span> dp[i - <span class="number">1</span>][k] + Math.min(Math.abs(x - y), n - Math.abs(x - y)) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                    minSteps = Math.min(minSteps, steps);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                dp[i][j] = minSteps;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// dp[keyChar.length - 1][0], .... dp[keyChar.length - 1][k] 中的最小值，就是最终拼接key所需要的最少步数</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">101</span>; k++) &#123;</span><br><span class="line">            <span class="comment">// 当等于0时，说明已经越界了，直接跳出循环</span></span><br><span class="line">            <span class="keyword">if</span> (dp[keyChar.length - <span class="number">1</span>][k] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            ans = Math.min(ans, dp[keyChar.length - <span class="number">1</span>][k]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode514</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findRotateSteps</span><span class="params">(String ring, String key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n1=ring.length();</span><br><span class="line">        <span class="type">int</span> n2=key.length();</span><br><span class="line">        List&lt;Integer&gt;[] lists=<span class="keyword">new</span> <span class="title class_">ArrayList</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; lists.length; i++) &#123;</span><br><span class="line">            lists[i]=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] rings = ring.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n1; i++) &#123;</span><br><span class="line">            <span class="type">char</span> c=rings[i];</span><br><span class="line">            lists[c-<span class="string">&#x27;a&#x27;</span>].add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] keys = key.toCharArray();</span><br><span class="line">        <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n2][<span class="number">101</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; lists[keys[<span class="number">0</span>] - <span class="string">&#x27;a&#x27;</span>].size(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> pre=<span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> cur=lists[keys[<span class="number">0</span>]-<span class="string">&#x27;a&#x27;</span>].get(i);</span><br><span class="line">            dp[<span class="number">0</span>][i]=dist(n1,pre,cur)+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n2; i++) &#123;</span><br><span class="line">            <span class="type">char</span> curKey=keys[i];</span><br><span class="line">            <span class="type">char</span> preKey=keys[i-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; lists[curKey - <span class="string">&#x27;a&#x27;</span>].size(); j++) &#123;</span><br><span class="line">                <span class="type">int</span> cur=lists[curKey-<span class="string">&#x27;a&#x27;</span>].get(j);</span><br><span class="line">                <span class="type">int</span> min=Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; lists[preKey - <span class="string">&#x27;a&#x27;</span>].size(); k++) &#123;</span><br><span class="line">                    <span class="type">int</span> pre=lists[preKey-<span class="string">&#x27;a&#x27;</span>].get(k);</span><br><span class="line">                    <span class="type">int</span> cost=dp[i-<span class="number">1</span>][k]+dist(n1,pre,cur)+<span class="number">1</span>;</span><br><span class="line">                    min=Math.min(min,cost);</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i][j]=min;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> res=Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">101</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[n2-<span class="number">1</span>][i]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res=Math.min(res,dp[n2-<span class="number">1</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">dist</span><span class="params">(<span class="type">int</span> n1,<span class="type">int</span> pre,<span class="type">int</span> cur)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.min(Math.abs(pre-cur),n1-Math.abs(pre-cur));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="House-Robber"><a href="#House-Robber" class="headerlink" title="House Robber"></a>House Robber</h2><h3 id="198-House-Robber"><a href="#198-House-Robber" class="headerlink" title="198. House Robber"></a><a href="https://leetcode-cn.com/problems/house-robber/">198. House Robber</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] dp=<span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">    dp[<span class="number">0</span>]=nums[<span class="number">0</span>];</span><br><span class="line">    dp[<span class="number">1</span>]=Math.max(nums[<span class="number">0</span>],nums[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        dp[i]=Math.max(dp[i-<span class="number">1</span>],dp[i-<span class="number">2</span>]+nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[nums.length-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>优化空间复杂度后：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums.length==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(nums[<span class="number">0</span>],nums[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> a=nums[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> b=Math.max(nums[<span class="number">0</span>],nums[<span class="number">1</span>]);</span><br><span class="line">    <span class="type">int</span> c=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        c=Math.max(b,a+nums[i]);</span><br><span class="line">        a=b;</span><br><span class="line">        b=c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="213-House-Robber-II"><a href="#213-House-Robber-II" class="headerlink" title="213. House Robber II"></a><a href="https://leetcode-cn.com/problems/house-robber-ii/">213. House Robber II</a></h3><p>由于0和n-1不可以同时取，只需取 0 ~ n-2 和 1 ~ n-1 的结果的最大值即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode213</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;<span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Math.max(nums[<span class="number">0</span>],nums[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(helper(nums,<span class="number">0</span>,n-<span class="number">2</span>),helper(nums,<span class="number">1</span>,n-<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">helper</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> start,<span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(end-start==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Math.max(nums[start],nums[end]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> a=nums[start];</span><br><span class="line">        <span class="type">int</span> b=Math.max(nums[start],nums[start+<span class="number">1</span>]);</span><br><span class="line">        <span class="type">int</span> c=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start+<span class="number">2</span>; i &lt;= end; i++) &#123;</span><br><span class="line">            c=Math.max(a+nums[i],b);</span><br><span class="line">            a=b;</span><br><span class="line">            b=c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="337-House-Robber-III"><a href="#337-House-Robber-III" class="headerlink" title="337. House Robber III"></a><a href="https://leetcode-cn.com/problems/house-robber-iii/">337. House Robber III</a></h3><p>有意思：懂binary tree的小偷~</p>
<p>The thief has found himself a new place for his thievery again. There is only one entrance to this area, called root.</p>
<p>Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if two directly-linked houses were broken into on the same night.</p>
<p>Given the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police.</p>
<h4 id="法一：用memo记录"><a href="#法一：用memo记录" class="headerlink" title="法一：用memo记录"></a>法一：用memo记录</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode337</span> &#123;</span><br><span class="line">    Map&lt;TreeNode,Integer&gt; memo;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(memo==<span class="literal">null</span>)&#123;</span><br><span class="line">            memo=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(memo.containsKey(root))&#123;</span><br><span class="line">            <span class="keyword">return</span> memo.get(root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> rob_it=root.val+</span><br><span class="line">                (root.left==<span class="literal">null</span> ? <span class="number">0</span> : rob(root.left.left)+rob(root.left.right))+</span><br><span class="line">                (root.right==<span class="literal">null</span> ? <span class="number">0</span> : rob(root.right.left)+rob(root.right.right));</span><br><span class="line">        <span class="type">int</span> rob_it_not=rob(root.left)+rob(root.right);</span><br><span class="line">        <span class="type">int</span> result=Math.max(rob_it,rob_it_not);</span><br><span class="line">        memo.put(root,result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="法二：不用memo记录"><a href="#法二：不用memo记录" class="headerlink" title="法二：不用memo记录"></a>法二：不用memo记录</h4><h2 id="Best-Time-to-Buy-and-Sell-Stock"><a href="#Best-Time-to-Buy-and-Sell-Stock" class="headerlink" title="Best Time to Buy and Sell Stock"></a>Best Time to Buy and Sell Stock</h2><p>有限状态机 finite state machine</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">base <span class="keyword">case</span>：</span><br><span class="line">dp[<span class="number">0</span>][j][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">dp[<span class="number">0</span>][j][<span class="number">1</span>] = -prices[<span class="number">0</span>]</span><br><span class="line">dp[i][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">dp[i][<span class="number">0</span>][<span class="number">1</span>] = -infinity  <span class="comment">//不可能！</span></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">状态转移方程：</span><br><span class="line">dp[i][k][<span class="number">0</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">0</span>], dp[i-<span class="number">1</span>][k][<span class="number">1</span>] + prices[i])</span><br><span class="line">dp[i][k][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][k][<span class="number">1</span>], dp[i-<span class="number">1</span>][k-<span class="number">1</span>][<span class="number">0</span>] - prices[i])</span><br></pre></td></tr></table></figure>



<h3 id="188-Best-Time-to-Buy-and-Sell-Stock-IV"><a href="#188-Best-Time-to-Buy-and-Sell-Stock-IV" class="headerlink" title="188. Best Time to Buy and Sell Stock IV"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/">188. Best Time to Buy and Sell Stock IV</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">解法1 动态规划</span></span><br><span class="line"><span class="comment">状态定义:</span></span><br><span class="line"><span class="comment">1. dp[i][k][0 or 1]</span></span><br><span class="line"><span class="comment">0 &lt;= i &lt;= n - 1, 1 &lt;= k &lt;= K</span></span><br><span class="line"><span class="comment">n 为天数，大 K 为交易数的上限，0 和 1 代表是否持有股票。</span></span><br><span class="line"><span class="comment">比如说 dp[3][2][1] 的含义就是：今天是第三天，我现在手上持有着股票，至今最多进行 2 次交易。</span></span><br><span class="line"><span class="comment">再比如 dp[2][3][0] 的含义：今天是第二天，我现在手上没有持有股票，至今最多进行 3 次交易</span></span><br><span class="line"><span class="comment">2. 最终要求的答案是 dp[n - 1][K][0]因为 dp[n - 1][K][1] 代表到最后一天手上还持有股票，</span></span><br><span class="line"><span class="comment">dp[n - 1][K][0] 表示最后一天手上的股票已经卖出去了，很显然后者得到的利润一定大于前者</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">basecase:</span></span><br><span class="line"><span class="comment">dp[0][j][0] = 0</span></span><br><span class="line"><span class="comment">解释：第0天不持有股票,不管交易次数限制多少次,同一天内交易与否,利润都为0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">dp[0][j][1] = -prices[0]</span></span><br><span class="line"><span class="comment">解释：第0天持有股票,不管交易次数限制多少,最终利润都为-prices[0]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">dp[i][0][0] = 0</span></span><br><span class="line"><span class="comment">解释：因为 k 是从 1 开始的，所以 k = 0 意味着根本不允许交易，这时候利润当然是 0。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">dp[i][0][1] = -infinity</span></span><br><span class="line"><span class="comment">解释：不允许交易的情况下，是不可能持有股票的。</span></span><br><span class="line"><span class="comment">因为我们的算法要求一个最大值，所以初始值设为一个最小值，方便取最大值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">状态转移:</span></span><br><span class="line"><span class="comment">注意 k 的限制，在选择 buy 的时候相当于开启了一次交易，那么对于昨天来说，交易次数的上限 k 应该减小 1。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])</span></span><br><span class="line"><span class="comment">              max( 今天选择 reset,        今天选择 sell       )</span></span><br><span class="line"><span class="comment">解释：今天我没有持有股票，有两种可能，我从这两种可能中求最大利润：</span></span><br><span class="line"><span class="comment">1. 我昨天就没有持有，且截至昨天最大交易次数限制为 k；然后我今天选择 rest，</span></span><br><span class="line"><span class="comment">所以我今天还是没有持有，最大交易次数限制依然为 k。</span></span><br><span class="line"><span class="comment">2. 我昨天持有股票，且截至昨天最大交易次数限制为 k；但是今天我 sell 了，</span></span><br><span class="line"><span class="comment">所以我今天没有持有股票了，最大交易次数限制依然为 k。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])</span></span><br><span class="line"><span class="comment">              max( 今天选择 reset,         今天选择 buy         )</span></span><br><span class="line"><span class="comment">解释：今天我持有着股票，最大交易次数限制为 k，那么对于昨天来说，有两种可能，</span></span><br><span class="line"><span class="comment">我从这两种可能中求最大利润</span></span><br><span class="line"><span class="comment">1. 我昨天就持有着股票，且截至昨天最大交易次数限制为 k；然后今天选择 rest，</span></span><br><span class="line"><span class="comment">所以我今天还持有着股票，最大交易次数限制依然为 k。</span></span><br><span class="line"><span class="comment">2. 我昨天本没有持有，且截至昨天最大交易次数限制为 k - 1；但今天我选择 buy，</span></span><br><span class="line"><span class="comment">所以今天我就持有股票了，最大交易次数限制为 k。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode188</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="comment">//dp[i][j][0 or 1]</span></span><br><span class="line">        <span class="comment">//0&lt;=i&lt;=n-1 , 0&lt;=j&lt;=k</span></span><br><span class="line">        <span class="comment">//第i天，交易上限为j时的最大利润</span></span><br><span class="line">        <span class="type">int</span> n=prices.length;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[][][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n][k+<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n ; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">            dp[i][<span class="number">0</span>][<span class="number">1</span>]=Integer.MIN_VALUE; <span class="comment">//允许交易次数为0，却持有股票，不可能!</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= k; j++) &#123;<span class="comment">//交易上限从1开始</span></span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i][j][<span class="number">0</span>]=<span class="number">0</span>; <span class="comment">//不持有</span></span><br><span class="line">                    dp[i][j][<span class="number">1</span>]=-prices[<span class="number">0</span>]; <span class="comment">//持有</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j][<span class="number">0</span>]=Math.max(dp[i-<span class="number">1</span>][j][<span class="number">0</span>],dp[i-<span class="number">1</span>][j][<span class="number">1</span>]+prices[i]);</span><br><span class="line">                    dp[i][j][<span class="number">1</span>]=Math.max(dp[i-<span class="number">1</span>][j][<span class="number">1</span>],dp[i-<span class="number">1</span>][j-<span class="number">1</span>][<span class="number">0</span>]-prices[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n-<span class="number">1</span>][k][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">解法2 解法1的状态压缩</span></span><br><span class="line"><span class="comment">dp[i][j][0] = max(dp[i-1][j][0], dp[i-1][j][1]+prices[i])</span></span><br><span class="line"><span class="comment">dp[i][j][1] = max(dp[i-1][j][1], dp[i-1][j-1][0]-prices[i])</span></span><br><span class="line"><span class="comment">1. 根据状态转移方程可以发现如果不关心dp三维数组的第2和第3维,</span></span><br><span class="line"><span class="comment">其实dp[i]只和dp[i-1]相关.所以可以考虑将第1维优化掉</span></span><br><span class="line"><span class="comment">2. 第3维只有0和1两种状态也可以考虑把第3维和第2维互换,</span></span><br><span class="line"><span class="comment">然后用2个变量优化掉</span></span><br><span class="line"><span class="comment">最后只用2个长度为k+1的1维数组表示 dp</span></span><br><span class="line"><span class="comment">3. 本题中的k最大值可以达到10^9,因为n天最多只能进行n/2次交易</span></span><br><span class="line"><span class="comment">因此可以取k和n/2中的较小值作为k然后再进行动态规划</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h3 id="121-Best-Time-to-Buy-and-Sell-Stock"><a href="#121-Best-Time-to-Buy-and-Sell-Stock" class="headerlink" title="121. Best Time to Buy and Sell Stock"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/">121. Best Time to Buy and Sell Stock</a></h3><p>由于只允许1次交易（一买一卖）,无需考虑交易维度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp[i][1][0] = max(dp[i-1][1][0], dp[i-1][1][1] + prices[i])</span><br><span class="line">dp[i][1][1] = max(dp[i-1][1][1], dp[i-1][0][0] - prices[i]) </span><br><span class="line">            = max(dp[i-1][1][1], -prices[i])</span><br><span class="line">解释：k = 0 的 base case，所以 dp[i-1][0][0] = 0。</span><br><span class="line"></span><br><span class="line">现在发现 k 都是 1，不会改变，即 k 对状态转移已经没有影响了。</span><br><span class="line">可以进行进一步化简去掉所有 k：</span><br><span class="line">dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])</span><br><span class="line">dp[i][1] = max(dp[i-1][1], -prices[i])</span><br></pre></td></tr></table></figure>



<h4 id="写法一：统一风格"><a href="#写法一：统一风格" class="headerlink" title="写法一：统一风格"></a>写法一：统一风格</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode121</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="comment">//dp[n][k][0/1]</span></span><br><span class="line">        <span class="comment">//k=1</span></span><br><span class="line">        <span class="type">int</span> n=prices.length;</span><br><span class="line">        <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>]=-prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>]=Math.max(dp[i-<span class="number">1</span>][<span class="number">0</span>],dp[i-<span class="number">1</span>][<span class="number">1</span>]+prices[i]); <span class="comment">//手头没股票，可能前一天就没股票，也可能当天卖了，</span></span><br><span class="line">            dp[i][<span class="number">1</span>]=Math.max(dp[i-<span class="number">1</span>][<span class="number">1</span>],-prices[i]); <span class="comment">//手头有股票，可能前一天就有股票，也可能当天买了</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>本质上是记录截至今日的最低买价，并每天判断是否更新最大利润</p>
<h4 id="写法二：特殊情况"><a href="#写法二：特殊情况" class="headerlink" title="写法二：特殊情况"></a>写法二：特殊情况</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=prices.length;</span><br><span class="line">    <span class="type">int</span> profit=Integer.MIN_VALUE;</span><br><span class="line">    <span class="type">int</span> min=prices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        profit=Math.max(profit,prices[i]-min);</span><br><span class="line">        min=Math.min(min,prices[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> profit&gt;<span class="number">0</span> ? profit : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="122-Best-Time-to-Buy-and-Sell-Stock-II"><a href="#122-Best-Time-to-Buy-and-Sell-Stock-II" class="headerlink" title="122. Best Time to Buy and Sell Stock II"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/">122. Best Time to Buy and Sell Stock II</a></h3><p>允许无穷次交易，无需考虑交易次数维度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])</span><br><span class="line">dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])</span><br><span class="line">            = max(dp[i-1][k][1], dp[i-1][k][0] - prices[i])</span><br><span class="line"></span><br><span class="line">我们发现数组中的 k 已经不会改变了，也就是说不需要记录 k 这个状态了：</span><br><span class="line">dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])</span><br><span class="line">dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode122</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="comment">//交易次数无限制</span></span><br><span class="line">        <span class="type">int</span> n=prices.length;</span><br><span class="line">        <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>]=-prices[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//dp[i][j][0]=Math.max(dp[i-1][j][0],dp[i-1][j][1]+prices[i])</span></span><br><span class="line">        <span class="comment">//dp[i][j][1]=Math.max(dp[i-1][j][1],dp[i-1][j-1][0]-prices[i])</span></span><br><span class="line">        <span class="comment">//dp[i-1][j][0]=dp[i-1][j-1][0]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>]=Math.max(dp[i-<span class="number">1</span>][<span class="number">0</span>],dp[i-<span class="number">1</span>][<span class="number">1</span>]+prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>]=Math.max(dp[i-<span class="number">1</span>][<span class="number">1</span>],dp[i-<span class="number">1</span>][<span class="number">0</span>]-prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="123-Best-Time-to-Buy-and-Sell-Stock-III"><a href="#123-Best-Time-to-Buy-and-Sell-Stock-III" class="headerlink" title="123. Best Time to Buy and Sell Stock III"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/">123. Best Time to Buy and Sell Stock III</a></h3><p>k&#x3D;2时的情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode123</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n= prices.length;</span><br><span class="line">        <span class="type">int</span>[][][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">            dp[i][<span class="number">0</span>][<span class="number">1</span>]=Integer.MIN_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">2</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i][j][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">                    dp[i][j][<span class="number">1</span>]=-prices[i];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j][<span class="number">0</span>]=Math.max(dp[i-<span class="number">1</span>][j][<span class="number">0</span>],dp[i-<span class="number">1</span>][j][<span class="number">1</span>]+prices[i]);</span><br><span class="line">                    dp[i][j][<span class="number">1</span>]=Math.max(dp[i-<span class="number">1</span>][j][<span class="number">1</span>],dp[i-<span class="number">1</span>][j-<span class="number">1</span>][<span class="number">0</span>]-prices[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n-<span class="number">1</span>][<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown"><a href="#309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown" class="headerlink" title="309. Best Time to Buy and Sell Stock with Cooldown"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/">309. Best Time to Buy and Sell Stock with Cooldown</a></h3><ul>
<li>卖了后不能第二天立刻买</li>
<li>无限次买卖</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])</span><br><span class="line">dp[i][1] = max(dp[i-1][1], dp[i-2][0] - prices[i])</span><br><span class="line">解释：第 i 天选择 buy 的时候，要从 i-2 的状态转移，而不是 i-1 。</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode309</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="comment">//dp[i][j][0]=Math.max(dp[i-1][j][0],dp[i-1][j][1]+prices[i]);</span></span><br><span class="line">        <span class="comment">//dp[i][j][1]=Math.max(dp[i-1][j][1],dp[i-1][j-1][0]-prices[i]);</span></span><br><span class="line">        <span class="type">int</span> n= prices.length;</span><br><span class="line">        <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>]=-prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">                dp[i][<span class="number">1</span>]=Math.max(-prices[<span class="number">0</span>],-prices[<span class="number">1</span>]);</span><br><span class="line">                dp[i][<span class="number">0</span>]=Math.max(<span class="number">0</span>,prices[<span class="number">1</span>]-prices[<span class="number">0</span>]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dp[i][<span class="number">1</span>]=Math.max(dp[i-<span class="number">1</span>][<span class="number">1</span>],dp[i-<span class="number">2</span>][<span class="number">0</span>]-prices[i]); <span class="comment">//第i天选择buy，要从i-2转移</span></span><br><span class="line">                dp[i][<span class="number">0</span>]=Math.max(dp[i-<span class="number">1</span>][<span class="number">0</span>],dp[i-<span class="number">1</span>][<span class="number">1</span>]+prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="714-Best-Time-to-Buy-and-Sell-Stock-with-Transaction-Fee"><a href="#714-Best-Time-to-Buy-and-Sell-Stock-with-Transaction-Fee" class="headerlink" title="714. Best Time to Buy and Sell Stock with Transaction Fee"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">714. Best Time to Buy and Sell Stock with Transaction Fee</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode714</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices, <span class="type">int</span> fee)</span> &#123;</span><br><span class="line">        <span class="comment">//dp[i][j][0]=Math.max(dp[i-1][j][0],dp[i-1][j][1]+prices[i]);</span></span><br><span class="line">        <span class="comment">//dp[i][j][1]=Math.max(dp[i-1][j][1],dp[i-1][j-1][0]-prices[i]);</span></span><br><span class="line">        <span class="type">int</span> n=prices.length;</span><br><span class="line">        <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>]=-prices[<span class="number">0</span>]-fee;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>]=Math.max(dp[i-<span class="number">1</span>][<span class="number">0</span>],dp[i-<span class="number">1</span>][<span class="number">1</span>]+prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>]=Math.max(dp[i-<span class="number">1</span>][<span class="number">1</span>],dp[i-<span class="number">1</span>][<span class="number">0</span>]-prices[i]-fee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><p>状态：</p>
<ol>
<li><p>背包容量w</p>
</li>
<li><p>可选择的物品n</p>
</li>
</ol>
<p><code>dp[i][w]</code> 的定义如下：对于前 <code>i</code> 个物品，当前背包的容量为 <code>w</code>，这种情况下可以装的最大价值是 <code>dp[i][w]</code>。</p>
<p>比如说，如果 <code>dp[3][5] = 6</code>，其含义为：对于给定的一系列物品中，若只对前 3 个物品进行选择，当背包容量为 5 时，最多可以装下的价值为 6。</p>
<p><code>dp[i][w]</code> 表示：对于前 <code>i</code> 个物品（从 1 开始计数），当前背包的容量为 <code>w</code> 时，这种情况下可以装下的最大价值是 <code>dp[i][w]</code>。</p>
<ul>
<li><p><strong>如果你没有把这第 <code>i</code> 个物品装入背包</strong>，那么很显然，最大价值 <code>dp[i][w]</code> 应该等于 <code>dp[i-1][w]</code>，继承之前的结果。</p>
</li>
<li><p><strong>如果你把这第 <code>i</code> 个物品装入了背包</strong>，那么 <code>dp[i][w]</code> 应该等于 <code>val[i-1] + dp[i-1][w - wt[i-1]]</code>。</p>
</li>
</ul>
<h3 id="416-Partition-Equal-Subset-Sum"><a href="#416-Partition-Equal-Subset-Sum" class="headerlink" title="416. Partition Equal Subset Sum"></a><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/">416. Partition Equal Subset Sum</a></h3><p><strong>给一个可装载重量为 <code>sum / 2</code> 的背包和 <code>N</code> 个物品，每个物品的重量为 <code>nums[i]</code>。现在让你装物品，是否存在一种装法，能够恰好将背包装满</strong>？</p>
<p>根据这个定义，我们想求的最终答案就是 <code>dp[N][sum/2]</code>，base case 就是 <code>dp[..][0] = true</code> 和 <code>dp[0][..] = false</code>，因为背包没有空间的时候，就相当于装满了，而当没有物品可选择的时候，肯定没办法装满背包。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode416</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartition</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            sum+=num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((sum&amp;<span class="number">1</span>)==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum/=<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        <span class="type">boolean</span>[][] dp=<span class="keyword">new</span> <span class="title class_">boolean</span>[n+<span class="number">1</span>][sum+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) &#123; <span class="comment">//base case: 什么物品都不选，都能塞满0空间，dp[i][0]恒为true</span></span><br><span class="line">            dp[i][<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//base case: j&gt;0时,dp[0][j]恒为false,因为什么物品都没有却想塞满大于0的空间，不可能</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= sum; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(j-nums[i-<span class="number">1</span>]&lt;<span class="number">0</span>)&#123;<span class="comment">//不可能塞满负数大小的背包，第二项必定为false，值只取决于第一项</span></span><br><span class="line">                    dp[i][j]=dp[i-<span class="number">1</span>][j];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j]=dp[i-<span class="number">1</span>][j] || dp[i-<span class="number">1</span>][j-nums[i-<span class="number">1</span>]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][sum]; <span class="comment">//可否用前n个物品塞满sum</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="518-Coin-Change-2"><a href="#518-Coin-Change-2" class="headerlink" title="518. Coin Change 2"></a><a href="https://leetcode.cn/problems/coin-change-2/">518. Coin Change 2</a></h3><p>注意：</p>
<ul>
<li>先 coin 后 amount，行！</li>
<li>先 amount 后 coin，不行！</li>
</ul>
<p>why? :</p>
<ul>
<li><p>纯完全背包是能凑成总和就行，不用管怎么凑的。</p>
<p>本题是求凑出来的方案个数，是组合数，不允许重复。</p>
</li>
<li><p>先 amount 后 coin, dp[0]至dp[i-1]都允许使用所有coin</p>
</li>
<li><p>先 coin 后 amount, 每一层外层循环增加由新增的coin带来的新的组合方法数，可以避免重复！</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> amount, <span class="type">int</span>[] coins)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dp=<span class="keyword">new</span> <span class="title class_">int</span>[amount+<span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> coin : coins)&#123; </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=amount; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;coin)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i]+=dp[i-coin];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[amount];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="子序列问题"><a href="#子序列问题" class="headerlink" title="子序列问题"></a>子序列问题</h2><h3 id="1143-Longest-Common-Subsequence"><a href="#1143-Longest-Common-Subsequence" class="headerlink" title="1143. Longest Common Subsequence"></a><a href="https://leetcode.cn/problems/longest-common-subsequence/">1143. Longest Common Subsequence</a></h3><p>当字符相等时：</p>
<p>当字符不等时：其中一个字符必定不在LCS中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode1143</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n1=text1.length();</span><br><span class="line">        <span class="type">int</span> n2=text2.length();</span><br><span class="line">        <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n1+<span class="number">1</span>][n2+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n1; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n2; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(text1.charAt(i-<span class="number">1</span>)==text2.charAt(j-<span class="number">1</span>))&#123;</span><br><span class="line">                    dp[i][j]=dp[i-<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j]=Math.max(dp[i-<span class="number">1</span>][j],dp[i][j-<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n1][n2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="583-Delete-Operation-for-Two-Strings"><a href="#583-Delete-Operation-for-Two-Strings" class="headerlink" title="583. Delete Operation for Two Strings"></a><a href="https://leetcode.cn/problems/delete-operation-for-two-strings/">583. Delete Operation for Two Strings</a></h3><p>法一：直接法，参考<a href="https://leetcode.cn/problems/edit-distance/">72. Edit Distance</a></p>
<p>删除s1中某一“冲突”字符，相当于在s2中插入该字符，都可以使s1、s2趋于相等</p>
<p>允许在s1、s2中删除字符，等价于：</p>
<ul>
<li>允许在s1中delete</li>
<li>允许在s1中insert</li>
</ul>
<p>使得s1与s2相等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode583</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n1=word1.length();</span><br><span class="line">        <span class="type">int</span> n2=word2.length();</span><br><span class="line">        <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n1+<span class="number">1</span>][n2+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n1; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= n2; j++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j]=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n1; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n2; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(word1.charAt(i-<span class="number">1</span>)==word2.charAt(j-<span class="number">1</span>))&#123;</span><br><span class="line">                    dp[i][j]=dp[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j]=Math.min(dp[i-<span class="number">1</span>][j]+<span class="number">1</span>,dp[i][j-<span class="number">1</span>]+<span class="number">1</span>); <span class="comment">//不能replace</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n1][n2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>法二：间接法，参考<a href="https://leetcode.cn/problems/longest-common-subsequence/">1143. Longest Common Subsequence</a></p>
<p>只能删不能换的话，两字符串最终变为它们的LCS时相等，只需得到它们的LCS的长度即可</p>
<h3 id="712-Minimum-ASCII-Delete-Sum-for-Two-Strings"><a href="#712-Minimum-ASCII-Delete-Sum-for-Two-Strings" class="headerlink" title="712. Minimum ASCII Delete Sum for Two Strings"></a><a href="https://leetcode.cn/problems/minimum-ascii-delete-sum-for-two-strings/">712. Minimum ASCII Delete Sum for Two Strings</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode712</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumDeleteSum</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n1=s1.length();</span><br><span class="line">        <span class="type">int</span> n2=s2.length();</span><br><span class="line">        <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n1+<span class="number">1</span>][n2+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n1; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>]=dp[i-<span class="number">1</span>][<span class="number">0</span>]+s1.charAt(i-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n2; j++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j]=dp[<span class="number">0</span>][j-<span class="number">1</span>]+s2.charAt(j-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n1; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n2; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(s1.charAt(i-<span class="number">1</span>)==s2.charAt(j-<span class="number">1</span>))&#123;</span><br><span class="line">                    dp[i][j]=dp[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j]=Math.min(dp[i-<span class="number">1</span>][j]+s1.charAt(i-<span class="number">1</span>),dp[i][j-<span class="number">1</span>]+s2.charAt(j-<span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n1][n2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="Palindrome问题"><a href="#Palindrome问题" class="headerlink" title="Palindrome问题"></a>Palindrome问题</h2><h3 id="516-Longest-Palindromic-Subsequence"><a href="#516-Longest-Palindromic-Subsequence" class="headerlink" title="516. Longest Palindromic Subsequence"></a><a href="https://leetcode.cn/problems/longest-palindromic-subsequence/">516. Longest Palindromic Subsequence</a></h3><p>想求 <code>dp[i][j]</code> 需要知道 <code>dp[i+1][j-1]</code>，<code>dp[i+1][j]</code>，<code>dp[i][j-1]</code> 这三个位置</p>
<p>最终结果在右上角</p>
<p>只需要填右上部分即可（对角线为base case, 1）</p>
<p><strong>为了保证每次计算 <code>dp[i][j]</code>，左下方向的位置已经被计算出来，选择反着遍历</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode516</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestPalindromeSubseq</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n=s.length();</span><br><span class="line">        <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            dp[i][i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; n; j++) &#123;<span class="comment">//只需考虑右上部分即可</span></span><br><span class="line">                <span class="keyword">if</span>(s.charAt(i)==s.charAt(j))&#123;</span><br><span class="line">                    dp[i][j]=dp[i+<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">2</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j]=Math.max(dp[i+<span class="number">1</span>][j],dp[i][j-<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1312-Minimum-Insertion-Steps-to-Make-a-String-Palindrome"><a href="#1312-Minimum-Insertion-Steps-to-Make-a-String-Palindrome" class="headerlink" title="1312. Minimum Insertion Steps to Make a String Palindrome"></a><a href="https://leetcode.cn/problems/minimum-insertion-steps-to-make-a-string-palindrome/">1312. Minimum Insertion Steps to Make a String Palindrome</a></h3><p>本题属于516. 最长回文子序列的子题，求的是将 s 变成回文串需要添加的最少字符数，所以我们只用求最长回文子序列长度即可，然后字符串 s 中除去最长回文子序列，剩下的字符就是不构成回文子序列的字符，添加与其同等数量的字符，将 s 构成回文串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode1312</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minInsertions</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">//n - longest palindromic subsequence</span></span><br><span class="line">        <span class="type">int</span> n=s.length();</span><br><span class="line">        <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            dp[i][i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(i)==s.charAt(j))&#123;</span><br><span class="line">                    dp[i][j]=dp[i+<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">2</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j]=Math.max(dp[i+<span class="number">1</span>][j],dp[i][j-<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n-dp[<span class="number">0</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>单调栈</title>
    <url>/2022/04/28/%E5%8D%95%E8%B0%83%E6%A0%88/</url>
    <content><![CDATA[<h1 id="Monotonic-Stack选编"><a href="#Monotonic-Stack选编" class="headerlink" title="Monotonic Stack选编"></a>Monotonic Stack选编</h1><p><strong>通常是一维数组，要寻找任一个元素的右边或者左边第一个比自己大或者小的元素的位置，此时就要想到可以用单调栈了</strong>。</p>
<p>时间复杂度为O(n)。</p>
<p>单调栈的本质是空间换时间，因为在遍历的过程中需要用一个栈来记录右边第一个比当前元素大&#x2F;小的元素，优点是只需要遍历一次。</p>
<p>在使用单调栈的时候首先要明确如下几点：</p>
<ol>
<li>单调栈里存放的元素是什么？</li>
</ol>
<p>单调栈里只需要存放元素的下标i就可以了，如果需要使用对应的元素，直接T[i]就可以获取。</p>
<ol>
<li>单调栈里元素是递增呢？ 还是递减呢？</li>
</ol>
<p><strong>注意一下顺序为 从栈顶到栈底的顺序</strong></p>
<p>使用单调栈主要有三个判断条件。</p>
<ul>
<li>当前遍历的元素T[i]小于栈顶元素T[st.top()]的情况</li>
<li>当前遍历的元素T[i]等于栈顶元素T[st.top()]的情况</li>
<li>当前遍历的元素T[i]大于栈顶元素T[st.top()]的情况</li>
</ul>
<p>经典模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nextGreaterElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(nums.size())</span></span>; <span class="comment">// 存放答案的数组</span></span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="comment">// 倒着往栈里放</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = nums.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">// 判定个子高矮</span></span><br><span class="line">        <span class="keyword">while</span> (!s.<span class="built_in">empty</span>() &amp;&amp; s.<span class="built_in">top</span>() &lt;= nums[i]) &#123;</span><br><span class="line">            <span class="comment">// 矮个起开，反正也被挡着了。。。can never be the &quot;next great number&quot;!</span></span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// nums[i] 身后的 next great number</span></span><br><span class="line">        res[i] = s.<span class="built_in">empty</span>() ? <span class="number">-1</span> : s.<span class="built_in">top</span>();</span><br><span class="line">        s.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>for 循环要从后往前扫描元素，因为我们借助的是栈的结构，倒着入栈，其实是正着出栈。while 循环是把两个「个子高」元素之间的元素排除，因为他们的存在没有意义，前面挡着个「更高」的元素，所以他们不可能被作为后续进来的元素的 Next Great Number 了。</li>
<li>分析它的时间复杂度，要从整体来看：总共有 <code>n</code> 个元素，每个元素都被 <code>push</code> 入栈了一次，而最多会被 <code>pop</code> 一次，没有任何冗余操作。所以总的计算规模是和元素规模 <code>n</code> 成正比的，也就是 <code>O(n)</code> 的复杂度。</li>
</ol>
<h2 id="739-Daily-Temperatures"><a href="#739-Daily-Temperatures" class="headerlink" title="739. Daily Temperatures"></a><a href="https://leetcode-cn.com/problems/daily-temperatures/">739. Daily Temperatures</a></h2><p>单调栈图解详见：</p>
<p><a href="https://programmercarl.com/0739.%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6.html#%E6%80%9D%E8%B7%AF">https://programmercarl.com/0739.%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6.html#%E6%80%9D%E8%B7%AF</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] dailyTemperatures(<span class="type">int</span>[] temperatures) &#123;</span><br><span class="line">    <span class="comment">//monotonic stack</span></span><br><span class="line">    <span class="comment">//find the next greater element</span></span><br><span class="line">    <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[temperatures.length];</span><br><span class="line">    Deque&lt;Integer&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> temperatures.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; temperatures[stack.peek()]&lt;=temperatures[i])&#123;</span><br><span class="line">            stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        res[i]=stack.peek()==<span class="literal">null</span> ? <span class="number">0</span> : stack.peek()-i;</span><br><span class="line">        stack.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="496-Next-Greater-Element-I"><a href="#496-Next-Greater-Element-I" class="headerlink" title="496. Next Greater Element I"></a><a href="https://leetcode-cn.com/problems/next-greater-element-i/">496. Next Greater Element I</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] nextGreaterElement(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums2.length; i++) &#123;</span><br><span class="line">            map.put(nums2[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Deque&lt;Integer&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span>[] list=<span class="keyword">new</span> <span class="title class_">int</span>[nums2.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> nums2.length-<span class="number">1</span>; i &gt;=<span class="number">0</span> ; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; nums2[stack.peek()]&lt;=nums2[i])&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            list[i]=stack.isEmpty()? -<span class="number">1</span> : stack.peek();</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[nums1.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> index=map.get(nums1[i]);</span><br><span class="line">            res[i]=list[index]==-<span class="number">1</span> ? -<span class="number">1</span> : nums2[list[index]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h2 id="503-Next-Greater-Element-II"><a href="#503-Next-Greater-Element-II" class="headerlink" title="503. Next Greater Element II"></a><a href="https://leetcode-cn.com/problems/next-greater-element-ii/">503. Next Greater Element II</a></h2><p>circular integer array <code>nums</code></p>
<p>对于循环数组：考虑用mod运算模拟在nums后再加一个nums</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode503</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] nextGreaterElements(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        Deque&lt;Integer&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>*(nums.length - <span class="number">1</span>)+<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; stack.peek()&lt;=nums[i%nums.length])&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            res[i%nums.length]=stack.isEmpty() ? -<span class="number">1</span> : stack.peek();</span><br><span class="line">            stack.push(nums[i%nums.length]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="84-Largest-Rectangle-in-Histogram"><a href="#84-Largest-Rectangle-in-Histogram" class="headerlink" title="84. Largest Rectangle in Histogram"></a><a href="https://leetcode-cn.com/problems/largest-rectangle-in-histogram/">84. Largest Rectangle in Histogram</a></h2><p>我们归纳一下枚举「高」的方法：</p>
<p>首先我们枚举某一根柱子 i 作为高  <em>h</em>&#x3D;<em>heights</em>[<em>i</em>]；</p>
<p>随后我们需要进行向左右两边扩展，使得扩展到的柱子的高度均不小于 h。换句话说，我们需要找到左右两侧最近的高度小于 h 的柱子，这样这两根柱子之间（不包括其本身）的所有柱子高度均不小于 h，并且就是 i 能够扩展到的最远范围。</p>
<p>笨方法：用两个单调栈</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode84</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestRectangleArea</span><span class="params">(<span class="type">int</span>[] heights)</span> &#123;</span><br><span class="line">        Deque&lt;Integer&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span>[] right=<span class="keyword">new</span> <span class="title class_">int</span>[heights.length]; <span class="comment">//记录右边第一个比它小的 不存在则存入length</span></span><br><span class="line">        <span class="type">int</span>[] left=<span class="keyword">new</span> <span class="title class_">int</span>[heights.length]; <span class="comment">//记录左边第一个比它小的  不存在则存入-1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> heights.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; heights[stack.peek()]&gt;=heights[i])&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            right[i]=stack.isEmpty() ? heights.length : stack.peek();</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; heights.length; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; heights[stack.peek()]&gt;=heights[i])&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            left[i]=stack.isEmpty() ? -<span class="number">1</span> : stack.peek();</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> res=Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; heights.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> r=right[i];</span><br><span class="line">            <span class="type">int</span> l=left[i];</span><br><span class="line">            <span class="type">int</span> area=(r-l-<span class="number">1</span>)*heights[i];</span><br><span class="line">            res=Math.max(res,area);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="42-Trapping-Rain-Water"><a href="#42-Trapping-Rain-Water" class="headerlink" title="42. Trapping Rain Water"></a><a href="https://leetcode-cn.com/problems/trapping-rain-water/">42. Trapping Rain Water</a></h2><h3 id="法一：单调栈"><a href="#法一：单调栈" class="headerlink" title="法一：单调栈"></a>法一：单调栈</h3><h3 id="法二：双指针-dp优化"><a href="#法二：双指针-dp优化" class="headerlink" title="法二：双指针+dp优化"></a>法二：双指针+dp优化</h3><p>largest rectangle area是要找一根柱子的左右两边的next greater element</p>
<p>trapping rain water是要找一根柱子的左右两边的greastet element，并加以判断：若两边的greatest element都比这根柱子高，则可以在这根柱子上蓄水</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] maxLeft=<span class="keyword">new</span> <span class="title class_">int</span>[height.length];</span><br><span class="line">    <span class="type">int</span>[] maxRight=<span class="keyword">new</span> <span class="title class_">int</span>[height.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; maxLeft.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">        maxLeft[i]=Math.max(maxLeft[i-<span class="number">1</span>],height[i-<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> maxRight.length - <span class="number">2</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        maxRight[i]=Math.max(maxRight[i+<span class="number">1</span>],height[i+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> start=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> end= height.length-<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=start; i&lt;=end; i++)&#123;</span><br><span class="line">        <span class="type">int</span> left=maxLeft[i];</span><br><span class="line">        <span class="type">int</span> right=maxRight[i];</span><br><span class="line">        <span class="keyword">if</span>(left&lt;=height[i] || right&lt;=height[i])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> h=Math.min(left,right)-height[i];</span><br><span class="line">        res+=h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="85-Maximal-Rectangle"><a href="#85-Maximal-Rectangle" class="headerlink" title="85. Maximal Rectangle"></a><a href="https://leetcode-cn.com/problems/maximal-rectangle/">85. Maximal Rectangle</a></h2><p>就是largest rectangle area的应用</p>
<p>把矩阵的每一行看成一个底面，迭代计算每一行的largest recatangle area</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode85</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximalRectangle</span><span class="params">(<span class="type">char</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> row=matrix.length;</span><br><span class="line">        <span class="type">int</span> col=matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span>[] dp=<span class="keyword">new</span> <span class="title class_">int</span>[col];</span><br><span class="line">        <span class="type">int</span> max=Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                dp[j]=matrix[i][j]==<span class="string">&#x27;0&#x27;</span> ? <span class="number">0</span> : dp[j]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            max=Math.max(max,largestArea(dp));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">largestArea</span><span class="params">(<span class="type">int</span>[] dp)</span>&#123;</span><br><span class="line">        <span class="comment">//largest rectangle</span></span><br><span class="line">        <span class="comment">//monotonic stack</span></span><br><span class="line">        <span class="comment">//next &quot;greater&quot; element, in this case, next smaller element</span></span><br><span class="line">        <span class="type">int</span> n=dp.length;</span><br><span class="line">        Deque&lt;Integer&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span>[] rightSmall=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; dp[stack.peek()]&gt;=dp[i])&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            rightSmall[i]=stack.isEmpty() ? n : stack.peek();</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span>[] leftSmall=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; dp[stack.peek()]&gt;=dp[i])&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            leftSmall[i]=stack.isEmpty() ? -<span class="number">1</span> : stack.peek();</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> max=Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> height=dp[i];</span><br><span class="line">            <span class="type">int</span> area=height*(rightSmall[i]-leftSmall[i]-<span class="number">1</span>);</span><br><span class="line">            max=Integer.max(max,area);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="456-132-Pattern"><a href="#456-132-Pattern" class="headerlink" title="456. 132 Pattern"></a>456. 132 Pattern</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//9 11 8 9 10 7 9</span></span><br><span class="line"><span class="comment">//   4  12  11  10  2 1</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">find132pattern</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    Deque&lt;Integer&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> numLeft=Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&lt;numLeft)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; stack.peek()&lt;nums[i])&#123;</span><br><span class="line">            numLeft=stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        stack.push(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>stack</tag>
        <tag>next-greater-element</tag>
      </tags>
  </entry>
  <entry>
    <title>回溯法(1)</title>
    <url>/2022/04/19/%E5%9B%9E%E6%BA%AF%E6%B3%95(1)/</url>
    <content><![CDATA[<h1 id="backtracking-经典题选编-1"><a href="#backtracking-经典题选编-1" class="headerlink" title="backtracking 经典题选编(1)"></a>backtracking 经典题选编(1)</h1><h2 id="回溯法三部曲"><a href="#回溯法三部曲" class="headerlink" title="回溯法三部曲"></a>回溯法三部曲</h2><ol>
<li>递归函数的返回值及其参数 （是否定义全局变量来存放结果）</li>
<li>回溯函数终止条件（怎样是到达叶子节点）</li>
<li>单层搜索的过程（注意choose explore unchoose）</li>
</ol>
<h2 id="LeetCode-77-Combinations"><a href="#LeetCode-77-Combinations" class="headerlink" title="LeetCode 77. Combinations"></a>LeetCode 77. Combinations</h2><p><a href="https://leetcode-cn.com/problems/combinations/">77. Combinations</a></p>
<h3 id="基础版（无剪枝）"><a href="#基础版（无剪枝）" class="headerlink" title="基础版（无剪枝）"></a>基础版（无剪枝）</h3><p>回溯法的搜索过程就是一个树型结构的遍历过程。</p>
<p>for循环用来横向遍历，递归的过程是纵向遍历。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; res;</span><br><span class="line">LinkedList&lt;Integer&gt; list;</span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="built_in">this</span>.list=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    backtracking(n,k,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> start)</span>&#123; <span class="comment">//回溯法用来解决k层for循环嵌套的问题</span></span><br><span class="line">    <span class="keyword">if</span>(list.size()==k)&#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(list));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= n; i++) &#123;<span class="comment">//每层内开启循环</span></span><br><span class="line">        list.add(i);</span><br><span class="line">        backtracking(n,k,i+<span class="number">1</span>);</span><br><span class="line">        list.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="加强版（有剪枝）"><a href="#加强版（有剪枝）" class="headerlink" title="加强版（有剪枝）"></a>加强版（有剪枝）</h3><p>例如，n &#x3D; 4，k &#x3D; 4的话，</p>
<ol>
<li>第一层for循环的时候，从元素2开始的遍历都没有意义了，因为第一层必须选择1；</li>
<li>在第二层for循环，从元素3开始的遍历都没有意义了，因为第二层必须选择2；</li>
</ol>
<p>一般而言，</p>
<ol>
<li>当前 list.size()&#x3D;&#x3D;size, 加上当前层 1 个元素后，后续递归层还需要 (k-size-1) 个元素</li>
<li>后续递归层的起点为 i+1, 终点为n, 共有 n-i 个元素</li>
<li>因此为满足后续递归层的元素数量要求，n-i &gt;&#x3D; k-size-1, 即 i &lt;&#x3D; n-k+size+1, 而不是i&lt;&#x3D;n</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode77</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res;</span><br><span class="line">    LinkedList&lt;Integer&gt; list;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.list=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        backtracking(n,k,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list.size()==k)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(list));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> size=list.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= n-k+size+<span class="number">1</span>; i++) &#123; <span class="comment">//i &lt;= n-k+size+1</span></span><br><span class="line">            list.add(i);</span><br><span class="line">            backtracking(n,k,i+<span class="number">1</span>);</span><br><span class="line">            list.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="LeetCode-46-Permutations"><a href="#LeetCode-46-Permutations" class="headerlink" title="LeetCode 46. Permutations"></a>LeetCode 46. Permutations</h2><p><a href="https://leetcode-cn.com/problems/permutations/">46. Permutations</a></p>
<p>Given an array <code>nums</code> of distinct integers, return <em>all the possible permutations</em>.</p>
<p>不包含重复元素，无需考虑去重</p>
<p>引入used数组来判断是否该考虑该元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">boolean</span>[] used=<span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];</span><br><span class="line">    helper(res,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(),nums,used);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">helper</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; list, <span class="type">int</span>[] nums, <span class="type">boolean</span>[] used)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(list.size()==nums.length)&#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(used[i])&#123; <span class="comment">//该元素以进入list，直接跳过</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//choose;explore;unchoose</span></span><br><span class="line">        list.add(nums[i]); <span class="comment">//该元素还没进入list,应该加入进去</span></span><br><span class="line">        used[i]=<span class="literal">true</span>;</span><br><span class="line">        helper(res,list,nums,used);</span><br><span class="line">        list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">        used[i]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="LeetCode-47-Permutations-II"><a href="#LeetCode-47-Permutations-II" class="headerlink" title="LeetCode 47. Permutations II"></a>LeetCode 47. Permutations II</h2><p><a href="https://leetcode-cn.com/problems/permutations-ii/">47. Permutations II</a></p>
<p>Given a collection of numbers, <code>nums</code>, that might contain duplicates, return <em>all possible unique permutations <strong>in any order</strong>.</em></p>
<p>同样的，排列问题引入used数组，来判断是否该考虑该元素</p>
<p>包含重复元素，需要考虑去重</p>
<p>如何去重：</p>
<ol>
<li><p>先数组排序</p>
</li>
<li><p>&#96;&#96;&#96;cpp<br>&#x2F;&#x2F; used[i - 1] &#x3D;&#x3D; true，说明同一树枝nums[i - 1]使用过<br>     &#x2F;&#x2F; used[i - 1] &#x3D;&#x3D; false，说明同一树层nums[i - 1]使用过<br>     &#x2F;&#x2F; 如果同一树层nums[i - 1]使用过则直接跳过<br>     if (i &gt; 0 &amp;&amp; nums[i] &#x3D;&#x3D; nums[i - 1] &amp;&amp; used[i - 1] &#x3D;&#x3D; false) {<br>         continue;<br>     }</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line">public List&lt;List&lt;Integer&gt;&gt; permuteUnique(int[] nums) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res=new ArrayList&lt;&gt;();</span><br><span class="line">    boolean[] visited=new boolean[nums.length];</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    backtracking(res,new ArrayList&lt;&gt;(),nums,visited);</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void backtracking(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; list, int[] nums, boolean[] visited)&#123;</span><br><span class="line">    if(list.size()==nums.length)&#123;</span><br><span class="line">        res.add(new ArrayList&lt;&gt;(list));</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">        if(visited[i])&#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        if(i&gt;=1 &amp;&amp; nums[i]==nums[i-1] &amp;&amp; !visited[i-1])&#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(nums[i]);</span><br><span class="line">        visited[i]=true;</span><br><span class="line">        backtracking(res,list,nums,visited);</span><br><span class="line">        list.remove(list.size()-1);</span><br><span class="line">        visited[i]=false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="LeetCode-39-Combination-Sum"><a href="#LeetCode-39-Combination-Sum" class="headerlink" title="LeetCode 39. Combination Sum"></a>LeetCode 39. Combination Sum</h2><p><a href="https://leetcode-cn.com/problems/combination-sum/">39. Combination Sum</a></p>
<h3 id="基础版（无剪枝）-1"><a href="#基础版（无剪枝）-1" class="headerlink" title="基础版（无剪枝）"></a>基础版（无剪枝）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode39</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtracking(res,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(),candidates,target,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; list, <span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; candidates.length; i++) &#123; <span class="comment">//无剪枝</span></span><br><span class="line">            list.add(candidates[i]);</span><br><span class="line">            backtracking(res,list,candidates,target-candidates[i],i);</span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="加强版（有剪枝）-1"><a href="#加强版（有剪枝）-1" class="headerlink" title="加强版（有剪枝）"></a>加强版（有剪枝）</h3><p><strong>在求和问题中，排序之后加剪枝是常见的套路！</strong></p>
<p><strong>对总集合排序之后，如果下一层的sum（就是本层的 sum + candidates[i]）已经大于target，就可以结束本轮for循环的遍历</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Arrays.sort(candidates);</span><br><span class="line">    backtracking(res,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(),candidates,target,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; list, <span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> start)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(target&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(target==<span class="number">0</span>)&#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; candidates.length; i++) &#123;</span><br><span class="line">        list.add(candidates[i]);</span><br><span class="line">        <span class="keyword">if</span>(target-candidates[i]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        backtracking(res,list,candidates,target-candidates[i],i);</span><br><span class="line">        list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="LeetCode-40-Combination-Sum-II"><a href="#LeetCode-40-Combination-Sum-II" class="headerlink" title="LeetCode 40. Combination Sum II"></a>LeetCode 40. Combination Sum II</h2><p><a href="https://leetcode-cn.com/problems/combination-sum-ii/">40. Combination Sum II</a></p>
<p>去重+剪枝</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Arrays.sort(candidates);</span><br><span class="line">    <span class="type">boolean</span>[] visited=<span class="keyword">new</span> <span class="title class_">boolean</span>[candidates.length];</span><br><span class="line">    backtracking(res,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(),candidates,visited,target,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; list, <span class="type">int</span>[] candidates, <span class="type">boolean</span>[] visited,<span class="type">int</span> target, <span class="type">int</span> start)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(target&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(target==<span class="number">0</span>)&#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; candidates.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">1</span> &amp;&amp; candidates[i]==candidates[i-<span class="number">1</span>] &amp;&amp; !visited[i-<span class="number">1</span>])&#123; <span class="comment">//用排序+visited数组来去重</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(candidates[i]);</span><br><span class="line">        visited[i]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(target-candidates[i]&lt;<span class="number">0</span>)&#123; <span class="comment">//剪枝，提前跳出循环</span></span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">            visited[i]=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        backtracking(res,list,candidates,visited,target-candidates[i],i+<span class="number">1</span>);</span><br><span class="line">        list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">        visited[i]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="LeetCode-216-Combination-Sum-III"><a href="#LeetCode-216-Combination-Sum-III" class="headerlink" title="LeetCode 216. Combination Sum III"></a>LeetCode 216. Combination Sum III</h2><p><a href="https://leetcode-cn.com/problems/combination-sum-iii/">Combination Sum III</a></p>
<p>排序后剪枝判断</p>
<p>2个剪枝判断：</p>
<ol>
<li><p>元素总和不能超过target，若加上本元素总和超过target，则退出本层循环</p>
</li>
<li><p>元素总个数必须正好为k个，引入limit表示还要用的元素个数，当且仅当limit&#x3D;&#x3D;0时，满足题意</p>
<p>若满足limit-1&lt;0，则limit&#x3D;&#x3D;0，本层都不能再加元素，直接退出本层循环</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum3</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    backtracking(res,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(),n,k,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; list, <span class="type">int</span> target, <span class="type">int</span> limit, <span class="type">int</span> start)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(target==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(limit==<span class="number">0</span>)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//else limit&gt;0, 直接返回</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        list.add(i);</span><br><span class="line">        <span class="keyword">if</span>(target-i&lt;<span class="number">0</span> || limit-<span class="number">1</span>&lt;<span class="number">0</span>)&#123; <span class="comment">//2个剪枝条件，满足1个即退出本层循环</span></span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        backtracking(res,list,target-i,limit-<span class="number">1</span>,i+<span class="number">1</span>);</span><br><span class="line">        list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="LeetCode-78-Subsets"><a href="#LeetCode-78-Subsets" class="headerlink" title="LeetCode 78. Subsets"></a>LeetCode 78. Subsets</h2><p><a href="https://leetcode-cn.com/problems/subsets/">78. Subsets</a></p>
<h3 id="法一：间接法"><a href="#法一：间接法" class="headerlink" title="法一：间接法"></a>法一：间接法</h3><p>考虑长度为n的不包含重复元素的数组nums（集合）的子集（包括空集和本身）个数为2^n</p>
<p>2^n&#x3D;从nums[0]到nums[n-1],每一个元素都有两种情况，取或不取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; judge=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">//引入judge，judge.get(i)==0表示nums[i]不进入该子集，vice versa</span></span><br><span class="line">    backtracking(res,judge,nums);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; judge, <span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(judge.size()==nums.length)&#123;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; judge.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(judge.get(i)==<span class="number">1</span>)&#123;</span><br><span class="line">                list.add(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.add(list);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    judge.add(<span class="number">0</span>);</span><br><span class="line">    backtracking(res,judge,nums);</span><br><span class="line">    judge.remove(judge.size()-<span class="number">1</span>);</span><br><span class="line">    judge.add(<span class="number">1</span>);</span><br><span class="line">    backtracking(res,judge,nums);</span><br><span class="line">    judge.remove(judge.size()-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：直接法"><a href="#法二：直接法" class="headerlink" title="法二：直接法"></a>法二：直接法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    backtracking(res,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(),nums,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; list, <span class="type">int</span>[] nums, <span class="type">int</span> start)</span>&#123;</span><br><span class="line">    res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list));<span class="comment">//无需判断，见一个加一个，因为见到的都是子集</span></span><br><span class="line">    <span class="keyword">if</span>(start&gt;=nums.length)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; nums.length; i++) &#123;</span><br><span class="line">        list.add(nums[i]);</span><br><span class="line">        backtracking(res,list,nums,i+<span class="number">1</span>);</span><br><span class="line">        list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="LeetCode-90-Subsets-II"><a href="#LeetCode-90-Subsets-II" class="headerlink" title="LeetCode 90. Subsets II"></a>LeetCode 90. Subsets II</h2><p><a href="https://leetcode-cn.com/problems/subsets-ii/">90. Subsets II</a></p>
<p>子集直接法（见一个加一个）+排序去重</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsetsWithDup</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="type">boolean</span>[] visited=<span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];</span><br><span class="line">    backtracking(res,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(),nums,visited,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; list, <span class="type">int</span>[] nums, <span class="type">boolean</span>[] visited,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">    res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list));</span><br><span class="line">    <span class="keyword">if</span>(start&gt;=nums.length)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">1</span> &amp;&amp; nums[i]==nums[i-<span class="number">1</span>] &amp;&amp; !visited[i-<span class="number">1</span>])&#123;<span class="comment">//经典 排序+visited去重</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(nums[i]);</span><br><span class="line">        visited[i]=<span class="literal">true</span>;</span><br><span class="line">        backtracking(res,list,nums,visited,i+<span class="number">1</span>);</span><br><span class="line">        list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">        visited[i]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>双指针</title>
    <url>/2022/05/06/%E5%8F%8C%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<h1 id="Two-Pointers选编"><a href="#Two-Pointers选编" class="headerlink" title="Two Pointers选编"></a>Two Pointers选编</h1><h2 id="接雨水问题"><a href="#接雨水问题" class="headerlink" title="接雨水问题"></a>接雨水问题</h2><h3 id="42-Trapping-Rain-Water"><a href="#42-Trapping-Rain-Water" class="headerlink" title="42. Trapping Rain Water"></a><a href="https://leetcode-cn.com/problems/trapping-rain-water/">42. Trapping Rain Water</a></h3><p>对每根柱子，求它的左侧和右侧的greatest element，探讨是否能在这根柱子上蓄水</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> area=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n=height.length;</span><br><span class="line">        <span class="type">int</span>[] findLeft=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;n-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            findLeft[i]=Math.max(findLeft[i-<span class="number">1</span>],height[i-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] findRight=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n-<span class="number">2</span>; i&gt;=<span class="number">1</span>; i--)&#123;</span><br><span class="line">            findRight[i]=Math.max(findRight[i+<span class="number">1</span>],height[i+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;n-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="type">int</span> left=findLeft[i];</span><br><span class="line">            <span class="type">int</span> right=findRight[i];</span><br><span class="line">            <span class="type">int</span> h=Math.min(left,right);</span><br><span class="line">            <span class="keyword">if</span>(h&lt;=height[i])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            area+=h-height[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> area;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="11-Container-With-Most-Water"><a href="#11-Container-With-Most-Water" class="headerlink" title="11. Container With Most Water"></a><a href="https://leetcode-cn.com/problems/container-with-most-water/">11. Container With Most Water</a></h3><p>由大缩小</p>
<p>双指针技巧：移动较低的一边，因为只有这样才可能使矩形面积增大：</p>
<ul>
<li>矩形面积由较短边和两边间距决定</li>
<li>移动指针，两边间距必定缩小</li>
<li>若移动较长边，则矩形面积必定缩小！无意义</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxArea</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> max=Integer.MIN_VALUE;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right= height.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="type">int</span> area=(right-left)*Math.min(height[left],height[right]);</span><br><span class="line">            max=Math.max(area,max);</span><br><span class="line">            <span class="keyword">if</span>(height[left]&lt;=height[right])&#123;<span class="comment">//移动较短边，使面积可能扩大</span></span><br><span class="line">                left++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="数组移除元素"><a href="#数组移除元素" class="headerlink" title="数组移除元素"></a>数组移除元素</h2><p>双指针，i 遍历数组，j 保留有效值</p>
<h3 id="26-Remove-Duplicates-from-Sorted-Array"><a href="#26-Remove-Duplicates-from-Sorted-Array" class="headerlink" title="26. Remove Duplicates from Sorted Array"></a><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">26. Remove Duplicates from Sorted Array</a></h3><p>注意数组已排序，只需比较当前数组元素与最后一个有效项</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]!=nums[j])&#123;</span><br><span class="line">                nums[++j]=nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="27-Remove-Element"><a href="#27-Remove-Element" class="headerlink" title="27. Remove Element"></a><a href="https://leetcode.cn/problems/remove-element/">27. Remove Element</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]!=val)&#123;</span><br><span class="line">                nums[j++]=nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="283-Move-Zeroes"><a href="#283-Move-Zeroes" class="headerlink" title="283. Move Zeroes"></a><a href="https://leetcode.cn/problems/move-zeroes/">283. Move Zeroes</a></h3><p>注意要求：maintaining the relative order</p>
<p>直接左右双指针不满足</p>
<p>转换思路：</p>
<ol>
<li>i 初始化为第一个0, 用于和非零元素交换</li>
<li>j 从 i 开始遍历，每找到一个非零元素，就与 i 交换</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;nums.length &amp;&amp; nums[j]!=<span class="number">0</span>)&#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=j+<span class="number">1</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">                nums[j]=nums[i];</span><br><span class="line">                nums[i]=<span class="number">0</span>;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="75-Sort-Colors"><a href="#75-Sort-Colors" class="headerlink" title="75. Sort Colors"></a><a href="https://leetcode.cn/problems/sort-colors/">75. Sort Colors</a></h3><p>双指针，直到 <strong>i&gt;right</strong></p>
<ul>
<li>遇到0，换，i++</li>
<li>遇到2，换，<strong>循环</strong>，直到nums[i]!&#x3D;2</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode75</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sortColors</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= right; i++) &#123;	<span class="comment">//必须&lt;=，不能换成&lt;</span></span><br><span class="line">            <span class="keyword">while</span>(i&lt;=right &amp;&amp; nums[i]==<span class="number">2</span>)&#123;</span><br><span class="line">                swap(nums,i,right--);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                swap(nums,i,left++);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==j)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> temp=nums[i];</span><br><span class="line">        nums[i]=nums[j];</span><br><span class="line">        nums[j]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="844-Backspace-String-Compare"><a href="#844-Backspace-String-Compare" class="headerlink" title="844. Backspace String Compare"></a><a href="https://leetcode.cn/problems/backspace-string-compare/">844. Backspace String Compare</a></h3><p>solve it in <code>O(n)</code> time and <code>O(1)</code> space ?</p>
<p>考虑 backspacing, 从后向前比较</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">backspaceCompare</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">int</span> i=s.length()-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> j=t.length()-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> b1=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> b2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span> || j&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(i&gt;=<span class="number">0</span> &amp;&amp; (s.charAt(i)==<span class="string">&#x27;#&#x27;</span> || b1!=<span class="number">0</span>))&#123;</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(i)==<span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                    b1++;</span><br><span class="line">                    i--;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b1!=<span class="number">0</span>)&#123;</span><br><span class="line">                    b1--;</span><br><span class="line">                    i--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;=<span class="number">0</span> &amp;&amp; (t.charAt(j)==<span class="string">&#x27;#&#x27;</span> || b2!=<span class="number">0</span>))&#123;</span><br><span class="line">                <span class="keyword">if</span>(t.charAt(j)==<span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                    b2++;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b2!=<span class="number">0</span>)&#123;</span><br><span class="line">                    b2--;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;<span class="number">0</span> || j&lt;<span class="number">0</span> || s.charAt(i)!=t.charAt(j))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i--;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">0</span> || j&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>two_pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>岛屿问题</title>
    <url>/2022/05/11/%E5%B2%9B%E5%B1%BF%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="岛屿问题选编"><a href="#岛屿问题选编" class="headerlink" title="岛屿问题选编"></a>岛屿问题选编</h1><h2 id="1254-Number-of-Closed-Islands"><a href="#1254-Number-of-Closed-Islands" class="headerlink" title="1254. Number of Closed Islands"></a><a href="https://leetcode.cn/problems/number-of-closed-islands/">1254. Number of Closed Islands</a></h2><p>在LeetCode200基础上，把靠边岛屿排除即可，即先把靠边的岛屿全部淹没</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode1254</span> &#123;</span><br><span class="line">    <span class="type">int</span> row;</span><br><span class="line">    <span class="type">int</span> col;</span><br><span class="line">    <span class="type">int</span>[][] grid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">closedIsland</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.row=grid.length;</span><br><span class="line">        <span class="built_in">this</span>.col=grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="built_in">this</span>.grid=grid;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            dfs(i,<span class="number">0</span>);</span><br><span class="line">            dfs(i,col-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            dfs(<span class="number">0</span>,j);</span><br><span class="line">            dfs(row-<span class="number">1</span>,j);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;=row-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;=col-<span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j]==<span class="number">0</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    dfs(i,j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=row || j&lt;<span class="number">0</span> || j&gt;=col || grid[i][j]==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        grid[i][j]=<span class="number">1</span>;</span><br><span class="line">        dfs(i+<span class="number">1</span>,j);</span><br><span class="line">        dfs(i-<span class="number">1</span>,j);</span><br><span class="line">        dfs(i,j+<span class="number">1</span>);</span><br><span class="line">        dfs(i,j-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1020-Number-of-Enclaves"><a href="#1020-Number-of-Enclaves" class="headerlink" title="1020. Number of Enclaves"></a><a href="https://leetcode.cn/problems/number-of-enclaves/">1020. Number of Enclaves</a></h2><p>把靠边岛屿淹没后，对不靠边的岛屿无需再dfs，直接count即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode1020</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> row;</span><br><span class="line">    <span class="type">int</span> col;</span><br><span class="line">    <span class="type">int</span>[][] grid;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numEnclaves</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.row=grid.length;</span><br><span class="line">        <span class="built_in">this</span>.col=grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="built_in">this</span>.grid=grid;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            dfs(i,<span class="number">0</span>);</span><br><span class="line">            dfs(i,col-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            dfs(<span class="number">0</span>,j);</span><br><span class="line">            dfs(row-<span class="number">1</span>,j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j]==<span class="number">1</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=row || j&lt;<span class="number">0</span> || j&gt;=col || grid[i][j]==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        grid[i][j]=<span class="number">0</span>;</span><br><span class="line">        dfs(i-<span class="number">1</span>,j);</span><br><span class="line">        dfs(i+<span class="number">1</span>,j);</span><br><span class="line">        dfs(i,j-<span class="number">1</span>);</span><br><span class="line">        dfs(i,j+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="695-Max-Area-of-Island"><a href="#695-Max-Area-of-Island" class="headerlink" title="695. Max Area of Island"></a><a href="https://leetcode.cn/problems/max-area-of-island/">695. Max Area of Island</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode695</span> &#123;</span><br><span class="line">    <span class="type">int</span> row;</span><br><span class="line">    <span class="type">int</span> col;</span><br><span class="line">    <span class="type">int</span>[][] grid;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxAreaOfIsland</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.row=grid.length;</span><br><span class="line">        <span class="built_in">this</span>.col=grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="built_in">this</span>.grid=grid;</span><br><span class="line">        <span class="type">int</span> max=Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j]==<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> count=dfs(i,j);</span><br><span class="line">                    max=Math.max(count,max);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max==Integer.MIN_VALUE ? <span class="number">0</span> : max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=row || j&lt;<span class="number">0</span> || j&gt;=col || grid[i][j]==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        grid[i][j]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+dfs(i-<span class="number">1</span>,j)+dfs(i+<span class="number">1</span>,j)+dfs(i,j-<span class="number">1</span>)+dfs(i,j+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="1905-Count-Sub-Islands"><a href="#1905-Count-Sub-Islands" class="headerlink" title="1905. Count Sub Islands"></a><a href="https://leetcode.cn/problems/count-sub-islands/">1905. Count Sub Islands</a></h2><p>先flood不可能为sub island的岛屿</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode1905</span> &#123;</span><br><span class="line">    <span class="type">int</span> row;</span><br><span class="line">    <span class="type">int</span> col;</span><br><span class="line">    <span class="type">int</span>[][] grid2;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countSubIslands</span><span class="params">(<span class="type">int</span>[][] grid1, <span class="type">int</span>[][] grid2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.row=grid2.length;</span><br><span class="line">        <span class="built_in">this</span>.col=grid2[<span class="number">0</span>].length;</span><br><span class="line">        <span class="built_in">this</span>.grid2=grid2;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(grid2[i][j]==<span class="number">1</span> &amp;&amp; grid1[i][j]==<span class="number">0</span>)&#123;</span><br><span class="line">                    dfs(i,j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(grid2[i][j]==<span class="number">1</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    dfs(i,j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=row || j&lt;<span class="number">0</span> || j&gt;=col || grid2[i][j]==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        grid2[i][j]=<span class="number">0</span>;</span><br><span class="line">        dfs(i-<span class="number">1</span>,j);</span><br><span class="line">        dfs(i+<span class="number">1</span>,j);</span><br><span class="line">        dfs(i,j-<span class="number">1</span>);</span><br><span class="line">        dfs(i,j+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="694-Number-of-Distinct-Islands"><a href="#694-Number-of-Distinct-Islands" class="headerlink" title="694. Number of Distinct Islands"></a><a href="https://leetcode.cn/problems/number-of-distinct-islands/">694. Number of Distinct Islands</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> StringBuffer path;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[][] grid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numDistinctIslands</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.grid = grid;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length, n = grid[<span class="number">0</span>].length;</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i ++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j ++)&#123;</span><br><span class="line">                <span class="comment">// 从当前点开始dfs遍历完所有相连的1的路径（1234分别表示上下左右）</span></span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    path = <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">                    dfs(i, j, <span class="number">0</span>);</span><br><span class="line">                    set.add(path.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> set.size();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> curr)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || i &gt;= grid.length || j &gt;= grid[<span class="number">0</span>].length || grid[i][j] == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        grid[i][j] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 记录走到当前点的方式：0初始1234分别表示上下左右</span></span><br><span class="line">        path.append(curr);</span><br><span class="line">        dfs(i - <span class="number">1</span>, j, <span class="number">1</span>);</span><br><span class="line">        dfs(i + <span class="number">1</span>, j, <span class="number">2</span>);</span><br><span class="line">        dfs(i, j - <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        dfs(i, j + <span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="comment">// 每个子递归结束后(跳至上层递归前)添加相应分隔符</span></span><br><span class="line">        path.append(<span class="string">&#x27;|&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="463-Island-Perimeter"><a href="#463-Island-Perimeter" class="headerlink" title="463. Island Perimeter"></a>463. Island Perimeter</h2><p>判断四条边是否是边界</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">islandPerimeter</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> row=grid.length;</span><br><span class="line">    <span class="type">int</span> col=grid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i][j]==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="type">int</span> up;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                    up=<span class="number">0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    up=grid[i-<span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> down;</span><br><span class="line">                <span class="keyword">if</span>(i==row-<span class="number">1</span>)&#123;</span><br><span class="line">                    down=<span class="number">0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    down=grid[i+<span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> left;</span><br><span class="line">                <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">                    left=<span class="number">0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    left=grid[i][j-<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> right;</span><br><span class="line">                <span class="keyword">if</span>(j==col-<span class="number">1</span>)&#123;</span><br><span class="line">                    right=<span class="number">0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    right=grid[i][j+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                res+=<span class="number">4</span>-(up+down+left+right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="419-Battleships-in-a-Board"><a href="#419-Battleships-in-a-Board" class="headerlink" title="419. Battleships in a Board"></a>419. Battleships in a Board</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countBattleships</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">    <span class="type">int</span> row=board.length;</span><br><span class="line">    <span class="type">int</span> col=board[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            <span class="comment">//only the most top-left X counts</span></span><br><span class="line">            <span class="keyword">if</span>(board[i][j]==<span class="string">&#x27;X&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; board[i-<span class="number">1</span>][j]==<span class="string">&#x27;X&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;<span class="number">0</span> &amp;&amp; board[i][j-<span class="number">1</span>]==<span class="string">&#x27;X&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="959-Regions-Cut-By-Slashes"><a href="#959-Regions-Cut-By-Slashes" class="headerlink" title="959. Regions Cut By Slashes"></a>959. Regions Cut By Slashes</h2><p><a href="https://leetcode.com/problems/regions-cut-by-slashes/discuss/205674/DFS-on-upscaled-grid">https://leetcode.com/problems/regions-cut-by-slashes/discuss/205674/DFS-on-upscaled-grid</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] graph;</span><br><span class="line"><span class="type">int</span> row;</span><br><span class="line"><span class="type">int</span> col;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">regionsBySlashes</span><span class="params">(String[] grid)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=grid.length;</span><br><span class="line">    graph=<span class="keyword">new</span> <span class="title class_">int</span>[n*<span class="number">3</span>][n*<span class="number">3</span>];</span><br><span class="line">    row=n*<span class="number">3</span>;</span><br><span class="line">    col=n*<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        String s=grid[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(j)==<span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">                graph[i*<span class="number">3</span>+<span class="number">2</span>][j*<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">                graph[i*<span class="number">3</span>+<span class="number">1</span>][j*<span class="number">3</span>+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">                graph[i*<span class="number">3</span>][j*<span class="number">3</span>+<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(j)==<span class="string">&#x27;\\&#x27;</span>)&#123;</span><br><span class="line">                graph[i*<span class="number">3</span>+<span class="number">2</span>][j*<span class="number">3</span>+<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">                graph[i*<span class="number">3</span>+<span class="number">1</span>][j*<span class="number">3</span>+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">                graph[i*<span class="number">3</span>][j*<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(graph[i][j]==<span class="number">0</span>)&#123;</span><br><span class="line">                res++;</span><br><span class="line">                dfs(i,j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=row || j&lt;<span class="number">0</span> || j&gt;=col || graph[i][j]==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    graph[i][j]=<span class="number">1</span>;</span><br><span class="line">    dfs(i+<span class="number">1</span>,j);</span><br><span class="line">    dfs(i-<span class="number">1</span>,j);</span><br><span class="line">    dfs(i,j+<span class="number">1</span>);</span><br><span class="line">    dfs(i,j-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>回溯法(2)</title>
    <url>/2022/04/28/%E5%9B%9E%E6%BA%AF%E6%B3%95(2)/</url>
    <content><![CDATA[<h1 id="backtracking经典题选编-2"><a href="#backtracking经典题选编-2" class="headerlink" title="backtracking经典题选编(2)"></a>backtracking经典题选编(2)</h1><h2 id="51-N-Queens"><a href="#51-N-Queens" class="headerlink" title="51. N-Queens"></a><a href="https://leetcode-cn.com/problems/n-queens/">51. N-Queens</a></h2><p>思路：</p>
<ol>
<li>从上往下，一行一行填</li>
<li>某一行元素逐个判断，valid则填入并继续探索下一行（，否则跳过，直接探索该行下一个元素）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode51</span> &#123;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; res;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueens</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">char</span>[][] board=<span class="keyword">new</span> <span class="title class_">char</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                board[i][j]=<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        backtracking(board,n,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; <span class="title function_">toList</span><span class="params">(<span class="type">char</span>[][] board)</span>&#123;</span><br><span class="line">        List&lt;String&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                sb.append(board[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(sb.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">char</span>[][] board,<span class="type">int</span> n, <span class="type">int</span> row)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(row==n)&#123;</span><br><span class="line">            List&lt;String&gt; list=toList(board);</span><br><span class="line">            <span class="built_in">this</span>.res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(valid(board,n,row,i))&#123;</span><br><span class="line">                board[row][i]=<span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                backtracking(board,n,row+<span class="number">1</span>);</span><br><span class="line">                board[row][i]=<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">valid</span><span class="params">(<span class="type">char</span>[][] board,<span class="type">int</span> n,<span class="type">int</span> row,<span class="type">int</span> col)</span>&#123;</span><br><span class="line">        <span class="comment">//从上往下填的，只需考察上方元素，下方都是空</span></span><br><span class="line">        <span class="comment">//正上方不能有Q</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][col]==<span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//左上不能有Q</span></span><br><span class="line">        <span class="type">int</span> r=row-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> c=col-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(r&gt;=<span class="number">0</span> &amp;&amp; c&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[r][c]==<span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            r--;</span><br><span class="line">            c--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//右上不能有Q</span></span><br><span class="line">        r=row-<span class="number">1</span>;</span><br><span class="line">        c=col+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(r&gt;=<span class="number">0</span> &amp;&amp; c&lt;n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[r][c]==<span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            r--;</span><br><span class="line">            c++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="131-Palindrome-Partitioning"><a href="#131-Palindrome-Partitioning" class="headerlink" title="131. Palindrome Partitioning"></a><a href="https://leetcode-cn.com/problems/palindrome-partitioning/">131. Palindrome Partitioning</a></h2><p>本题难点：</p>
<ul>
<li>切割问题可以抽象为组合问题</li>
<li>如何模拟那些切割线</li>
<li>切割问题中递归如何终止</li>
<li>在递归循环中如何截取子串</li>
<li>如何判断回文</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;String&gt;&gt; res;</span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">partition</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    backtracking(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(),s,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String s, <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(start&lt;end)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.charAt(start)!=s.charAt(end))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        start++;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(List&lt;String&gt; list,String s,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start&gt;=s.length())&#123;</span><br><span class="line">        <span class="built_in">this</span>.res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(isPalindrome(s,start,i))&#123;</span><br><span class="line">            list.add(s.substring(start,i+<span class="number">1</span>)); <span class="comment">//s[start,i]加进去了</span></span><br><span class="line">            backtracking(list,s,i+<span class="number">1</span>); <span class="comment">//继续探索s[i+1,length-1]</span></span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="93-Restore-IP-Addresses"><a href="#93-Restore-IP-Addresses" class="headerlink" title="93. Restore IP Addresses"></a><a href="https://leetcode-cn.com/problems/restore-ip-addresses/">93. Restore IP Addresses</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode93</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">restoreIpAddresses</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        List&lt;String&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtracking(res,<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(),s,<span class="number">3</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s, <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start&lt;end &amp;&amp; s.charAt(start)==<span class="string">&#x27;0&#x27;</span> || end-start&gt;=<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> digit=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(start&lt;=end)&#123;</span><br><span class="line">            sum+=(s.charAt(end)-<span class="string">&#x27;0&#x27;</span>)*digit;</span><br><span class="line">            digit*=<span class="number">10</span>;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum&lt;=<span class="number">255</span> ? <span class="literal">true</span> : <span class="literal">false</span>; <span class="comment">//注意int溢出 2147483647</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(List&lt;String&gt; res, LinkedList&lt;String&gt; list, String s, <span class="type">int</span> dot, <span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start&gt;=s.length())&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dot==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isValid(s,start,s.length()-<span class="number">1</span>))&#123;</span><br><span class="line">                StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                <span class="keyword">for</span> (String s1 : list) &#123;</span><br><span class="line">                    sb.append(s1);</span><br><span class="line">                &#125;</span><br><span class="line">                sb.append(s.substring(start,s.length()));</span><br><span class="line">                res.add(<span class="keyword">new</span> <span class="title class_">String</span>(sb));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(isValid(s,start,i))&#123;</span><br><span class="line">                list.add(s.substring(start,i+<span class="number">1</span>));</span><br><span class="line">                list.add(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">                backtracking(res,list,s,dot-<span class="number">1</span>,i+<span class="number">1</span>);</span><br><span class="line">                list.removeLast();</span><br><span class="line">                list.removeLast();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="37-Sudoku-Solver"><a href="#37-Sudoku-Solver" class="headerlink" title="37. Sudoku Solver"></a><a href="https://leetcode-cn.com/problems/sudoku-solver/">37. Sudoku Solver</a></h2><p>思考：为什么这种void写法不行，一定要将helper设为boolean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//wrong answer!</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">char</span>[][] board,<span class="type">int</span> row,<span class="type">int</span> col,<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index&gt;=row*col)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> i=index/row;</span><br><span class="line">    <span class="type">int</span> j=index%row;</span><br><span class="line">    <span class="keyword">if</span>(board[i][j]!=<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">        backtracking(board,row,col,index+<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>; c &lt;= <span class="string">&#x27;9&#x27;</span>; c++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(valid(board,c,i,j))&#123;</span><br><span class="line">                board[i][j]=c;</span><br><span class="line">                backtracking(board,row,col,index+<span class="number">1</span>);</span><br><span class="line">                board[i][j]=<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">solveSudoku</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">        solveSudokuHelper(board);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">solveSudokuHelper</span><span class="params">(<span class="type">char</span>[][] board)</span>&#123;</span><br><span class="line">        <span class="comment">//「一个for循环遍历棋盘的行，一个for循环遍历棋盘的列，</span></span><br><span class="line">        <span class="comment">// 一行一列确定下来之后，递归遍历这个位置放9个数字的可能性！」</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)&#123; <span class="comment">// 遍历行</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">9</span>; j++)&#123; <span class="comment">// 遍历列</span></span><br><span class="line">                <span class="keyword">if</span> (board[i][j] != <span class="string">&#x27;.&#x27;</span>)&#123; <span class="comment">// 跳过原始数字</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">char</span> <span class="variable">k</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>; k &lt;= <span class="string">&#x27;9&#x27;</span>; k++)&#123; <span class="comment">// (i, j) 这个位置放k是否合适</span></span><br><span class="line">                    <span class="keyword">if</span> (isValidSudoku(i, j, k, board))&#123;</span><br><span class="line">                        board[i][j] = k;</span><br><span class="line">                        <span class="keyword">if</span> (solveSudokuHelper(board))&#123; <span class="comment">// 如果找到合适一组立刻返回</span></span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        board[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 9个数都试完了，都不行，那么就返回false</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="comment">// 因为如果一行一列确定下来了，这里尝试了9个数都不行，说明这个棋盘找不到解决数独问题的解！</span></span><br><span class="line">                <span class="comment">// 那么会直接返回， 「这也就是为什么没有终止条件也不会永远填不满棋盘而无限递归下去！」</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历完没有返回false，说明找到了合适棋盘位置了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断棋盘是否合法有如下三个维度:</span></span><br><span class="line"><span class="comment">     *     同行是否重复</span></span><br><span class="line"><span class="comment">     *     同列是否重复</span></span><br><span class="line"><span class="comment">     *     9宫格里是否重复</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValidSudoku</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col, <span class="type">char</span> val, <span class="type">char</span>[][] board)</span>&#123;</span><br><span class="line">        <span class="comment">// 同行是否重复</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (board[row][i] == val)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 同列是否重复</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">9</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (board[j][col] == val)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 9宫格里是否重复</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">startRow</span> <span class="operator">=</span> (row / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">startCol</span> <span class="operator">=</span> (col / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startRow; i &lt; startRow + <span class="number">3</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> startCol; j &lt; startCol + <span class="number">3</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == val)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="491-Increasing-Subsequences"><a href="#491-Increasing-Subsequences" class="headerlink" title="491. Increasing Subsequences"></a><a href="https://leetcode-cn.com/problems/increasing-subsequences/">491. Increasing Subsequences</a></h2><p>注意去重逻辑：不能对原数组排序，所以排序+visited数组老方法不行！</p>
<p>不仅是和该元素前一个相比较，而是和该元素之前的全部元素相比较</p>
<p>新去重思路：在每一层开一个map，每一层的相同元素只有第一个元素保留，其余都剪枝</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">findSubsequences</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    backtracking(res,<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(),nums,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, LinkedList&lt;Integer&gt; list, <span class="type">int</span>[] nums,<span class="type">int</span> start )</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start&gt;=nums.length)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!list.isEmpty() &amp;&amp; list.getLast()&gt;nums[i])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(map.getOrDefault(nums[i],<span class="number">0</span>)&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(nums[i]);</span><br><span class="line">        map.put(nums[i],map.getOrDefault(nums[i],<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(list.size()&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(list));</span><br><span class="line">        &#125;</span><br><span class="line">        backtracking(res,list,nums,i+<span class="number">1</span>);</span><br><span class="line">        list.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>优化思路：由于元素范围有限，可用数组代替map</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode491</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res;</span><br><span class="line">    LinkedList&lt;Integer&gt; list;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">findSubsequences</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        backtracking(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums,  <span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list.size()&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(list));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(start==nums.length)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span>[] visited=<span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">201</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(visited[nums[i]+<span class="number">100</span>])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(list.size()==<span class="number">0</span> || nums[i]&gt;=list.getLast())&#123;</span><br><span class="line">                list.add(nums[i]);</span><br><span class="line">                visited[nums[i]+<span class="number">100</span>]=<span class="literal">true</span>;</span><br><span class="line">                backtracking(nums,i+<span class="number">1</span>);</span><br><span class="line">                list.removeLast();</span><br><span class="line">                <span class="comment">//注意，某一个值visited过了，就一直标记，这一层再也不选用</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="332-Reconstruct-Itinerary"><a href="#332-Reconstruct-Itinerary" class="headerlink" title="332. Reconstruct Itinerary"></a><a href="https://leetcode-cn.com/problems/reconstruct-itinerary/">332. Reconstruct Itinerary</a></h2><p>You must use all the tickets once and only once.</p>
<p>list.get(0)&#x3D;”JFK” 起点给定</p>
<p>回溯终止条件：所有票都used， 即 list.length&#x3D;&#x3D;tickets.length+1</p>
<p>哪些票valid: used&#x3D;&#x3D;false &amp;&amp; 起点.equals(list.getLast())</p>
<p>结果itineray不止一条：取字典序最小的一条</p>
<p>超时的笨方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; res;</span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">findItinerary</span><span class="params">(List&lt;List&lt;String&gt;&gt; tickets)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    backtracking(list,tickets,<span class="keyword">new</span> <span class="title class_">boolean</span>[tickets.size()]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">( List&lt;String&gt; list, List&lt;List&lt;String&gt;&gt; tickets, <span class="type">boolean</span>[] used)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(list.size()==tickets.size()+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(res.size()==<span class="number">0</span> || better(list,res))&#123;</span><br><span class="line">            res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(list.size()==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tickets.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(tickets.get(i).get(<span class="number">0</span>).equals(<span class="string">&quot;JFK&quot;</span>))&#123;</span><br><span class="line">                list.add(<span class="string">&quot;JFK&quot;</span>);</span><br><span class="line">                list.add(tickets.get(i).get(<span class="number">1</span>));</span><br><span class="line">                used[i]=<span class="literal">true</span>;</span><br><span class="line">                backtracking(list,tickets,used);</span><br><span class="line">                list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">                list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">                used[i]=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; used.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(used[i])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String last=list.get(list.size()-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(tickets.get(i).get(<span class="number">0</span>).equals(last))&#123;</span><br><span class="line">                list.add(tickets.get(i).get(<span class="number">1</span>));</span><br><span class="line">                used[i]=<span class="literal">true</span>;</span><br><span class="line">                backtracking(list,tickets,used);</span><br><span class="line">                list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">                used[i]=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">better</span><span class="params">(List&lt;String&gt; l1,List&lt;String&gt; l2)</span>&#123;</span><br><span class="line">    StringBuilder sb1=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    StringBuilder sb2=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (String s : l1) &#123;</span><br><span class="line">        sb1.append(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (String s : l2) &#123;</span><br><span class="line">        sb2.append(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sb1.toString().compareTo(sb2.toString())&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>笨方法不行，考虑先排序，再backtracking, 保证“小”票先被used</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; res;</span><br><span class="line"><span class="type">boolean</span> found;</span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">findItinerary</span><span class="params">(List&lt;List&lt;String&gt;&gt; tickets)</span> &#123;</span><br><span class="line">    tickets.sort(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;List&lt;String&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(List&lt;String&gt; o1, List&lt;String&gt; o2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> !o1.get(<span class="number">0</span>).equals(o2.get(<span class="number">0</span>)) ? o1.get(<span class="number">0</span>).compareTo(o2.get(<span class="number">0</span>)) : o1.get(<span class="number">1</span>).compareTo(o2.get(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">this</span>.res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    backtracking(list,tickets,<span class="keyword">new</span> <span class="title class_">boolean</span>[tickets.size()]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">( List&lt;String&gt; list, List&lt;List&lt;String&gt;&gt; tickets, <span class="type">boolean</span>[] used)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(list.size()==tickets.size()+<span class="number">1</span>)&#123;</span><br><span class="line">        res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list);</span><br><span class="line">        found=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(list.size()==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tickets.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(tickets.get(i).get(<span class="number">0</span>).equals(<span class="string">&quot;JFK&quot;</span>))&#123;</span><br><span class="line">                list.add(<span class="string">&quot;JFK&quot;</span>);</span><br><span class="line">                list.add(tickets.get(i).get(<span class="number">1</span>));</span><br><span class="line">                used[i]=<span class="literal">true</span>;</span><br><span class="line">                backtracking(list,tickets,used);</span><br><span class="line">                list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">                list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">                used[i]=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; used.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(found)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(used[i])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String last=list.get(list.size()-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(tickets.get(i).get(<span class="number">0</span>).equals(last))&#123;</span><br><span class="line">                list.add(tickets.get(i).get(<span class="number">1</span>));</span><br><span class="line">                used[i]=<span class="literal">true</span>;</span><br><span class="line">                backtracking(list,tickets,used);</span><br><span class="line">                list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">                used[i]=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="320-Generalized-Abbreviation"><a href="#320-Generalized-Abbreviation" class="headerlink" title="320. Generalized Abbreviation"></a>320. Generalized Abbreviation</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Set&lt;String&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">LinkedList&lt;String&gt; list=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">generateAbbreviations</span><span class="params">(String word)</span> &#123;</span><br><span class="line">    backtracking(word,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(String word, <span class="type">int</span> start)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start==word.length())&#123;</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            sb.append(s);</span><br><span class="line">        &#125;</span><br><span class="line">        String s=sb.toString();</span><br><span class="line">        <span class="keyword">if</span>(!set.contains(s))&#123;</span><br><span class="line">            set.add(s);</span><br><span class="line">            res.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//word[start,i]</span></span><br><span class="line">    <span class="type">boolean</span> avoid=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(!list.isEmpty())&#123;</span><br><span class="line">        String last=list.getLast();</span><br><span class="line">        <span class="keyword">if</span>(Character.isDigit(last.charAt(<span class="number">0</span>)))&#123;</span><br><span class="line">            avoid=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; word.length(); i++) &#123;</span><br><span class="line">        String sub=word.substring(start,i+<span class="number">1</span>);</span><br><span class="line">        list.add(sub);</span><br><span class="line">        backtracking(word,i+<span class="number">1</span>);</span><br><span class="line">        list.removeLast();</span><br><span class="line">        <span class="keyword">if</span>(!avoid)&#123;</span><br><span class="line">            <span class="type">int</span> len=sub.length();</span><br><span class="line">            list.add(Integer.toString(len));</span><br><span class="line">            backtracking(word,i+<span class="number">1</span>);</span><br><span class="line">            list.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="254-Factor-Combinations"><a href="#254-Factor-Combinations" class="headerlink" title="254. Factor Combinations"></a>254. Factor Combinations</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; res;</span><br><span class="line">List&lt;Integer&gt; list;</span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">getFactors</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    backtracking(n,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> cur, <span class="type">int</span> start)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(list.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= cur; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(cur%i==<span class="number">0</span>) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">            backtracking(cur / i, i);</span><br><span class="line">            list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>搬家啦</title>
    <url>/2022/05/16/%E6%90%AC%E5%AE%B6%E5%95%A6/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>杂题</title>
    <url>/2022/05/11/%E6%9D%82%E9%A2%98/</url>
    <content><![CDATA[<h1 id="杂题小记"><a href="#杂题小记" class="headerlink" title="杂题小记"></a>杂题小记</h1><h2 id="剑指-Offer-57-II-和为s的连续正数序列"><a href="#剑指-Offer-57-II-和为s的连续正数序列" class="headerlink" title="剑指 Offer 57 - II. 和为s的连续正数序列"></a><a href="https://leetcode.cn/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/">剑指 Offer 57 - II. 和为s的连续正数序列</a></h2><p>题目要求返回一个二维数组，且每行元素个数不定</p>
<p>无法由List&lt;List<Integer>&gt;转变</p>
<p>可以由List&lt;int[]&gt;转变：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] findContinuousSequence(<span class="type">int</span> target) &#123;</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=target/<span class="number">2</span>; i++)&#123;</span><br><span class="line">            backtracking(res,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(),target,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toArray(<span class="keyword">new</span> <span class="title class_">int</span>[res.size()][]); <span class="comment">//List&lt;int[]&gt; 转变为int[][]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(List&lt;<span class="type">int</span>[]&gt; res, List&lt;Integer&gt; list, <span class="type">int</span> target, <span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//List&lt;Integer&gt;转变为int[]，无法直接toArray</span></span><br><span class="line">                <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[list.size()];</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">                    arr[i]=list.get(i);</span><br><span class="line">                &#125;</span><br><span class="line">                res.add(arr);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(start);</span><br><span class="line">        backtracking(res,list,target-start,start+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="49-Group-Anagrams"><a href="#49-Group-Anagrams" class="headerlink" title="49. Group Anagrams"></a><a href="https://leetcode.cn/problems/group-anagrams/">49. Group Anagrams</a></h2><h3 id="法一：排序"><a href="#法一：排序" class="headerlink" title="法一：排序"></a>法一：排序</h3><p>注意注意注意：</p>
<ul>
<li>new String（）一般使用字符转码的时候,byte[]数组的时候</li>
<li>toString（）将对象打印的时候使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode49</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        Map&lt;String,List&lt;String&gt;&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">            <span class="type">char</span>[] chars = str.toCharArray();</span><br><span class="line">            Arrays.sort(chars);</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);	<span class="comment">//这样可以</span></span><br><span class="line">            <span class="keyword">if</span>(!map.containsKey(s))&#123;</span><br><span class="line">                map.put(s,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            map.get(s).add(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>(map.values());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.stream(strs)</span><br><span class="line">            .collect(Collectors.groupingBy(str -&gt; &#123;</span><br><span class="line">                <span class="comment">// 返回 str 排序后的结果。</span></span><br><span class="line">                <span class="comment">// 按排序后的结果来grouping by，算子类似于 sql 里的 group by。</span></span><br><span class="line">                <span class="type">char</span>[] array = str.toCharArray();</span><br><span class="line">                Arrays.sort(array);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(array);</span><br><span class="line">            &#125;)).values());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="法二：计数"><a href="#法二：计数" class="headerlink" title="法二：计数"></a>法二：计数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.stream(strs)</span><br><span class="line">            .collect(Collectors.groupingBy(str -&gt; &#123;</span><br><span class="line">                <span class="type">int</span>[] counter = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">                    counter[str.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">                    <span class="comment">// 这里的 if 是可省略的，但是加上 if 以后，生成的 sb 更短，后续 groupingBy 会更快。</span></span><br><span class="line">                    <span class="keyword">if</span> (counter[i] != <span class="number">0</span>) &#123;</span><br><span class="line">                        sb.append((<span class="type">char</span>) (<span class="string">&#x27;a&#x27;</span> + i));</span><br><span class="line">                        sb.append(counter[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> sb.toString();</span><br><span class="line">            &#125;)).values());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="71-Simplify-Path"><a href="#71-Simplify-Path" class="headerlink" title="71. Simplify Path"></a><a href="https://leetcode.cn/problems/simplify-path/">71. Simplify Path</a></h2><p>注意：</p>
<ul>
<li><code>/</code>代表当前路径</li>
<li><code>//</code>代表根路径</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode71</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">simplifyPath</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        String[] split = path.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        LinkedList&lt;String&gt; list=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : split) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.length()==<span class="number">0</span> || s.equals(<span class="string">&quot;.&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">&quot;..&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">if</span>(!list.isEmpty())&#123;</span><br><span class="line">                    list.removeLast();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                list.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> size=list.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">            sb.append(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        String s=sb.toString();</span><br><span class="line">        <span class="keyword">return</span> s.length()==<span class="number">0</span> ? <span class="string">&quot;/&quot;</span> : s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>新文章</title>
    <url>/2022/07/29/%E6%96%B0%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="我是新的文章"><a href="#我是新的文章" class="headerlink" title="我是新的文章"></a>我是新的文章</h1>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>linux&amp;&amp;nginx架构</title>
    <url>/2022/05/23/%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><h3 id="linux指令"><a href="#linux指令" class="headerlink" title="linux指令"></a>linux指令</h3><p>&#x2F;是最高级目录，目录树的根节点</p>
<p>~是&#x2F;root，为目录树根节点的子节点之一</p>
<p>cd ..   返回上级</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> / -a </span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> / -l</span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> / -al</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> -A test.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">head</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">tail</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">tac</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">touch</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">rmdir</span></span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim index.js</span><br></pre></td></tr></table></figure>

<ul>
<li><p>按 i 进入编辑模式</p>
</li>
<li><p>按 esc 结束</p>
</li>
<li><p>按 :wq， 或  shift+zz 退出vim</p>
</li>
<li><p>按 :set nu 显示行号</p>
</li>
<li><p>按 :set nonu 取消显示行号</p>
</li>
</ul>
<p>查看进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef</span><br></pre></td></tr></table></figure>

<p>找PID</p>
<ul>
<li>kill -1, 正常终止</li>
<li>kill -9, 强制终止</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill -1 PID</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill -9 PID</span><br></pre></td></tr></table></figure>



<h3 id="SSH上传-x2F-下载文件"><a href="#SSH上传-x2F-下载文件" class="headerlink" title="SSH上传&#x2F;下载文件"></a>SSH上传&#x2F;下载文件</h3><ul>
<li><p>-P port 指定端口号，可以省略，用默认的</p>
</li>
<li><p>-r 全传选中的文件夹</p>
</li>
<li><p>username@servername</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@8.130.25.41</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上传文件夹到远程服务器</span></span><br><span class="line">scp -P port -r /local/dir username@servername:/remote/dir</span><br><span class="line"><span class="comment"># scp -r ./ root@8.130.25.41:/home</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从远程服务器下载文件夹</span></span><br><span class="line">scp -P port -r username@servername:/remote/dir /local/dir</span><br><span class="line"><span class="comment"># scp -r root@8.130.25.41:/home ./</span></span><br></pre></td></tr></table></figure>



<h3 id="FTP上传-x2F-下载文件"><a href="#FTP上传-x2F-下载文件" class="headerlink" title="FTP上传&#x2F;下载文件"></a>FTP上传&#x2F;下载文件</h3><p>FileZilla</p>
<h3 id="创建并运行shell："><a href="#创建并运行shell：" class="headerlink" title="创建并运行shell："></a>创建并运行shell：</h3><ol>
<li><p>touch newShell.sh</p>
</li>
<li><p>vi newShell.sh</p>
</li>
<li><p>单击键盘i，开始编辑</p>
</li>
<li><p>编辑完成后，单击esc</p>
</li>
<li><p>保存并退出</p>
<p>输入:wq</p>
</li>
<li><p>使之可执行</p>
<p>chmod 755 newShell.sh </p>
</li>
<li><p>执行</p>
<p>.&#x2F;newShell.sh</p>
</li>
</ol>
<h3 id="iic-test-ssp-x2F-home-x2F-iic-x2F-ssp-x2F-run-sh"><a href="#iic-test-ssp-x2F-home-x2F-iic-x2F-ssp-x2F-run-sh" class="headerlink" title="iic-test-ssp    &#x2F;home&#x2F;iic&#x2F;ssp&#x2F;run.sh:"></a>iic-test-ssp    &#x2F;home&#x2F;iic&#x2F;ssp&#x2F;run.sh:</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">APP_NAME=/home/iic/ssp/iic-ssp-mgr-1.0.0.RELEASE.war</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行命令有误时，提示使用说明参数</span></span><br><span class="line">usage() &#123;</span><br><span class="line"> echo &quot;Usage: bash.sh [start|stop|restart|status]&quot;</span><br><span class="line"> exit 1    #exit结束进程,return函数返回</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查程序是否已经在运行</span></span><br><span class="line">is_exist()&#123;</span><br><span class="line"> pid=`ps -ef|grep $APP_NAME|grep -v grep|awk &#x27;&#123;print $2&#125;&#x27; ` #ps -ef | grep java</span><br><span class="line">if [ -z &quot;$&#123;pid&#125;&quot; ]; then #[[ -z $str1 ]] 判断字符串是否为空，单中括号可能导致出错</span><br><span class="line"> return 1</span><br><span class="line"> else</span><br><span class="line"> return 0</span><br><span class="line"> fi        #fi与if成对出现，作为if语句的结尾</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动服务</span></span><br><span class="line">start()&#123;</span><br><span class="line">  is_exist</span><br><span class="line">  if [ $? -eq &quot;0&quot; ]; then  #$? 显示最后命令的退出状态</span><br><span class="line">    echo &quot;$&#123;APP_NAME&#125; is already running. pid=$&#123;pid&#125; .&quot;</span><br><span class="line">  else</span><br><span class="line">    java -XX:+UseG1GC -jar $APP_NAME --spring.profiles.active=test --file.authId=6a534f8a516f429e9e940467b348fe61 --stat.fake=false &amp;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">停止服务</span></span><br><span class="line">stop()&#123;</span><br><span class="line">  is_exist</span><br><span class="line">  if [ $? -eq &quot;0&quot; ]; then</span><br><span class="line">    kill -9 $pid</span><br><span class="line">  else</span><br><span class="line">    echo &quot;$&#123;APP_NAME&#125; is not running&quot;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出服务运行状态</span></span><br><span class="line">status()&#123;</span><br><span class="line">  is_exist</span><br><span class="line">  if [ $? -eq &quot;0&quot; ]; then	#if和then应该分两行，合在一行要加;</span><br><span class="line">    echo &quot;$&#123;APP_NAME&#125; is running. Pid is $&#123;pid&#125;&quot;</span><br><span class="line">  else</span><br><span class="line">    echo &quot;$&#123;APP_NAME&#125; is NOT running.&quot;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启服务</span></span><br><span class="line">restart()&#123;</span><br><span class="line">  stop</span><br><span class="line">  start</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">根据输入参数，选择执行对应的方法，不输入则执行使用说明</span></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">  &quot;start&quot;)	#每一模式必须以右括号结束</span><br><span class="line">    start	</span><br><span class="line">    ;;		#匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;</span><br><span class="line">  &quot;stop&quot;)</span><br><span class="line">    stop</span><br><span class="line">    ;;</span><br><span class="line">  &quot;status&quot;)</span><br><span class="line">    status</span><br><span class="line">    ;;</span><br><span class="line">  &quot;restart&quot;)</span><br><span class="line">    restart</span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    usage</span><br><span class="line">    ;;</span><br><span class="line">esac   #case esac</span><br></pre></td></tr></table></figure>



<h3 id="upload-nginx-file-sh"><a href="#upload-nginx-file-sh" class="headerlink" title="upload-nginx-file.sh:"></a>upload-nginx-file.sh:</h3><p>scp: secure copy</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/expect</span></span><br><span class="line">set timeout 10</span><br><span class="line">set user root</span><br><span class="line">set pass Gdsinsing888_nginx</span><br><span class="line">set destDir /home/deploy/static</span><br><span class="line">set ip 114.67.178.8</span><br><span class="line">set filen [lrange /home/svn/iic/filecenter/iic-file-web/target/iic-file-web-1.0.0.RELEASE.war 0 0]</span><br><span class="line"></span><br><span class="line">spawn scp $&#123;filen&#125; $&#123;user&#125;@$&#123;ip&#125;:$&#123;destDir&#125;</span><br><span class="line">expect &quot;$&#123;user&#125;@$&#123;ip&#125;&#x27;s password:&quot;</span><br><span class="line">send &quot;$&#123;pass&#125;\r&quot;</span><br><span class="line">interact</span><br></pre></td></tr></table></figure>



<h2 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h2><p>Private Clouds: 租房子住</p>
<p>Public Clouds: 住宾馆</p>
<p>On-Premises: 自己买房子住</p>
<p>测试环境：京东私有云    第一家 不稳定</p>
<ul>
<li><p>Private Clouds </p>
</li>
<li><p>为了一个客户单独使用而构建的</p>
</li>
<li><p>经济性：机房、设备、运行维护费用</p>
</li>
<li><p>安全性：数据由内部网络获取，第三方很难获取</p>
</li>
</ul>
<p>正式环境：京东公有云    广州 成熟 稳定</p>
<ul>
<li><p>Public Clouds</p>
</li>
<li><p>资源是在服务商的场所内部署。用户通过Internet互联网来获取这些资源的使用。</p>
</li>
<li><p>经济性：购买服务的费用</p>
</li>
<li><p>安全性：通过运营商网络访问，可以通过算法对数据加密</p>
</li>
</ul>
<p>cd &#x2F;home&#x2F;iic</p>
<p>d ssp</p>
<p>ls</p>
<ul>
<li>run.sh 可执行文件</li>
<li>logs </li>
<li>.war 服务部署包</li>
<li>checkJavaPid.sh 检查进程id</li>
</ul>
<p>cat run.sh 运行脚本，启动服务</p>
<p>目前重启需要先checkJavaPid找到进程，再kill</p>
<p>每个服务写restart, stop</p>
<p>难点：</p>
<ol>
<li>用脚本查到进程id</li>
<li>kill -9 pid</li>
</ol>
<h3 id="05-19："><a href="#05-19：" class="headerlink" title="05-19："></a>05-19：</h3><p>目标：</p>
<ol>
<li><p>用一台机的shell去启动另一台机的shell</p>
</li>
<li><p>保证同步shell 实现，不可以异步</p>
</li>
</ol>
<h3 id="05-20"><a href="#05-20" class="headerlink" title="05-20:"></a>05-20:</h3><p>进展：</p>
<ol>
<li><p>成功实现用 iic-test-api 远程控制 iic-test-ssp， 可以在iic-test-api 运行 iic-test-ssp上的脚本</p>
<ul>
<li><p>要设置ssh免密码登录</p>
</li>
<li><p>先在 iic-tes-api 上，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>


</li>
<li><p>保存密钥后，将passphrase设为空</p>
</li>
<li><p>将生成的id_rsa.pub文件拷贝到远程服务器的 ~&#x2F;.ssh 目录下，此时需要远程服务器的 root 密码</p>
<ul>
<li><pre><code class="shell">scp /root/.ssh/id_rsa.pub root@172.23.19.16:~/.ssh
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  + 注意：xshell中输入密码时虽然看似没反应，其实键盘正常工作！</span><br><span class="line"></span><br><span class="line">  + 问题：为何使用的是对外的浮动IP,而不是对内的私有云内网IP?</span><br><span class="line"></span><br><span class="line">+ 在远程服务器：append更新authorized_keys文件</span><br><span class="line"></span><br><span class="line">  ```shell</span><br><span class="line">  cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><p>注意：cat除了看文件，还能文件间传输数据</p>
</li>
</ul>
</li>
<li><p>此时可以不输密码，访问远程服务器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh root@172.23.19.16</span><br></pre></td></tr></table></figure>



<p>并可以执行命令或shell：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh root@172.23.19.16 &quot;cd /test1;./newdir.sh&quot;</span><br><span class="line">ssh root@172.23.19.16 &quot;cd /test1;ls&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="05-24"><a href="#05-24" class="headerlink" title="05-24:"></a>05-24:</h3><table>
<thead>
<tr>
<th>服务名</th>
<th>SSH Server</th>
<th>Source files</th>
<th>Exec command</th>
</tr>
</thead>
<tbody><tr>
<td>test-api</td>
<td>test-api</td>
<td>target&#x2F;iic-appapi-webapi-1.0.0.RELEASE.war</td>
<td>nohup bash &#x2F;home&#x2F;iic&#x2F;api&#x2F;run.sh restart</td>
</tr>
<tr>
<td>test-file</td>
<td>test-static</td>
<td>target&#x2F;iic-file-web-1.0.0.RELEASE.war</td>
<td>nohup bash &#x2F;home&#x2F;iic&#x2F;static&#x2F;run.sh restart</td>
</tr>
<tr>
<td>test-idr</td>
<td>test-idr</td>
<td>target&#x2F;iic-analyze-web-1.0.0.RELEASE.war</td>
<td>nohup bash &#x2F;home&#x2F;iic&#x2F;idr&#x2F;run.sh restart</td>
</tr>
<tr>
<td>test-msg</td>
<td>test-msg</td>
<td>target&#x2F;iic-msg-webapi-1.0.0.RELEASE.war</td>
<td>nohup bash &#x2F;home&#x2F;iic&#x2F;msg&#x2F;run.sh restart</td>
</tr>
<tr>
<td>test-safety</td>
<td>test-safety</td>
<td>target&#x2F;iic-safety-service-1.0.0.RELEASE.war</td>
<td>nohup bash &#x2F;home&#x2F;iic&#x2F;safety&#x2F;run.sh restart</td>
</tr>
<tr>
<td>test-ssp</td>
<td>test-ssp</td>
<td>target&#x2F;iic-ssp-mgr-1.0.0.RELEASE.war</td>
<td>nohup bash &#x2F;home&#x2F;iic&#x2F;ssp&#x2F;run.sh restart</td>
</tr>
<tr>
<td>test-stat</td>
<td>test-msg</td>
<td>target&#x2F;iic-stat-web-1.0.0.RELEASE.jar</td>
<td>nohup bash &#x2F;home&#x2F;iic&#x2F;stat&#x2F;run.sh restart</td>
</tr>
</tbody></table>
<h3 id="05-25"><a href="#05-25" class="headerlink" title="05-25:"></a>05-25:</h3><p>测试环境思路：</p>
<ol>
<li>维持现状</li>
</ol>
<p>svn编译成功后，从</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/var/lib/jenkins/workspace/test-api/target/iic-appapi-webapi-1.0.0.RELEASE.war</span><br></pre></td></tr></table></figure>

<p>推到了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/home/iic/api/iic-appapi-webapi-1.0.0.RELEASE.war</span><br></pre></td></tr></table></figure>



<p>正式环境思路：</p>
<ol>
<li>svn将某服务（例如ssp）编译后，统一推包到nginx机，并执行nginx机上的对应的run-ssp.sh restart</li>
<li>run-ssp.sh restart中：<ul>
<li>从nginx机推包到对应的ssp机</li>
<li>启动对应的ssp机上的run.sh restart</li>
</ul>
</li>
</ol>
<p>开始测试：</p>
<ol>
<li>先将svn与各test机建立免密连接</li>
<li>在svn机上写run-ssp.sh restart来推包并启动ssp机上的run.sh restart</li>
</ol>
<p>test-ssp.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">start()&#123;</span><br><span class="line"> upload</span><br><span class="line">ssh root@172.23.19.16 &quot;nohup bash /home/iic/ssp/run.sh restart&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop()&#123;</span><br><span class="line">ssh root@172.23.19.16 &quot;nohup bash /home/iic/ssp/run.sh stop&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">restart()&#123;</span><br><span class="line">start</span><br><span class="line">stop</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upload()&#123;</span><br><span class="line">scp /var/lib/jenkins/workspace/test-ssp/target/iic-ssp-mgr-1.0.0.RELEASE.war root@172.23.19.16:/home/iic/ssp</span><br><span class="line">&#125;   </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">根据输入参数，选择执行对应的方法，不输入则执行使用说明</span></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">  &quot;start&quot;)      #每一模式必须以右括号结束</span><br><span class="line">    start</span><br><span class="line">    ;;          #匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;</span><br><span class="line">  &quot;stop&quot;)</span><br><span class="line">    stop</span><br><span class="line">    ;;</span><br><span class="line">  &quot;restart&quot;)</span><br><span class="line">    restart</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>



<h2 id="nginx架构"><a href="#nginx架构" class="headerlink" title="nginx架构"></a>nginx架构</h2><p>nginx: </p>
<ul>
<li>热部署 </li>
<li>全天候 </li>
<li>反向代理 </li>
<li>负载均衡</li>
</ul>
<p><a href="https://juejin.cn/post/6844904144235413512">https://juejin.cn/post/6844904144235413512</a></p>
<p>nginx 转发 &lt;- 公网ip</p>
<p>内网：每一个服务都有独立的账号、密码</p>
<ul>
<li>api</li>
<li>idr</li>
<li>ssp</li>
<li>static 文件中心</li>
<li>safety 安全中心</li>
</ul>
<p>部署：登录、上传.war、run</p>
<p>专门的部署机：</p>
<ul>
<li>upload</li>
<li>run 参数，想run哪一台</li>
<li>stop</li>
<li>restart</li>
</ul>
<p>远程登录</p>
<p>需要先输入账号密码 登录部署机， 再输入账号密码去操纵对应服务</p>
<p>备份: 将旧版本ssp备份到部署机 以便快速恢复系统</p>
<p>外界访问 用 浮动ip</p>
<p>内部访问 用 私有云ip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># same origin</span><br><span class="line">http://example.com/app1/index.html  # merely directory difference</span><br><span class="line">http://example.com/app2/index.html</span><br><span class="line"></span><br><span class="line">http://Example.com:80  # merely case difference</span><br><span class="line">http://example.com</span><br><span class="line"></span><br><span class="line"># different origins</span><br><span class="line">http://example.com/app1   # different protocols</span><br><span class="line">https://example.com/app2</span><br><span class="line"></span><br><span class="line">http://example.com        # different hosts</span><br><span class="line">http://www.example.com</span><br><span class="line">http://myapp.example.com</span><br><span class="line"></span><br><span class="line">http://example.com        # different ports</span><br><span class="line">http://example.com:8080</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h2 id="测试-部署"><a href="#测试-部署" class="headerlink" title="测试 部署"></a>测试 部署</h2><p>测试：Jenkins</p>
<p>部署: 京东云</p>
<p>Jenkins连svn,获取源代码，再部署到linux服务器；起桥梁的作用</p>
<p>Jenkins:</p>
<ul>
<li>免费开源的持续集成工具</li>
<li>continuous integration</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>计网学习笔记</title>
    <url>/2022/04/19/%E8%AE%A1%E7%BD%91/</url>
    <content><![CDATA[<h1 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h1><h2 id="2-网络分类"><a href="#2-网络分类" class="headerlink" title="2. 网络分类"></a>2. 网络分类</h2><p><strong>个域网PAN（ Personal Area Network ）</strong></p>
<ul>
<li>能在便携式消费电器与通信设备之间进行短距离通信的网络</li>
<li>覆盖范围一般在10米半径以内，如蓝牙耳机等</li>
</ul>
<p><strong>局域网LAN（Local Area Network）</strong></p>
<ul>
<li>局部地区形成的区域网络，如企业网络</li>
<li>分布地区范围有限，可大可小，大到一栋建筑、小到办公室内的组网</li>
<li>电脑WLAN接入，打印机共享等等</li>
</ul>
<p><strong>城域网MAN（Metropolitan Area Network ）</strong></p>
<ul>
<li>范围覆盖一个城市的网络</li>
</ul>
<p><strong>广域网WAN（Wide Area Network）</strong></p>
<ul>
<li>覆盖很大地理区域，乃至覆盖地区和国家</li>
</ul>
<h2 id="3-接入网"><a href="#3-接入网" class="headerlink" title="3. 接入网"></a>3. 接入网</h2><p><strong>接入网的用途</strong></p>
<ul>
<li>接入网的用途是将主机连接到边缘路由器上</li>
<li>边缘路由器是端系统Host去往任何其他远程端系统的路径上的第一台路由器</li>
</ul>
<h2 id="4-网络核心两大功能"><a href="#4-网络核心两大功能" class="headerlink" title="4. 网络核心两大功能"></a>4. 网络核心两大功能</h2><ol>
<li>路由 确定数据分组从源到目标所使用的路径（全局操作）</li>
<li>转发 路由器或交换机将接收到的数据分组转发出去（即移动到该设备的某个输出接口）（本地操作）</li>
</ol>
<h1 id="二、物理层"><a href="#二、物理层" class="headerlink" title="二、物理层"></a>二、物理层</h1><ul>
<li>物理层考虑的是怎样才能<strong>在连接各种计算机的传输媒体上传输数据比特流</strong>，而不是指具体的传输媒体。</li>
<li>物理层的作用是要尽可能地<strong>屏蔽掉不同传输媒体和通信手段的差异</strong>。</li>
<li>用于物理层的协议也常称为<strong>物理层规程</strong> (procedure)。</li>
</ul>
<h2 id="1-物理介质"><a href="#1-物理介质" class="headerlink" title="1. 物理介质"></a>1. 物理介质</h2><ol>
<li><p>光纤 </p>
<p>高速点对点</p>
</li>
<li><p>双绞线 </p>
<p>电话线为1对双绞线，网线为4对双绞线，广泛用于计算机网络（以太网）双向传输</p>
</li>
<li><p>同轴电缆  </p>
<p>两根同心铜导线，双向传输</p>
</li>
<li><p>无线电（陆地无线电、卫星无线电信道) </p>
<ul>
<li><p>电磁频谱中各种“波段”携带的信号</p>
</li>
<li><p>半双工（发送方到接收方）</p>
<p>Half Duplex, 一个时间段内只有一个动作发生</p>
</li>
<li><p>无线局域网（WiFi）<br>10-100 Mbps；10米</p>
</li>
<li><p>广域（如3&#x2F;4&#x2F;5G蜂窝）<br>在~10公里范围内</p>
</li>
<li><p>蓝牙：短距离，有限速率</p>
</li>
</ul>
</li>
</ol>
<h2 id="2-数据交换方式"><a href="#2-数据交换方式" class="headerlink" title="2. 数据交换方式"></a>2. 数据交换方式</h2><ol>
<li><p>分组交换</p>
<p><strong>分组交换采用把一个个小的数据包存储转发传输来实现数据交换。</strong></p>
<p>不具有实时性</p>
<p>会丢包</p>
</li>
<li><p>电路交换</p>
<p>建立连接、数据传输、释放连接</p>
</li>
</ol>
<h1 id="三、数据链路层"><a href="#三、数据链路层" class="headerlink" title="三、数据链路层"></a>三、数据链路层</h1><h2 id="1-功能"><a href="#1-功能" class="headerlink" title="1. 功能"></a>1. 功能</h2><p><strong>成帧 （Framing）</strong><br>将比特流划分成“帧”的主要目的是为了检测和纠正物理层在比特传输中可能出现的错误，数据链路层功能需借助“帧”的各个域来实现</p>
<p><strong>差错控制 （Error Control）</strong><br>处理传输中出现的差错，如位错误、丢失等</p>
<p><strong>流量控制 （Flow Control）</strong><br>确保发送方的发送速率，不大于接收方的处理速率，避免接收缓冲区溢出</p>
<h2 id="2-数据链路层提供的服务"><a href="#2-数据链路层提供的服务" class="headerlink" title="2. 数据链路层提供的服务"></a>2. 数据链路层提供的服务</h2><p>1.无确认 无连接 服务（ Unacknowledged connectionless ）</p>
<ul>
<li>接收方不对收到的帧进行确认</li>
<li>适用场景：误码率低的可靠信道；实时通信；</li>
<li>网络实例：以太网</li>
</ul>
<p>2.有确认 无连接 服务（ Acknowledged connectionless ）</p>
<ul>
<li>每一帧都得到单独的确认</li>
<li>适用场景：不可靠的信道（无线信道）</li>
<li>网络实例：802.11</li>
</ul>
<p>3.有确认 有连接 服务（ Acknowledged connection-oriented ）</p>
<ul>
<li>适用场景：长延迟的不可靠信道</li>
</ul>
<h2 id="3-成帧（Framing）"><a href="#3-成帧（Framing）" class="headerlink" title="3. 成帧（Framing）"></a>3. 成帧（Framing）</h2><p>要解决的关键问题：如何标识一个帧的开始？</p>
<ul>
<li><p>接收方必须能从物理层接收的比特流中明确区分出一帧的开始和结束，这个问题被称为帧同步或帧定界</p>
</li>
<li><p>关键：选择何种定界符？定界符出现在数据部分如何处理？</p>
</li>
<li><p>framing方式包括：</p>
<ol>
<li><p>带比特填充的定界符法</p>
<p>定界符：两个0比特之间，连续6个1比特，即01111110，0x7E</p>
</li>
<li><p>物理层编码违例</p>
<p>核心思想：选择的定界符不会在数据部分出现</p>
</li>
</ol>
</li>
</ul>
<h2 id="4-媒体接入控制"><a href="#4-媒体接入控制" class="headerlink" title="4. 媒体接入控制"></a>4. 媒体接入控制</h2><p>数据链路层分为两个子层：<br>MAC子层：介质访问 紧挨物理层<br>LLC子层：承上启下（弱层）紧挨网络层</p>
<p>MAC (Medium Access Control)子层</p>
<h3 id="4-1-无线局域网WLAN"><a href="#4-1-无线局域网WLAN" class="headerlink" title="4.1 无线局域网WLAN"></a>4.1 无线局域网WLAN</h3><p>无线局域网（Wireless Local Area Network，WLAN)：指以无线信道作为传输介质的计算机局域网</p>
<h3 id="4-2-虚拟局域网VLAN"><a href="#4-2-虚拟局域网VLAN" class="headerlink" title="4.2 虚拟局域网VLAN"></a>4.2 虚拟局域网VLAN</h3><h4 id="4-2-1-广播域"><a href="#4-2-1-广播域" class="headerlink" title="4.2.1 广播域"></a>4.2.1 广播域</h4><p><strong>广播域（Broadcasting Domain）</strong></p>
<ul>
<li>广播域是广播帧能够到达的范围；</li>
<li>缺省情况下，交换机所有端口同属于一个广播域，无法隔离广播域；</li>
<li>广播帧在广播域中传播，占用资源，降低性能，且具有安全隐患。</li>
</ul>
<h4 id="4-2-2-概况"><a href="#4-2-2-概况" class="headerlink" title="4.2.2 概况"></a>4.2.2 概况</h4><p><strong>VLAN是一个在物理网络上根据用途，工作组、应用等来逻辑划分的局域网络，与用户的物理位置没有关系。</strong></p>
<p>将一个物理意义上的LAN划分为若干个VLAN，不同VLAN的成员不能直接进行二层通信。</p>
<p>不同VLAN成员需要通过三层设备，（通过路由器或三层交换机进行VLAN间路由，）实现VLAN间通信。</p>
<p>VLAN类型：</p>
<ol>
<li>基于端口的VLAN</li>
<li>基于MAC地址的VLAN</li>
<li>基于协议的VLAN</li>
<li>基于子网的VLAN</li>
</ol>
<h1 id="四、网络层"><a href="#四、网络层" class="headerlink" title="四、网络层"></a>四、网络层</h1><h2 id="1-网络层概述"><a href="#1-网络层概述" class="headerlink" title="1. 网络层概述"></a>1. 网络层概述</h2><p>网络层在数据链路层提供的两个相邻端点之间的数据帧的传送功能上，进一步管理网络中的数据通信，将数据设法从源端经过若干个中间节点传送到目的端，从而向运输层提供最基本的端到端的数据传送服务。</p>
<h2 id="2-网络层关键功能"><a href="#2-网络层关键功能" class="headerlink" title="2. 网络层关键功能"></a>2. 网络层关键功能</h2><ol>
<li>路由（控制面）<ul>
<li>选择数据报从源端到目的端的路径</li>
<li>核心：路由算法与协议</li>
</ul>
</li>
<li>转发（数据面）<ul>
<li>将数据报从路由器的输入接口传送到正确的输出接口</li>
</ul>
</li>
</ol>
<h2 id="3-Internet网际协议"><a href="#3-Internet网际协议" class="headerlink" title="3. Internet网际协议"></a>3. Internet网际协议</h2><h3 id="3-1-IPv4"><a href="#3-1-IPv4" class="headerlink" title="3.1 IPv4"></a>3.1 IPv4</h3><h4 id="3-1-1-概述"><a href="#3-1-1-概述" class="headerlink" title="3.1.1 概述"></a>3.1.1 概述</h4><p>IPv4协议，网际协议版本4，一种无连接的协议，是互联网的核心，也是使用最广泛的网际协议版本，其后继版本为IPv6</p>
<p>Internet协议执行<strong>两个基本功能</strong></p>
<ul>
<li>寻址(addressing)</li>
<li>分片(fragmentation)</li>
</ul>
<p>相关问题与解决思路：</p>
<ol>
<li>为解决IPv4数据报长度大于传输链路的MTU的问题，通过<strong>分片机制</strong>解决：<strong>标识、标志、片偏移</strong></li>
<li>防止循环转发浪费网络资源（路由错误、设备故障…），通过<strong>跳数限制</strong>解决：<strong>生存时间TTL</strong></li>
<li>IP报头错误导致无效传输，通过<strong>头部机校验</strong>解决：<strong>首部校验和</strong></li>
</ol>
<p>注意：</p>
<ol>
<li>分组packet是网络层的概念，帧frame是数据链路层的概念</li>
<li>帧由头标、有效载荷和尾标组成</li>
</ol>
<h4 id="3-1-2-IP数据报"><a href="#3-1-2-IP数据报" class="headerlink" title="3.1.2 IP数据报"></a>3.1.2 IP数据报</h4><p>IPv4数据报由首部和数据两部分组成，首部包含：</p>
<ul>
<li><strong>版本</strong>： 4bit ，表示采用的IP协议版本</li>
<li><strong>首部长度</strong>： 4bit，表示整个IP数据报首部的长度</li>
<li><strong>区分服务</strong>： 8bit ，该字段一般情况下不使用</li>
<li><strong>总长度</strong>： 16bit ，表示整个IP报文的长度,能表示的最大字节为2^16-1&#x3D;65535字节</li>
<li><strong>标识</strong>： 16bit ， IP软件通过计数器自动产生，每产生1个数据报计数器加1；在ip分片以后，用来标识同一片分片</li>
<li><strong>标志</strong>： 3bit，目前只有两位有意义。<br>MF，置1表示后面还有分片，置0表示这是数据报片的最后1个；<br>DF，不能分片标志，置0时表示允许分片</li>
<li><strong>片偏移</strong>： 13bit，表示IP分片后，相应的IP片在总的IP片的相对位置</li>
<li><strong>生存时间TTL(Time To Live)</strong> ：8bit,表示数据报在网络中的生命周期，用通过路由器的数量来计量，即跳数（每经过一个路由器会减1）</li>
<li><strong>协议</strong>：8bit，标识上层协议（TCP&#x2F;UDP&#x2F;ICMP…）</li>
<li><strong>首部校验和</strong>：16bit ，对数据报首部进行校验，不包括数据部分</li>
<li><strong>源地址</strong>：32bit，标识IP片的发送源IP地址</li>
<li><strong>目的地址</strong>：32bit，标识IP片的目的地IP地址</li>
<li><strong>选项</strong>：可扩充部分，具有可变长度，定义了安全性、严格源路由、松散源路由、记录路由、时间戳等选项</li>
<li><strong>填充</strong>：用全0的填充字段补齐为4字节的整数倍</li>
</ul>
<p>数据报分片的原因是数据报长度大于传输链路的MTU</p>
<p>MTU（Maximum Transmission Unit）, 最大传输单元</p>
<ul>
<li>链路MTU</li>
<li>路径MTU (Path MTU)</li>
</ul>
<h3 id="3-2-IP地址"><a href="#3-2-IP地址" class="headerlink" title="3.2 IP地址"></a>3.2 IP地址</h3><h4 id="3-2-1-概述"><a href="#3-2-1-概述" class="headerlink" title="3.2.1 概述"></a>3.2.1 概述</h4><ul>
<li><p><strong>IP地址</strong>，网络上的每一台主机（或路由器）的每一个接口都会分配一个全球唯一的32位的标识符</p>
</li>
<li><p>将IP地址划分为固定的类，每一类都由两个字段组成</p>
</li>
<li><p>网络号相同的这块连续IP地址空间称为地址的<strong>前缀</strong>，或<strong>网络前缀</strong></p>
</li>
<li><p>IP地址共分为A、B、C、D、E五类，A类、B类、C类为单播地址</p>
</li>
<li><p>IP地址的书写采用点分十进制记法，其中每一段取值范围为0到255</p>
</li>
</ul>
<p>A,B,C类单播地址由net-id和host-id构成</p>
<h4 id="3-2-2-子网划分"><a href="#3-2-2-子网划分" class="headerlink" title="3.2.2 子网划分"></a>3.2.2 子网划分</h4><ul>
<li>子网划分(subnetting)，在网络内部将一个网络块进行划分以供多个内部网络使用，对外仍是一个网络</li>
<li>子网(subnet )，一个网络进行子网划分后得到的一系列结果网络称为子网</li>
<li>子网掩码(subnet mask )，与 IP 地址一一对应，是32 bit 的二进制数，置1表示网络位，置0表示主机位</li>
<li>子网划分减少了 IP 地址的浪费、网络的组织更加灵活、便于维护和管理</li>
</ul>
<h3 id="3-3-DHCP动态主机配置协议"><a href="#3-3-DHCP动态主机配置协议" class="headerlink" title="3.3 DHCP动态主机配置协议"></a>3.3 DHCP动态主机配置协议</h3><p>DHCP ：<strong>动态主机配置协议</strong></p>
<ul>
<li><p>当主机加入IP网络，允许主机从DHCP服务器动态获取IP地址</p>
</li>
<li><p>可以有效利用IP地址，方便移动主机的地址获取</p>
</li>
</ul>
<p>工作模式：客户&#x2F;服务器模式（ C&#x2F;S ）<br>基于 UDP 工作，服务器运行在 67 号端口， 客户端运行在 68 号端口</p>
<p>DHCP服务不只返回客户机所需的IP地址，还包括缺省路由器IP地址，DNS服务器IP地址，网络掩码</p>
<h3 id="3-4-ARP地址解析协议"><a href="#3-4-ARP地址解析协议" class="headerlink" title="3.4 ARP地址解析协议"></a>3.4 ARP地址解析协议</h3><p>网络设备有数据要发送给另一台网络设备时，必须要知道对方的网络层地址（即IP地址）。</p>
<p>IP地址由网络层来提供，但是仅有IP地址是不够的，IP数据报文必须封装成帧才能通过数据链路进行发送。</p>
<p>数据帧必须要包含目的MAC地址，因此发送端还必须获取到目的MAC地址。</p>
<p>通过目的IP地址而获取的MAC地址的过程是由ARP（Address Resolution Protocol）协议来实现的。</p>
<p>IP地址放在IP数据报的首部，而硬件地址则放在MAC帧的首部</p>
<p>IP数据报经过不同链路时，IP数据报中封装的IP地址不发生改变，而MAC帧中的硬件地址发生改变</p>
<h4 id="3-4-1-路由到另一个局域网"><a href="#3-4-1-路由到另一个局域网" class="headerlink" title="3.4.1 路由到另一个局域网"></a>3.4.1 路由到另一个局域网</h4><p>由主机A经路由器R传输到E的部分过程如下：</p>
<ol>
<li>A创建IP数据包（源为A、目的为E）</li>
<li>在源主机A的路由表中找到路由器R的IP地址223.1.1.4</li>
<li>A根据R的IP地址223.1.1.4，使用ARP协议获得R的MAC地址</li>
<li>A创建数据帧（目的地址为R的MAC地址）</li>
<li>数据帧中封装A到E的IP数据包</li>
<li>A发送数据帧，R接收数据帧</li>
</ol>
<h4 id="3-4-2-工作过程"><a href="#3-4-2-工作过程" class="headerlink" title="3.4.2 工作过程"></a>3.4.2 工作过程</h4><p>ARP协议的工作过程如下：</p>
<ol>
<li><p>A已知B的IP地址，需要获得B的MAC地址（物理地址）</p>
</li>
<li><p>如果A的ARP表中缓存有B的IP地址与MAC地址的映射关系，则直接从ARP表获取</p>
</li>
<li><p>如果A的ARP表中未缓存有B的IP地址与MAC地址的映射关系，则A广播包含B的IP地址的ARP query分组</p>
<p>注意：在局域网上的所有节点都可以接收到ARP query</p>
</li>
<li><p>B接收到ARP query分组后，将自己的MAC地址发送给A</p>
</li>
<li><p>A在ARP表中缓存B的IP地址和MAC地址的映射关系</p>
<p>注意：超时时删除</p>
</li>
</ol>
<h3 id="3-5-网络地址转换（NAT）"><a href="#3-5-网络地址转换（NAT）" class="headerlink" title="3.5 网络地址转换（NAT）"></a>3.5 网络地址转换（NAT）</h3><p><strong>定义</strong><br>网络地址转换(NAT)用于解决IPv4地址不足的问题，是一种将私有（保留）地址转化为公有IP地址的转换技术</p>
<p><strong>NAT的优势</strong></p>
<ul>
<li>节省合法地址，减少地址冲突</li>
<li>灵活连接Internet</li>
<li>保护局域网的私密性</li>
</ul>
<h3 id="3-6-ICMP-互联网控制报文协议"><a href="#3-6-ICMP-互联网控制报文协议" class="headerlink" title="3.6 ICMP: 互联网控制报文协议"></a>3.6 ICMP: 互联网控制报文协议</h3><p><strong>ICMP: Internet Control Message Protocol</strong></p>
<ul>
<li>ICMP 允许主机或路由器报告差错情况和提供有关异常情况的报告</li>
<li>由主机和路由器用于网络层信息的通信</li>
<li>ICMP 报文携带在IP 数据报中： IP上层协议号为1</li>
</ul>
<p><strong>ICMP报文类型</strong></p>
<ul>
<li>ICMP 差错报告报文<ul>
<li>终点不可达：不可达主机、不可达网络，无效端口、协议</li>
</ul>
</li>
<li>ICMP 询问报文<ul>
<li>回送请求&#x2F;回答 (ping使用)</li>
</ul>
</li>
</ul>
<h2 id="4-路由算法"><a href="#4-路由算法" class="headerlink" title="4. 路由算法"></a>4. 路由算法</h2><p>距离向量路由</p>
<p>链路状态路由</p>
<p>层次路由</p>
<p>广播路由</p>
<h2 id="5-Internet路由协议"><a href="#5-Internet路由协议" class="headerlink" title="5. Internet路由协议"></a>5. Internet路由协议</h2><p>路由协议</p>
<ul>
<li>内部网关协议 IGP： 有 RIP 和、OSPF、ISIS 等多种具体的协议</li>
<li>外部网关协议 EGP：目前使用的协议就是 BGP</li>
</ul>
<h3 id="5-1-路由选择协议"><a href="#5-1-路由选择协议" class="headerlink" title="5.1 路由选择协议"></a>5.1 路由选择协议</h3><ul>
<li><p>路由选择协议RIP（ Routing Information Protocol）是基于距离矢量算法的协议</p>
</li>
<li><p>使用跳数衡量到达目的网络的距离</p>
<ul>
<li>RIP 认为一个<strong>好的路由</strong>就是它通过的路由器的数目少，即“<strong>距离短</strong>”</li>
<li>RIP 允许一条路径最多只能包含 15 个路由器</li>
</ul>
</li>
<li><p>RIP协议的基本思想</p>
<ul>
<li>仅和<strong>相邻路由器</strong>交换信息</li>
<li>路由器交换的内容是自己的<strong>路由表</strong></li>
<li>周期性更新：<strong>30s</strong></li>
</ul>
</li>
</ul>
<p>RIP协议的特点：</p>
<ul>
<li>算法简单，易于实现</li>
<li>收敛慢</li>
<li>需要交换的信息量较大</li>
</ul>
<p>RIP协议的适用场合：</p>
<ul>
<li>中小型网络</li>
</ul>
<h3 id="5-2-BGP-外部网关路由协议"><a href="#5-2-BGP-外部网关路由协议" class="headerlink" title="5.2 BGP 外部网关路由协议"></a>5.2 BGP 外部网关路由协议</h3><p>边界网关协议<strong>BGP (Border Gateway Protocol)</strong></p>
<ul>
<li>目前互联网中唯一实际运行的自治域间的路由协议</li>
</ul>
<h2 id="6-路由器的工作原理"><a href="#6-路由器的工作原理" class="headerlink" title="6. 路由器的工作原理"></a>6. 路由器的工作原理</h2><p>路由器是互联网最主要的网络设备，包含2个核心功能</p>
<ul>
<li>控制层：运行各种路由协议：BGP、OSPF、RIP，学习去往不同目的的转发路径：路由表</li>
<li>数据层：根据上述路由表，将收到的IP分组转发到正确的下一跳链路</li>
</ul>
<h2 id="7-拥塞控制"><a href="#7-拥塞控制" class="headerlink" title="7. 拥塞控制"></a>7. 拥塞控制</h2><p><strong>拥塞</strong><br>网络中存在太多的数据包导致数据包传输延迟或丢失，从而导致网络吞吐量下降</p>
<p><strong>拥塞控制（congestion control）</strong><br>需要确保通信子网能够承载用户提交的通信量，是一个全局性问题，涉及主机、路由器等多种因素</p>
<h2 id="8-服务质量"><a href="#8-服务质量" class="headerlink" title="8. 服务质量"></a>8. 服务质量</h2><p><strong>什么是网络服务质量？（QoS, Quality of Service）</strong></p>
<p>QoS是网络在传输数据流时要满足一系列服务请求，具体可以量化为<strong>带宽、时延、抖动、丢包率</strong>等性能指标</p>
<h2 id="9-三层交换"><a href="#9-三层交换" class="headerlink" title="9. 三层交换"></a>9. 三层交换</h2><h3 id="9-1-三层交换的技术背景"><a href="#9-1-三层交换的技术背景" class="headerlink" title="9.1 三层交换的技术背景"></a>9.1 三层交换的技术背景</h3><ol>
<li><p>二层交换网络中的广播，限制了网络规模的扩展</p>
<ul>
<li><p>交换机对目标地址无法匹配的数据帧进行广播转发</p>
</li>
<li><p>交换机对目标地址为广播地址的数据帧进行广播转发</p>
</li>
<li><p>交换机为维护生成树状态产生大量的桥协议数据单元(Bridge Protocol Data Unit，BPDU)</p>
</li>
<li><p>这些广播帧会大量消耗网络资源，并频繁影响用户的数据通信</p>
</li>
</ul>
</li>
<li><p>VLAN虽然可以将广播的影响限定在一定范围内，但同时也隔离了正常的用户间数据通信</p>
</li>
<li><p>传统路由器致力于解决VLAN间互联互通，但是其转发效率和拓扑复杂性带来的网络通信瓶颈无法有效应对规模扩展</p>
</li>
</ol>
<h3 id="9-2-三层交换的动机"><a href="#9-2-三层交换的动机" class="headerlink" title="9.2 三层交换的动机"></a>9.2 三层交换的动机</h3><ul>
<li>利用第三层协议中的信息来加强第二层交换功能，形成带有路由功能的交换</li>
<li>融合VLAN 间的二层隔离和三层互通，消除大规模网络中广播对性能的影响</li>
<li>简化网络配置，简化网络拓扑，优化网络管理，降低网络部署成本</li>
</ul>
<h2 id="10-VPN的原理"><a href="#10-VPN的原理" class="headerlink" title="10. VPN的原理"></a>10. VPN的原理</h2><ul>
<li>VPN指利用公用网络架设专用网络的远程访问技术</li>
<li>VPN通过隧道技术在公共网络上模拟出一条点到点的逻辑专线，从而达到安全数据传输的目的</li>
</ul>
<p>用户主机和被访问节点的网关必须都支持隧道协议</p>
<h2 id="11-IPv6协议"><a href="#11-IPv6协议" class="headerlink" title="11. IPv6协议"></a>11. IPv6协议</h2><p>初始动机：应付“32-bit地址空间耗尽”问题（CIDR和NAT都无法从根本上解决地址短缺问题），增加地址空间<br>IPv6 地址</p>
<ul>
<li><p>地址长度为128bit，是IPv4地址长度的4倍</p>
</li>
<li><p>IPv6地址空间数量约为3*1038</p>
<p>IPv6地址表示法，冒分十六进制，x : x : x : x : x : x : x : x</p>
<ul>
<li>简化方法：每个x前面的0可省略，可把连续的值为0的x表示为“::”, 且“::”只能出现1次</li>
<li>简化前地址，2001:0DA8:0000:0000:200C:0000:0000:00A5</li>
<li>简化后地址，2001:DA8:0000:0000:200C::A5</li>
</ul>
</li>
</ul>
<h1 id="五、传输层"><a href="#五、传输层" class="headerlink" title="五、传输层"></a>五、传输层</h1><h2 id="1-传输层概述"><a href="#1-传输层概述" class="headerlink" title="1. 传输层概述"></a>1. 传输层概述</h2><ul>
<li><p>传输层位于应用层和网络层之间：</p>
<ul>
<li>基于网络层提供的服务，向分布式应用程序提供通信服务</li>
</ul>
</li>
<li><p>按照因特网的“端到端”设计原则：</p>
<ul>
<li><strong>应用程序只运行在终端上</strong>，即不需要为网络设备编写程序</li>
</ul>
</li>
<li><p>站在应用程序的角度：</p>
<ul>
<li>传输层应提供<strong>进程之间本地通信的抽象</strong>：即运行在不同终端上的应用进程仿佛是直接连在一起的</li>
</ul>
</li>
</ul>
<h3 id="1-1-套接字"><a href="#1-1-套接字" class="headerlink" title="1.1 套接字"></a>1.1 套接字</h3><p>设想在应用程序和网络之间存在一扇“门”：</p>
<ul>
<li>需要发送报文时：发送进程将报文推到门外</li>
<li>门外的运输设施（因特网）将报文送到接收进程的门口</li>
<li>需要接收报文时：接收进程打开门，即可收到报文</li>
</ul>
<p>在TCP&#x2F;IP网络中，这扇“门”称为<strong>套接字（socket）</strong>，是<strong>应用层和传输层的接口</strong>，也是应用程序和网络之间的API</p>
<h3 id="1-2-传输层提供的服务"><a href="#1-2-传输层提供的服务" class="headerlink" title="1.2 传输层提供的服务"></a>1.2 传输层提供的服务</h3><p>因特网的网络层提供“<strong>尽力而为</strong>”的服务：</p>
<ul>
<li>网络层尽最大努力在终端间交付分组，但不提供任何承诺</li>
<li>具体来说，不保证交付，不保证按序交付，不保证数据完整，不保证延迟，不保证带宽等</li>
</ul>
<p>传输层的<strong>有所为、有所不为</strong>:</p>
<ul>
<li>传输层可以通过差错恢复、重排序等手段提供可靠、按序的交付服务</li>
<li>但传输层无法提供延迟保证、带宽保证等服务</li>
</ul>
<p>具体而言，传输层提供的服务有：</p>
<ol>
<li><p>最低限度的传输服务：</p>
<ul>
<li>将终端-终端的数据交付扩展到进程-进程的数据交付</li>
<li>报文检错</li>
</ul>
</li>
<li><p>增强服务：</p>
<ul>
<li>可靠数据传输</li>
<li>流量控制</li>
<li>拥塞控制</li>
</ul>
</li>
<li><p>因特网传输层通过UDP协议和TCP协议，向应用层提供两种不同的传输服务：</p>
<ul>
<li>UDP协议：仅提供最低限度的传输服务</li>
<li>TCP协议：提供基础服务和增强服务</li>
</ul>
</li>
</ol>
<h2 id="2-传输层基本服务：复用和分用"><a href="#2-传输层基本服务：复用和分用" class="headerlink" title="2. 传输层基本服务：复用和分用"></a>2. 传输层基本服务：复用和分用</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>传输层基本服务：将主机间交付扩展到进程间交付，通过复用和分用实现。</p>
<ul>
<li><p><strong>发送端复用</strong>：<br>发送方传输层从多个套接字收集数据，将套接字标识置于数据（报文段）中，交给网络层发送</p>
</li>
<li><p><strong>接收端分用</strong>：<br>接收方传输层根据报文段中的套接字标识，将从网络层收到的数据（报文段）交付到正确的套接字</p>
</li>
</ul>
<h3 id="2-2-套接字标识与端口号"><a href="#2-2-套接字标识与端口号" class="headerlink" title="2.2 套接字标识与端口号"></a>2.2 套接字标识与端口号</h3><ol>
<li><p>端口号是套接字标识的一部分：</p>
<ul>
<li><p>每个套接字在本地关联一个端口号</p>
</li>
<li><p>端口号是一个16比特的数</p>
</li>
</ul>
</li>
<li><p>端口号的分类：</p>
<ul>
<li><p>熟知端口：0～1023，由公共域协议使用</p>
</li>
<li><p>注册端口：1024～49151，需要向IANA注册才能使用</p>
</li>
<li><p>动态和&#x2F;或私有端口：49152～65535，一般程序使用</p>
<ol start="3">
<li>报文段中有两个字段携带端口号：</li>
</ol>
<ul>
<li>源端口号(source port)：与发送进程关联的本地端口号</li>
<li>目的端口号(dest port)：与接收进程关联的本地端口号</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="2-3-TCP-x2F-UDP套接字"><a href="#2-3-TCP-x2F-UDP套接字" class="headerlink" title="2.3 TCP&#x2F;UDP套接字"></a>2.3 TCP&#x2F;UDP套接字</h3><p><strong>UDP套接字</strong></p>
<ul>
<li>使用&lt;IP地址，端口号&gt;二元组标识UDP套接字</li>
<li>服务器使用一个套接字服务所有客户</li>
</ul>
<p><strong>TCP套接字</strong></p>
<ul>
<li>使用&lt;源IP地址，目的IP地址，源端口号，目的端口号&gt; 四元组标识连接套接字</li>
<li>服务器使用一个监听套接字和多个连接套接字服务多个客户，每个连接套接字服务一个客户</li>
</ul>
<h2 id="3-无连接传输：UDP"><a href="#3-无连接传输：UDP" class="headerlink" title="3. 无连接传输：UDP"></a>3. 无连接传输：UDP</h2><p><strong>为什么需要UDP？</strong></p>
<ul>
<li>应用可以尽可能快地发送报文：<ul>
<li>无建立连接的延迟</li>
<li>不限制发送速率（不进行拥塞控制和流量控制）</li>
</ul>
</li>
<li>报头开销小</li>
<li>协议处理简单</li>
</ul>
<p><strong>UDP适合哪些应用？</strong></p>
<ul>
<li>容忍丢包但对延迟敏感的应用：<br>如流媒体</li>
<li>以单次请求&#x2F;响应为主的应用：<br>如DNS</li>
<li>若应用要求基于UDP进行可靠传输：<br>由应用层实现可靠性</li>
</ul>
<h2 id="4-面向连接的传输：TCP"><a href="#4-面向连接的传输：TCP" class="headerlink" title="4. 面向连接的传输：TCP"></a>4. 面向连接的传输：TCP</h2><h3 id="4-1-可靠传输"><a href="#4-1-可靠传输" class="headerlink" title="4.1 可靠传输"></a>4.1 可靠传输</h3><p>数据包<strong>有序、无差错</strong>到达接收端</p>
<p>如何实现可靠传输，基本原则是什么？</p>
<ul>
<li>利用ACK确认</li>
<li>重传机制</li>
<li>差错检测</li>
</ul>
<p>三次握手：确定双方都同意建立连接，并初始化连接参数(seq，ack等)</p>
<p>四次挥手：目的就是确保断开连接时双方都是确认结束的状态</p>
<h3 id="4-2-流水线技术"><a href="#4-2-流水线技术" class="headerlink" title="4.2 流水线技术"></a>4.2 流水线技术</h3><h3 id="4-3-TCP报文段结构"><a href="#4-3-TCP报文段结构" class="headerlink" title="4.3 TCP报文段结构"></a>4.3 TCP报文段结构</h3><p>U,A,P,R,S,F标志位：</p>
<ul>
<li><p>ACK表示确认序号有效</p>
</li>
<li><p>SYN用于建立连接</p>
</li>
<li><p>FIN用于终止连接</p>
</li>
</ul>
<p>发送序号：数据载荷中第一个字节在字节流中的序号</p>
<p>确认序号：期望接受的下一个字节的序号</p>
<h2 id="5-TCP流量控制"><a href="#5-TCP流量控制" class="headerlink" title="5. TCP流量控制"></a>5. TCP流量控制</h2><h2 id="6-拥塞控制"><a href="#6-拥塞控制" class="headerlink" title="6. 拥塞控制"></a>6. 拥塞控制</h2><h1 id="六、应用层"><a href="#六、应用层" class="headerlink" title="六、应用层"></a>六、应用层</h1><h2 id="1-应用层概述"><a href="#1-应用层概述" class="headerlink" title="1. 应用层概述"></a>1. 应用层概述</h2><ul>
<li><p>每个应用层协议都是为了解决某一应用问题，通过位于不同主机中的多个应用进程之间的通信和协同工作来完成</p>
<ul>
<li>两台主机通信实际是其对应的两个应用进程(process)在通信</li>
<li><strong>应用进程</strong>: 为解决具体应用问题而彼此通信的进程</li>
</ul>
</li>
<li><p>应用层的具体内容就是规定应用进程在通信时所遵循的协议</p>
<ul>
<li><p>客户&#x2F;服务器（C&#x2F;S, Client&#x2F;Server）方式</p>
<ul>
<li><p>C&#x2F;S方式可以是面向连接的，也可以是无连接的</p>
</li>
<li><p><strong>面向连接时，C&#x2F;S通信关系一旦建立，通信就是双向的</strong>，双方地位平等，都可发送和接收数据</p>
</li>
<li><p>客户进程在进行通信时临时成为客户，它也可在本地进行其它的计算；在打算通信时<strong>主动</strong>向远地服务器发起通信</p>
</li>
<li><p><strong>客户方必须知道服务器进程所在主机的IP地址才能发出服务请求</strong></p>
</li>
<li><p><strong>服务器进程</strong>被动等待并接受来自多个客户的通信请求, <strong>必须始终处于运行状态才有可能提供服务</strong></p>
</li>
</ul>
</li>
<li><p>对等（P2P，Peer to Peer）方式</p>
<ul>
<li><strong>对等方式</strong>是指两个进程在通信时并不区分服务的请求方和服务的提供方</li>
<li>只要两个主机都运行P2P软件，它们就可以进行平等、对等的通信</li>
<li>双方都可以下载对方存储在硬盘中的共享文档，如果权限允许的话</li>
<li>音频&#x2F;视频应用推动了P2P对等通信方式的发展（BitTorrent）</li>
<li>P2P方式从本质上看仍然是使用了C&#x2F;S方式，但强调的是通信过程中的对等，这时<strong>每一个P2P进程既是客户同时也是服务器</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2-域名系统"><a href="#2-域名系统" class="headerlink" title="2. 域名系统"></a>2. 域名系统</h2><h3 id="2-1-概述-1"><a href="#2-1-概述-1" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><ul>
<li><strong>域名系统</strong>（DNS，Domain Name System）是互联网重要的基础设施之一，向所有需要域名解析的应用提供服务，主要负责将<strong>可读性好的域名映射成IP地址</strong></li>
<li>Internet采用<strong>层次结构的命名树</strong>作为主机的名字，并使用<strong>分布式</strong>的域名系统 DNS。Internet的DNS是一个<strong>联机分布式数据库系统</strong></li>
<li>名字到域名的解析是由<strong>若干个</strong>域名服务器程序完成的。域名服务器程序在专设的结点上运行，相应的结点也称为<strong>名字服务器</strong>(Name Server)或<strong>域名服务器</strong>(Domain Name Server)</li>
</ul>
<h3 id="2-2-层次树状结构"><a href="#2-2-层次树状结构" class="headerlink" title="2.2 层次树状结构"></a>2.2 层次树状结构</h3><ul>
<li><p>顶级域名: com, cn, org, gov, edu</p>
</li>
<li><p>二级域名: edu</p>
</li>
<li><p>三级域名: fudan, pku</p>
</li>
<li><p>四级域名: www, cs, mail</p>
</li>
</ul>
<h3 id="2-3-域名解析过程"><a href="#2-3-域名解析过程" class="headerlink" title="2.3 域名解析过程"></a>2.3 域名解析过程</h3><ol>
<li>递归查询 “我不知道，直接帮你向上查” 较少使用</li>
<li>迭代查询 “我不知道，告诉你该找谁，你自己向上查” 通常使用</li>
</ol>
<h2 id="3-电子邮件"><a href="#3-电子邮件" class="headerlink" title="3. 电子邮件"></a>3. 电子邮件</h2><h3 id="3-1-邮件发送的常用协议"><a href="#3-1-邮件发送的常用协议" class="headerlink" title="3.1 邮件发送的常用协议"></a>3.1 邮件发送的常用协议</h3><ul>
<li><strong>简单邮件传输协议SMTP</strong>（Simple Mail Transfer Protocol）——邮件服务器之间传递邮件使用的协议</li>
<li>最终交付（邮件访问）协议:从邮件服务器的邮箱中获取邮件:<ul>
<li>POP3：Post Office Protocol-Version 3，第三版邮局协议</li>
<li>IMAP：Internet Message Access Protocol，Internet邮件访问协议</li>
<li>Webmail（HTTP）：基于Web的电子邮件</li>
</ul>
</li>
</ul>
<h3 id="3-2-Webmail"><a href="#3-2-Webmail" class="headerlink" title="3.2 Webmail"></a>3.2 Webmail</h3><p>Webmail——基于Web的电子邮件</p>
<ul>
<li>Webmail——基于Web的电子邮件</li>
<li>使用Web作为界面，用户代理就是普通的浏览器</li>
<li>用户及其远程邮箱之间的通信通过HTTP进行</li>
</ul>
<h2 id="4-WWW"><a href="#4-WWW" class="headerlink" title="4. WWW"></a>4. WWW</h2><h3 id="4-1-WWW体系结构与协议"><a href="#4-1-WWW体系结构与协议" class="headerlink" title="4.1 WWW体系结构与协议"></a>4.1 WWW体系结构与协议</h3><ul>
<li>WWW&#x3D;World Wide Web&#x3D;万维网</li>
<li>HTTP服务器和客户端，以及它们之间执行的HTTP协议</li>
</ul>
<p><strong>服务器</strong>:</p>
<ul>
<li>Web页面（HTML文档）：包含多种对象或链接</li>
<li>Web对象（包括：静态对象和动态对象）：可以是 HTML文档、 图像文件、视频文件、声音文件、脚本文件等</li>
<li>对象用URL（统一资源定位符）编址：协议类型:&#x2F;&#x2F;主机名:端口&#x2F;&#x2F;路径和文件名</li>
</ul>
<p><strong>客户端</strong>：</p>
<ul>
<li>发出请求、接收响应、解释HTML文档并显示</li>
<li>有些对象需要浏览器安装插件</li>
</ul>
<p><strong>统一资源定位器URL</strong>：</p>
<p>协议类型:&#x2F;&#x2F;主机名即服务器:端口&#x2F;路径和文件名</p>
<p>WWW协议:</p>
<h3 id="4-2-HTTP"><a href="#4-2-HTTP" class="headerlink" title="4.2 HTTP"></a>4.2 HTTP</h3><h4 id="4-2-1-概述"><a href="#4-2-1-概述" class="headerlink" title="4.2.1 概述"></a>4.2.1 概述</h4><ul>
<li>超文本传输协议HTTP（ HyperText Transfer Protocol）在传输层通常使用<strong>TCP</strong>协议，<strong>缺省使用TCP的80端口</strong></li>
<li>HTTP为<strong>无状态协议</strong>，服务器端不保留之前请求的状态信息<ul>
<li><strong>无状态协议</strong>：效率低、但简单</li>
<li><strong>有状态协议</strong>：维护状态相对复杂，需要维护历史信息，在客户端或服务器出现故障时，需要保持状态的一致性等</li>
</ul>
</li>
</ul>
<ul>
<li><strong>HTTP标准</strong><ul>
<li>HTTP&#x2F;1.0: RFC 1945（1996年）：<ul>
<li>无状态，非持久连接</li>
</ul>
</li>
<li>HTTP&#x2F;1.1: RFC 2616（1999年）：<ul>
<li>支持长连接和流水线机制</li>
<li>缓存策略优化、部分资源请求及断点续传</li>
</ul>
</li>
<li>HTTP&#x2F;2: RFC 7540（2015年）、RFC 8740（2020年）：<ul>
<li>增加SSL&#x2F;TLS（TLS 1.2）层，在TCP之上提供安全机制</li>
<li>目标：提高带宽利用率、降低延迟</li>
<li>增加二进制格式、TCP多路复用、头压缩、服务端推送等功能</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="4-2-2-Web安全与隐私-Cookie"><a href="#4-2-2-Web安全与隐私-Cookie" class="headerlink" title="4.2.2 Web安全与隐私: Cookie"></a>4.2.2 Web安全与隐私: Cookie</h4><p>HTTP <strong>无状态协议</strong>，服务器 <strong>用cookies保持用户状态</strong></p>
<ul>
<li><p>HTTP在响应的首部行里使用一个关键字头set-cookie：选择的cookie号具有唯一性</p>
</li>
<li><p>后继的HTTP请求中使用服务器响应分配的cookie</p>
</li>
<li><p>Cookie文件保存在用户的主机中，内容是服务器返回的一些附加信息，由用户主机中的浏览器管理</p>
</li>
<li><p>Web服务器建立后端数据库，记录用户信息，cookie作为关键字</p>
<p>例如：<br>Set-Cookie: SID&#x3D;31d4d96e407aad42; Path&#x3D;&#x2F;; Domain&#x3D;example.com<br>Cookie: SID&#x3D;31d4d96e407aad42</p>
</li>
</ul>
<p>Cookies一般包含5个字段:</p>
<ul>
<li>域指明Cookie来自何方，每个域为每个客户分配Cookie有数量限制</li>
<li>路径标明服务器的文件树中哪些部分可以使用该Cookie</li>
<li>内容采用“名字&#x3D;值”的形式，是Cookie存放内容的地方，可以达到4K容量，内容只是字符串，不是可执行程序</li>
<li>安全指示浏览器只向使用安全传输连接的服务器返回Cookie</li>
<li>过期时间</li>
</ul>
<ol>
<li><p>Cookie技术是把双刃剑，能分析用户喜好，向用户进行个性化推荐</p>
<ul>
<li><p>用Cookie在某网站标识用户信息，查找用户以前浏览网站记录</p>
</li>
<li><p>用Cookie记录用户购物清单</p>
</li>
<li><p>用Cookie可以保存4K内容，跟踪用户浏览网站的喜好</p>
</li>
<li><p>用Cookie跨站点跟踪用户点击广告</p>
</li>
</ul>
</li>
<li><p>Cookie技术是把双刃剑，也能跟踪用户网络浏览痕迹，泄露用户隐私</p>
<ul>
<li><p>Cookie跟踪用户以前浏览过哪些网站，跟踪用户频繁浏览哪类网站</p>
</li>
<li><p>Cookie收集用户信息，用户网络交互时关注的关键词</p>
</li>
</ul>
</li>
<li><p>Cookie容易嵌入间谍程序，这是个误区，Cookie文件保存的只是文本串，没有可执行程序</p>
<ul>
<li>用户可以设置浏览器限制使用Cookie</li>
</ul>
</li>
</ol>
<h2 id="5-流媒体"><a href="#5-流媒体" class="headerlink" title="5. 流媒体"></a>5. 流媒体</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>流媒体概念</p>
<ul>
<li>连续媒体（音视频）经压缩编码、数据打包后，经过网络发送给接收方</li>
<li>接收方对数据进行重组、解码和播放</li>
</ul>
<p>流媒体特性</p>
<ul>
<li>端到端时延约束</li>
<li>时序性约束：流媒体数据必须按照一定的顺序连续播放</li>
<li>具有一定程度的容错性：丢失部分数据包也可完成基本功能</li>
</ul>
<p>流媒体面临的挑战</p>
<ul>
<li>约束条件：网络特性（带宽有限、动态变化、延迟与抖动、丢失、异构性）</li>
<li>目标：流媒体服务质量要素（画质、启动延迟、平滑、交互性）</li>
<li>如何在“尽力服务”的网络传输条件下获得良好的视频质量？</li>
</ul>
<h3 id="5-2-DASH"><a href="#5-2-DASH" class="headerlink" title="5.2 DASH"></a>5.2 DASH</h3><p> DASH (Dynamic Adaptive Streaming over HTTP)</p>
<ul>
<li>动态自适应流媒体传输协议DASH，由MPEG组织制定的标准</li>
<li>类似协议：苹果HTTP Live Streaming（HLS）； Adobe的HTTP Dynamic Streaming（HDS）；微软的Microsoft Smooth Streaming</li>
</ul>
<p>DASH 基本思想</p>
<ul>
<li>完整视频被拆分为固定时长 (2s-10s) 的视频片段(segment)， 每段提供不同码率</li>
<li>视频片段与其对应的元文件（URL）一同存放于DASH服务器</li>
<li>客户端基于网络条件、缓冲大小等，对每个视频片段，自适应选择合适的视频码率来下</li>
<li>DASH中普遍使用的自适应码率ABR（Adaptive bitrate）</li>
</ul>
<h2 id="6-CDN"><a href="#6-CDN" class="headerlink" title="6. CDN"></a>6. CDN</h2><ul>
<li>Content Delivery Network，or Content Distribution Network 内容分发网络</li>
<li>一种Web缓存系统，<strong>靠近网络边缘（用户）提供内容服务</strong></li>
<li>目前提供更丰富的服务，包括静态内容、流媒体、用户上传视频等</li>
<li>主要优点<ul>
<li>降低响应时延，避免网络拥塞</li>
<li>避免原始服务器过载及防止DDoS攻击</li>
<li>分布式架构，具有良好的可扩展性</li>
<li>对用户透明，无需用户感知</li>
</ul>
</li>
</ul>
<p>关键问题： 怎样将内容（如从百万的视频中选定的内容）分发给同时发起访问的数百万用户？</p>
<p>解决机理：</p>
<ul>
<li><strong>DNS重定向实现CDN</strong><ul>
<li>将请求调度到较近或负载较轻的CDN服务器</li>
<li><strong>HTTP重定向请求内容</strong>，服务提供者返回清单CDN</li>
</ul>
</li>
<li><strong>DNS辅助实现CDN</strong><ul>
<li>负载均衡DNS负责决策CDN服务器选择</li>
<li>负载均衡DNS需要收集CDN服务器的位置和负载情况</li>
<li>如果找不到被请求的对象，需要从原始服务器获取</li>
</ul>
</li>
</ul>
<h2 id="7-P2P网络"><a href="#7-P2P网络" class="headerlink" title="7. P2P网络"></a>7. P2P网络</h2><p><strong>P2P文件分发协议：BitTorrent</strong></p>
<ul>
<li>文件被划分为256Kb大小的块</li>
<li>具有种子(torrents)的节点发送或接收文件</li>
<li>跟踪器tracker <ul>
<li>负责帮助节点获取其他节点的信息</li>
<li>用户从跟踪器获取节点列表</li>
</ul>
</li>
<li>种子torrent<ul>
<li>交换文件块的节点</li>
<li>用户同种子节点交换文件块</li>
</ul>
</li>
</ul>
<h2 id="8-远程登录Telnet"><a href="#8-远程登录Telnet" class="headerlink" title="8. 远程登录Telnet"></a>8. 远程登录Telnet</h2><ul>
<li>Telnet协议引入网络<strong>虚拟终端NVT</strong>（Network Virtual Terminal），使用一种专门的键盘定义来屏蔽不同计算机系统对键盘输入的差异性，同时定义客户进程与远程服务器进程之间的交互过程</li>
<li>NVT是Telnet协议定义的<strong>一组通用字符集</strong>，通过这种统一的数据表示方式，来保证不同硬件、软件与数据格式的终端与主机之间通信的兼容性</li>
<li>本地终端输入的字符首先由本地Telnet客户进程转换为NVT格式，通过网络将NVT格式的字符传输到远程主机，远程Telnet服务器进程再将NVT格式的字符转换为远程主机能够识别和处理的字符格式</li>
<li>使用Telnet协议在网络中传输的数据都是NVT格式，不同的用户终端与服务器进程均与本地终端格式无关</li>
</ul>
<p><strong>Telnet的工作过程</strong> (windows自带 默认关闭)  基于TCP连接</p>
<ul>
<li>本地Telnet客户进程与远程主机上的Telnet服务器进程建立TCP连接</li>
<li>将本地终端上输入的用户名和口令及以后输入的任何命令或字符以网络虚拟终端NVT格式传输给远程主机</li>
<li>将远程主机输出的NVT格式的数据转化为本地所接受的格式送回本地终端，包括输入命令回显和命令执行结果</li>
<li>本地终端对远程主机撤销连接，从而结束 Telnet远程登录过程</li>
</ul>
<h2 id="9-FTP"><a href="#9-FTP" class="headerlink" title="9. FTP"></a>9. FTP</h2><h3 id="9-1-概述"><a href="#9-1-概述" class="headerlink" title="9.1 概述"></a>9.1 概述</h3><p><strong>文件传输协议FTP(File Transfer Protocol)</strong> 是Internet上使用最广泛的应用层协议之一</p>
<ul>
<li>FTP提供交互式的访问，允许用户指明文件的类型与格式，并允许文件具有存取权限</li>
<li>FTP屏蔽了各计算机系统的细节，适用于在异构网络中任意计算机之间传送文件</li>
<li>RFC 959早在1985年就已经成为Internet的正式标准</li>
<li>FTP使用C&#x2F;S方式实现</li>
</ul>
<h3 id="9-2-工作过程"><a href="#9-2-工作过程" class="headerlink" title="9.2 工作过程"></a>9.2 工作过程</h3><ul>
<li>服务器主进程打开TCP21端口，等待客户进程发出的连接请求</li>
<li>客户可以用分配的任意一个本地端口号与服务器进程的TCP21端口进行连接</li>
<li>客户请求到来时，服务器主进程启动从属进程来处理客户进程发来的请求</li>
<li>服务器从属进程对客户进程的请求处理完毕后即终止，但从属进程在运行期间根据需要还可能创建其他一些子进程</li>
<li>服务器主进程返回，继续等待接收其他客户进程发来的连接请求，服务器主进程与从属进程并行工作</li>
</ul>
<p><strong>FTP的两个端口与两个连接</strong></p>
<ul>
<li><strong>控制连接</strong>在整个会话期间一直保持，客户进程发出的文件传输请求通过控制连接发送给<strong>服务器控制进程（工作在TCP21端口）</strong>，但控制连接不用来传输文件</li>
<li>服务器控制进程在接收到客户进程发送来的文件传输请求后就创建<strong>数据传输进程（工作在TCP20端口）,数据连接</strong></li>
<li>数据连接用来连接客户进程和服务器数据传输进程，实际完成文件的传输。服务器数据传输进程在文件传输完毕后关闭数据连接并结束运行</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>贪心法</title>
    <url>/2022/04/19/%E8%B4%AA%E5%BF%83%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Greedy-Algorithm选编"><a href="#Greedy-Algorithm选编" class="headerlink" title="Greedy Algorithm选编"></a>Greedy Algorithm选编</h1><h2 id="代码随想录"><a href="#代码随想录" class="headerlink" title="代码随想录"></a>代码随想录</h2><h3 id="贪心法原理"><a href="#贪心法原理" class="headerlink" title="贪心法原理"></a>贪心法原理</h3><p><strong>贪心的本质是选择每一阶段的局部最优，从而达到全局最优</strong>。</p>
<p>这么说有点抽象，来举一个例子：</p>
<p>例如，有一堆钞票，你可以拿走十张，如果想达到最大的金额，你要怎么拿？</p>
<p>指定每次拿最大的，最终结果就是拿走最大数额的钱。</p>
<p>每次拿最大的就是局部最优，最后拿走最大数额的钱就是推出全局最优。</p>
<p>再举一个例子如果是 有一堆盒子，你有一个背包体积为n，如何把背包尽可能装满，如果还每次选最大的盒子，就不行了。这时候就需要动态规划。</p>
<h3 id="55-Jump-Game"><a href="#55-Jump-Game" class="headerlink" title="55. Jump Game"></a><a href="https://leetcode.cn/problems/jump-game/">55. Jump Game</a></h3><h4 id="法一：DP"><a href="#法一：DP" class="headerlink" title="法一：DP"></a>法一：DP</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canJump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">boolean</span>[] dp=<span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n-<span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[i])&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= nums[i]; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i+j&gt;=n)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i+j]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="法二：Greedy"><a href="#法二：Greedy" class="headerlink" title="法二：Greedy"></a>法二：Greedy</h4><p><strong>贪心算法局部最优解：每次取最大跳跃步数（取最大覆盖范围），整体最优解：最后得到整体最大覆盖范围，看是否能到终点</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canJump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> cover=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= cover; i++) &#123;</span><br><span class="line">        cover=Math.max(cover,i+nums[i]);</span><br><span class="line">        <span class="keyword">if</span>(cover&gt;=nums.length-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="45-Jump-Game-II"><a href="#45-Jump-Game-II" class="headerlink" title="45. Jump Game II"></a><a href="https://leetcode.cn/problems/jump-game-ii/">45. Jump Game II</a></h3><p>You can assume that you can always reach the last index.</p>
<h4 id="法一：DP-1"><a href="#法一：DP-1" class="headerlink" title="法一：DP"></a>法一：DP</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode45</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">jump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        <span class="type">int</span>[] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= nums[<span class="number">0</span>]; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=n)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= nums[i]; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(i+j&gt;=n)&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(dp[i+j]==<span class="number">0</span>)&#123;<span class="comment">//第一次抵达则赋初值</span></span><br><span class="line">                        dp[i+j]=dp[i]+<span class="number">1</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;<span class="comment">//之前已抵达过则保留最小值（次数）</span></span><br><span class="line">                        dp[i+j]=Math.min(dp[i+j],dp[i]+<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="法二：Greedy-1"><a href="#法二：Greedy-1" class="headerlink" title="法二：Greedy"></a>法二：Greedy</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">jump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 当前覆盖的最远距离下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 下一步覆盖的最远距离下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= end &amp;&amp; end &lt; nums.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            temp = Math.max(temp, i + nums[i]);	<span class="comment">//更新再跳一步的最远距离</span></span><br><span class="line">            <span class="comment">// 可达位置的改变次数就是跳跃次数</span></span><br><span class="line">            <span class="keyword">if</span> (i == end) &#123;	<span class="comment">//i已经到达当前范围极限，且当前范围还没覆盖到终点，必须再跳一步</span></span><br><span class="line">                end = temp;</span><br><span class="line">                result++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="135-Candy"><a href="#135-Candy" class="headerlink" title="135. Candy"></a><a href="https://leetcode.cn/problems/candy/">135. Candy</a></h3><ul>
<li>Each child must have at least one candy.</li>
<li>Children with a higher rating get more candies than their neighbors.</li>
</ul>
<p>好题！</p>
<p>先从左向右，再从右向左</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode135</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">candy</span><span class="params">(<span class="type">int</span>[] ratings)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n=ratings.length;</span><br><span class="line">        <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(arr,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//先满足大于左孩子，正序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(ratings[i]&gt;ratings[i-<span class="number">1</span>])&#123;</span><br><span class="line">                arr[i]=arr[i-<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在此基础上，再满足大于右孩子，逆序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n-<span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(ratings[i]&gt;ratings[i+<span class="number">1</span>])&#123;</span><br><span class="line">                arr[i]=Math.max(arr[i+<span class="number">1</span>]+<span class="number">1</span>,arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(arr).sum();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="860-Lemonade-Change"><a href="#860-Lemonade-Change" class="headerlink" title="860. Lemonade Change"></a><a href="https://leetcode.cn/problems/lemonade-change/">860. Lemonade Change</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode860</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lemonadeChange</span><span class="params">(<span class="type">int</span>[] bills)</span> &#123;</span><br><span class="line">        <span class="type">int</span> five=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ten=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> bill : bills) &#123;</span><br><span class="line">            <span class="keyword">if</span>(bill==<span class="number">5</span>)&#123;</span><br><span class="line">                five++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(bill==<span class="number">10</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(five==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                five--;</span><br><span class="line">                ten++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//Greedy: 有ten优先找ten，因为five更万能</span></span><br><span class="line">                <span class="keyword">if</span>(ten&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">                    ten--;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(five&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">                        five-=<span class="number">2</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(five&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    five--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="1005-Maximize-Sum-Of-Array-After-K-Negations"><a href="#1005-Maximize-Sum-Of-Array-After-K-Negations" class="headerlink" title="1005. Maximize Sum Of Array After K Negations"></a><a href="https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations/">1005. Maximize Sum Of Array After K Negations</a></h3><p>那么本题的解题步骤为：</p>
<ul>
<li>第一步：将数组按照绝对值大小从大到小排序，<strong>注意要按照绝对值的大小</strong></li>
<li>第二步：从前向后遍历，遇到负数将其变为正数，同时K–</li>
<li>第三步：如果K还大于0，那么反复转变数值最小的元素，将K用完</li>
<li>第四步：求和</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestSumAfterKNegations</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="comment">// 将数组按照绝对值大小从大到小排序，注意要按照绝对值的大小</span></span><br><span class="line">    nums = IntStream.of(nums)</span><br><span class="line">            .boxed()</span><br><span class="line">            .sorted((o1, o2) -&gt; Math.abs(o2) - Math.abs(o1))</span><br><span class="line">            .mapToInt(Integer::intValue).toArray();</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            nums[i]=-nums[i];</span><br><span class="line">            k--;</span><br><span class="line">            <span class="keyword">if</span>(k==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((k&amp;<span class="number">1</span>)==<span class="number">1</span>)&#123;</span><br><span class="line">        nums[n-<span class="number">1</span>]=-nums[n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(nums).sum();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="134-Gas-Station"><a href="#134-Gas-Station" class="headerlink" title="134. Gas Station"></a><a href="https://leetcode.cn/problems/gas-station/">134. Gas Station</a></h3><h4 id="法一：暴力模拟"><a href="#法一：暴力模拟" class="headerlink" title="法一：暴力模拟"></a>法一：暴力模拟</h4><p>超时！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">canCompleteCircuit</span><span class="params">(<span class="type">int</span>[] gas, <span class="type">int</span>[] cost)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=gas.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> rest=gas[i]-cost[i];</span><br><span class="line">        <span class="type">int</span> index=(i+<span class="number">1</span>)%n;</span><br><span class="line">        <span class="keyword">while</span>(rest&gt;=<span class="number">0</span> &amp;&amp; index!=i)&#123;</span><br><span class="line">            rest+=gas[index];</span><br><span class="line">            rest-=cost[index];</span><br><span class="line">            index=(index+<span class="number">1</span>)%n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rest&gt;=<span class="number">0</span> &amp;&amp; index==i)&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="法二：Greedy-2"><a href="#法二：Greedy-2" class="headerlink" title="法二：Greedy"></a>法二：Greedy</h4><ul>
<li><p><strong>局部最优：当前累加rest[j]的和curSum一旦小于0，起始位置至少要是j+1，因为从j开始一定不行。</strong></p>
</li>
<li><p><strong>全局最优：找到可以跑一圈的起始位置</strong>。</p>
</li>
</ul>
<p>[^心路历程]: 有一个环形路上有n个站点； 每个站点都有一个好人或一个坏人； 好人会给你钱，坏人会收你一定的过路费，如果你带的钱不够付过路费，坏人会跳起来把你砍死； 问：从哪个站点出发，能绕一圈活着回到出发点?首先考虑一种情况：如果全部好人给你 的钱加起来 小于 坏人收的过路费之和，那么总有一次你的钱不够付过路费，你的结局注定会被砍死。假如你随机选一点 start 出发，那么你肯定会选一个有好人的站点开始，因为开始的时候你没有钱，遇到坏人只能被砍死；现在你在start出发，走到了某个站点end，被end站点的坏人砍死了，说明你在 [start, end) 存的钱不够付 end点坏人的过路费，因为start站点是个好人，所以在 (start, end) 里任何一点出发，你存的钱会比现在还少，还是会被end站点的坏人砍死；于是你重新读档，聪明的选择从 end+1点出发，继续你悲壮的征程； 终于有一天，你发现自己走到了尽头（下标是n-1)的站点而没有被砍死； 此时你犹豫了一下，那我继续往前走，身上的钱够不够你继续走到出发点Start?当然可以，因为开始已经判断过，<strong>好人给你的钱数是大于等于坏人要的过路费的，你现在攒的钱完全可以应付 [0, start) 这一段坏人向你收的过路费。(此处存疑)</strong> 这时候你的嘴角微微上扬，眼眶微微湿润，因为你已经知道这个世界的终极奥秘：Start就是这个问题的答案。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">canCompleteCircuit</span><span class="params">(<span class="type">int</span>[] gas, <span class="type">int</span>[] cost)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=gas.length;</span><br><span class="line">    <span class="type">int</span> cur=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> total=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> start=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cur+=gas[i]-cost[i];</span><br><span class="line">        total+=gas[i]-cost[i];</span><br><span class="line">        <span class="keyword">if</span>(cur&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            start=i+<span class="number">1</span>;</span><br><span class="line">            cur=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(total&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> start;	<span class="comment">//If there exists a solution, it is guaranteed to be unique</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="376-Wiggle-Subsequence"><a href="#376-Wiggle-Subsequence" class="headerlink" title="376. Wiggle Subsequence"></a><a href="https://leetcode-cn.com/problems/wiggle-subsequence/">376. Wiggle Subsequence</a></h3><h4 id="Greedy解法"><a href="#Greedy解法" class="headerlink" title="Greedy解法"></a>Greedy解法</h4><p><strong>局部最优：删除单调坡度上的节点（不包括单调坡度两端的节点），那么这个坡度就可以有两个局部峰值</strong>。</p>
<p><strong>整体最优：整个序列有最多的局部峰值，从而达到最长摆动序列</strong>。</p>
<p>局部最优推出全局最优，并举不出反例，那么试试贪心！</p>
<p>（为方便表述，以下说的峰值都是指局部峰值）</p>
<p><strong>实际操作上，其实连删除的操作都不用做，因为题目要求的是最长摆动子序列的长度，所以只需要统计数组的峰值数量就可以了（相当于是删除单一坡度上的节点，然后统计长度）</strong></p>
<p><strong>这就是贪心所贪的地方，让峰值尽可能的保持峰值，然后删除单一坡度上的节点</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">wiggleMaxLength</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums.length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当前差值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">curDiff</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//上一个差值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">preDiff</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="comment">//得到当前差值</span></span><br><span class="line">            curDiff = nums[i] - nums[i - <span class="number">1</span>];</span><br><span class="line">            <span class="comment">//直到当前差值和上一个差值为一正一负，此时wiggle sequence长度增加，更新preDiff和currDiff,并且count++</span></span><br><span class="line">            <span class="comment">//等于0的情况表示初始时的preDiff</span></span><br><span class="line">            <span class="keyword">if</span> ((curDiff &gt; <span class="number">0</span> &amp;&amp; preDiff &lt;= <span class="number">0</span>) || (curDiff &lt; <span class="number">0</span> &amp;&amp; preDiff &gt;= <span class="number">0</span>)) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                preDiff = curDiff;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：$O(n)$</li>
<li>空间复杂度：$O(1)$</li>
</ul>
<h4 id="Dynamic-Programming基础版"><a href="#Dynamic-Programming基础版" class="headerlink" title="Dynamic Programming基础版"></a>Dynamic Programming基础版</h4><p>考虑用动态规划的思想来解决这个问题。</p>
<p>很容易可以发现，对于我们当前考虑的这个数，要么是作为山峰（即nums[i] &gt; nums[i-1]），要么是作为山谷（即nums[i] &lt; nums[i - 1]）。</p>
<ul>
<li>设dp状态<code>dp[i][0]</code>，表示考虑前i个数，第i个数作为山峰的摆动子序列的最长长度</li>
<li>设dp状态<code>dp[i][1]</code>，表示考虑前i个数，第i个数作为山谷的摆动子序列的最长长度</li>
</ul>
<p>则转移方程为：</p>
<ul>
<li><code>dp[i][0] = max(dp[i][0], dp[j][1] + 1)</code>，其中<code>0 &lt; j &lt; i</code>且<code>nums[j] &lt; nums[i]</code>，表示将nums[i]接到前面某个山谷后面，作为山峰。</li>
<li><code>dp[i][1] = max(dp[i][1], dp[j][0] + 1)</code>，其中<code>0 &lt; j &lt; i</code>且<code>nums[j] &gt; nums[i]</code>，表示将nums[i]接到前面某个山峰后面，作为山谷。</li>
</ul>
<p>初始状态：</p>
<p>由于一个数可以接到前面的某个数后面，也可以以自身为子序列的起点，所以初始状态为：<code>dp[0][0] = dp[0][1] = 1</code>。</p>
<ul>
<li>时间复杂度：$O(n^2)$</li>
<li>空间复杂度：$O(n)$</li>
</ul>
<h4 id="Dynamic-Programming进阶版"><a href="#Dynamic-Programming进阶版" class="headerlink" title="Dynamic Programming进阶版"></a>Dynamic Programming进阶版</h4><p>可以用两棵线段树来维护区间的最大值</p>
<ul>
<li>每次更新<code>dp[i][0]</code>，则在<code>tree1</code>的<code>nums[i]</code>位置值更新为<code>dp[i][0]</code></li>
<li>每次更新<code>dp[i][1]</code>，则在<code>tree2</code>的<code>nums[i]</code>位置值更新为<code>dp[i][1]</code></li>
<li>则dp转移方程中就没有必要j从0遍历到i-1，可以直接在线段树中查询指定区间的值即可。</li>
</ul>
<p>时间复杂度：$O(n\log n)$</p>
<p>空间复杂度：$O(n)$</p>
<h3 id="53-Maximum-Subarray"><a href="#53-Maximum-Subarray" class="headerlink" title="53. Maximum Subarray"></a><a href="https://leetcode-cn.com/problems/maximum-subarray/">53. Maximum Subarray</a></h3><h4 id="Greedy解法-1"><a href="#Greedy解法-1" class="headerlink" title="Greedy解法"></a>Greedy解法</h4><p>局部最优：当前“连续和”为负数的时候立刻放弃，从下一个元素重新计算“连续和”，因为负数加上下一个元素 “连续和”只会越来越小。</p>
<p>全局最优：选取最大“连续和”</p>
<p><strong>局部最优的情况下，并记录最大的“连续和”，可以推出全局最优</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span> max=Integer.MIN_VALUE;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        count+=nums[i];</span><br><span class="line">        <span class="keyword">if</span>(count&gt;max)&#123;</span><br><span class="line">            max=count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            count=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="DP解法"><a href="#DP解法" class="headerlink" title="DP解法"></a>DP解法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        <span class="type">int</span>[] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        dp[<span class="number">0</span>]=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> max=dp[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i-<span class="number">1</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                dp[i]=dp[i-<span class="number">1</span>]+nums[i];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dp[i]=nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            max=Math.max(max,dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="labuladong"><a href="#labuladong" class="headerlink" title="labuladong"></a>labuladong</h2><p>什么是贪心算法呢？贪心算法可以认为是动态规划算法的一个特例，相比动态规划，使用贪心算法需要满足更多的条件（贪心选择性质），但是效率比动态规划要高。</p>
<p>比如说一个算法问题使用暴力解法需要指数级时间，如果能使用动态规划消除重叠子问题，就可以降到多项式级别的时间，如果满足贪心选择性质，那么可以进一步降低时间复杂度，达到线性级别的。</p>
<p>什么是贪心选择性质呢，简单说就是：每一步都做出一个局部最优的选择，最终的结果就是全局最优。注意哦，这是一种特殊性质，其实只有一部分问题拥有这个性质。</p>
<p>比如你面前放着 100 张人民币，你只能拿十张，怎么才能拿最多的面额？显然每次选择剩下钞票中面值最大的一张，最后你的选择一定是最优的。</p>
<p>然而，大部分问题明显不具有贪心选择性质。比如打斗地主，对手出对儿三，按照贪心策略，你应该出尽可能小的牌刚好压制住对方，但现实情况我们甚至可能会出王炸。这种情况就不能用贪心算法，而得使用动态规划解决。</p>
<h3 id="435-Non-overlapping-Intervals"><a href="#435-Non-overlapping-Intervals" class="headerlink" title="435. Non-overlapping Intervals"></a><a href="https://leetcode.cn/problems/non-overlapping-intervals/">435. Non-overlapping Intervals</a></h3><p>区间调度问题    Interval Scheduling</p>
<p>最多有几个不冲突的区间？</p>
<p>正确的思路其实很简单，可以分为以下三步：</p>
<ol>
<li><p>从区间集合 <code>intvs</code> 中选择一个区间 <code>x</code>，这个 <code>x</code> 是在当前所有区间中<strong>结束最早的</strong>（<code>end</code> 最小）。</p>
</li>
<li><p>把所有与 <code>x</code> 区间相交的区间从区间集合 <code>intvs</code> 中删除。</p>
</li>
<li><p>重复步骤 1 和 2，直到 <code>intvs</code> 为空为止。之前选出的那些 <code>x</code> 就是最大不相交子集。</p>
</li>
</ol>
<p><em>make the rest of the intervals non-overlapping</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode435</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">eraseOverlapIntervals</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n=intervals.length;</span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] o1, <span class="type">int</span>[] o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1[<span class="number">1</span>]-o2[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> count=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> end=intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] interval : intervals) &#123;</span><br><span class="line">            <span class="type">int</span> start=interval[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(start&gt;=end)&#123;<span class="comment">//已由end升序;若start&lt;end,则重叠,不选取(从集合中删去);否则选为新的区间x</span></span><br><span class="line">                count++;</span><br><span class="line">                end=interval[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n-count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>注意：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.sort(intvs, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span>[] b)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">1</span>] - b[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">//以上写法可能出现溢出</span></span><br><span class="line"><span class="comment">//以下写法更保险</span></span><br><span class="line">Arrays.sort(points, (o1,o2)-&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(o1[<span class="number">1</span>]&gt;o2[<span class="number">1</span>]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(o1[<span class="number">1</span>]&lt;o2[<span class="number">1</span>]) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>





<h3 id="452-Minimum-Number-of-Arrows-to-Burst-Balloons"><a href="#452-Minimum-Number-of-Arrows-to-Burst-Balloons" class="headerlink" title="452. Minimum Number of Arrows to Burst Balloons"></a><a href="https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/">452. Minimum Number of Arrows to Burst Balloons</a></h3><p>依然是求最大不重叠区间数</p>
<p>每个不重叠区间都需要一个箭，每多一个不重叠区间，就多需要一根箭</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode452</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMinArrowShots</span><span class="params">(<span class="type">int</span>[][] points)</span> &#123;</span><br><span class="line">        Arrays.sort(points, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] o1, <span class="type">int</span>[] o2)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(o1[<span class="number">1</span>]&gt;o2[<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(o1[<span class="number">1</span>]&lt;o2[<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> count=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> end=points[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] point : points) &#123;</span><br><span class="line">            <span class="type">int</span> start=point[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(start&gt;end)&#123;</span><br><span class="line">                count++;</span><br><span class="line">                end=point[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="自选"><a href="#自选" class="headerlink" title="自选"></a>自选</h2><h3 id="605-Can-Place-Flowers"><a href="#605-Can-Place-Flowers" class="headerlink" title="605. Can Place Flowers"></a>605. Can Place Flowers</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPlaceFlowers</span><span class="params">(<span class="type">int</span>[] flowerbed, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len=flowerbed.length;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(flowerbed[i]==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> leftPlanted=i&gt;<span class="number">0</span> &amp;&amp; flowerbed[i-<span class="number">1</span>]==<span class="number">1</span>;</span><br><span class="line">        <span class="type">boolean</span> rightPlanted=i&lt;len-<span class="number">1</span> &amp;&amp; flowerbed[i+<span class="number">1</span>]==<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!leftPlanted &amp;&amp; !rightPlanted)&#123;</span><br><span class="line">            flowerbed[i]=<span class="number">1</span>;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span>(count&gt;=n)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>greedy_algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>DFS(2)</title>
    <url>/2022/11/14/DFS-2/</url>
    <content><![CDATA[<h1 id="DFS选编（2）"><a href="#DFS选编（2）" class="headerlink" title="DFS选编（2）"></a>DFS选编（2）</h1><h2 id="472-Concatenated-Words"><a href="#472-Concatenated-Words" class="headerlink" title="472. Concatenated Words"></a>472. Concatenated Words</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;String&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">findAllConcatenatedWordsInADict</span><span class="params">(String[] words)</span> &#123;</span><br><span class="line">    List&lt;String&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">        set.add(word);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length()-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//[0,i]</span></span><br><span class="line">            <span class="keyword">if</span>(set.contains(word.substring(<span class="number">0</span>,i+<span class="number">1</span>))</span><br><span class="line">                    &amp;&amp; dfs(word,i+<span class="number">1</span>))&#123;</span><br><span class="line">                res.add(word);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(String s, <span class="type">int</span> start)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start==s.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(set.contains(s.substring(start,i+<span class="number">1</span>)) &amp;&amp; dfs(s,i+<span class="number">1</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="508-Most-Frequent-Subtree-Sum"><a href="#508-Most-Frequent-Subtree-Sum" class="headerlink" title="508. Most Frequent Subtree Sum"></a>508. Most Frequent Subtree Sum</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  <span class="type">int</span> max=Integer.MIN_VALUE;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] findFrequentTreeSum(TreeNode root) &#123;</span><br><span class="line">    dfs(root);</span><br><span class="line">    List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Integer i : map.keySet()) &#123;</span><br><span class="line">        <span class="keyword">if</span>(map.get(i)==max)&#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[list.size()];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">        res[i]=list.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">dfs</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l=dfs(node.left);</span><br><span class="line">    <span class="type">int</span> r=dfs(node.right);</span><br><span class="line">    <span class="type">int</span> sum=l+r+node.val;</span><br><span class="line">    map.put(sum,map.getOrDefault(sum,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> freq=map.get(sum);</span><br><span class="line">    max=Math.max(max,freq);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="529-Minesweeper"><a href="#529-Minesweeper" class="headerlink" title="529. Minesweeper"></a>529. Minesweeper</h2><p>注意adjacent的定义：</p>
<ul>
<li><code>&#39;B&#39;</code> represents a revealed blank square that has no adjacent mines (i.e., <strong>above, below, left, right, and all 4 diagonals</strong>)</li>
</ul>
<h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS:"></a>DFS:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="type">int</span> row;</span><br><span class="line">    <span class="type">int</span> col;</span><br><span class="line">    <span class="type">char</span>[][] board;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span>[][] updateBoard(<span class="type">char</span>[][] board, <span class="type">int</span>[] click) &#123;</span><br><span class="line">        row=board.length;</span><br><span class="line">        col=board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="built_in">this</span>.board=board;</span><br><span class="line">        <span class="type">int</span> i=click[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> j=click[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(board[i][j]==<span class="string">&#x27;M&#x27;</span>)&#123;</span><br><span class="line">            board[i][j]=<span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            dfs(i,j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> board;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* [[&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;],</span></span><br><span class="line"><span class="comment">        [&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;M&quot;],</span></span><br><span class="line"><span class="comment">        [&quot;E&quot;,&quot;E&quot;,&quot;M&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;],</span></span><br><span class="line"><span class="comment">        [&quot;M&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;],</span></span><br><span class="line"><span class="comment">        [&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;],</span></span><br><span class="line"><span class="comment">        [&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;],</span></span><br><span class="line"><span class="comment">        [&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;],</span></span><br><span class="line"><span class="comment">        [&quot;E&quot;,&quot;E&quot;,&quot;M&quot;,&quot;M&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;,&quot;E&quot;]]</span></span><br><span class="line"><span class="comment">[0,0]*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=row || j&lt;<span class="number">0</span> || j&gt;=col || board[i][j]!=<span class="string">&#x27;E&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x=i-<span class="number">1</span>; x&lt;=i+<span class="number">1</span>; x++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> y=j-<span class="number">1</span>; y&lt;=j+<span class="number">1</span>; y++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(x&gt;=<span class="number">0</span> &amp;&amp; x&lt;row &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;col &amp;&amp; board[x][y]==<span class="string">&#x27;M&#x27;</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</span><br><span class="line">            board[i][j]=<span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">            dfs(i-<span class="number">1</span>,j-<span class="number">1</span>);</span><br><span class="line">            dfs(i-<span class="number">1</span>,j);</span><br><span class="line">            dfs(i-<span class="number">1</span>,j+<span class="number">1</span>);</span><br><span class="line">            dfs(i,j-<span class="number">1</span>);</span><br><span class="line">            dfs(i,j+<span class="number">1</span>);</span><br><span class="line">            dfs(i+<span class="number">1</span>,j-<span class="number">1</span>);</span><br><span class="line">            dfs(i+<span class="number">1</span>,j);</span><br><span class="line">            dfs(i+<span class="number">1</span>,j+<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            board[i][j]=(<span class="type">char</span>)(<span class="string">&#x27;0&#x27;</span>+count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS:"></a>BFS:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">char</span>[][] updateBoard(<span class="type">char</span>[][] board, <span class="type">int</span>[] click) &#123;</span><br><span class="line">    <span class="type">int</span> row=board.length;</span><br><span class="line">    <span class="type">int</span> col=board[<span class="number">0</span>].length;</span><br><span class="line">    Deque&lt;<span class="type">int</span>[]&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(board[click[<span class="number">0</span>]][click[<span class="number">1</span>]]==<span class="string">&#x27;M&#x27;</span>)&#123;</span><br><span class="line">        board[click[<span class="number">0</span>]][click[<span class="number">1</span>]]=<span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        q.offer(click);</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span>[] cur=q.poll();</span><br><span class="line">            <span class="type">int</span> i=cur[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> j=cur[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(board[i][j]!=<span class="string">&#x27;E&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> x=i-<span class="number">1</span>; x&lt;=i+<span class="number">1</span>; x++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> y=j-<span class="number">1</span>; y&lt;=j+<span class="number">1</span>; y++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(x&gt;=<span class="number">0</span> &amp;&amp; x&lt;row &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;col</span><br><span class="line">                            &amp;&amp; board[x][y]==<span class="string">&#x27;M&#x27;</span>)&#123;</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</span><br><span class="line">                board[i][j]=<span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> x=i-<span class="number">1</span>; x&lt;=i+<span class="number">1</span>; x++)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> y=j-<span class="number">1</span>; y&lt;=j+<span class="number">1</span>; y++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(x&gt;=<span class="number">0</span> &amp;&amp; x&lt;row &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;col</span><br><span class="line">                                &amp;&amp; board[x][y]==<span class="string">&#x27;E&#x27;</span>)&#123;</span><br><span class="line">                            q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x,y&#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                board[i][j]=(<span class="type">char</span>)(<span class="string">&#x27;0&#x27;</span>+count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> board;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="545-Boundary-of-Binary-Tree"><a href="#545-Boundary-of-Binary-Tree" class="headerlink" title="545. Boundary of Binary Tree"></a>545. Boundary of Binary Tree</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; res=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">boundaryOfBinaryTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    res.add(root.val);</span><br><span class="line">    leftBoundary(root.left);</span><br><span class="line">    leaf(root.left);</span><br><span class="line">    leaf(root.right);</span><br><span class="line">    rightBoundary(root.right);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">leaf</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node.left==<span class="literal">null</span> &amp;&amp; node.right==<span class="literal">null</span>)&#123;</span><br><span class="line">        res.add(node.val);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    leaf(node.left);</span><br><span class="line">    leaf(node.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">leftBoundary</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">null</span> || node.left==<span class="literal">null</span> &amp;&amp; node.right==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res.add(node.val);</span><br><span class="line">    <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">        leftBoundary(node.left);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        leftBoundary(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">rightBoundary</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">null</span> || node.left==<span class="literal">null</span> &amp;&amp; node.right==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">        rightBoundary(node.right);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        rightBoundary(node.left);</span><br><span class="line">    &#125;</span><br><span class="line">    res.add(node.val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="549-Binary-Tree-Longest-Consecutive-Sequence-II"><a href="#549-Binary-Tree-Longest-Consecutive-Sequence-II" class="headerlink" title="549. Binary Tree Longest Consecutive Sequence II"></a>549. Binary Tree Longest Consecutive Sequence II</h2><p>好题！需要返回两个值怎么办？</p>
<ul>
<li>返回arr</li>
<li>arr[0] 为increasing consecutive sequence的长度</li>
<li>arr[1] 为decreasing consecutive sequence的长度</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> max=<span class="number">1</span>;</span><br><span class="line">  <span class="comment">//[icr,dcr]</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestConsecutive</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] dfs(TreeNode node)&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> icr=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> dcr=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="type">int</span>[] l=dfs(node.left);</span><br><span class="line">        <span class="keyword">if</span>(node.val==node.left.val+<span class="number">1</span>)&#123;</span><br><span class="line">            icr+=l[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.val==node.left.val-<span class="number">1</span>)&#123;</span><br><span class="line">            dcr+=l[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="type">int</span>[] r=dfs(node.right);</span><br><span class="line">        <span class="keyword">if</span>(node.val==node.right.val+<span class="number">1</span>)&#123;</span><br><span class="line">            icr=Math.max(icr,<span class="number">1</span>+r[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.val==node.right.val-<span class="number">1</span>)&#123;</span><br><span class="line">            dcr=Math.max(dcr,<span class="number">1</span>+r[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    max=Math.max(max,icr+dcr-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;icr,dcr&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="563-Binary-Tree-Tilt"><a href="#563-Binary-Tree-Tilt" class="headerlink" title="563. Binary Tree Tilt"></a>563. Binary Tree Tilt</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findTilt</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">     sum(root);</span><br><span class="line">     <span class="keyword">return</span> res;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   </span><br><span class="line">     <span class="keyword">if</span>(node.left==<span class="literal">null</span> &amp;&amp; node.right==<span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="type">int</span> val=node.val;</span><br><span class="line">           node.val=<span class="number">0</span>;</span><br><span class="line">           <span class="keyword">return</span> val;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="type">int</span> l=sum(node.left);</span><br><span class="line">     <span class="type">int</span> r=sum(node.right);</span><br><span class="line">     <span class="type">int</span> val=node.val;</span><br><span class="line">     node.val=Math.abs(l-r);</span><br><span class="line">     res+=node.val;</span><br><span class="line">     <span class="keyword">return</span> l+r+val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="565-Array-Nesting"><a href="#565-Array-Nesting" class="headerlink" title="565. Array Nesting"></a>565. Array Nesting</h2><h3 id="Time-Limit-Exceeded"><a href="#Time-Limit-Exceeded" class="headerlink" title="Time Limit Exceeded"></a>Time Limit Exceeded</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">arrayNesting</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        dfs(nums,nums[i],<span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length],<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> cur, <span class="type">boolean</span>[] visited, <span class="type">int</span> l)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(visited[cur])&#123;</span><br><span class="line">        max=Math.max(max,l);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    visited[cur]=<span class="literal">true</span>;</span><br><span class="line">    dfs(nums,nums[cur],visited,l+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="无需重复考虑元素："><a href="#无需重复考虑元素：" class="headerlink" title="无需重复考虑元素："></a>无需重复考虑元素：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">arrayNesting</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    HashSet&lt;Integer&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        dfs(nums,nums[i],set,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> cur, Set&lt;Integer&gt; visited, <span class="type">int</span> l)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(visited.contains(cur))&#123;</span><br><span class="line">        max=Math.max(max,l);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    visited.add(cur);</span><br><span class="line">    dfs(nums,nums[cur],visited,l+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="572-Subtree-of-Another-Tree"><a href="#572-Subtree-of-Another-Tree" class="headerlink" title="572. Subtree of Another Tree"></a>572. Subtree of Another Tree</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubtree</span><span class="params">(TreeNode root, TreeNode subRoot)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">if</span>(isEqual(root,subRoot))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isSubtree(root.left,subRoot) || isSubtree(root.right,subRoot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEqual</span><span class="params">(TreeNode root, TreeNode subRoot)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span> &amp;&amp; subRoot==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span> || subRoot==<span class="literal">null</span> || root.val!=subRoot.val)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isEqual(root.left,subRoot.left) &amp;&amp; isEqual(root.right,subRoot.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="589-N-ary-Tree-Preorder-Traversal"><a href="#589-N-ary-Tree-Preorder-Traversal" class="headerlink" title="589. N-ary Tree Preorder Traversal"></a>589. N-ary Tree Preorder Traversal</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorder</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    Deque&lt;Node&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">        <span class="comment">//root, 0,1,2</span></span><br><span class="line">        <span class="comment">//2,1,0, root</span></span><br><span class="line">        Node node=stack.pop();</span><br><span class="line">        <span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> node.children.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                stack.push(node.children.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(node);</span><br><span class="line">            stack.push(<span class="literal">null</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            node=stack.poll();</span><br><span class="line">            res.add(node.val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="590-N-ary-Tree-Postorder-Traversal"><a href="#590-N-ary-Tree-Postorder-Traversal" class="headerlink" title="590. N-ary Tree Postorder Traversal"></a>590. N-ary Tree Postorder Traversal</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorder</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    Deque&lt;Node&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    stack.offer(root);</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">        Node cur=stack.pop();</span><br><span class="line">        <span class="keyword">if</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//out: left right root</span></span><br><span class="line">            <span class="comment">//in:  root right left</span></span><br><span class="line">            stack.push(cur);</span><br><span class="line">            stack.push(<span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cur.children.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                stack.push(cur.children.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.add(stack.pop().val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="652-Find-Duplicate-Subtrees"><a href="#652-Find-Duplicate-Subtrees" class="headerlink" title="652. Find Duplicate Subtrees"></a>652. Find Duplicate Subtrees</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;TreeNode&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Map&lt;String,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title function_">findDuplicateSubtrees</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String <span class="title function_">dfs</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;#&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String l=dfs(node.left);</span><br><span class="line">    String r=dfs(node.right);</span><br><span class="line">    String cur=node.val+<span class="string">&quot;,&quot;</span>+l+<span class="string">&quot;,&quot;</span>+r;</span><br><span class="line">    map.put(cur,map.getOrDefault(cur,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(map.get(cur)==<span class="number">2</span>)&#123;</span><br><span class="line">        res.add(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="663-Equal-Tree-Partition"><a href="#663-Equal-Tree-Partition" class="headerlink" title="663. Equal Tree Partition"></a>663. Equal Tree Partition</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;TreeNode,Long&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkEqualTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="type">long</span> l=sum(root.left);</span><br><span class="line">    <span class="type">long</span> r=sum(root.right);</span><br><span class="line">    <span class="keyword">if</span>(root.right!=<span class="literal">null</span> &amp;&amp; l+root.val==r || root.left!=<span class="literal">null</span> &amp;&amp; r+root.val==l)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">        root.left.val+=root.val+r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">        root.right.val+=root.val+l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> checkEqualTree(root.left) || checkEqualTree(root.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="title function_">sum</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(map.containsKey(node))&#123;</span><br><span class="line">          <span class="keyword">return</span> map.get(node);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">long</span> res=sum(node.left)+sum(node.right)+node.val;</span><br><span class="line">      map.put(node,res);</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="690-Employee-Importance"><a href="#690-Employee-Importance" class="headerlink" title="690. Employee Importance"></a>690. Employee Importance</h2><h3 id="DFS-1"><a href="#DFS-1" class="headerlink" title="DFS:"></a>DFS:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Employee employee : employees) &#123;</span><br><span class="line">    <span class="keyword">if</span>(employee.id==id)&#123;</span><br><span class="line">        res+=employee.importance;</span><br><span class="line">        <span class="keyword">for</span> (Integer next : employee.subordinates) &#123;</span><br><span class="line">            res+=getImportance(employees,next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure>



<h3 id="BFS-1"><a href="#BFS-1" class="headerlink" title="BFS:"></a>BFS:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getImportance</span><span class="params">(List&lt;Employee&gt; employees, <span class="type">int</span> id)</span> &#123;</span><br><span class="line">    Map&lt;Integer,Employee&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Employee employee : employees) &#123;</span><br><span class="line">        map.put(employee.id,employee);</span><br><span class="line">    &#125;</span><br><span class="line">    Deque&lt;Integer&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    q.offer(id);</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        Employee cur=map.get(q.poll());</span><br><span class="line">        res+=cur.importance;</span><br><span class="line">        <span class="keyword">for</span> (Integer next : cur.subordinates) &#123;</span><br><span class="line">            q.offer(next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="687-Longest-Univalue-Path"><a href="#687-Longest-Univalue-Path" class="headerlink" title="687. Longest Univalue Path"></a>687. Longest Univalue Path</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestUnivaluePath</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] dfs(TreeNode node)&#123;</span><br><span class="line">     <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//[val,len]</span></span><br><span class="line">     <span class="type">int</span>[] l=dfs(node.left);</span><br><span class="line">     <span class="type">int</span>[] r=dfs(node.right);</span><br><span class="line">     <span class="type">int</span> len=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span>(l!=<span class="literal">null</span> &amp;&amp; l[<span class="number">0</span>]==node.val)&#123;</span><br><span class="line">         len+=l[<span class="number">1</span>];</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">if</span>(r!=<span class="literal">null</span> &amp;&amp; r[<span class="number">0</span>]==node.val)&#123;</span><br><span class="line">        len+=r[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    max=Math.max(max,len-<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> path=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l!=<span class="literal">null</span> &amp;&amp; l[<span class="number">0</span>]==node.val)&#123;</span><br><span class="line">        path+=l[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r!=<span class="literal">null</span> &amp;&amp; r[<span class="number">0</span>]==node.val)&#123;</span><br><span class="line">        path=Math.max(path,<span class="number">1</span>+r[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;node.val,path&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="785-Is-Graph-Bipartite"><a href="#785-Is-Graph-Bipartite" class="headerlink" title="785. Is Graph Bipartite?"></a>785. Is Graph Bipartite?</h2><p><a href="https://leetcode.com/problems/is-graph-bipartite/discuss/115487/Java-Clean-DFS-solution-with-Explanation">https://leetcode.com/problems/is-graph-bipartite/discuss/115487/Java-Clean-DFS-solution-with-Explanation</a></p>
<p><code>Our goal</code> is trying to use two colors to color the graph and see if there are any adjacent nodes having the same color.<br>Initialize a color[] array for each node. Here are three states for <code>colors[]</code> array:<br><code>0: Haven&#39;t been colored yet.</code><br><code>1: Blue.</code><br><code>-1: Red.</code><br>For each node,</p>
<ol>
<li>If it hasn’t been colored, use a color to color it. Then use the other color to color all its adjacent nodes (DFS).</li>
<li>If it has been colored, check if the current color is the same as the color that is going to be used to color it. (Please forgive my english… Hope you can understand it.)</li>
</ol>
<h3 id="DFS-Solution"><a href="#DFS-Solution" class="headerlink" title="DFS Solution:"></a>DFS Solution:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBipartite</span><span class="params">(<span class="type">int</span>[][] graph)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> graph.length;</span><br><span class="line">        <span class="type">int</span>[] colors = <span class="keyword">new</span> <span class="title class_">int</span>[n];			</span><br><span class="line">				</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;              <span class="comment">//This graph might be a disconnected graph. So check each unvisited node.</span></span><br><span class="line">            <span class="keyword">if</span> (colors[i] == <span class="number">0</span> &amp;&amp; !validColor(graph, colors, <span class="number">1</span>, i)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validColor</span><span class="params">(<span class="type">int</span>[][] graph, <span class="type">int</span>[] colors, <span class="type">int</span> color, <span class="type">int</span> node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (colors[node] != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> colors[node] == color;</span><br><span class="line">        &#125;       </span><br><span class="line">        colors[node] = color;       </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> next : graph[node]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!validColor(graph, colors, -color, next)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="841-Keys-and-Rooms"><a href="#841-Keys-and-Rooms" class="headerlink" title="841. Keys and Rooms"></a>841. Keys and Rooms</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeetCode841</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; rooms;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    Set&lt;Integer&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canVisitAllRooms</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; rooms)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rooms=rooms;</span><br><span class="line">        <span class="built_in">this</span>.n=rooms.size();</span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> cur)</span>&#123;</span><br><span class="line">        set.add(cur);</span><br><span class="line">        <span class="keyword">if</span>(set.size()==n)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> res=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer next : rooms.get(cur)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(set.contains(next))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(dfs(next))&#123;</span><br><span class="line">                res=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="397-Integer-Replacement"><a href="#397-Integer-Replacement" class="headerlink" title="397. Integer Replacement"></a>397. Integer Replacement</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Long,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">integerReplacement</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> dfs(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">long</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(map.containsKey(n))&#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        res=<span class="number">1</span>+dfs(n/<span class="number">2</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res=<span class="number">1</span>+Math.min(dfs(n+<span class="number">1</span>),dfs(n-<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    map.put((<span class="type">long</span>)n,res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="473-Matchsticks-to-Square"><a href="#473-Matchsticks-to-Square" class="headerlink" title="473. Matchsticks to Square"></a>473. Matchsticks to Square</h2><p>NP problem: best solution is exponential</p>
<p><a href="https://leetcode.com/problems/matchsticks-to-square/discuss/95744/cpp-6ms-solution-with-DFS">https://leetcode.com/problems/matchsticks-to-square/discuss/95744/cpp-6ms-solution-with-DFS</a></p>
<p>3 optimizations:</p>
<ol>
<li>bigger nums added first, if any side &gt; target, return false</li>
<li>if 2 sides have the same length, avoid repetitions</li>
<li>check in advance if sum%4&#x3D;&#x3D;0</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span>[] sides=<span class="keyword">new</span> <span class="title class_">long</span>[<span class="number">4</span>];</span><br><span class="line"><span class="type">long</span> target;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">makesquare</span><span class="params">(<span class="type">int</span>[] matchsticks)</span> &#123;</span><br><span class="line">    <span class="type">long</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n=matchsticks.length;</span><br><span class="line">    Arrays.sort(matchsticks);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> matchstick : matchsticks) &#123;</span><br><span class="line">        sum+=matchstick;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum%<span class="number">4</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    target=sum/<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">return</span> dfs(matchsticks,n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sides[<span class="number">0</span>]==sides[<span class="number">1</span>] &amp;&amp; sides[<span class="number">1</span>]==sides[<span class="number">2</span>] &amp;&amp; sides[<span class="number">2</span>]==sides[<span class="number">3</span>])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">        <span class="type">boolean</span> skip=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> p=<span class="number">0</span>; p&lt;j; p++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sides[p]==sides[j])&#123;</span><br><span class="line">                skip=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(skip || sides[j]+nums[i]&gt;target)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sides[j]+=nums[i];</span><br><span class="line">        <span class="keyword">if</span>(dfs(nums,i-<span class="number">1</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sides[j]-=nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="988-Smallest-String-Starting-From-Leaf"><a href="#988-Smallest-String-Starting-From-Leaf" class="headerlink" title="988. Smallest String Starting From Leaf"></a>988. Smallest String Starting From Leaf</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String res;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">smallestFromLeaf</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    dfs(root, <span class="keyword">new</span> <span class="title class_">StringBuilder</span>());</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode node, StringBuilder sb)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sb.append((<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span>+node.val));</span><br><span class="line">    <span class="keyword">if</span>(node.left==<span class="literal">null</span> &amp;&amp; node.right==<span class="literal">null</span>)&#123;</span><br><span class="line">        sb.reverse();</span><br><span class="line">        String s=sb.toString();</span><br><span class="line">        <span class="keyword">if</span>(res==<span class="literal">null</span> || s.compareTo(res)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            res=s;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.reverse();</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(node.left,sb);</span><br><span class="line">    dfs(node.right,sb);</span><br><span class="line">    sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="979-Distribute-Coins-in-Binary-Tree"><a href="#979-Distribute-Coins-in-Binary-Tree" class="headerlink" title="979. Distribute Coins in Binary Tree"></a>979. Distribute Coins in Binary Tree</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">distributeCoins</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">dfs</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node.left==<span class="literal">null</span> &amp;&amp; node.right==<span class="literal">null</span>)&#123;</span><br><span class="line">        res+=Math.abs(node.val-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> node.val-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l=dfs(node.left);</span><br><span class="line">    <span class="type">int</span> r=dfs(node.right);</span><br><span class="line">    res+=Math.abs(l+r+node.val-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> l+r+node.val-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="967-Numbers-With-Same-Consecutive-Differences"><a href="#967-Numbers-With-Same-Consecutive-Differences" class="headerlink" title="967. Numbers With Same Consecutive Differences"></a>967. Numbers With Same Consecutive Differences</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] numsSameConsecDiff(<span class="type">int</span> n, <span class="type">int</span> k) &#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span>[] chars=<span class="keyword">new</span> <span class="title class_">char</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> <span class="variable">i</span> <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span>; i &lt;= <span class="string">&#x27;9&#x27;</span>; i++) &#123;</span><br><span class="line">        chars[<span class="number">0</span>]=i;</span><br><span class="line">        dfs(chars,n,k,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[list.size()];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        res[i]=list.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">char</span>[] chars, <span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> cur)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur==n)&#123;</span><br><span class="line">        String s=<span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line">        <span class="keyword">if</span>(s.length()==<span class="number">1</span> || s.charAt(<span class="number">0</span>)!=<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">            <span class="type">int</span> num=Integer.valueOf(s);</span><br><span class="line">            list.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> last=chars[cur-<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(last==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> c=(<span class="type">char</span>)(last+k);</span><br><span class="line">    <span class="keyword">if</span>(Character.isDigit(c))&#123;</span><br><span class="line">        chars[cur]=c;</span><br><span class="line">        dfs(chars,n,k,cur+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k!=<span class="number">0</span>)&#123;</span><br><span class="line">        c=(<span class="type">char</span>)(last-k);</span><br><span class="line">        <span class="keyword">if</span>(Character.isDigit(c))&#123;</span><br><span class="line">            chars[cur]=c;</span><br><span class="line">            dfs(chars,n,k,cur+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="1026-Maximum-Difference-Between-Node-and-Ancestor"><a href="#1026-Maximum-Difference-Between-Node-and-Ancestor" class="headerlink" title="1026. Maximum Difference Between Node and Ancestor"></a>1026. Maximum Difference Between Node and Ancestor</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> res;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxAncestorDiff</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    dfs(root,root.val,root.val);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode node, <span class="type">int</span> max, <span class="type">int</span> min)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> v=node.val;</span><br><span class="line">    res=Math.max(res,Math.max(Math.abs(max-v),Math.abs(min-v)));</span><br><span class="line">    max=Math.max(max,v);</span><br><span class="line">    min=Math.min(min,v);</span><br><span class="line">    dfs(node.left,max,min);</span><br><span class="line">    dfs(node.right,max,min);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="698-Partition-to-K-Equal-Sum-Subsets"><a href="#698-Partition-to-K-Equal-Sum-Subsets" class="headerlink" title="698. Partition to K Equal Sum Subsets"></a>698. Partition to K Equal Sum Subsets</h2><p>经典NP穷举，同472</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] sets;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartitionKSubsets</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        sum+=num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum%k!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> target=sum/k;</span><br><span class="line">    sets=<span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">    <span class="keyword">return</span> dfs(nums,n-<span class="number">1</span>,target,k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> cur, <span class="type">int</span> target, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur==-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(sets[i]!=target)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> res=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="type">boolean</span> skip=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;i; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sets[j]==sets[i])&#123;</span><br><span class="line">                skip=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!skip &amp;&amp; sets[i]+nums[cur]&lt;=target)&#123;</span><br><span class="line">            sets[i]+=nums[cur];</span><br><span class="line">            <span class="keyword">if</span>(dfs(nums,cur-<span class="number">1</span>,target,k))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sets[i]-=nums[cur];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Strobogrammatic Number</title>
    <url>/2022/11/25/strobogrammatic-number/</url>
    <content><![CDATA[<h1 id="Strobogrammatic-Number"><a href="#Strobogrammatic-Number" class="headerlink" title="Strobogrammatic Number"></a>Strobogrammatic Number</h1><p>A <strong>strobogrammatic number</strong> is a number that looks the same when rotated <code>180</code> degrees (looked at upside down).</p>
<h2 id="246-Strobogrammatic-Number"><a href="#246-Strobogrammatic-Number" class="headerlink" title="246. Strobogrammatic Number"></a>246. Strobogrammatic Number</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isStrobogrammatic</span><span class="params">(String num)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=num.length();</span><br><span class="line">    <span class="comment">//0 n-1</span></span><br><span class="line">    <span class="comment">//1 n-2</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= (n-<span class="number">1</span>)/<span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//0 1 8</span></span><br><span class="line">        <span class="comment">//6 9</span></span><br><span class="line">        <span class="type">char</span> c=num.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(c!=<span class="string">&#x27;0&#x27;</span> &amp;&amp; c!=<span class="string">&#x27;1&#x27;</span> &amp;&amp; c!=<span class="string">&#x27;8&#x27;</span> &amp;&amp; c!=<span class="string">&#x27;6&#x27;</span> &amp;&amp; c!=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span> r=num.charAt(n-<span class="number">1</span>-i);</span><br><span class="line">        <span class="keyword">switch</span> (c)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span>(r!=<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span>(r!=<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span>(r!=<span class="string">&#x27;8&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span>(r!=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span>(r!=<span class="string">&#x27;6&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="247-Strobogrammatic-Number-II"><a href="#247-Strobogrammatic-Number-II" class="headerlink" title="247. Strobogrammatic Number II"></a>247. Strobogrammatic Number II</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">findStrobogrammatic</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    List&lt;String&gt; one= Arrays.asList(<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;8&quot;</span>);</span><br><span class="line">    List&lt;String&gt; two=Arrays.asList(<span class="string">&quot;11&quot;</span>,<span class="string">&quot;69&quot;</span>,<span class="string">&quot;88&quot;</span>,<span class="string">&quot;96&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> one;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> two;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;String&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> t=n/<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> o=n%<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(o==<span class="number">0</span>)&#123;</span><br><span class="line">        build(res,two,<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(),t);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String s : one) &#123;</span><br><span class="line">            LinkedList&lt;Character&gt; list=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">            list.add(s.charAt(<span class="number">0</span>));</span><br><span class="line">            build(res,two,list,t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">build</span><span class="params">(List&lt;String&gt; res, List&lt;String&gt; two, LinkedList&lt;Character&gt; list, <span class="type">int</span> t)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="number">0</span>)&#123;</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (Character c : list) &#123;</span><br><span class="line">            sb.append(c);</span><br><span class="line">        &#125;</span><br><span class="line">        res.add(sb.toString());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t!=<span class="number">1</span>)&#123;</span><br><span class="line">        list.addFirst(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        list.addLast(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        build(res,two,list,t-<span class="number">1</span>);</span><br><span class="line">        list.removeFirst();</span><br><span class="line">        list.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (String s : two) &#123;</span><br><span class="line">        list.addFirst(s.charAt(<span class="number">0</span>));</span><br><span class="line">        list.addLast(s.charAt(<span class="number">1</span>));</span><br><span class="line">        build(res,two,list,t-<span class="number">1</span>);</span><br><span class="line">        list.removeFirst();</span><br><span class="line">        list.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="248-Strobogrammatic-Number-III"><a href="#248-Strobogrammatic-Number-III" class="headerlink" title="248. Strobogrammatic Number III"></a>248. Strobogrammatic Number III</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">char</span>[][] PAIRS = <span class="keyword">new</span> <span class="title class_">char</span>[][] &#123;</span><br><span class="line">    &#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>&#125;, &#123;<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>&#125;, &#123;<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;9&#x27;</span>&#125;, &#123;<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;8&#x27;</span>&#125;, &#123;<span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;6&#x27;</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strobogrammaticInRange</span><span class="params">(String low, String high)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (low == <span class="literal">null</span> || high == <span class="literal">null</span> || low.length() &gt; high.length()</span><br><span class="line">        || (low.length() == high.length() &amp;&amp; low.compareTo(high) &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> low.length(); len &lt;= high.length(); len++) &#123;</span><br><span class="line">        count += dfs(low, high, <span class="keyword">new</span> <span class="title class_">char</span>[len], <span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(String low, String high, <span class="type">char</span>[] ch, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(ch);</span><br><span class="line">        <span class="keyword">if</span> ((ch.length == low.length() &amp;&amp; s.compareTo(low) &lt; <span class="number">0</span>)</span><br><span class="line">            || (ch.length == high.length() &amp;&amp; s.compareTo(high) &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span>[] p : PAIRS) &#123;</span><br><span class="line">        ch[left] = p[<span class="number">0</span>];</span><br><span class="line">        ch[right] = p[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (ch.length != <span class="number">1</span> &amp;&amp; ch[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>; <span class="comment">//don&#x27;t start with 0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left == right &amp;&amp; (p[<span class="number">0</span>] == <span class="string">&#x27;6&#x27;</span> || p[<span class="number">0</span>] == <span class="string">&#x27;9&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>; <span class="comment">//don&#x27;t put 6/9 at the middle of string.</span></span><br><span class="line">        &#125;</span><br><span class="line">        count += dfs(low, high, ch, left + <span class="number">1</span>, right - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">char</span>[][] PAIRS=<span class="keyword">new</span> <span class="title class_">char</span>[][]&#123;</span><br><span class="line">        &#123;<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;0&#x27;</span>&#125;,&#123;<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>&#125;,&#123;<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;9&#x27;</span>&#125;,&#123;<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;8&#x27;</span>&#125;,&#123;<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;6&#x27;</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strobogrammaticInRange</span><span class="params">(String low, String high)</span> &#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=low.length(); i&lt;=high.length(); i++)&#123;</span><br><span class="line">        res+=dfs(low,high,<span class="keyword">new</span> <span class="title class_">char</span>[i],<span class="number">0</span>,i-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">dfs</span><span class="params">(String low, String high, <span class="type">char</span>[] chars, <span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&gt;right)&#123;</span><br><span class="line">        String s=<span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line">        <span class="keyword">if</span>(s.length()==low.length() &amp;&amp; s.compareTo(low)&lt;<span class="number">0</span></span><br><span class="line">                || s.length()==high.length() &amp;&amp;s.compareTo(high)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span>[] pair : PAIRS) &#123;</span><br><span class="line">        chars[left]=pair[<span class="number">0</span>];</span><br><span class="line">        chars[right]=pair[<span class="number">1</span>];</span><br><span class="line">        <span class="comment">//no leading zero</span></span><br><span class="line">        <span class="keyword">if</span>(chars[<span class="number">0</span>]==<span class="string">&#x27;0&#x27;</span> &amp;&amp; chars.length&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//no middle &#x27;6&#x27; or &#x27;9&#x27;</span></span><br><span class="line">        <span class="keyword">if</span>(left==right &amp;&amp; (chars[left]==<span class="string">&#x27;9&#x27;</span> || chars[left]==<span class="string">&#x27;6&#x27;</span>))&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count+=dfs(low,high,chars,left+<span class="number">1</span>,right-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Shortest Word Distance</title>
    <url>/2022/11/25/shortest-word-distance/</url>
    <content><![CDATA[<h1 id="Shortest-Word-Distance"><a href="#Shortest-Word-Distance" class="headerlink" title="Shortest Word Distance"></a>Shortest Word Distance</h1><h2 id="243-Shortest-Word-Distance"><a href="#243-Shortest-Word-Distance" class="headerlink" title="243. Shortest Word Distance"></a>243. Shortest Word Distance</h2><h3 id="法一："><a href="#法一：" class="headerlink" title="法一："></a>法一：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">shortestDistance</span><span class="params">(String[] wordsDict, String word1, String word2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n= wordsDict.length;</span><br><span class="line">    List&lt;Integer&gt; list1=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; list2=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(wordsDict[i].equals(word1))&#123;</span><br><span class="line">            list1.add(i);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(wordsDict[i].equals(word2))&#123;</span><br><span class="line">            list2.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (Integer a : list1) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Integer b : list2) &#123;</span><br><span class="line">            res=Math.min(res,Math.abs(a-b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二："><a href="#法二：" class="headerlink" title="法二："></a>法二：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">shortestWordDistance</span><span class="params">(String[] words, String word1, String word2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> words.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (words[i].equals(word1) || words[i].equals(word2)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (index != -<span class="number">1</span> &amp;&amp; !words[index].equals(words[i])) &#123;</span><br><span class="line">                min = Math.min(i - index, min);</span><br><span class="line">            &#125;</span><br><span class="line">            index = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="244-Shortest-Word-Distance-II"><a href="#244-Shortest-Word-Distance-II" class="headerlink" title="244. Shortest Word Distance II"></a>244. Shortest Word Distance II</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WordDistance</span> &#123;</span><br><span class="line"></span><br><span class="line">    HashMap&lt;String, List&lt;Integer&gt;&gt; map;</span><br><span class="line">    HashMap&lt;String,Integer&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WordDistance</span><span class="params">(String[] wordsDict)</span> &#123;</span><br><span class="line">        map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        res=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> n= wordsDict.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            map.putIfAbsent(wordsDict[i],<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">            map.get(wordsDict[i]).add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">shortest</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(res.containsKey(word1+<span class="string">&quot;,&quot;</span>+word2))&#123;</span><br><span class="line">            <span class="keyword">return</span> res.get(word1+<span class="string">&quot;,&quot;</span>+word2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res.containsKey(word2+<span class="string">&quot;,&quot;</span>+word1))&#123;</span><br><span class="line">            <span class="keyword">return</span> res.get(word2+<span class="string">&quot;,&quot;</span>+word1);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; list1=map.get(word1);</span><br><span class="line">        List&lt;Integer&gt; list2=map.get(word2);</span><br><span class="line">        <span class="type">int</span> min=Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (Integer a : list1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer b : list2) &#123;</span><br><span class="line">                min=Math.min(min,Math.abs(a-b));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.put(word1+<span class="string">&quot;,&quot;</span>+word2,min);</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="245-Shortest-Word-Distance-III"><a href="#245-Shortest-Word-Distance-III" class="headerlink" title="245. Shortest Word Distance III"></a>245. Shortest Word Distance III</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">shortestWordDistance</span><span class="params">(String[] wordsDict, String word1, String word2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=wordsDict.length;</span><br><span class="line">    <span class="type">int</span> res=Integer.MAX_VALUE;</span><br><span class="line">    <span class="type">int</span> index=-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (wordsDict[i].equals(word1) || wordsDict[i].equals(word2)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(index!=-<span class="number">1</span> &amp;&amp; (word1.equals(word2) || !wordsDict[index].equals(wordsDict[i])))&#123;</span><br><span class="line">                res=Math.min(res,i-index);</span><br><span class="line">            &#125;</span><br><span class="line">            index=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>BFS(2)</title>
    <url>/2022/11/27/BFS-2/</url>
    <content><![CDATA[<h1 id="BFS选编（2）"><a href="#BFS选编（2）" class="headerlink" title="BFS选编（2）"></a>BFS选编（2）</h1><h2 id="733-Flood-Fill"><a href="#733-Flood-Fill" class="headerlink" title="733. Flood Fill"></a>733. Flood Fill</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[][] floodFill(<span class="type">int</span>[][] image, <span class="type">int</span> sr, <span class="type">int</span> sc, <span class="type">int</span> color) &#123;</span><br><span class="line">    Deque&lt;<span class="type">int</span>[]&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> row=image.length;</span><br><span class="line">    <span class="type">int</span> col=image[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span> c=image[sr][sc];</span><br><span class="line">    <span class="type">int</span>[] dx=&#123;<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] dy=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">    q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;sr,sc&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span>[] cur=q.poll();</span><br><span class="line">        <span class="type">int</span> i=cur[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> j=cur[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(image[i][j]!=color)&#123;</span><br><span class="line">            image[i][j]=color;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                <span class="type">int</span> x=i+dx[k];</span><br><span class="line">                <span class="type">int</span> y=j+dy[k];</span><br><span class="line">                <span class="keyword">if</span>(x&gt;=<span class="number">0</span> &amp;&amp; x&lt;row &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;col</span><br><span class="line">                        &amp;&amp; image[x][y]==c)&#123;</span><br><span class="line">                    q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x,y&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="743-Network-Delay-Time"><a href="#743-Network-Delay-Time" class="headerlink" title="743. Network Delay Time"></a>743. Network Delay Time</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dijkstra</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">networkDelayTime</span><span class="params">(<span class="type">int</span>[][] times, <span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    Map&lt;Integer,List&lt;<span class="type">int</span>[]&gt;&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] time : times) &#123;</span><br><span class="line">        <span class="type">int</span> from=time[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> to=time[<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> len=time[<span class="number">2</span>];</span><br><span class="line">        map.putIfAbsent(from,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        map.get(from).add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;to,len&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] dist=<span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    Arrays.fill(dist,Integer.MAX_VALUE);</span><br><span class="line">    dist[k]=<span class="number">0</span>;</span><br><span class="line">    PriorityQueue&lt;<span class="type">int</span>[]&gt; q=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a,b)-&gt;(a[<span class="number">1</span>]-b[<span class="number">1</span>]));</span><br><span class="line">    q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;k,<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span>[] cur=q.poll();</span><br><span class="line">        <span class="type">int</span> vertex=cur[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> distToStart=cur[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(vertex))&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span>[] ints : map.get(vertex)) &#123;</span><br><span class="line">                <span class="type">int</span> next=ints[<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> len=ints[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(distToStart+len&lt;dist[next])&#123;</span><br><span class="line">                    dist[next]=distToStart+len;</span><br><span class="line">                    q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;next,distToStart+len&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(dist[i]==Integer.MAX_VALUE)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res=Math.max(res,dist[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="752-Open-the-Lock"><a href="#752-Open-the-Lock" class="headerlink" title="752. Open the Lock"></a>752. Open the Lock</h2><p>KEY ISSUE: how to represent changes of layer?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">openLock</span><span class="params">(String[] deadends, String target)</span> &#123;</span><br><span class="line">    Set&lt;String&gt; dead=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String deadend : deadends) &#123;</span><br><span class="line">        dead.add(deadend);</span><br><span class="line">    &#125;</span><br><span class="line">    Deque&lt;String&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    Set&lt;String&gt; visited=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    visited.add(<span class="string">&quot;0000&quot;</span>);</span><br><span class="line">    q.offer(<span class="string">&quot;0000&quot;</span>);</span><br><span class="line">    q.offer(<span class="literal">null</span>);</span><br><span class="line">    <span class="type">int</span> depth=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        String cur=q.poll();</span><br><span class="line">        <span class="keyword">if</span>(!dead.contains(cur))&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur==<span class="literal">null</span>)&#123;</span><br><span class="line">                depth++;</span><br><span class="line">                <span class="keyword">if</span>(!q.isEmpty())&#123;</span><br><span class="line">                    q.offer(<span class="literal">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cur.equals(target))&#123;</span><br><span class="line">                <span class="keyword">return</span> depth;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> d=-<span class="number">1</span>; d&lt;=<span class="number">1</span>; d+=<span class="number">2</span>)&#123;</span><br><span class="line">                        StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">0</span>; p &lt;= i-<span class="number">1</span>; p++) &#123;</span><br><span class="line">                            sb.append(cur.charAt(p));</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="type">char</span> c=cur.charAt(i);</span><br><span class="line">                        <span class="type">char</span> next=(<span class="type">char</span>)(c+d);</span><br><span class="line">                        <span class="keyword">if</span>(next&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                            next=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(next&lt;<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">                            next=<span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        sb.append(next);</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> i+<span class="number">1</span>; p &lt; <span class="number">4</span>; p++) &#123;</span><br><span class="line">                            sb.append(cur.charAt(p));</span><br><span class="line">                        &#125;</span><br><span class="line">                        String string=sb.toString();</span><br><span class="line">                        <span class="keyword">if</span>(!visited.contains(string))&#123;</span><br><span class="line">                            visited.add(string);</span><br><span class="line">                            q.offer(string);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="773-Sliding-Puzzle"><a href="#773-Sliding-Puzzle" class="headerlink" title="773. Sliding Puzzle"></a>773. Sliding Puzzle</h2><p>KEY ISSUE: how to represent changes of layer?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] neighbors=&#123;</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">3</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">5</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">4</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>,<span class="number">4</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">slidingPuzzle</span><span class="params">(<span class="type">int</span>[][] board)</span> &#123;</span><br><span class="line">    Set&lt;String&gt; seen=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    Deque&lt;String&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">char</span>[] chars=<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">6</span>];</span><br><span class="line">    chars[<span class="number">0</span>]=(<span class="type">char</span>)(board[<span class="number">0</span>][<span class="number">0</span>]+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    chars[<span class="number">1</span>]=(<span class="type">char</span>)(board[<span class="number">0</span>][<span class="number">1</span>]+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    chars[<span class="number">2</span>]=(<span class="type">char</span>)(board[<span class="number">0</span>][<span class="number">2</span>]+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    chars[<span class="number">3</span>]=(<span class="type">char</span>)(board[<span class="number">1</span>][<span class="number">0</span>]+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    chars[<span class="number">4</span>]=(<span class="type">char</span>)(board[<span class="number">1</span>][<span class="number">1</span>]+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    chars[<span class="number">5</span>]=(<span class="type">char</span>)(board[<span class="number">1</span>][<span class="number">2</span>]+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    q.offer(<span class="keyword">new</span> <span class="title class_">String</span>(chars));</span><br><span class="line">    q.offer(<span class="literal">null</span>);</span><br><span class="line">    seen.add(<span class="keyword">new</span> <span class="title class_">String</span>(chars));</span><br><span class="line">    <span class="type">int</span> depth=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        String cur=q.poll();</span><br><span class="line">        <span class="keyword">if</span>(cur==<span class="literal">null</span>)&#123;</span><br><span class="line">            depth++;</span><br><span class="line">            <span class="keyword">if</span>(!q.isEmpty())&#123;</span><br><span class="line">                q.offer(<span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cur.equals(<span class="string">&quot;123450&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> depth;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> index=cur.indexOf(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : neighbors[index]) &#123;</span><br><span class="line">                String next=swap(cur,index,i);</span><br><span class="line">                <span class="keyword">if</span>(!seen.contains(next))&#123;</span><br><span class="line">                    seen.add(next);</span><br><span class="line">                    q.offer(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String <span class="title function_">swap</span><span class="params">(String cur, <span class="type">int</span> index, <span class="type">int</span> i)</span>&#123;</span><br><span class="line">    <span class="type">char</span>[] chars=cur.toCharArray();</span><br><span class="line">    <span class="type">char</span> temp=chars[index];</span><br><span class="line">    chars[index]=chars[i];</span><br><span class="line">    chars[i]=temp;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="785-Is-Graph-Bipartite"><a href="#785-Is-Graph-Bipartite" class="headerlink" title="785. Is Graph Bipartite?"></a>785. Is Graph Bipartite?</h2><p>BFS Solution:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBipartite</span><span class="params">(<span class="type">int</span>[][] graph)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> graph.length;</span><br><span class="line">        <span class="type">int</span>[] colors = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (colors[i] != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">            queue.offer(i);</span><br><span class="line">            colors[i] = <span class="number">1</span>;   <span class="comment">// Blue: 1; Red: -1.</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> next : graph[cur]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (colors[next] == <span class="number">0</span>) &#123;          <span class="comment">// If this node hasn&#x27;t been colored;</span></span><br><span class="line">                        colors[next] = -colors[cur];  <span class="comment">// Color it with a different color;</span></span><br><span class="line">                        queue.offer(next);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (colors[next] != -colors[cur]) &#123;   <span class="comment">// If it is colored and its color is different, return false;</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="802-Find-Eventual-Safe-States"><a href="#802-Find-Eventual-Safe-States" class="headerlink" title="802. Find Eventual Safe States"></a>802. Find Eventual Safe States</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//if except to safe nodes, out degree == 0</span></span><br><span class="line"><span class="comment">//then is safe node</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">eventualSafeNodes</span><span class="params">(<span class="type">int</span>[][] graph)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=graph.length;</span><br><span class="line">    List&lt;Integer&gt; res=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    Map&lt;Integer,List&lt;Integer&gt;&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span>[] outs=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; graph.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(graph[i].length==<span class="number">0</span>)&#123;</span><br><span class="line">            res.add(i);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            outs[i]=graph[i].length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> next : graph[i]) &#123;</span><br><span class="line">                map.putIfAbsent(next,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">                map.get(next).add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Deque&lt;Integer&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Integer node : res) &#123;</span><br><span class="line">        q.offer(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span> cur=q.poll();</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(cur))&#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer from : map.get(cur)) &#123;</span><br><span class="line">                outs[from]--;</span><br><span class="line">                <span class="keyword">if</span>(outs[from]==<span class="number">0</span>)&#123;</span><br><span class="line">                    q.offer(from);</span><br><span class="line">                    res.add(from);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    Collections.sort(res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="787-Cheapest-Flights-Within-K-Stops"><a href="#787-Cheapest-Flights-Within-K-Stops" class="headerlink" title="787. Cheapest Flights Within K Stops"></a>787. Cheapest Flights Within K Stops</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>&#123;</span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line">    <span class="type">int</span> distToSrc;</span><br><span class="line">    <span class="type">int</span> nodeToSrc;</span><br><span class="line">    State(<span class="type">int</span> i, <span class="type">int</span> distToSrc, <span class="type">int</span> nodeToSrc)&#123;</span><br><span class="line">        <span class="built_in">this</span>.index=i;</span><br><span class="line">        <span class="built_in">this</span>.distToSrc=distToSrc;</span><br><span class="line">        <span class="built_in">this</span>.nodeToSrc=nodeToSrc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findCheapestPrice</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] flights, <span class="type">int</span> src, <span class="type">int</span> dst, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    List&lt;<span class="type">int</span>[]&gt;[] graph=<span class="keyword">new</span> <span class="title class_">List</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        graph[i]=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] flight : flights) &#123;</span><br><span class="line">        <span class="type">int</span> from=flight[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> to=flight[<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> cost=flight[<span class="number">2</span>];</span><br><span class="line">        graph[from].add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;to,cost&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    k++;</span><br><span class="line">    <span class="type">int</span>[] distTo=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="type">int</span>[] nodeTo=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    Arrays.fill(distTo,Integer.MAX_VALUE);</span><br><span class="line">    Arrays.fill(nodeTo,Integer.MAX_VALUE);</span><br><span class="line">    distTo[src]=<span class="number">0</span>;</span><br><span class="line">    nodeTo[src]=<span class="number">0</span>;</span><br><span class="line">    PriorityQueue&lt;State&gt; pq=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a,b)-&gt;(a.distToSrc-b.distToSrc));</span><br><span class="line">    pq.offer(<span class="keyword">new</span> <span class="title class_">State</span>(src,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(!pq.isEmpty())&#123;</span><br><span class="line">        State curNode=pq.poll();</span><br><span class="line">        <span class="type">int</span> cur= curNode.index;</span><br><span class="line">        <span class="type">int</span> curDistToSrc=curNode.distToSrc;</span><br><span class="line">        <span class="type">int</span> curNodeToSrc=curNode.nodeToSrc;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cur==dst)&#123;</span><br><span class="line">            <span class="keyword">return</span> curDistToSrc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(curNodeToSrc+<span class="number">1</span>&gt;k)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : graph[cur]) &#123;</span><br><span class="line">            <span class="type">int</span> next=ints[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> costToNext=curDistToSrc+ints[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> nodeToNext=curNodeToSrc+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(costToNext&lt;distTo[next])&#123;</span><br><span class="line">                distTo[next]=costToNext;</span><br><span class="line">                nodeTo[next]=nodeToNext;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(costToNext&gt;distTo[next] &amp;&amp; nodeToNext&gt;nodeTo[next])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pq.offer(<span class="keyword">new</span> <span class="title class_">State</span>(next,costToNext,nodeToNext));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="994-Rotting-Oranges"><a href="#994-Rotting-Oranges" class="headerlink" title="994. Rotting Oranges"></a>994. Rotting Oranges</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">orangesRotting</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">    <span class="type">int</span> row=grid.length;</span><br><span class="line">    <span class="type">int</span> col=grid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>[] dx=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] dy=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">    Deque&lt;<span class="type">int</span>[]&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i][j]==<span class="number">1</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(grid[i][j]==<span class="number">2</span>)&#123;</span><br><span class="line">                q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i,j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> minute=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span> size=q.size();</span><br><span class="line">        <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span>[] cur=q.poll();</span><br><span class="line">            <span class="type">int</span> i=cur[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> j=cur[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                <span class="type">int</span> x=i+dx[k];</span><br><span class="line">                <span class="type">int</span> y=j+dy[k];</span><br><span class="line">                <span class="keyword">if</span>(x&lt;<span class="number">0</span> || x&gt;=row || y&lt;<span class="number">0</span> || y&gt;=col || grid[x][y]!=<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                grid[x][y]=<span class="number">2</span>;</span><br><span class="line">                count--;</span><br><span class="line">                q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x,y&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!q.isEmpty())&#123;</span><br><span class="line">            minute++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count==<span class="number">0</span> ? minute : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="934-Shortest-Bridge"><a href="#934-Shortest-Bridge" class="headerlink" title="934. Shortest Bridge"></a>934. Shortest Bridge</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">shortestBridge</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">    <span class="type">int</span> row=grid.length;</span><br><span class="line">    <span class="type">int</span> col=grid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span>[] dx=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] dy=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    a:<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i][j]==<span class="number">1</span>)&#123;</span><br><span class="line">                set(grid,i,j,row,col);</span><br><span class="line">                <span class="keyword">break</span> a;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Deque&lt;<span class="type">int</span>[]&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i][j]==<span class="number">2</span>)&#123;</span><br><span class="line">                q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i,j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> depth=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span> size=q.size();</span><br><span class="line">        <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span>[] cur=q.poll();</span><br><span class="line">            <span class="type">int</span> i=cur[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> j=cur[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                <span class="type">int</span> x=i+dx[k];</span><br><span class="line">                <span class="type">int</span> y=j+dy[k];</span><br><span class="line">                <span class="keyword">if</span>(x&lt;<span class="number">0</span> || x&gt;=row || y&lt;<span class="number">0</span> || y&gt;=col || grid[x][y]==<span class="number">2</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(grid[x][y]==<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> depth;</span><br><span class="line">                &#125;</span><br><span class="line">                q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x,y&#125;);</span><br><span class="line">                grid[x][y]=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        depth++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span>[][] grid, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> row, <span class="type">int</span> col)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=row || j&lt;<span class="number">0</span> || j&gt;=col || grid[i][j]!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    grid[i][j]=<span class="number">2</span>;</span><br><span class="line">    set(grid,i+<span class="number">1</span>,j,row,col);</span><br><span class="line">    set(grid,i-<span class="number">1</span>,j,row,col);</span><br><span class="line">    set(grid,i,j+<span class="number">1</span>,row,col);</span><br><span class="line">    set(grid,i,j-<span class="number">1</span>,row,col);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="2503-Maximum-Number-of-Points-From-Grid-Queries"><a href="#2503-Maximum-Number-of-Points-From-Grid-Queries" class="headerlink" title="2503. Maximum Number of Points From Grid Queries"></a>2503. Maximum Number of Points From Grid Queries</h2><p>好题：</p>
<ul>
<li>dfs + memo 超时 （17&#x2F;21）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> row;</span><br><span class="line"><span class="type">int</span> col;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] maxPoints(<span class="type">int</span>[][] grid, <span class="type">int</span>[] queries) &#123;</span><br><span class="line">    Map&lt;Integer,Integer&gt; memo=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> k=queries.length;</span><br><span class="line">    <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">    row=grid.length;</span><br><span class="line">     col=grid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="type">int</span> query=queries[i];</span><br><span class="line">        <span class="keyword">if</span>(memo.containsKey(query))&#123;</span><br><span class="line">            res[i]=memo.get(query);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> point=dfs(grid,query,<span class="keyword">new</span> <span class="title class_">boolean</span>[row][col],<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">            memo.put(query,point);</span><br><span class="line">            res[i]=point;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[][] grid, <span class="type">int</span> query, <span class="type">boolean</span>[][] visited, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=row || j&lt;<span class="number">0</span> || j&gt;=col || grid[i][j]&gt;=query || visited[i][j])&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    visited[i][j]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>+dfs(grid,query,visited,i+<span class="number">1</span>,j)</span><br><span class="line">            +dfs(grid,query,visited,i-<span class="number">1</span>,j)</span><br><span class="line">            +dfs(grid,query,visited,i,j+<span class="number">1</span>)</span><br><span class="line">            +dfs(grid,query,visited,i,j-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>priorityqueue + bfs<ul>
<li>直接利用原数组去重，若值为0则跳过</li>
<li>注意：在点入队时去重，而不是访问时才去重，防止重复入队，导致重复计数！</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] maxPoints(<span class="type">int</span>[][] grid, <span class="type">int</span>[] queries) &#123;</span><br><span class="line">    <span class="type">int</span> row=grid.length;</span><br><span class="line">    <span class="type">int</span> col=grid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span>[] dx=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] dy=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n=queries.length;</span><br><span class="line"></span><br><span class="line">    PriorityQueue&lt;<span class="type">int</span>[]&gt; queryQueue=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a,b)-&gt;(a[<span class="number">1</span>]-b[<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        queryQueue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i,queries[i]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PriorityQueue&lt;<span class="type">int</span>[]&gt; bfsQueue=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a,b)-&gt;(a[<span class="number">2</span>]-b[<span class="number">2</span>]));</span><br><span class="line">    bfsQueue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,grid[<span class="number">0</span>][<span class="number">0</span>]&#125;);</span><br><span class="line">    grid[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="type">int</span> reach=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!queryQueue.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span>[] curQuery=queryQueue.poll();</span><br><span class="line">        <span class="type">int</span> idx=curQuery[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> query=curQuery[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span>(!bfsQueue.isEmpty() &amp;&amp; bfsQueue.peek()[<span class="number">2</span>]&lt;query)&#123;</span><br><span class="line">            <span class="type">int</span>[] node=bfsQueue.poll();</span><br><span class="line">            reach++;</span><br><span class="line">            <span class="type">int</span> i=node[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> j=node[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                <span class="type">int</span> x=i+dx[k];</span><br><span class="line">                <span class="type">int</span> y=j+dy[k];</span><br><span class="line">                <span class="keyword">if</span>(x&lt;<span class="number">0</span> || x&gt;=row || y&lt;<span class="number">0</span> || y&gt;=col || grid[x][y]==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                bfsQueue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x,y,grid[x][y]&#125;);</span><br><span class="line">                grid[x][y]=<span class="number">0</span>;   <span class="comment">//set to 0, to avoid repetition</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res[idx]=reach;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="886-Possible-Bipartition"><a href="#886-Possible-Bipartition" class="headerlink" title="886. Possible Bipartition"></a>886. Possible Bipartition</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">possibleBipartition</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] dislikes)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt;[] graph=<span class="keyword">new</span> <span class="title class_">List</span>[n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] dislike : dislikes) &#123;</span><br><span class="line">        <span class="type">int</span> a=dislike[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> b=dislike[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(graph[a]==<span class="literal">null</span>)&#123;</span><br><span class="line">            graph[a]=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        graph[a].add(b);</span><br><span class="line">        <span class="keyword">if</span>(graph[b]==<span class="literal">null</span>)&#123;</span><br><span class="line">            graph[b]=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        graph[b].add(a);</span><br><span class="line">    &#125;</span><br><span class="line">    Deque&lt;Integer&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span>[] party=<span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(party[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        party[i]=<span class="number">1</span>;</span><br><span class="line">        q.offer(i);</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> cur=q.poll();</span><br><span class="line">            <span class="type">int</span> curParty=party[cur];</span><br><span class="line">            <span class="keyword">if</span>(graph[cur]!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> next : graph[cur]) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(party[next]==curParty)&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(party[next]==<span class="number">0</span>)&#123;</span><br><span class="line">                        party[next]=-curParty;</span><br><span class="line">                        q.offer(next);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="1034-Coloring-A-Border"><a href="#1034-Coloring-A-Border" class="headerlink" title="1034. Coloring A Border"></a>1034. Coloring A Border</h2><p>注意：根据初始时刻判断，要等所有判断结束后方可变色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[][] colorBorder(<span class="type">int</span>[][] grid, <span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> color) &#123;</span><br><span class="line">    <span class="type">int</span> ro=grid.length;</span><br><span class="line">    <span class="type">int</span> co=grid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span>[] dx=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] dy=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">    Deque&lt;<span class="type">int</span>[]&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;row,col&#125;);</span><br><span class="line">    <span class="type">int</span> tag=grid[row][col];</span><br><span class="line">    <span class="type">boolean</span>[][] visited=<span class="keyword">new</span> <span class="title class_">boolean</span>[ro][co];</span><br><span class="line">    <span class="type">boolean</span>[][] change=<span class="keyword">new</span> <span class="title class_">boolean</span>[ro][co];</span><br><span class="line">    visited[row][col]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span>[] cur=q.poll();</span><br><span class="line">        <span class="type">int</span> i=cur[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> j=cur[<span class="number">1</span>];</span><br><span class="line">        <span class="type">boolean</span> isBoarder=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">            <span class="type">int</span> x=i+dx[k];</span><br><span class="line">            <span class="type">int</span> y=j+dy[k];</span><br><span class="line">            <span class="keyword">if</span>(x&gt;=<span class="number">0</span> &amp;&amp; x&lt;ro &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;co)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[x][y]!=tag)&#123;</span><br><span class="line">                    isBoarder=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(grid[x][y]==tag &amp;&amp; !visited[x][y])&#123;</span><br><span class="line">                    visited[x][y]=<span class="literal">true</span>;</span><br><span class="line">                    q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x,y&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isBoarder || i==<span class="number">0</span> || i==ro-<span class="number">1</span> || j==<span class="number">0</span> || j==co-<span class="number">1</span>)&#123;</span><br><span class="line">            change[i][j]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ro; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; co; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(change[i][j])&#123;</span><br><span class="line">                grid[i][j]=color;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="1162-As-Far-from-Land-as-Possible"><a href="#1162-As-Far-from-Land-as-Possible" class="headerlink" title="1162. As Far from Land as Possible"></a>1162. As Far from Land as Possible</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDistance</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=grid.length;</span><br><span class="line">    Deque&lt;<span class="type">int</span>[]&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span>[] dx=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] dy=<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i][j]==<span class="number">1</span>)&#123;</span><br><span class="line">                q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i,j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(q.size()==<span class="number">0</span> || q.size()==n*n)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> depth=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span> size=q.size();</span><br><span class="line">        <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span>[] cur=q.poll();</span><br><span class="line">            <span class="type">int</span> i=cur[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> j=cur[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                <span class="type">int</span> x=i+dx[k];</span><br><span class="line">                <span class="type">int</span> y=j+dy[k];</span><br><span class="line">                <span class="keyword">if</span>(x&lt;<span class="number">0</span> || x&gt;=n || y&lt;<span class="number">0</span> || y&gt;=n || grid[x][y]==<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x,y&#125;);</span><br><span class="line">                grid[x][y]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!q.isEmpty())&#123;</span><br><span class="line">            depth++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> depth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="126-Word-Ladder-II"><a href="#126-Word-Ladder-II" class="headerlink" title="126. Word Ladder II"></a>126. Word Ladder II</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">findLadders</span><span class="params">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> &#123;</span><br><span class="line">    Set&lt;String&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(wordList);</span><br><span class="line">    set.add(beginWord);</span><br><span class="line">    Map&lt;String,Set&lt;String&gt;&gt; neighbors=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String word : set) &#123;</span><br><span class="line">        <span class="type">char</span>[] chars = word.toCharArray();</span><br><span class="line">        neighbors.put(word,<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> c=chars[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> j=<span class="string">&#x27;a&#x27;</span>; j&lt;=<span class="string">&#x27;z&#x27;</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j==c)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                chars[i]=j;</span><br><span class="line">                String s=<span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line">                <span class="keyword">if</span>(set.contains(s))&#123;</span><br><span class="line">                    neighbors.get(word).add(s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            chars[i]=c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; layers=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Deque&lt;String&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    q.offer(beginWord);</span><br><span class="line">    set.remove(beginWord); <span class="comment">//once in queue, removed from set</span></span><br><span class="line">    <span class="type">boolean</span> reached=<span class="literal">false</span>;</span><br><span class="line">    a:<span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        <span class="type">int</span> size=q.size();</span><br><span class="line">        List&lt;String&gt; curLayer=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            String cur=q.poll();</span><br><span class="line">            <span class="keyword">if</span>(cur.equals(endWord))&#123;</span><br><span class="line">                reached=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span> a;</span><br><span class="line">            &#125;</span><br><span class="line">            curLayer.add(cur);</span><br><span class="line">            <span class="keyword">for</span> (String next : neighbors.get(cur)) &#123;</span><br><span class="line">                <span class="keyword">if</span>(set.contains(next))&#123;</span><br><span class="line">                    q.offer(next);</span><br><span class="line">                    set.remove(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        layers.add(curLayer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!reached)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; paths=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    LinkedList&lt;String&gt; path=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    path.add(endWord);</span><br><span class="line">    paths.add(path);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> layers.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; modified=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; curLayer=layers.get(i);</span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; list : paths) &#123;</span><br><span class="line">            String end=list.get(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (String s : curLayer) &#123;</span><br><span class="line">                <span class="keyword">if</span>(neighbors.get(end).contains(s))&#123;</span><br><span class="line">                    LinkedList&lt;String&gt; l=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(list);</span><br><span class="line">                    l.addFirst(s);</span><br><span class="line">                    modified.add(l);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        paths=modified;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> paths;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="818-Race-Car"><a href="#818-Race-Car" class="headerlink" title="818. Race Car"></a>818. Race Car</h2><p><a href="https://leetcode.com/problems/race-car/discuss/124326/Summary-of-the-BFS-and-DP-solutions-with-intuitive-explanation">https://leetcode.com/problems/race-car/discuss/124326/Summary-of-the-BFS-and-DP-solutions-with-intuitive-explanation</a></p>
<h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><h3 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h3>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Sentence Similarity</title>
    <url>/2022/11/28/Sentence-Similarity/</url>
    <content><![CDATA[<h1 id="Sentence-Similarity"><a href="#Sentence-Similarity" class="headerlink" title="Sentence Similarity"></a>Sentence Similarity</h1><h2 id="734-Sentence-Similarity"><a href="#734-Sentence-Similarity" class="headerlink" title="734. Sentence Similarity"></a>734. Sentence Similarity</h2><p>not transitive:</p>
<ul>
<li>HashSet</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">areSentencesSimilar</span><span class="params">(String[] sentence1, String[] sentence2, List&lt;List&lt;String&gt;&gt; similarPairs)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=sentence1.length;</span><br><span class="line">    <span class="keyword">if</span>(n!= sentence2.length)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    HashSet&lt;String&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (List&lt;String&gt; similarPair : similarPairs) &#123;</span><br><span class="line">        String a=similarPair.get(<span class="number">0</span>);</span><br><span class="line">        String b=similarPair.get(<span class="number">1</span>);</span><br><span class="line">        set.add(a+b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        String s1=sentence1[i];</span><br><span class="line">        String s2=sentence2[i];</span><br><span class="line">        <span class="keyword">if</span>(s1.equals(s2))&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!set.contains(s1+s2) &amp;&amp; !set.contains(s2+s1))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="737-Sentence-Similarity-II"><a href="#737-Sentence-Similarity-II" class="headerlink" title="737. Sentence Similarity II"></a>737. Sentence Similarity II</h2><p>transitive: </p>
<ul>
<li>BFS search</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">areSentencesSimilarTwo</span><span class="params">(String[] sentence1, String[] sentence2, List&lt;List&lt;String&gt;&gt; similarPairs)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=sentence1.length;</span><br><span class="line">    <span class="keyword">if</span>(n!= sentence2.length)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String, List&lt;String&gt;&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (List&lt;String&gt; similarPair : similarPairs) &#123;</span><br><span class="line">        String a=similarPair.get(<span class="number">0</span>);</span><br><span class="line">        String b=similarPair.get(<span class="number">1</span>);</span><br><span class="line">        map.putIfAbsent(a,<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;());</span><br><span class="line">        map.get(a).add(b);</span><br><span class="line">        map.putIfAbsent(b,<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;());</span><br><span class="line">        map.get(b).add(a);</span><br><span class="line">    &#125;</span><br><span class="line">    Deque&lt;String&gt; q=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    Set&lt;String&gt; visited=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        String s1=sentence1[i];</span><br><span class="line">        String s2=sentence2[i];</span><br><span class="line">        <span class="keyword">if</span>(s1.equals(s2))&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        q.clear();</span><br><span class="line">        visited.clear();</span><br><span class="line">        q.offer(s1);</span><br><span class="line">        <span class="type">boolean</span> found=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            String cur=q.poll();</span><br><span class="line">            <span class="keyword">if</span>(cur.equals(s2))&#123;</span><br><span class="line">                found=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(cur))&#123;</span><br><span class="line">                <span class="keyword">for</span> (String next : map.get(cur)) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(!visited.contains(next))&#123;</span><br><span class="line">                        q.offer(next);</span><br><span class="line">                        visited.add(next);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!found)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>Web Developer Bootcamp</title>
    <url>/2022/11/28/Web-Developer-Bootcamp/</url>
    <content><![CDATA[<h1 id="Web-Developer-Bootcamp"><a href="#Web-Developer-Bootcamp" class="headerlink" title="Web Developer Bootcamp"></a>Web Developer Bootcamp</h1><h2 id="1-快捷键"><a href="#1-快捷键" class="headerlink" title="1. 快捷键"></a>1. 快捷键</h2><p>ctrl shift p : format document</p>
<p>a tab</p>
<p>lorem</p>
<p>ctrl &#x2F;</p>
<p>inp tab</p>
<p>! 标准html初始化</p>
<h2 id="2-HTML5"><a href="#2-HTML5" class="headerlink" title="2. HTML5"></a>2. HTML5</h2><p>HTML is not a version, but a standard.</p>
<p>You can’t turn off HTML5!</p>
<ul>
<li><p>inline elements</p>
<ul>
<li><p>a    anchor</p>
</li>
<li><p>span </p>
<p>generic element</p>
</li>
</ul>
</li>
<li><p>block elements</p>
<ul>
<li><p>p    paragraph</p>
</li>
<li><p>div  division</p>
<p>generic element</p>
</li>
</ul>
</li>
</ul>
<p>hr: a segment line</p>
<p>br: a line break</p>
<p>sup: superscript</p>
<p>sub: subscript</p>
<h3 id="HTML-Entities：start-with-ampersand-amp-end-with-semicolon"><a href="#HTML-Entities：start-with-ampersand-amp-end-with-semicolon" class="headerlink" title="HTML Entities：start with ampersand&amp;, end with semicolon;"></a>HTML Entities：start with ampersand&amp;, end with semicolon;</h3><ul>
<li>greater than： </li>
<li>less than：</li>
</ul>
<h3 id="Semantic-Markup-meaningful-markup-accessibility"><a href="#Semantic-Markup-meaningful-markup-accessibility" class="headerlink" title="Semantic Markup: meaningful markup       accessibility"></a>Semantic Markup: meaningful markup       accessibility</h3><p>not div, but</p>
<ul>
<li>main</li>
<li>nav</li>
<li>section</li>
<li>article</li>
<li>aside</li>
<li>header</li>
<li>footer</li>
<li>time</li>
<li>figure<ul>
<li>figcaption</li>
</ul>
</li>
</ul>
<h3 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet:"></a>Emmet:</h3><ul>
<li>child: &gt;</li>
<li>sibling: +</li>
<li>multiplication:  *</li>
<li>item numbering: $</li>
</ul>
<h3 id="table"><a href="#table" class="headerlink" title="table:"></a>table:</h3><ul>
<li>tr : table row</li>
<li>td : single data cell</li>
<li>th : single header:<ul>
<li>rowspan&#x3D;”2”</li>
<li>colspan&#x3D;”2”</li>
</ul>
</li>
<li>thead</li>
<li>tbody</li>
<li>tfoot</li>
</ul>
<h3 id="form"><a href="#form" class="headerlink" title="form:"></a>form:</h3><ul>
<li><p>empty container for data inputs</p>
</li>
<li><p>specify how and where the data should be sent</p>
</li>
<li><p>action: where the http request should be sent</p>
</li>
<li><p>method: “get” “post”</p>
</li>
<li><p>input: </p>
<ul>
<li>type:<ul>
<li>text</li>
<li>password</li>
<li>email: pattern</li>
<li>url: pattern</li>
<li>color: color picker</li>
<li>file</li>
<li>number:<ul>
<li>min</li>
<li>max</li>
<li>step</li>
</ul>
</li>
<li>time</li>
<li>range:<ul>
<li>id + label for</li>
<li>name</li>
<li>min</li>
<li>max</li>
<li>value: initial value</li>
<li>step</li>
</ul>
</li>
<li>radio:<ul>
<li>one name for a group of radio</li>
<li>id</li>
<li>label for</li>
<li>value 绑定 name</li>
</ul>
</li>
<li>checkbox:<ul>
<li>name 选中后属性为on，不选中则没有该属性</li>
<li>id</li>
<li>label for 绑定 id</li>
<li>checked</li>
</ul>
</li>
<li>submit:<ul>
<li>value</li>
</ul>
</li>
</ul>
</li>
<li>placeholder </li>
<li>label + input<ul>
<li>input id name</li>
<li>label for</li>
</ul>
</li>
</ul>
</li>
<li><p>button:</p>
<ul>
<li>type:<ul>
<li>submit (default)</li>
<li>button</li>
</ul>
</li>
</ul>
</li>
<li><p>select:</p>
<ul>
<li>name</li>
<li>id</li>
<li>option:<ul>
<li>value</li>
<li>selected</li>
</ul>
</li>
</ul>
</li>
<li><p>textarea:</p>
<ul>
<li>id + label for</li>
<li>name</li>
<li>placeholder</li>
<li>rows </li>
<li>cols</li>
</ul>
</li>
</ul>
<h3 id="validation"><a href="#validation" class="headerlink" title="validation:"></a>validation:</h3><ul>
<li>browser side validation:<ul>
<li>html built-in :<ul>
<li>required</li>
<li>minlength</li>
<li>maxlength</li>
<li>min</li>
<li>max</li>
<li>pattern : regular expression: a pattern</li>
<li>type: <ul>
<li>url</li>
<li>email</li>
<li>tel</li>
</ul>
</li>
</ul>
</li>
<li>javascript</li>
</ul>
</li>
<li>server side validation</li>
</ul>
<h2 id="3-CSS"><a href="#3-CSS" class="headerlink" title="3. CSS"></a>3. CSS</h2><p>cascading style sheets</p>
<p>selector {</p>
<p>​        property: value;</p>
<p>}</p>
<p>where:</p>
<ol>
<li>inline style&#x3D;”color: green”   bad!</li>
<li>head style</li>
<li>css file + link :<ul>
<li>href</li>
<li>rel&#x3D;”stylesheet”</li>
</ul>
</li>
</ol>
<p>color: text color</p>
<p>background-color</p>
<p>font-size:</p>
<ul>
<li>px : not recommended for responsive websites</li>
</ul>
<h3 id="CSS-selector"><a href="#CSS-selector" class="headerlink" title="CSS selector:"></a>CSS selector:</h3><ul>
<li><p>universal selector:</p>
<ul>
<li><ul>
<li></li>
</ul>
</li>
</ul>
</li>
<li><p>h1 ,h2</p>
</li>
<li><p>id selector:</p>
<ul>
<li>#signup</li>
</ul>
</li>
<li><p>class selector:</p>
<ul>
<li>.tag</li>
</ul>
</li>
<li><p>descendant selector: (generic descendant)</p>
<ul>
<li>li a</li>
<li>span a </li>
<li>.tag a</li>
</ul>
</li>
<li><p>adjacent selector: (immediately after)</p>
<ul>
<li>h1 + p</li>
</ul>
</li>
<li><p>direct child: (direct descendant)</p>
<ul>
<li>div &gt; li</li>
</ul>
</li>
<li><p>attribute selector:</p>
<ul>
<li>input[type&#x3D;”password”]</li>
<li>section[class&#x3D;”post”]</li>
<li>a[href*&#x3D;”google”]  <ul>
<li>contains</li>
</ul>
</li>
</ul>
</li>
<li><p>pseudo class:</p>
<ul>
<li>button:hover</li>
<li>.post a:hover</li>
<li>button:active</li>
<li>.post:nth-of-type(2n)</li>
<li>.post:nth-of-type(2n-1)</li>
</ul>
</li>
<li><p>pseudo element:</p>
<ul>
<li>h2::first-letter</li>
<li>p::first-line</li>
<li>p::selection</li>
<li>::selection</li>
</ul>
</li>
</ul>
<p>“cascade”: order matters!</p>
<h3 id="specificity"><a href="#specificity" class="headerlink" title="specificity:"></a>specificity:</h3><ul>
<li><p>The more specific selector wins!</p>
</li>
<li><p>id &gt; class, attribute, pseudo class &gt; element, pseudo element</p>
</li>
<li><p>!important</p>
</li>
<li><p>inherit</p>
</li>
</ul>
<h3 id="CSS-box-model"><a href="#CSS-box-model" class="headerlink" title="CSS box model"></a>CSS box model</h3><ul>
<li>content box:<ul>
<li>width</li>
<li>height</li>
</ul>
</li>
<li>padding</li>
<li>margin</li>
<li>border</li>
</ul>
<h2 id="4-JS"><a href="#4-JS" class="headerlink" title="4.JS"></a>4.JS</h2><h3 id="loop"><a href="#loop" class="headerlink" title="loop:"></a>loop:</h3><ul>
<li><p>for of: 遍历iterable</p>
</li>
<li><p>for in: object</p>
</li>
</ul>
<h3 id="scope"><a href="#scope" class="headerlink" title="scope:"></a>scope:</h3><ul>
<li>var 只限定function scope, 不限定block scope( loop, conditional)</li>
<li>let 限定block scope</li>
<li>const 限定block scope</li>
</ul>
<h3 id="callback；"><a href="#callback；" class="headerlink" title="callback；"></a>callback；</h3><p>A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//array.forEach(function)</span></span><br><span class="line">nums.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">num</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(num%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//array.map(function)</span></span><br><span class="line"><span class="keyword">const</span> doubles=nums.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">num</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> num*<span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//arrow function</span></span><br><span class="line"><span class="keyword">const</span> double=nums.<span class="title function_">map</span>(<span class="function">(<span class="params">num</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num*<span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//arrow function implicit return</span></span><br><span class="line"><span class="keyword">const</span> double1=nums.<span class="title function_">map</span>(<span class="function">(<span class="params">num</span>)=&gt;</span>&#123;</span><br><span class="line">    num*<span class="number">2</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> double2=nums.<span class="title function_">map</span>(<span class="function"><span class="params">num</span>=&gt;</span>num*<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//setTimeOut(function,t)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="title function_">setTimeOut</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;...Are you still there?&quot;</span>)</span><br><span class="line">&#125;,<span class="number">3000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I SHOULD BE THE SECOND LINE&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//setInterval(function,t)</span></span><br><span class="line"><span class="keyword">const</span> id=<span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br><span class="line">&#125;,<span class="number">2000</span>);</span><br><span class="line"><span class="built_in">clearInterval</span>(id);</span><br><span class="line"></span><br><span class="line"><span class="comment">//array.filter(function)</span></span><br><span class="line"><span class="keyword">const</span> filters=nums.<span class="title function_">filter</span>(<span class="function"><span class="params">num</span>=&gt;</span>num%<span class="number">2</span>==<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;sum of all&quot;</span></span><br><span class="line"><span class="keyword">const</span> total=nums.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total,price</span>)=&gt;</span>total+price)</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;product of all&quot;</span></span><br><span class="line"><span class="keyword">const</span> total=nums.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total,price</span>)=&gt;</span>total*price)</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;minimum of all&quot;</span></span><br><span class="line"><span class="keyword">const</span> min=nums.<span class="title function_">reduce</span>(<span class="function">(<span class="params">min,num</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//the return value becomes the next min</span></span><br><span class="line">    <span class="comment">//num start from nums[1] to nums[n-1]</span></span><br><span class="line">    <span class="keyword">if</span>(min&lt;num)&#123;</span><br><span class="line">        <span class="keyword">return</span> num;	</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//reduce with initial value 100</span></span><br><span class="line"><span class="keyword">const</span> total=nums.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total,num</span>)=&gt;</span>total+num,<span class="number">100</span>)</span><br></pre></td></tr></table></figure>



<h4 id="synchronous-callback"><a href="#synchronous-callback" class="headerlink" title="synchronous callback:"></a>synchronous callback:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function greeting(name) &#123;</span><br><span class="line">  alert(`Hello, $&#123;name&#125;`);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function processUserInput(callback) &#123;</span><br><span class="line">  const name = prompt(&#x27;Please enter your name.&#x27;);</span><br><span class="line">  callback(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">processUserInput(greeting);</span><br></pre></td></tr></table></figure>



<h4 id="asynchronous-callback"><a href="#asynchronous-callback" class="headerlink" title="asynchronous callback:"></a>asynchronous callback:</h4><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Callback_function">https://developer.mozilla.org/en-US/docs/Glossary/Callback_function</a></p>
<h3 id="this"><a href="#this" class="headerlink" title="this:"></a>this:</h3><ul>
<li><p>“this” in regular function:  </p>
<ul>
<li><strong>whoever calling it; object before “.”</strong></li>
<li>how it is executed!</li>
</ul>
</li>
<li><p>“this” in arrow function: </p>
<ul>
<li><strong>the scope that it was created in</strong> </li>
<li>where it is created!</li>
</ul>
</li>
</ul>
<h3 id="spread"><a href="#spread" class="headerlink" title="spread:"></a>spread:</h3><ol>
<li>iterables:</li>
</ol>
<ul>
<li>array</li>
<li>string</li>
</ul>
<ol start="2">
<li>objects</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(...[<span class="number">10</span>,<span class="number">5</span>,<span class="number">7</span>])</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...<span class="string">&quot;Happy&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr1=[<span class="number">5</span>,<span class="number">8</span>]</span><br><span class="line"><span class="keyword">const</span> arr2=[<span class="number">1</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">const</span> arr=[...arr1,...arr2]</span><br></pre></td></tr></table></figure>



<h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments:"></a>arguments:</h3><p>like an array but not an array</p>
<h3 id="rest"><a href="#rest" class="headerlink" title="rest:"></a>rest:</h3><p>an actual array</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">...nums</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> nums.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total,el</span>)=&gt;</span>total+el);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="destructuring："><a href="#destructuring：" class="headerlink" title="destructuring："></a>destructuring：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> scores=[<span class="number">100</span>,<span class="number">99</span>,<span class="number">98</span>,<span class="number">67</span>,<span class="number">59</span>]</span><br><span class="line"><span class="keyword">const</span> [first,second,...everyoneElse]=scores</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">born</span>:birthYear, <span class="attr">deathYear</span>:dead =<span class="string">&#x27;N/A&#x27;</span>&#125;=user	<span class="comment">//destructuring object; rename variable; with default value</span></span><br></pre></td></tr></table></figure>





<h2 id="5-DOM"><a href="#5-DOM" class="headerlink" title="5.DOM"></a>5.DOM</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="variable language_">document</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">all</span>[<span class="number">10</span>].<span class="property">innerText</span>=<span class="string">&quot;New&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//select the JavaScript object</span></span><br><span class="line"><span class="keyword">const</span> toc=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;toc&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(toc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allImages=<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;img&quot;</span>)	<span class="comment">//a HTML Collection, consisting of HTML Elements, not an array</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(allImages[<span class="number">0</span>])	</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> image <span class="keyword">of</span> allImages)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(image.<span class="property">src</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> squareImages=<span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;square&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//querySelector</span></span><br><span class="line"><span class="keyword">const</span> firstPTag=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> firstPId=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#p&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> firstPClass=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.p&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;a[title=&#x27;Java&#x27;]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;p a&quot;</span>)</span><br></pre></td></tr></table></figure>



<ul>
<li><p>innerText</p>
</li>
<li><p>textContent</p>
</li>
<li><p>innerHTML</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;h1&quot;</span>).<span class="property">innerHTML</span> += <span class="string">&quot;&lt;sup&gt;superscript&lt;/sup&gt;&quot;</span></span><br></pre></td></tr></table></figure>




</li>
<li><p>attribute</p>
</li>
<li><p>style</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> allLinks=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> link <span class="keyword">of</span> allLinks)&#123;</span><br><span class="line">    link.<span class="property">style</span>.<span class="property">color</span>=<span class="string">&quot;magenta&quot;</span></span><br><span class="line">    link.<span class="property">style</span>.<span class="property">textDecorationColor</span>=<span class="string">&quot;olive&quot;</span></span><br><span class="line">    link.<span class="property">style</span>.<span class="property">textDecorationStyle</span>=<span class="string">&quot;wavy&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">const</span> h1=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;h1&quot;</span>)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(h1).<span class="property">fontSize</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>classList</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const h2=document.querySelector(&quot;h2&quot;)</span><br><span class="line">h2.classList.add(&quot;border&quot;)</span><br><span class="line">h2.classList.remove(&quot;purple&quot;)</span><br><span class="line">h2.classList.contains(&quot;green&quot;)	//false</span><br><span class="line"></span><br><span class="line">//on and off</span><br><span class="line">h2.classList.toggle(&quot;purple&quot;)</span><br><span class="line">h2.classList.toggle(&quot;purple&quot;)</span><br><span class="line">h2.classList.toggle(&quot;purple&quot;)</span><br></pre></td></tr></table></figure>



<ul>
<li>parentElement</li>
<li>children      &#x2F;&#x2F;HTMLCollection</li>
<li>nextElementSibling</li>
<li>previousElementSibling</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//appendChild</span></span><br><span class="line"><span class="keyword">const</span> newH3=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;h3&quot;</span>)</span><br><span class="line">newH3.<span class="property">innerText</span>=<span class="string">&quot;I AM NEW&quot;</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendCHild</span>(newH3)</span><br><span class="line"></span><br><span class="line"><span class="comment">//append </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//prepend</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//insertAjacentElement</span></span><br><span class="line"><span class="keyword">const</span> h4=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;h4&quot;</span>)</span><br><span class="line">h4.<span class="title function_">append</span>(<span class="string">&quot;hhhh&quot;</span>)</span><br><span class="line">newH3.<span class="title function_">insertAjacentElement</span>(<span class="string">&quot;afterend&quot;</span>,h4)	<span class="comment">//newH3.nextElementSibling</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//removeChild()</span></span><br><span class="line">img.<span class="property">parentElement</span>.<span class="title function_">removeChild</span>(img)</span><br><span class="line"><span class="comment">//remove()</span></span><br><span class="line">img.<span class="title function_">remove</span>()</span><br></pre></td></tr></table></figure>





<h2 id="6-DOM-events"><a href="#6-DOM-events" class="headerlink" title="6.DOM events"></a>6.DOM events</h2><h3 id="button"><a href="#button" class="headerlink" title="button"></a>button</h3><ul>
<li>onclick</li>
<li>ondblclick</li>
<li>onmouseenter</li>
<li>onmouseleave</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btn=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;button&quot;</span>)</span><br><span class="line"></span><br><span class="line">btn.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;HAHAHA!!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//recommended, generic way</span></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;You clicked me!!!&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,shout)</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,twist)	<span class="comment">//can coexist!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//not recommended</span></span><br><span class="line">btn.<span class="property">onclick</span>=shout</span><br><span class="line">btn.<span class="property">onclick</span>=twist	<span class="comment">//shout is lost, can not coexit</span></span><br></pre></td></tr></table></figure>



<h3 id="keyboard-event-objects"><a href="#keyboard-event-objects" class="headerlink" title="(keyboard) event objects"></a>(keyboard) event objects</h3><ul>
<li>keydown</li>
<li>keyup</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> input=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;input&quot;</span>)</span><br><span class="line">input.<span class="title function_">addEventListener</span>(<span class="string">&quot;keydown&quot;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">key</span>)	<span class="comment">//q	</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">code</span>)	<span class="comment">//KeyQ</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keydown&quot;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">code</span>)	<span class="comment">//ArrowUp, ArrowLeft, ArrowRight, ArrowDown</span></span><br><span class="line">    <span class="keyword">switch</span>(e.<span class="property">code</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;ArrowUp&quot;</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;UP&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;ArrowDown&quot;</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;DOWN&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;IGNORED!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="form-event"><a href="#form-event" class="headerlink" title="form event"></a>form event</h3><p>form action: send form data to the url, and switch to that url</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/url&quot;</span>&gt;</span>	</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;catName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line">        Submit</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">    Available Cats</span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;cats&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>to stay in the same page after submitting form: </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> form=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;form&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> input=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#catName&quot;</span>)	<span class="comment">//input.value</span></span><br><span class="line"><span class="keyword">const</span> list=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#cats&quot;</span>)</span><br><span class="line"></span><br><span class="line">form.<span class="title function_">addEventListener</span>(<span class="string">&quot;submit&quot;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Submitted the form!&quot;</span>)</span><br><span class="line">    <span class="keyword">const</span> name=input.<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">const</span> newLi=<span class="variable language_">document</span>.<span class="title class_">CreateElement</span>(<span class="string">&quot;li&quot;</span>)</span><br><span class="line">    newLi.<span class="property">innerText</span>=name</span><br><span class="line">    list.<span class="title function_">append</span>(newLi)	<span class="comment">//list.appendChild(newLi)</span></span><br><span class="line">    input.<span class="property">value</span>=<span class="string">&quot;&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="input-event"><a href="#input-event" class="headerlink" title="input event"></a>input event</h3><ul>
<li>change event</li>
<li>input event</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> h1=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;h1&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> input=docuemnt.<span class="title function_">querySelector</span>(<span class="string">&quot;input&quot;</span>)</span><br><span class="line">input.<span class="title function_">addEventListener</span>(<span class="string">&quot;input&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    h1.<span class="property">innerText</span>=input.<span class="property">value</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="event-bubbling"><a href="#event-bubbling" class="headerlink" title="event bubbling"></a>event bubbling</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.hide</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;changeColor&quot;</span>&gt;</span></span><br><span class="line">        change color</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> container=docuemnt.<span class="title function_">querySelector</span>(<span class="string">&quot;#container&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> button=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#changeColor&quot;</span>)</span><br><span class="line">container.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    container.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;hide&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeColor</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> r=<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">255</span>)</span><br><span class="line">    <span class="keyword">const</span> g=<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">255</span>)</span><br><span class="line">    <span class="keyword">const</span> b=<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">255</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`rgb(<span class="subst">$&#123;r&#125;</span>,<span class="subst">$&#123;g&#125;</span>,<span class="subst">$&#123;b&#125;</span>)`</span></span><br><span class="line">&#125;</span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">    container.<span class="property">style</span>.<span class="property">backgroundColor</span>=<span class="title function_">makeRandColor</span>()</span><br><span class="line">    e.<span class="title function_">stopPropagation</span>();	<span class="comment">//stop bubbling!</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="event-delegation"><a href="#event-delegation" class="headerlink" title="event delegation"></a>event delegation</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> container=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#list&quot;</span>)</span><br><span class="line">container.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="comment">//console.log(&quot;Click on ul&quot;)</span></span><br><span class="line">    <span class="comment">//e.target.remove()</span></span><br><span class="line">    e.<span class="property">target</span>.<span class="property">nodeName</span>===<span class="string">&quot;LI&quot;</span> &amp;&amp; e.<span class="property">target</span>.<span class="title function_">remove</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="7-Asynchronous-JavaScript"><a href="#7-Asynchronous-JavaScript" class="headerlink" title="7. Asynchronous JavaScript"></a>7. Asynchronous JavaScript</h2><h3 id="call-stack"><a href="#call-stack" class="headerlink" title="call stack"></a>call stack</h3><h3 id="js-is-single-threaded"><a href="#js-is-single-threaded" class="headerlink" title="js is single-threaded!"></a>js is single-threaded!</h3><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><ul>
<li>pending</li>
<li>resolved</li>
<li>rejected</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request=<span class="title function_">fakeRequestPromise</span>(<span class="string">&quot;yelp.com/api/coffee&quot;</span>)</span><br><span class="line">request.<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;IT WORKED!!!!&quot;</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;OH NO, ERROR!!&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="title function_">fakeRequestPromise</span>(<span class="string">&quot;yelp.com/api/coffee/page1&quot;</span>).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;IT WORKED!!!!(page1)&quot;</span>)</span><br><span class="line">    <span class="title function_">fakeRequestPromise</span>(<span class="string">&quot;yelp.com/api/coffee/page2&quot;</span>).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;IT WORKED!!!!(page2)&quot;</span>)</span><br><span class="line">    	&#125;).<span class="title function_">catch</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;OH NO, ERROR!!&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;OH NO, ERROR!!&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//promise chain: dependent asynchronous functions</span></span><br><span class="line"><span class="title function_">fakeRequestPromise</span>(<span class="string">&quot;yelp.com/api/coffee/page1&quot;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;IT WORKED!!!!(page1)&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fakeRequestPromise</span>(<span class="string">&quot;yelp.com/api/coffee/page2&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;IT WORKED!!!!(page2)&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fakeRequestPromise</span>(<span class="string">&quot;yelp.com/api/coffee/page3&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;IT WORKED!!!!(page3)&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;OH NO, A REQUEST FAILED!!&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//create a promise</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fakeRequest</span>=(<span class="params">url</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> rand=<span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(rand&gt;<span class="number">0.7</span>)&#123;</span><br><span class="line">                <span class="title function_">resolve</span>(<span class="string">&quot;Your fake data here&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&quot;Request error&quot;</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fakeRequest</span>(<span class="string">&#x27;/dogs/1&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;DONE WITH REQUEST&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Your data is: &quot;</span>,data)</span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;OH NO, ERROR&quot;</span>+err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//example: rainbow</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">delayedColorChange</span>=(<span class="params">color, delay</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">backgroundColor</span>=color</span><br><span class="line">            <span class="title function_">resolve</span>()</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">delayedColorChange</span>(<span class="string">&quot;red&quot;</span>,<span class="number">1000</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">()=&gt;</span><span class="title function_">delayedColorChange</span>(<span class="string">&quot;orange&quot;</span>,<span class="number">1000</span>))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">()=&gt;</span><span class="title function_">delayedColorChange</span>(<span class="string">&quot;yellow&quot;</span>,<span class="number">1000</span>))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">()=&gt;</span><span class="title function_">delayedColorChange</span>(<span class="string">&quot;green&quot;</span>,<span class="number">1000</span>))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">()=&gt;</span><span class="title function_">delayedColorChange</span>(<span class="string">&quot;blue&quot;</span>,<span class="number">1000</span>))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">()=&gt;</span><span class="title function_">delayedColorChange</span>(<span class="string">&quot;indigo&quot;</span>,<span class="number">1000</span>))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">()=&gt;</span><span class="title function_">delayedColorChange</span>(<span class="string">&quot;violet&quot;</span>,<span class="number">1000</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="async"><a href="#async" class="headerlink" title="async"></a>async</h3><ul>
<li>syntax sugar</li>
<li><strong>async function always returns Promise()</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">sing</span>= <span class="keyword">async</span>(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&quot;OH NO&quot;</span>	<span class="comment">//a rejected Promise</span></span><br><span class="line">    <span class="comment">//after throw, becomes a rejected Promise</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;LA LA LA&quot;</span>	<span class="comment">//a resolved Promise</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sing</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">login</span> = <span class="keyword">async</span>(<span class="params">username, password</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(!username || !password) <span class="keyword">throw</span> <span class="string">&quot;Missing Credentials&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(password === <span class="string">&quot;ivnwth&quot;</span>) <span class="keyword">return</span> <span class="string">&quot;Welcome&quot;</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&quot;Invalid Password&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">login</span>(<span class="string">&quot;wrong input&quot;</span>)</span><br><span class="line">	.<span class="title function_">then</span>(<span class="function"><span class="params">msg</span>=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line">	.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="await"><a href="#await" class="headerlink" title="await"></a>await</h3><p>only valid when inside async functions</p>
<p><strong>wait for a Promise to be resolved</strong> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">rainbow</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">delayedColorChange</span>(<span class="string">&quot;red&quot;</span>,<span class="number">1000</span>))</span><br><span class="line">    <span class="comment">//without await, won&#x27;t see red color because codes happen at the same time!!</span></span><br><span class="line">    <span class="comment">//with await, first see red, then see orange, ...</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">delayedColorChange</span>(<span class="string">&quot;orange&quot;</span>,<span class="number">1000</span>))</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">delayedColorChange</span>(<span class="string">&quot;yellow&quot;</span>,<span class="number">1000</span>))</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">delayedColorChange</span>(<span class="string">&quot;green&quot;</span>,<span class="number">1000</span>))</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">delayedColorChange</span>(<span class="string">&quot;blue&quot;</span>,<span class="number">1000</span>))</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">delayedColorChange</span>(<span class="string">&quot;indigo&quot;</span>,<span class="number">1000</span>))</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">delayedColorChange</span>(<span class="string">&quot;violet&quot;</span>,<span class="number">1000</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ALL DONE&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">rainbow</span>().<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;End of rainbow&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fakeRequest = (<span class="function"><span class="params">url0</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> delay = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*(<span class="number">4500</span>))+<span class="number">500</span>;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(delay&gt;<span class="number">4000</span>)&#123;</span><br><span class="line">                <span class="title function_">reject</span>(<span class="string">&quot;Connection Timeout:(&quot;</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">resolve</span>(<span class="string">`Here is your fake data from <span class="subst">$&#123;url&#125;</span>`</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">                     </span><br><span class="line"><span class="keyword">async</span> <span class="title function_">makeTwoRequests</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> data1=<span class="keyword">await</span> <span class="title function_">fakeRequest</span>(<span class="string">&quot;/page1&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data1)</span><br><span class="line">        <span class="keyword">let</span> data2=<span class="keyword">await</span> <span class="title function_">fakeRequest</span>(<span class="string">&quot;/page2&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data2)</span><br><span class="line">&#125;                     </span><br></pre></td></tr></table></figure>





<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">makeTwoRequest</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> data1=<span class="keyword">await</span> <span class="title function_">fakeRequest</span>(<span class="string">&quot;/page1&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data1)</span><br><span class="line">        <span class="keyword">let</span> data2=<span class="keyword">await</span> <span class="title function_">fakeRequest</span>(<span class="string">&quot;/page2&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data2)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="8-AJAX"><a href="#8-AJAX" class="headerlink" title="8.AJAX"></a>8.AJAX</h2><ul>
<li>request a <strong>web API</strong>, and get a JSON string in return, instead of HTML, CSS and JavaScript<ul>
<li>JSON.parse(string)</li>
<li>JSON.stringify(object)</li>
</ul>
</li>
<li>AJAX? AJAJ!</li>
<li>JSON: JavaScript Object Notation</li>
</ul>
<h3 id="HTTP-Verbs"><a href="#HTTP-Verbs" class="headerlink" title="HTTP Verbs"></a>HTTP Verbs</h3><ul>
<li>get        &#x2F;&#x2F;get data through APIs<ul>
<li>a GET request <strong>cannot</strong> have <strong>req.body</strong>, only <strong>req.query</strong></li>
</ul>
</li>
<li>post      &#x2F;&#x2F;send data and store somewhere</li>
<li>put        &#x2F;&#x2F;completely update</li>
<li>patch    &#x2F;&#x2F;partly update data</li>
<li>delete</li>
</ul>
<h3 id="HTTP-Status-Codes"><a href="#HTTP-Status-Codes" class="headerlink" title="HTTP Status Codes"></a>HTTP Status Codes</h3><p>1:</p>
<p>2: success</p>
<p>3: redirection</p>
<p>4: client error</p>
<p>5: server error</p>
<h3 id="Query-string"><a href="#Query-string" class="headerlink" title="Query string"></a>Query string</h3><h3 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h3><ul>
<li>request header<ul>
<li>Accept: <ol>
<li>text&#x2F;html</li>
<li>application&#x2F;json</li>
<li>text&#x2F;plain</li>
</ol>
</li>
</ul>
</li>
<li>response header</li>
</ul>
<h3 id="XHRs"><a href="#XHRs" class="headerlink" title="XHRs"></a>XHRs</h3><p>old, unrecommended way</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> req=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line">req.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;IT LOADED!!&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">this</span>.<span class="property">responseText</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req.<span class="property">onerror</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ERROR!!&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;https://swapi.dev/api/people/1&quot;</span>);</span><br><span class="line">req.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>







<h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><p>return a Promise</p>
<p>res.json() also returns a Promise</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;https://swapi.dev/api/people/1&quot;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RESOLVED!&quot;</span>,res);</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>();</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;JSON DONE&quot;</span>,data);</span><br><span class="line">      &#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ERROR!&quot;</span>,e);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//a series of request</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">loadPeople</span>= <span class="keyword">async</span>(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> res1=<span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;https://swapi.dev/api/people/1&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> data1=<span class="keyword">await</span> res1.<span class="title function_">json</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data1);</span><br><span class="line">        <span class="keyword">const</span> res2=<span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;https://swapi.dev/api/people/2&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> data2=<span class="keyword">await</span> res2.<span class="title function_">json</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data2);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ERROR!&quot;</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">loadPeople</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>axios.get() returns a data object</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;https://swapi.dev/api/people/1&quot;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RESPONSE:&quot;</span>,res);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ERROR!&quot;</span>,e);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>axios.get(api, config_object)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getDadJoke</span>= <span class="keyword">async</span>(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> config=&#123;<span class="attr">header</span>:&#123;<span class="title class_">Accept</span>: <span class="string">&quot;application/json&quot;</span>&#125;&#125;;</span><br><span class="line">    	<span class="keyword">const</span> res=<span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&quot;https://icanhazdadjoke.com/&quot;</span>,config);</span><br><span class="line">    	<span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>.<span class="property">joke</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="9-OOP"><a href="#9-OOP" class="headerlink" title="9.OOP"></a>9.OOP</h2><p>Array.prototype 和 String.prototype 可定义自定义方法，可override默认方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">grumpus</span>=<span class="function">()=&gt;</span><span class="title function_">alert</span>(<span class="string">&quot;GO AWAY!!&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cat=<span class="string">&quot;cat&quot;</span>;</span><br><span class="line">cat.<span class="title function_">grumpus</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">yell</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`OMG!!!<span class="subst">$&#123;<span class="variable language_">this</span>.toUpperCase()&#125;</span>!!!!!!`</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="string">&quot;i love you&quot;</span>.<span class="title function_">yell</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>	<span class="comment">//actual template object</span></span><br><span class="line">[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].<span class="property">__proto__</span>	<span class="comment">//reference to Array.prototype, no need to use it </span></span><br></pre></td></tr></table></figure>



<p>syntactic sugar</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Color</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">r,g,b,name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">r</span>=r;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">g</span>=g;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">b</span>=b;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">calcHSL</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="title function_">greet</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`HELLO FROM COLOR <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">rgb</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;r,g,b&#125;=<span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`rgb(<span class="subst">$&#123;r&#125;</span>,<span class="subst">$&#123;g&#125;</span>,<span class="subst">$&#123;b&#125;</span>)`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">hex</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;r,g,b&#125;=<span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;#&#x27;</span>+((<span class="number">1</span>&lt;&lt;<span class="number">24</span>)+(r&lt;&lt;<span class="number">16</span>)+(g&lt;&lt;<span class="number">8</span>)+b).<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">calcHSL</span>(<span class="params"></span>)&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//adding new values to this object</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">h</span>=h;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">s</span>=s;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">l</span>=l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">const</span> c1=<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>,<span class="string">&quot;blue&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> c2=<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="string">&quot;white&quot;</span>);</span><br><span class="line">c1.<span class="property">hex</span>===c2.<span class="property">hex</span>		<span class="comment">//true</span></span><br></pre></td></tr></table></figure>





<p>hsl:    hew([1,360]), saturation, lightness</p>
<h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><p>调用父类的constructor</p>
<h2 id="10-Terminal"><a href="#10-Terminal" class="headerlink" title="10.Terminal"></a>10.Terminal</h2><ul>
<li>faster than GUI</li>
<li>all-access pass</li>
</ul>
<p>terminal:    </p>
<ul>
<li>a text-based interface to your computer</li>
<li>originally a physical object, but now we use software terminals</li>
</ul>
<p>shell:</p>
<ul>
<li>the program running on the terminal</li>
</ul>
<p>bash:</p>
<ul>
<li><p>one of the most popular shells</p>
</li>
<li><p>ls</p>
</li>
<li><p>pwd</p>
</li>
<li><p>cd</p>
</li>
<li><p>~ means home directory</p>
</li>
<li><p>&#x2F; means root directory</p>
</li>
<li><p>cd .. 后退一级 </p>
</li>
<li><p>cd &#x2F;</p>
</li>
<li><p>cd ~</p>
</li>
<li><p>mkdir Frogs&#x2F;TreeFrogs SugarGliders</p>
</li>
<li><p>touch index.html app.css app.js</p>
</li>
<li><p>rm index.html</p>
</li>
<li><p>rmdir 只能删空directory</p>
</li>
<li><p>rm -rf</p>
<ul>
<li>can delete (non-empty) directory</li>
<li>recursive </li>
<li>force</li>
</ul>
</li>
</ul>
<h3 id="man"><a href="#man" class="headerlink" title="man"></a>man</h3><ul>
<li>zsh 支持 man ls</li>
<li>bash 不支持</li>
</ul>
<h2 id="11-NodeJS"><a href="#11-NodeJS" class="headerlink" title="11.NodeJS"></a>11.NodeJS</h2><h3 id="Node-REPL"><a href="#Node-REPL" class="headerlink" title="Node REPL"></a>Node REPL</h3><p>Read Evaluate Print Loop</p>
<ul>
<li>.exit    &#x2F;&#x2F;ctrl+d</li>
<li>no <strong>window</strong>, but <strong>global</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node firstScript.js</span><br></pre></td></tr></table></figure>



<h3 id="process"><a href="#process" class="headerlink" title="process"></a>process</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">process.argv</span><br></pre></td></tr></table></figure>





<h3 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h3><ul>
<li>sync: try, catch</li>
<li>async: callback function</li>
</ul>
<h3 id="module-exports"><a href="#module-exports" class="headerlink" title="module.exports"></a>module.exports</h3><ol>
<li><p>export a single file</p>
<ul>
<li><p>export an object that other files can require</p>
</li>
<li><p>in the same directory: </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> math=<span class="built_in">require</span>(<span class="string">&quot;./math&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>export a directory</p>
<ul>
<li>该directory的<strong>index.js</strong> module.exports什么，其他文件就require到什么</li>
</ul>
</li>
</ol>
<h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>Node Package Manager</p>
<ol>
<li>a free library</li>
<li>a command line tool</li>
<li>normally and by default install <strong>locally</strong></li>
<li>or, installed globly, and <strong>npm link</strong></li>
</ol>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><ul>
<li><p>npm init</p>
<p>npm init -y</p>
<p>创建package.json</p>
</li>
<li><p>npm install</p>
<p>根据package.json中的dependencies安装所有依赖包</p>
</li>
</ul>
<h2 id="12-Express"><a href="#12-Express" class="headerlink" title="12.Express"></a>12.Express</h2><h3 id="listen-amp-use"><a href="#listen-amp-use" class="headerlink" title="listen&amp;use"></a>listen&amp;use</h3><ul>
<li>libraries: You are in charge</li>
<li>framework: The framework is in charge!</li>
</ul>
<p>​        <strong>inversion of control</strong></p>
<ul>
<li><p>app.use(callback)</p>
<ul>
<li><p>express将html request&#x2F;response变成两个JS对象，传入callback</p>
</li>
<li><p>req: based on the incoming HTTP request</p>
</li>
<li><p>res: going to generate a HTTP response to the client</p>
<p><strong>can only have one request for one response</strong></p>
</li>
<li><p>res.send()</p>
<ul>
<li>可以传回html</li>
<li>也可以传回json</li>
</ul>
</li>
</ul>
</li>
<li><p>app.listen(8080,callback)</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//anytime we have an incoming request</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;WE GOT A NEW REQUEST!!&quot;</span>);</span><br><span class="line">    <span class="comment">//console.dir(req);</span></span><br><span class="line">    <span class="comment">//res.send(&quot;HELLO, WE GOT YOUR REQUEST! THIS IS A RESPONSE!!&quot;);</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;ivn&quot;</span>, <span class="attr">message</span>: <span class="string">&quot;HELLO WORLD!&quot;</span> &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//start listening!</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;LISTENING ON PORT 8080&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>





<h3 id="routing"><a href="#routing" class="headerlink" title="routing"></a>routing</h3><p>app.get() only match get request</p>
<p>browser地址栏输入都是get request</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;&lt;h1&gt;IVN&lt;h1&gt;&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/r/:sub&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//console.log(req.params);</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">`Welcome to subpage: <span class="subst">$&#123;req.params.sub&#125;</span>`</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/r/:sub/:postId&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; sub, postId &#125; = req.<span class="property">params</span>;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">`&lt;h1&gt;Viewing PostID: <span class="subst">$&#123;postId&#125;</span> on <span class="subst">$&#123;sub&#125;</span>`</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//必须放最后</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;*&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;I don&#x27;t know that path!!&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="query-string"><a href="#query-string" class="headerlink" title="query string"></a>query string</h3><p>&#x2F;search?q&#x3D;cat</p>
<p>request.query</p>
<h3 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h3><p>automatic restart after change</p>
<h2 id="13-Templating"><a href="#13-Templating" class="headerlink" title="13.Templating"></a>13.Templating</h2><p>fill in the blank to create HTML</p>
<p>similar to <em>string template literal</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;ejs&quot;</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;views&quot;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;/views&quot;</span>));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&quot;home.ejs&quot;</span>);	<span class="comment">//.ejs可以省略</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>





<h3 id="EJS-syntax"><a href="#EJS-syntax" class="headerlink" title="EJS syntax"></a>EJS syntax</h3><ul>
<li>Embedded JS</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;</span><br><span class="line">    Page &lt;%=5+6-1 %&gt;</span><br><span class="line">&lt;/h1&gt;</span><br></pre></td></tr></table></figure>



<p>res.render还可以传对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> num = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//res.render(&quot;home&quot;,&#123;allNum:num&#125;); </span></span><br><span class="line">    <span class="comment">//in ejs template: allNum</span></span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&quot;home&quot;</span>, &#123; num &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<ul>
<li>show data</li>
<li>conditions</li>
<li>loops</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h2&gt;Random number: &lt;%= num %&gt;</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">&lt;%if (num%2==0)&#123;	%&gt;</span><br><span class="line">    &lt;h2&gt;</span><br><span class="line">        This is an even number!</span><br><span class="line">    &lt;/h2&gt;</span><br><span class="line">&lt;%&#125;	%&gt;</span><br></pre></td></tr></table></figure>



<h3 id="express-static"><a href="#express-static" class="headerlink" title="express.static()"></a>express.static()</h3><p>middleware</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//规定路径</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;public&#x27;</span>)));</span><br></pre></td></tr></table></figure>



<h3 id="ejs-partials"><a href="#ejs-partials" class="headerlink" title="ejs partials"></a>ejs partials</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- include(&quot;partials/head&quot;)%&gt;</span><br></pre></td></tr></table></figure>





<h2 id="14-Bootstrap"><a href="#14-Bootstrap" class="headerlink" title="14.Bootstrap"></a>14.Bootstrap</h2><p>svg    fontawesome</p>
<h2 id="15-RESTful"><a href="#15-RESTful" class="headerlink" title="15.RESTful"></a>15.RESTful</h2><ul>
<li>get: <ul>
<li>query string</li>
<li>retrieve data, not creating anything</li>
</ul>
</li>
<li>post:<ul>
<li>request body</li>
<li>create data</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//built-in parsing middlewares	</span></span><br><span class="line"><span class="comment">//form data</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">true</span>&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">//json data</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/tacos&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;meat, qty&#125;=req.<span class="property">body</span>;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">`OK, here are your <span class="subst">$&#123;qty&#125;</span> <span class="subst">$&#123;meat&#125;</span> tacos!`</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>REpresentational State Transfer</p>
<ul>
<li>client-server architecture</li>
</ul>
<p>​        Can make requests from browser or Postman. Doesn’t matter where the request is coming from.</p>
<ul>
<li>statelessness</li>
</ul>
<p>​        Every request is on its own.</p>
<ul>
<li><p>uniform interface</p>
<p>combine <strong>URLs</strong> with <strong>HTTP methods</strong> to expose full <strong>CRUD operations</strong> over HTTP</p>
</li>
</ul>
<h3 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h3><ol>
<li><p>app.get(“&#x2F;comments&#x2F;new”)    一个包含form的页面，submit调用app.post()完成新建</p>
</li>
<li><p>app.post(“&#x2F;comments”)   </p>
</li>
<li><p>post完毕后，app.redirect(“&#x2F;comments”)</p>
<p>redirect默认为get</p>
</li>
</ol>
<h3 id="show-x2F-detail-route"><a href="#show-x2F-detail-route" class="headerlink" title="show&#x2F;detail route"></a>show&#x2F;detail route</h3><p>nested route</p>
<h3 id="uuid"><a href="#uuid" class="headerlink" title="uuid"></a>uuid</h3><p>v4</p>
<p>uuidv4()</p>
<h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p>html form only supports GET and POST</p>
<p>however, <strong>method-override</strong></p>
<h2 id="16-MongoDB"><a href="#16-MongoDB" class="headerlink" title="16.MongoDB"></a>16.MongoDB</h2><p>database</p>
<p>database management system</p>
<ul>
<li>effiecency</li>
<li>security</li>
<li>scalability</li>
</ul>
<h3 id="Structured-Query-Language"><a href="#Structured-Query-Language" class="headerlink" title="Structured Query Language"></a>Structured Query Language</h3><ul>
<li><p>predefined schema&#x2F;tables</p>
</li>
<li><p>relational&#x2F;referencing</p>
</li>
</ul>
<h3 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h3><ul>
<li>document</li>
<li>key-value</li>
<li>graph</li>
</ul>
<h3 id="mongod-exe"><a href="#mongod-exe" class="headerlink" title="mongod.exe"></a>mongod.exe</h3><p>get the server running</p>
<p>cmd打开后不要关！！</p>
<h3 id="mongo-exe"><a href="#mongo-exe" class="headerlink" title="mongo.exe"></a>mongo.exe</h3><p>enter the shell</p>
<p><a href="http://127.0.0.1:27017/">http://127.0.0.1:27017/</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show dbs</span><br><span class="line">use loginDemo</span><br><span class="line">show collections</span><br><span class="line">db.users.find()</span><br></pre></td></tr></table></figure>



<h3 id="BSON"><a href="#BSON" class="headerlink" title="BSON"></a>BSON</h3><p>db</p>
<p>show collections</p>
<p>db.dogs.insertOne({name:”hhh”, age:3})</p>
<p>db.dogs.insert([{name:”iii”, age:5},{age:9}])    &#x2F;&#x2F;single or multiple </p>
<p>db.dogs.find()</p>
<p>db.dogs.find({age:9})    &#x2F;&#x2F;return the cursors</p>
<p>db.dogs.findOne({age:9})    &#x2F;&#x2F;return the actual object</p>
<p>db.cats.updateOne({} ,{})</p>
<p>db.cats.updateMany({}, {})</p>
<p>db.replaceOne()</p>
<p>db.deleteOne({})</p>
<p>db.deleteMany({})</p>
<h2 id="17-Mongoose"><a href="#17-Mongoose" class="headerlink" title="17.Mongoose"></a>17.Mongoose</h2><p>npm package </p>
<h3 id="Object-Data-x2F-Document-Mapper"><a href="#Object-Data-x2F-Document-Mapper" class="headerlink" title="Object Data&#x2F;Document Mapper"></a>Object Data&#x2F;Document Mapper</h3><p>nosql</p>
<h3 id="Object-Relation-Mapper"><a href="#Object-Relation-Mapper" class="headerlink" title="Object Relation Mapper"></a>Object Relation Mapper</h3><p>sql</p>
<h3 id="schema"><a href="#schema" class="headerlink" title="schema"></a>schema</h3><p>类比mybatis    .xml</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose=<span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&quot;mongodb://localhost:27017/moviewApp&quot;</span>,&#123;<span class="attr">useNewUrlParser</span>: <span class="literal">true</span>, <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;CONNECTION OPEN!!!&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;OH NO ERROR!!!&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//schema</span></span><br><span class="line"><span class="keyword">const</span> movieSchema=<span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">year</span>:<span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">score</span>:<span class="title class_">Number</span></span><br><span class="line">    <span class="attr">rating</span>:<span class="title class_">String</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//name of model, schema</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Movie</span>=mongoose.<span class="title function_">model</span>(<span class="string">&quot;Movie&quot;</span>, movieSchema);</span><br><span class="line"><span class="comment">//create a db collection called movies</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//make a new JS object</span></span><br><span class="line"><span class="keyword">const</span> amadeus = <span class="keyword">new</span> <span class="title class_">Movie</span>(&#123;<span class="attr">title</span>:<span class="string">&quot;Amadeus&quot;</span>, <span class="attr">year</span>: <span class="number">1986</span>, <span class="attr">score</span>: <span class="number">9.2</span>, <span class="attr">rating</span>: <span class="string">&quot;G&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//save to database collection!</span></span><br><span class="line">amadeus.<span class="title function_">save</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//insert many</span></span><br><span class="line"><span class="title class_">Movie</span>.<span class="title function_">insertMany</span>([</span><br><span class="line">    &#123;&#125;,</span><br><span class="line">    &#123;&#125;,</span><br><span class="line">    &#123;&#125;,</span><br><span class="line">])</span><br></pre></td></tr></table></figure>



<h3 id="load"><a href="#load" class="headerlink" title=".load"></a>.load</h3><p>node</p>
<p>.load index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//return an array; zero, one or many</span></span><br><span class="line"><span class="title class_">Movie</span>.<span class="title function_">find</span>(&#123;<span class="attr">year</span>: &#123;<span class="attr">$lt</span>: <span class="number">1990</span>&#125;&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//findById</span></span><br><span class="line"><span class="title class_">Movie</span>.<span class="title function_">findById</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//updateOne</span></span><br><span class="line"><span class="comment">//updateMany</span></span><br><span class="line"><span class="title class_">Movie</span>.<span class="title function_">updateMany</span>(&#123;<span class="attr">title</span>: &#123;<span class="attr">$in</span>:[<span class="string">&quot;Amadeus&quot;</span>,<span class="string">&quot;Stand By Me&quot;</span>]&#125;&#125;, &#123;<span class="attr">score</span>: <span class="number">10</span>&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line"></span><br><span class="line"><span class="comment">//findOneAndUpdate</span></span><br><span class="line"><span class="title class_">Movie</span>.<span class="title function_">findOneAndUpdate</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//remove is deprecated</span></span><br><span class="line"><span class="title class_">Movie</span>.<span class="title function_">remove</span>(&#123;&#125;)</span><br><span class="line"><span class="title class_">Movie</span>.<span class="title function_">deleteMany</span>(&#123;&#125;)</span><br><span class="line"><span class="title class_">Movie</span>.<span class="title function_">findOneAndDelete</span>(&#123;&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="Operation-Buffering"><a href="#Operation-Buffering" class="headerlink" title="Operation Buffering"></a>Operation Buffering</h3><h3 id="schema-constraints"><a href="#schema-constraints" class="headerlink" title="schema constraints"></a>schema constraints</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> productSchema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">maxlength</span>: <span class="number">20</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">price</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">        <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">//min: 0</span></span><br><span class="line">        <span class="comment">//constraint and error message</span></span><br><span class="line">        <span class="attr">min</span>:[<span class="number">0</span>,<span class="string">&quot;Price must be positive!&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onSale</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">        <span class="attr">default</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">categories</span>: [<span class="title class_">String</span>],	<span class="comment">//attempt to cast input into String</span></span><br><span class="line">    <span class="attr">qty</span>: &#123;</span><br><span class="line">        <span class="attr">online</span>:&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">            <span class="attr">default</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">inStore</span>:&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">            <span class="attr">default</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">size</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line">        <span class="comment">//all valid values</span></span><br><span class="line">        <span class="attr">enum</span>: [<span class="string">&quot;S&quot;</span>, <span class="string">&quot;M&quot;</span>, <span class="string">&#x27;L&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Product</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;Product&quot;</span>, productSchema);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bike = <span class="keyword">new</span> <span class="title class_">Product</span>(&#123;<span class="attr">name</span>: <span class="string">&quot;Bike Helmet&quot;</span>, <span class="attr">price</span>: <span class="number">9.5</span>&#125;, <span class="attr">categories</span>: [<span class="string">&quot;Cycling&quot;</span>, <span class="string">&quot;Safety&quot;</span>, <span class="number">123</span>]);</span><br><span class="line"></span><br><span class="line">bike.<span class="title function_">save</span>()</span><br><span class="line">	.<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;IT WORKED!&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">	.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ERROR!&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//When updating, schema constraint by default Not working</span></span><br><span class="line"><span class="title class_">Product</span>.<span class="title function_">findOneAndUpdate</span>(&#123;<span class="attr">name</span>: <span class="string">&quot;Bike Helmet&quot;</span>&#125;, &#123;<span class="attr">price</span>: <span class="number">99</span>&#125;, &#123;<span class="attr">new</span>:<span class="literal">true</span>, <span class="attr">runValidators</span>: <span class="literal">true</span>&#125; )</span><br><span class="line">	.<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;IT WORKED!&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">	.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ERROR!&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="model-instance-method"><a href="#model-instance-method" class="headerlink" title="model instance method"></a>model instance method</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">productSchema.<span class="property">methods</span>.<span class="property">toggleOnSale</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onSale</span> = !<span class="variable language_">this</span>.<span class="property">onSale</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">save</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">findProduct</span> = <span class="keyword">async</span>(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> foundProduct = <span class="keyword">await</span> <span class="title class_">Product</span>.<span class="title function_">findOne</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;hhh&quot;</span>&#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(foundProduct);</span><br><span class="line">    <span class="keyword">await</span> foundProduct.<span class="title function_">toggleOnSale</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(foundProduct);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="model-static-method"><a href="#model-static-method" class="headerlink" title="model static method"></a>model static method</h3><p><strong>fancy ways of CRUD</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">productSchema.<span class="property">statics</span>.<span class="property">fireSale</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="virtuals"><a href="#virtuals" class="headerlink" title="virtuals"></a>virtuals</h3><ul>
<li><p>behave as if it is a virtual property</p>
</li>
<li><p>not in Mongo database, but only in JS</p>
</li>
<li><p>get</p>
</li>
<li><p>set</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> personSchema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">first</span>:<span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">last</span>:<span class="title class_">String</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">personSchema.<span class="title function_">virtual</span>(<span class="string">&quot;fullName&quot;</span>).<span class="title function_">get</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.first&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.last&#125;</span>`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;Person&quot;</span>, personSchema);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tammy = <span class="keyword">new</span> <span class="title class_">Person</span>(&#123;<span class="attr">first</span>:<span class="string">&quot;Tammy&quot;</span>, <span class="attr">last</span>:<span class="string">&quot;Chow&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tammy.<span class="property">fullName</span>)</span><br><span class="line">                                            </span><br></pre></td></tr></table></figure>





<h3 id="middleware"><a href="#middleware" class="headerlink" title="middleware"></a>middleware</h3><p>do things before and after something(CRUD)</p>
<ul>
<li>pre hook</li>
<li>post hook</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">personSchema.<span class="title function_">pre</span>(<span class="string">&quot;save&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first</span>=<span class="string">&quot;first&quot;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">last</span>=<span class="string">&quot;last&quot;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ABOUT TO SAVE!!&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">personSchema.<span class="title function_">post</span>(<span class="string">&quot;save&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;JUST SAVED!!&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>





<h2 id="18-Express-Middleware"><a href="#18-Express-Middleware" class="headerlink" title="18.Express Middleware"></a>18.Express Middleware</h2><ul>
<li>Express middleware are functions that run during the req&#x2F;res lifecycle.</li>
<li>Middleware can end the HTTP request by sending back a response with methods like res.send()</li>
<li>OR middleware can be chained together, one afte another by calling next()</li>
</ul>
<h3 id="morgan"><a href="#morgan" class="headerlink" title="morgan"></a>morgan</h3><p>logger</p>
<p>npm i morgan</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> morgan=<span class="built_in">require</span>(<span class="string">&quot;morgan&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//app.use 		whenever a request comes in</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;HIJACKED BY MY APP.USE()&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">morgan</span>(<span class="string">&quot;tiny&quot;</span>))	<span class="comment">//inject in the middle</span></span><br><span class="line"><span class="comment">//app.use(morgan(&quot;common&quot;))</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;THIS IS MY FIRST MIDDLEWARE&quot;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;THIS IS MY FIRST MIDDLEWARE - AFTER CALLING NEXT()&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;THIS IS MY SECOND MIDDLEWARE&quot;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//to make sure nothing happens after next, return next</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;THIS IS MY FIRST MIDDLEWARE&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">next</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;THIS IS MY FIRST MIDDLEWARE - AFTER CALLING NEXT()&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    req.<span class="property">method</span>=<span class="string">&quot;GET&quot;</span></span><br><span class="line">    req.<span class="property">requestTime</span>=<span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">path</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;password&#125;=req.<span class="property">query</span></span><br><span class="line">    <span class="keyword">if</span>(password===<span class="string">&quot;chickennugget&quot;</span>)&#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;SORRY YOU NEED A PASSWORD!!!&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/secret&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&quot;NOT FOUND!&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">verifyPassword</span>=(<span class="params">req,res,next</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;password&#125;=req.<span class="property">query</span></span><br><span class="line">    <span class="keyword">if</span>(password===<span class="string">&quot;chickennugget&quot;</span>)&#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;SORRY YOU NEED A PASSWORD!!!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//can have multiple callbacks</span></span><br><span class="line"><span class="comment">//not all callbacks will necessarily be executed</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/secret&quot;</span>,verifyPassword,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;My secret:   &quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>





<h3 id="ejs-mate"><a href="#ejs-mate" class="headerlink" title="ejs -mate"></a>ejs -mate</h3><h4 id="basic-index"><a href="#basic-index" class="headerlink" title="basic index"></a>basic index</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;% layout(&quot;layouts/boilerplate&quot;) %&gt;</span><br><span class="line">&lt;h1&gt;All Campgrounds&lt;/h1&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;a href=&quot;/campgrounds/new&quot;&gt;Add Campground&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;% for( let campground of campgrounds ) &#123; %&gt;</span><br><span class="line">  &lt;li&gt;</span><br><span class="line">    &lt;a href=&quot;/campgrounds/&lt;%= campground._id %&gt; &quot;&gt;</span><br><span class="line">      &lt;%=campground.title %&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>





<h4 id="basic-new"><a href="#basic-new" class="headerlink" title="basic new"></a>basic new</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;% layout(&quot;layouts/boilerplate&quot;) %&gt;</span><br><span class="line">&lt;form action=&quot;/campgrounds&quot; method=&quot;post&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label for=&quot;title&quot;&gt;Title&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;title&quot; name=&quot;campground[title]&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label for=&quot;location&quot;&gt;Location&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;location&quot; name=&quot;campground[location]&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;button&gt;Add Campground&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;a href=&quot;/campgrounds&quot;&gt;Back&lt;/a&gt;</span><br></pre></td></tr></table></figure>



<h4 id="basic-show"><a href="#basic-show" class="headerlink" title="basic show"></a>basic show</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;</span><br><span class="line">  &lt;%= campground.title %&gt;</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;</span><br><span class="line">  &lt;%= campground.location %&gt;</span><br><span class="line">&lt;/h2&gt;</span><br><span class="line">&lt;img src=&quot;&lt;%= campground.image %&gt; &quot; alt=&quot;&quot;&gt;</span><br><span class="line">&lt;p&gt;&lt;%= campground.description  %&gt; &lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;/campgrounds/&lt;%= campground._id %&gt;/edit &quot;&gt;Edit&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;form action=&quot;/campgrounds/&lt;%= campground._id %&gt;?_method=DELETE&quot; method=&quot;post&quot;&gt;</span><br><span class="line">  &lt;button&gt;Delete Campground&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;footer&gt;</span><br><span class="line">  &lt;p&gt;&lt;a href=&quot;/campgrounds&quot;&gt;All Campgrounds&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure>





<h3 id="error-handling"><a href="#error-handling" class="headerlink" title="error-handling"></a>error-handling</h3><ul>
<li>next()        calling next non-error-handling middleware</li>
<li>next(err)   calling next(default) error-handling middleware</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//custom error handling middleware</span></span><br><span class="line"><span class="comment">//if custom error handler is defined, the default one will no longer work, except we add next(err)</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err,req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;====================&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=======ERROR========&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;====================&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;OH BOY, WE GOT AN ERROR!!&quot;</span>)</span><br><span class="line">    <span class="title function_">next</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>





<h2 id="19-Mongo-Relationships"><a href="#19-Mongo-Relationships" class="headerlink" title="19. Mongo Relationships"></a>19. Mongo Relationships</h2><h3 id="SQL-relationships-tables"><a href="#SQL-relationships-tables" class="headerlink" title="SQL relationships        tables!"></a>SQL relationships        tables!</h3><ul>
<li>one-to-many<ul>
<li>primary key     User[id]</li>
<li>foreign key      Post[user_id]</li>
</ul>
</li>
<li>many-to-many<ul>
<li>a third table</li>
<li>Movie[id], Actor[id]</li>
<li>Role[movie_id,actor_id]</li>
</ul>
</li>
</ul>
<h3 id="One-to-Few"><a href="#One-to-Few" class="headerlink" title="One to Few"></a>One to Few</h3><ul>
<li><p>example: users&#x2F;accounts &#x3D;&gt; addresses</p>
</li>
<li><p>embed the data directly in the document</p>
</li>
<li><p>mongo add a new _id for each document&#x2F;schema</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">first</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">last</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">addresses</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//by default, each address will also have a _id</span></span><br><span class="line">            <span class="comment">//can be turned off</span></span><br><span class="line">            <span class="attr">_id</span>: &#123;<span class="attr">id</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">            <span class="attr">street</span>: <span class="title class_">String</span>,</span><br><span class="line">            <span class="attr">city</span>: <span class="title class_">String</span>,</span><br><span class="line">            <span class="attr">state</span>: <span class="title class_">String</span>,</span><br><span class="line">            <span class="attr">country</span>: <span class="title class_">String</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="One-to-Many"><a href="#One-to-Many" class="headerlink" title="One to Many"></a>One to Many</h3><ul>
<li>store refenrences(object id) to document inside the parent</li>
<li>similar to SQL one-to-many</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> productSchema=<span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">season</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">enum</span>: [<span class="string">&quot;Spring&quot;</span>,<span class="string">&quot;Summer&quot;</span>,<span class="string">&quot;Fall&quot;</span>,<span class="string">&quot;Autumn&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Product</span>=mongoose.<span class="title function_">model</span>(<span class="string">&quot;Product&quot;</span>,productSchema);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Product</span>.<span class="title function_">insertMany</span>([</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&quot;Goddess Melon&quot;</span>,<span class="attr">price</span>: <span class="number">4.99</span>,<span class="attr">season</span>:<span class="string">&quot;Summer&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&quot;Sugar Baby Melon&quot;</span>,<span class="attr">price</span>: <span class="number">4.99</span>,<span class="attr">season</span>:<span class="string">&quot;Summer&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&quot;Asparagus&quot;</span>,<span class="attr">price</span>: <span class="number">3.99</span>,<span class="attr">season</span>:<span class="string">&quot;Spring&quot;</span>&#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">//const Schema=mongoose.Schema;</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="title class_">Schema</span>&#125;=mongoose;</span><br><span class="line"><span class="comment">//the ref option tells Mongoose which model to use during population, or the name of the model we are referencing</span></span><br><span class="line"><span class="keyword">const</span> farmSchema=<span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">city</span>:<span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">products</span>:[&#123;<span class="attr">type</span>: <span class="title class_">Schema</span>.<span class="property">Types</span>.<span class="property">ObjectId</span>, <span class="attr">ref</span>: <span class="string">&quot;Product&quot;</span>&#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Farm</span>=mongoose.<span class="title function_">model</span>(<span class="string">&quot;Farm&quot;</span>,farmSchema);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> farm=<span class="keyword">new</span> <span class="title class_">Farm</span>(&#123;<span class="attr">name</span>: <span class="string">&quot;Fully Belly Farms&quot;</span>, <span class="attr">city</span>: <span class="string">&quot;Guinda, CA&quot;</span>&#125;);</span><br><span class="line"><span class="keyword">const</span> melon1=<span class="title class_">Product</span>.<span class="title function_">findOne</span>(&#123;<span class="attr">name</span>: <span class="string">&quot;Goddess Melon&quot;</span>&#125;);</span><br><span class="line"><span class="keyword">const</span> melon2=<span class="title class_">Product</span>.<span class="title function_">findOne</span>(&#123;<span class="attr">name</span>: <span class="string">&quot;Asparagus&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//not pushing the entire object, but just the id</span></span><br><span class="line">farm.<span class="property">products</span>.<span class="title function_">push</span>(melon1);</span><br><span class="line">farm.<span class="property">products</span>.<span class="title function_">push</span>(melon2);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Farm</span>.<span class="title function_">findOne</span>(&#123;<span class="attr">name</span>: <span class="string">&quot;Fully Belly Farms&quot;</span>&#125;)</span><br><span class="line">    .<span class="title function_">populate</span>(<span class="string">&quot;products&quot;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">farm</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(farm))</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="One-to-Bajillions"><a href="#One-to-Bajillions" class="headerlink" title="One to Bajillions"></a>One to Bajillions</h3><ul>
<li><p>example: users &#x3D;&gt; tweets</p>
</li>
<li><p>store reference to parent in child</p>
</li>
<li><p>ref: Model</p>
</li>
<li><p>populate: field</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userSchema=<span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="title class_">Number</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tweetSchema=<span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">text</span>:<span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">likes</span>:<span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">user</span>:&#123;<span class="attr">type</span>:<span class="title class_">Schema</span>.<span class="property">Type</span>.<span class="property">ObjectId</span>, <span class="attr">ref</span>:<span class="string">&quot;User&quot;</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span>=mongoose.<span class="title function_">model</span>(<span class="string">&quot;User&quot;</span>,userSchema)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Tweet</span>=mongoose.<span class="title function_">model</span>(<span class="string">&quot;Tweet&quot;</span>,tweetSchema)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> <span class="title class_">User</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;chickenfan99&quot;</span>,<span class="attr">age</span>:<span class="number">63</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> tweet1=<span class="keyword">new</span> <span class="title class_">Tweet</span>(&#123;<span class="attr">text</span>:<span class="string">&quot;omg I love my chicken family!&quot;</span>, <span class="attr">likes</span>:<span class="number">0</span>&#125;);</span><br><span class="line">tweet1.<span class="property">user</span>=user;</span><br><span class="line">user.<span class="title function_">save</span>();</span><br><span class="line">tweet1.<span class="title function_">save</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//populate: name of the field, not name of the model</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Tweet</span>.<span class="title function_">findOne</span>(&#123;&#125;).<span class="title function_">populate</span>(<span class="string">&quot;user&quot;</span>))</span><br><span class="line"><span class="comment">//only want user.username</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Tweet</span>.<span class="title function_">findOne</span>(&#123;&#125;).<span class="title function_">populate</span>(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;username&quot;</span>))</span><br></pre></td></tr></table></figure>



<h3 id="paradox-of-choice-rule-of-thumb"><a href="#paradox-of-choice-rule-of-thumb" class="headerlink" title="paradox of choice: rule of thumb"></a>paradox of choice: rule of thumb</h3><ul>
<li>favor embedding unless there is compelling reason not to</li>
<li>needing to access an object on its own is a compelling reason not to embed it </li>
<li>Arrays should not grow without bound.</li>
<li>Don’t be afraid of application-level joins.</li>
<li>Consider the write&#x2F;read ratio when denormalizing.<ul>
<li>denormal: duplicate and store some requently accessed field together with objectId</li>
</ul>
</li>
<li>As always with MongoDB, how you model your data depends - entirely - on your particular application’s data access patterns.<ul>
<li>query?</li>
<li>update?</li>
</ul>
</li>
</ul>
<h3 id="deletion-mongoose-middleware"><a href="#deletion-mongoose-middleware" class="headerlink" title="deletion mongoose middleware"></a>deletion mongoose middleware</h3><ul>
<li>query middleware</li>
<li>document middleware</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//before &quot;findByIdAndDelete&quot;, have no access to data deleted</span></span><br><span class="line">farmSchema.<span class="title function_">pre</span>(<span class="string">&quot;findOneAndDelete&quot;</span>,<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;PRE MIDDLEWARE&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//after &quot;findByIdAndDelete&quot;, have access to data deleted</span></span><br><span class="line">farmSchema.<span class="title function_">post</span>(<span class="string">&quot;findOneAndDelete&quot;</span>,<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">farm</span>)&#123;</span><br><span class="line">    <span class="comment">//console.log(&quot;POST MIDDLEWARE&quot;)</span></span><br><span class="line">    <span class="comment">//console.log(data)</span></span><br><span class="line">    <span class="keyword">if</span>(farm.<span class="property">products</span>.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> res =<span class="keyword">await</span> <span class="title class_">Product</span>.<span class="title function_">deleteMany</span>(&#123;<span class="attr">_id</span>:&#123;<span class="attr">$in</span>: farm.<span class="property">products</span>&#125;&#125;)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>





<h2 id="20-express-router"><a href="#20-express-router" class="headerlink" title="20. express router"></a>20. express router</h2><ul>
<li><p>better handle nested routes</p>
</li>
<li><p>separate and group different routes</p>
</li>
<li><p>assign middlewares to specific groups</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> router=express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//middleware</span></span><br><span class="line">router.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">query</span>.<span class="property">isAdmin</span>)&#123;</span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;SORRY NOT AN ADMIN!&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//router.get(&quot;/shelters&quot;,(req,res)=&gt;&#123;</span></span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//router.post(&quot;/shelters&quot;,(req,res)=&gt;&#123;</span></span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/shelters/:id&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/:id&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//router.get(&quot;/shelters/:id/edit&quot;,(req,res)=&gt;&#123;</span></span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/:id/edit&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=router</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> shelterRoutes=<span class="built_in">require</span>(<span class="string">&quot;./routes/shelters&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//app.use(&quot;/&quot;,shelterRoutes)</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/shelters&quot;</span>,shelterRoutes)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Serving app on localhost:3000&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="21-http-cookies"><a href="#21-http-cookies" class="headerlink" title="21. http cookies"></a>21. http cookies</h2><ul>
<li><strong>cookies</strong> are little bits of information that are stored in a user’s browser when browsing a particular website</li>
<li>once a <strong>cookie</strong> is set, a user’s browser will send the cookie on every subsequent request to the site</li>
<li><strong>cookies</strong> add some <strong>“statefulness”</strong> to HTTP , between requests</li>
</ul>
<h3 id="send-cookies"><a href="#send-cookies" class="headerlink" title="send cookies"></a>send cookies</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/setname&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">cookie</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;steve chicks&quot;</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;OK SENT YOU A COOKIE!!&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="cookie-parser-middleware"><a href="#cookie-parser-middleware" class="headerlink" title="cookie parser middleware"></a>cookie parser middleware</h3><p>npm i cookie-parser</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cookieParser=<span class="built_in">require</span>(<span class="string">&quot;cookie-parser&quot;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>())</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/greet&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//console.log(req.cookies)</span></span><br><span class="line">    <span class="keyword">const</span> &#123;name=<span class="string">&quot;No-name&quot;</span>&#125; = req.<span class="property">cookies</span>;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">`HEY THERE, <span class="subst">$&#123;name&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="signed-cookie"><a href="#signed-cookie" class="headerlink" title="signed cookie:"></a>signed cookie:</h3><h4 id="signed"><a href="#signed" class="headerlink" title="signed?"></a>signed?</h4><ul>
<li>analogy: old wax seal on letter, proving its <strong>validity&#x2F;integrity</strong></li>
<li>analogy: seal on peanut butter jar, if it’s broken, don’t eat it</li>
<li>is way to make sure it is not tampered with, not to make it a secret&#x2F;encrypted!!</li>
</ul>
<h4 id="basic-idea"><a href="#basic-idea" class="headerlink" title="basic idea:"></a>basic idea:</h4><ol>
<li>server send signed cookie to client</li>
<li>client send plain cookie to server on every request</li>
<li>client able to tell whether the cookie has been tampered with</li>
</ol>
<p>​        cookie-parser</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cookieParser=<span class="built_in">require</span>(<span class="string">&quot;cookie-parser&quot;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>(<span class="string">&quot;thisismysecret&quot;</span>))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/getsignedcookie&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">cookie</span>(<span class="string">&quot;fruit&quot;</span>,<span class="string">&quot;grape&quot;</span>,&#123;<span class="attr">signed</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;sent you a signed cookie!&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/verifyfruit&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">cookies</span>)	<span class="comment">//won&#x27;t contain signed cookie</span></span><br><span class="line">    res.<span class="title function_">send</span>(req.<span class="property">signedCookies</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h4><p><strong>Hash-based Message Authentication Code</strong></p>
<p>hashing function: SHA256</p>
<h2 id="22-session"><a href="#22-session" class="headerlink" title="22. session"></a>22. session</h2><ul>
<li><p>server side data store to make requests somewhat <strong>stateful</strong></p>
</li>
<li><p>example: shopping cart</p>
<ol>
<li>session contains the whole shopping carts of different id’s</li>
<li>cookie only contains the session id, <strong>connect.sid</strong></li>
</ol>
</li>
<li><p>server send back the session id as cookie</p>
</li>
<li><p>default store: <strong>MemoryStore</strong></p>
<p>when restart the browser, everything is reset</p>
</li>
<li><p>impermenant data store: Redis</p>
</li>
</ul>
<h3 id="why-not-cookie"><a href="#why-not-cookie" class="headerlink" title="why not cookie?"></a>why not cookie?</h3><ol>
<li>limited size</li>
<li>insecure</li>
</ol>
<h3 id="express-session"><a href="#express-session" class="headerlink" title="express-session"></a>express-session</h3><p>npm i express-session</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> session=<span class="built_in">require</span>(<span class="string">&quot;express-session&quot;</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;<span class="attr">secret</span>: <span class="string">&quot;thisisnotagoodsecret&quot;</span>, <span class="attr">resave</span>: <span class="literal">false</span>, <span class="attr">saveUninitialized</span>: <span class="literal">false</span>&#125;))</span><br><span class="line"><span class="comment">//send back a signed cookie: connect.sid</span></span><br><span class="line"><span class="comment">//to the browser</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/viewcount&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">session</span>.<span class="property">count</span>)&#123;</span><br><span class="line">        req.<span class="property">session</span>.<span class="property">count</span>+=<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        req.<span class="property">session</span>.<span class="property">count</span>=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">`YOU HAVE VIEWED THIS PAGE <span class="subst">$&#123;req.session.count&#125;</span> TIMES`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/register&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;username=<span class="string">&quot;Anonymous&quot;</span>&#125; = req.<span class="property">query</span>;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">username</span>=username;</span><br><span class="line">    res.<span class="title function_">redirect</span>(<span class="string">&quot;/greet&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/greet&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;username&#125; = req.<span class="property">session</span>;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">`Welcome back, <span class="subst">$&#123;username&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Serving app on localhost:3000&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="connect-flash"><a href="#connect-flash" class="headerlink" title="connect-flash"></a>connect-flash</h3><ul>
<li>after some action (create, delete, log in)</li>
<li>before redirection</li>
<li>depends on session</li>
</ul>
<p>npm i connect-flash</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> flash=<span class="built_in">require</span>(<span class="string">&quot;connect-flash&quot;</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">flash</span>())</span><br></pre></td></tr></table></figure>



<p>with the flash middleware in place, all requests will have a req.flash() function that can be used to flash messages</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//(key, value), stored in session</span></span><br><span class="line"><span class="comment">//before redirect</span></span><br><span class="line">req.<span class="title function_">flash</span>(<span class="string">&quot;info&quot;</span>,<span class="string">&quot;information I want to flash&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//when I want to use it, in the redirected page</span></span><br><span class="line">res.<span class="title function_">render</span>(<span class="string">&quot;index&quot;</span>,&#123;<span class="attr">messages</span>:req.<span class="title function_">flash</span>(<span class="string">&quot;info&quot;</span>)&#125;)</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%= messages %&gt;</span><br></pre></td></tr></table></figure>



<h3 id="improvement-using-res-locals"><a href="#improvement-using-res-locals" class="headerlink" title="improvement using res.locals"></a>improvement using res.locals</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="property">locals</span>.<span class="property">messages</span>=req.<span class="title function_">flash</span>(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>





<h2 id="23-Authentication-amp-Authorization"><a href="#23-Authentication-amp-Authorization" class="headerlink" title="23. Authentication &amp; Authorization"></a>23. Authentication &amp; Authorization</h2><ul>
<li><p>authentication is the process of verifying <strong>who a particular user is</strong></p>
<ol>
<li>username&#x2F;password combo</li>
<li>security questions</li>
<li>facial recognition</li>
</ol>
</li>
<li><p>authorization is verifying <strong>what a specific user has access to</strong></p>
<p>“Now that we know who you are, here is what you are allowed to do and NOT allowed to do”</p>
</li>
</ul>
<h3 id="NEVER-STORE-PASSWORDS"><a href="#NEVER-STORE-PASSWORDS" class="headerlink" title="NEVER STORE PASSWORDS"></a>NEVER STORE PASSWORDS</h3><ul>
<li>Rather than storing a password in the database, wu run the password through a <strong>hashing function</strong> first and then store the result in the database</li>
</ul>
<h3 id="hashing-function"><a href="#hashing-function" class="headerlink" title="hashing function"></a>hashing function</h3><ul>
<li>functions that map input data of some <strong>arbitrary size</strong> to <strong>fixed-size</strong> output values</li>
</ul>
<h3 id="cryptographic-hash-functions"><a href="#cryptographic-hash-functions" class="headerlink" title="cryptographic hash functions"></a>cryptographic hash functions</h3><ul>
<li><strong>one-way function</strong> which is infeasible to invert</li>
</ul>
<p>​       unable to get the input from the output</p>
<ul>
<li><p>small change in input yields large change in the output</p>
</li>
<li><p><strong>deterministic</strong>: same input yields same output</p>
</li>
<li><p>unlikely to find 2 outputs with same value</p>
<p>collisions are rare</p>
</li>
<li><p>password hash functions are <strong>deliberately slow</strong></p>
</li>
</ul>
<h3 id="password-salts"><a href="#password-salts" class="headerlink" title="password salts"></a>password salts</h3><ul>
<li><p>an extra safeguard</p>
</li>
<li><p>facts:</p>
<ol>
<li>people use same passwords from one site to the next frequently</li>
<li>people in general, use the same passwords from one person to the next</li>
</ol>
</li>
<li><p>if hackers know the hash fuction is Bcrypt ahead of time, they can precompute, trying every common password</p>
</li>
<li><p>password salts:</p>
<pre><code>1. A salt is a **random value** added to the password before we hash it.
   + append
   + prepend
</code></pre>
<ol>
<li>It helps ensure unique hashes and mitigate common attacks.</li>
</ol>
</li>
</ul>
<h3 id="Bcrypt"><a href="#Bcrypt" class="headerlink" title="Bcrypt"></a>Bcrypt</h3><ul>
<li><p>saltRounds: difficulty, amoun of time to hash</p>
<p>recommended around 12</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bcrypt=<span class="built_in">require</span>(<span class="string">&quot;bcrypt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">hashPassword</span>=<span class="keyword">async</span>(<span class="params">pw</span>)=&gt;&#123;</span><br><span class="line">    <span class="comment">//const salt=await bcrypt.genSalt(10);</span></span><br><span class="line">    <span class="comment">//const hash=await bcrypt.hash(pw,salt);</span></span><br><span class="line">    <span class="comment">//console.log(salt)</span></span><br><span class="line">    <span class="keyword">const</span> hash=<span class="keyword">await</span> bcrypt.<span class="title function_">hash</span>(pw,<span class="number">10</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(hash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">login</span>=<span class="keyword">async</span>(<span class="params">pw,hashedPassword</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> result=<span class="keyword">await</span> bcrypt.<span class="title function_">compare</span>(pw,hashedPassword)</span><br><span class="line">    <span class="keyword">if</span>(result)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;LOGGED IN !!&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;INCORRECT&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">hashPassword</span>(<span class="string">&quot;monkey&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="use-session-to-log-in-x2F-out"><a href="#use-session-to-log-in-x2F-out" class="headerlink" title="use session to log in&#x2F;out"></a>use session to log in&#x2F;out</h3><p>On an incoming http request, Express middleware that supports the session checks a particular client cookie and if that particular cookie is found on the http request and is found in the global session object&#x2F;database, then it adds that session’s stored info to the request object for the http request handler to later use.</p>
<p>So, here’s a typical sequence:</p>
<ol>
<li>Incoming HTTP request.</li>
<li>Middleware checks for session cookie.</li>
<li>If session cookie not there, then create one and, in the process created a unique id to identify this http client.</li>
<li>In the persistent session store, initialize the session for this new client.</li>
<li>If session cookie is there, then look in the session store for the session data for this client and add that data to the request object.</li>
<li>End of session middleware processing</li>
<li>Later on in the Express processing of this http request, it gets to a matching request handler. The session data from the session store for this particular http client is already attached to the request object and available for the request handler to use.</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/login&quot;</span>,<span class="title function_">async</span>(req,res)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;username,password&#125;=req.<span class="property">body</span>;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findOne</span>(&#123;username&#125;)</span><br><span class="line">    <span class="keyword">const</span> validPassword=<span class="keyword">await</span> bcrypt.<span class="title function_">compare</span>(password,user.<span class="property">password</span>)</span><br><span class="line">    <span class="keyword">if</span>(validPassword)&#123;</span><br><span class="line">        req.<span class="property">session</span>.<span class="property">user_id</span>=user.<span class="property">_id</span></span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&quot;YAY WELCOME!!&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&quot;TRY AGAIN&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/secret&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">user_id</span>)&#123;</span><br><span class="line">        res.<span class="title function_">redierct</span>(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;This is a secret for logged in users!!&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;logout&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//req.session.user_id=null;</span></span><br><span class="line">    req.<span class="property">session</span>.<span class="title function_">destroy</span>(); <span class="comment">//destroy the entire session</span></span><br><span class="line">    res.<span class="title function_">redirect</span>(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>





<h3 id="refactor-to-model-methods"><a href="#refactor-to-model-methods" class="headerlink" title="refactor to model methods"></a>refactor to model methods</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">userSchema.<span class="property">statics</span>.<span class="property">findAndValidate</span>=<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">username,password</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> foundUser=<span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">findOne</span>(&#123;username&#125;)</span><br><span class="line">    <span class="keyword">const</span> isValid=<span class="keyword">await</span> bcrypt.<span class="title function_">compare</span>(password,foundUser.<span class="property">password</span>)</span><br><span class="line">    <span class="keyword">return</span> isValid ? foundUser : <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">userSchema.<span class="title function_">pre</span>(<span class="string">&quot;save&quot;</span>,<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">next</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="title function_">isModified</span>(<span class="string">&quot;password&quot;</span>)) <span class="keyword">return</span> <span class="title function_">next</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">password</span>=<span class="keyword">await</span> bcrypt.<span class="title function_">hash</span>(<span class="variable language_">this</span>.<span class="property">password</span>,<span class="number">12</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="24-image-upload"><a href="#24-image-upload" class="headerlink" title="24. image upload"></a>24. image upload</h2><ul>
<li>mongo document size limit: 16MB</li>
<li>GridFS</li>
</ul>
<ol>
<li>set up a form that would accept images</li>
<li>submit the form</li>
<li>store image data in Cloudinary</li>
<li>Cloudinary send back URLs</li>
<li>store URLs in mongo</li>
</ol>
<h3 id="Cloudinary"><a href="#Cloudinary" class="headerlink" title="Cloudinary"></a>Cloudinary</h3><ul>
<li>like AWS</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CLOUDINARY_CLOUD_NAME=</span><br><span class="line">CLOUDINARY_KEY=</span><br><span class="line">CLOUDINARY_SECRET=</span><br></pre></td></tr></table></figure>



<h3 id="enctype"><a href="#enctype" class="headerlink" title="enctype"></a>enctype</h3><ul>
<li><p>application&#x2F;x-www-form-urlencoded</p>
<p>default</p>
</li>
<li><p>multipart&#x2F;form-data</p>
<p>if the form contains file inputs</p>
</li>
</ul>
<h3 id="Multer"><a href="#Multer" class="headerlink" title="Multer"></a>Multer</h3><ol>
<li><p>first upload</p>
</li>
<li><p>then we can use req.body and req.file(s)</p>
</li>
</ol>
<p>in order to parse mutlipart form</p>
<ul>
<li><p>req.body</p>
<p>other information, except for the file</p>
</li>
<li><p>req.file</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> multer=<span class="built_in">require</span>(<span class="string">&quot;multer&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> upload=<span class="title function_">multer</span>(&#123;<span class="attr">dest</span>:<span class="string">&quot;uploads/&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">route</span>(<span class="string">&quot;/&quot;</span>).<span class="title function_">post</span>(upload.<span class="title function_">single</span>(<span class="string">&quot;image&quot;</span>),<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>,req.<span class="property">file</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(req.<span class="property">file</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">route</span>(<span class="string">&quot;/&quot;</span>).<span class="title function_">post</span>(upload.<span class="title function_">array</span>(<span class="string">&quot;image&quot;</span>),<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>,req.<span class="property">files</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(req.<span class="property">files</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="dotenv"><a href="#dotenv" class="headerlink" title="dotenv"></a>dotenv</h3><ul>
<li>avoid embedding api credentials right inside applications</li>
<li>instead, store in .env files</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SECRET=lololololol</span><br><span class="line">API_KEY=fasdjfoiahfawe8</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !==<span class="string">&quot;production&quot;</span>)&#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&quot;dotenv&quot;</span>).<span class="title function_">config</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">env</span>.<span class="property">SECRET</span>)</span><br></pre></td></tr></table></figure>





<h2 id="25-common-security-vulnerabilities"><a href="#25-common-security-vulnerabilities" class="headerlink" title="25. common security vulnerabilities"></a>25. common security vulnerabilities</h2><h3 id="database-injection"><a href="#database-injection" class="headerlink" title="database injection"></a>database injection</h3><ul>
<li><p>sql injection</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; DROP TABLE user</span><br></pre></td></tr></table></figure>


</li>
<li><p>mongo injection</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.users.find(&#123;username:req.body.username&#125;)</span><br><span class="line">//</span><br><span class="line">db.users.find(&#123;username:&#123;&quot;$gt&quot;:&quot;&quot;&#125;&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Cross-Site-Scripting-XSS"><a href="#Cross-Site-Scripting-XSS" class="headerlink" title="Cross Site Scripting(XSS)"></a>Cross Site Scripting(XSS)</h3><p><a href="https://xss-game.appspot.com/">https://xss-game.appspot.com/</a></p>
<h3 id="helmet"><a href="#helmet" class="headerlink" title="helmet"></a>helmet</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">    <span class="title function_">helmet</span>(&#123;</span><br><span class="line">        <span class="attr">contentSecurityPolicy</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">crossOriginEmbedderPolicy</span>: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>





<h2 id="26-heroku"><a href="#26-heroku" class="headerlink" title="26. heroku"></a>26. heroku</h2><h3 id="heroku-CLI"><a href="#heroku-CLI" class="headerlink" title="heroku CLI"></a>heroku CLI</h3><p>command line interface</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">heroku git:remote -a &lt;name of the heroku app&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">heroku login</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;new message&quot;</span><br><span class="line">git push heroku master</span><br><span class="line"></span><br><span class="line">heroku restart</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Project</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
        <tag>MongoDB</tag>
        <tag>Heroku</tag>
      </tags>
  </entry>
  <entry>
    <title>COEN317</title>
    <url>/2022/12/04/COEN317/</url>
    <content><![CDATA[<h1 id="COEN-317-Distributed-system"><a href="#COEN-317-Distributed-system" class="headerlink" title="COEN 317     Distributed system"></a>COEN 317     Distributed system</h1><h2 id="09-x2F-21"><a href="#09-x2F-21" class="headerlink" title="09&#x2F;21"></a>09&#x2F;21</h2><h3 id="layer-tier"><a href="#layer-tier" class="headerlink" title="layer tier"></a>layer tier</h3><ul>
<li>layer: software</li>
<li>tier: hardware</li>
</ul>
<h3 id="layerd-architecture-style"><a href="#layerd-architecture-style" class="headerlink" title="layerd architecture style"></a>layerd architecture style</h3><ul>
<li>separation of concerns</li>
<li>unnecessary transaction</li>
<li>grey line, hard to decide which layer to put</li>
</ul>
<h3 id="event-based-architecture-styles"><a href="#event-based-architecture-styles" class="headerlink" title="event based architecture styles"></a>event based architecture styles</h3><ul>
<li>dynamic</li>
<li>at the beginning, each component don’t know who to communicate to</li>
<li>after that, can point-to-point</li>
</ul>
<h3 id="middleware"><a href="#middleware" class="headerlink" title="middleware"></a>middleware</h3><ul>
<li>libararies, runtime environment</li>
<li>JVM</li>
</ul>
<h3 id="blocking"><a href="#blocking" class="headerlink" title="blocking"></a>blocking</h3><ul>
<li><p>sent&#x2F;transmission !&#x3D; reach the destination</p>
</li>
<li><p>blocking: suspended until transmission finishes</p>
</li>
<li><p>transmission:  IT DEPENDS!</p>
<ol>
<li><p>sending message buffer</p>
</li>
<li><p>channel</p>
</li>
<li><p>receiving messsage buffer</p>
</li>
</ol>
</li>
</ul>
<h3 id="persistent-communication"><a href="#persistent-communication" class="headerlink" title="persistent communication"></a>persistent communication</h3><ul>
<li>message queue</li>
<li>need to store data</li>
</ul>
<h3 id="asynchronous"><a href="#asynchronous" class="headerlink" title="asynchronous"></a>asynchronous</h3><ul>
<li>synchronous: wait unitl <strong>delivery</strong>, not process of the data</li>
</ul>
<h3 id="soft-state"><a href="#soft-state" class="headerlink" title="soft state"></a>soft state</h3><p>cache</p>
<h2 id="09-x2F-26"><a href="#09-x2F-26" class="headerlink" title="09&#x2F;26"></a>09&#x2F;26</h2><ul>
<li><p>application-specific protocol</p>
</li>
<li><p>application-independent protocol: </p>
<p><strong>middleware</strong></p>
</li>
<li><p>TCP&#x2F;IP protocol:</p>
<p>local OS</p>
</li>
</ul>
<h3 id="why-layered"><a href="#why-layered" class="headerlink" title="why layered?"></a>why layered?</h3><p>separation of concerns</p>
<h3 id="OSI-reference-model"><a href="#OSI-reference-model" class="headerlink" title="OSI reference model"></a>OSI reference model</h3><ol>
<li><p>application</p>
</li>
<li><p>presentation</p>
<ul>
<li>process information for applications</li>
<li>serialization&#x2F;deserialization</li>
<li>encryption&#x2F;decryption</li>
</ul>
</li>
<li><p>session</p>
</li>
<li><p>transport</p>
<ul>
<li>end-to-end communication between different applications</li>
</ul>
</li>
<li><p>network</p>
<ul>
<li>routing packets</li>
</ul>
</li>
<li><p>data link</p>
<ul>
<li>send, detect and corrent data frames</li>
<li>data frames: units of bits</li>
</ul>
</li>
<li><p>physical layer</p>
<ul>
<li>actual transfer of binary bits data</li>
</ul>
</li>
</ol>
<p>​          </p>
<h3 id="TCP-x2F-IP-protocol-suite"><a href="#TCP-x2F-IP-protocol-suite" class="headerlink" title="TCP&#x2F;IP protocol suite"></a>TCP&#x2F;IP protocol suite</h3><ol>
<li><p>application</p>
<ul>
<li>HTTP, FTP, SMTP</li>
<li>process-to-process</li>
</ul>
</li>
<li><p>transport</p>
<ul>
<li>TCP, UDP</li>
<li>host-to-host</li>
</ul>
</li>
<li><p>internet</p>
<ul>
<li><p>IP</p>
</li>
<li><p>routing table</p>
<p>host a-&gt; router -&gt; router -&gt; host b</p>
</li>
</ul>
</li>
<li><p>link</p>
</li>
</ol>
<p>​        </p>
<h3 id="TCP-UDP"><a href="#TCP-UDP" class="headerlink" title="TCP UDP"></a>TCP UDP</h3><ul>
<li><p>TCP</p>
<p>data in streams</p>
</li>
<li><p>UDP</p>
<p>data in messages</p>
</li>
</ul>
<h3 id="remote-procedure-calls"><a href="#remote-procedure-calls" class="headerlink" title="remote procedure calls"></a>remote procedure calls</h3><p>remote invocation</p>
<ul>
<li>one-way RPC</li>
<li>asynchronous RPC</li>
</ul>
<h3 id="remote-object-calls"><a href="#remote-object-calls" class="headerlink" title="remote object calls"></a>remote object calls</h3><h3 id="message-brokers"><a href="#message-brokers" class="headerlink" title="message brokers"></a>message brokers</h3><ul>
<li><p>between clients and servers</p>
</li>
<li><p>beyond simple queues</p>
</li>
<li><p>message will be persistent</p>
</li>
</ul>
<h3 id="socket-APIs"><a href="#socket-APIs" class="headerlink" title="socket APIs"></a>socket APIs</h3><ul>
<li>transport-level socket programming via socket interface</li>
<li>message-oriented transient communication at the <strong>transport layer</strong></li>
</ul>
<h3 id="Messaging-passing-interface"><a href="#Messaging-passing-interface" class="headerlink" title="Messaging-passing interface"></a>Messaging-passing interface</h3><ul>
<li>message-oriented transient communication at the <strong>application layer</strong></li>
</ul>
<h3 id="queuing-model"><a href="#queuing-model" class="headerlink" title="queuing model"></a>queuing model</h3><ul>
<li><p>message-oriented persistent communication</p>
</li>
<li><p>asynchronous&#x2F;time uncoupling</p>
</li>
<li><p>advanced message queuing protocol</p>
<p>rabbitMQ</p>
</li>
</ul>
<h2 id="0928"><a href="#0928" class="headerlink" title="0928"></a>0928</h2><h3 id="why-some-inaccuracy-is-tolerable"><a href="#why-some-inaccuracy-is-tolerable" class="headerlink" title="why some inaccuracy is tolerable?"></a>why some inaccuracy is tolerable?</h3><ol>
<li>more than one failure detection mechanism</li>
<li>in heart-beating, after some times it will correct itself</li>
</ol>
<h3 id="atomic-gt-reliable"><a href="#atomic-gt-reliable" class="headerlink" title="atomic &gt; reliable"></a>atomic &gt; reliable</h3><ul>
<li>atomic: all or none receive the message   <strong>overkill</strong></li>
<li>reliable: we can tolerate some inaccuracy</li>
</ul>
<h3 id="centralized-heart-beating-out-of-consideration"><a href="#centralized-heart-beating-out-of-consideration" class="headerlink" title="centralized heart-beating   out of consideration!"></a>centralized heart-beating   out of consideration!</h3><ul>
<li>single point  &#x2F;   performance</li>
<li>too much workload for the center node</li>
<li>can not be dynamic:  the center needs to know the global state</li>
<li>saturated</li>
</ul>
<h3 id="ring-heart-beating-valid"><a href="#ring-heart-beating-valid" class="headerlink" title="ring heart-beating  valid"></a>ring heart-beating  valid</h3><ul>
<li>predecessor and successor</li>
<li>what if 2 nodes fail?     stablization protocol</li>
<li>detection is too slow</li>
</ul>
<h3 id="all-to-all-heart-beating-valid"><a href="#all-to-all-heart-beating-valid" class="headerlink" title="all-to-all heart-beating    valid"></a>all-to-all heart-beating    valid</h3><ul>
<li>full of unnecessary message</li>
<li>can not be dynamic</li>
</ul>
<h3 id="false-positive-x2F-false-negative"><a href="#false-positive-x2F-false-negative" class="headerlink" title="false positive  &#x2F;   false negative"></a>false positive  &#x2F;   false negative</h3><ul>
<li>inaccurate</li>
<li>incomplete!   intolerable</li>
</ul>
<h3 id="local-buffers-processes-and-channels"><a href="#local-buffers-processes-and-channels" class="headerlink" title="local buffers   processes and channels"></a>local buffers   processes and channels</h3><ul>
<li>copy message to outgoing message buffer   send</li>
<li>copy message from incoming message buffer   receive</li>
<li>latency: in channel and in operation system</li>
</ul>
<h3 id="process-failure-x2F-channel-failure"><a href="#process-failure-x2F-channel-failure" class="headerlink" title="process failure &#x2F; channel failure"></a>process failure &#x2F; channel failure</h3><h2 id="1003"><a href="#1003" class="headerlink" title="1003"></a>1003</h2><h3 id="virtualization"><a href="#virtualization" class="headerlink" title="virtualization"></a>virtualization</h3><ul>
<li>Virtual Machine Memory &#x3D; Hypervisor</li>
</ul>
<ol>
<li><p>platform virtualization, hosted VM<br>shared OS</p>
<ol>
<li>hardware</li>
<li>host OS<br>Patch, upgrade together</li>
<li>hypervisor, virtualizing the OS</li>
<li>applications, limited(no kernel module)<br>example: Linux container<br>host OS adminstrater sees everything! not fully isolated!<br>reboot OS? all down!</li>
</ol>
</li>
<li><p>full virtualization, native VM<br>independent guest OS</p>
<ol>
<li>hardware</li>
<li>hypervisor, virtualizing the hardware</li>
<li>virtual hardwares, including VCPU, VNIC</li>
<li>guest OSs(Windows, Linux, MacOS)</li>
<li>applications<br>fully isolated!<br>less scalable<br>better performance</li>
</ol>
</li>
<li><p>combined<br>within each guest OS, platform virtualization(virtualzing some guest OS)</p>
</li>
</ol>
<h3 id="network-address-translation"><a href="#network-address-translation" class="headerlink" title="network address translation"></a>network address translation</h3><p>NIC: Network Interface Control<br>NAT: Network address translation<br>hardware: MAC, Media Access Control<br>VMs: MACs<br>query NAT table for every connection<br>improvement: SRIOV</p>
<h4 id="SRIOV"><a href="#SRIOV" class="headerlink" title="SRIOV"></a>SRIOV</h4><p>integrate NAT into NIC<br>PCIe: Peripheral Component Interconnect express     chip-to-chip interconnect<br>Ethernet: via cables                                system-to-system</p>
<h3 id="network-bridging"><a href="#network-bridging" class="headerlink" title="network bridging"></a>network bridging</h3><p>poor scalability<br>bridge over the hypervisor for better performance</p>
<h3 id="host-only-networking"><a href="#host-only-networking" class="headerlink" title="host only networking"></a>host only networking</h3><p>inter instance communication, VM to VM</p>
<h2 id="1005"><a href="#1005" class="headerlink" title="1005"></a>1005</h2><h3 id="P2P-exmaple-Napster"><a href="#P2P-exmaple-Napster" class="headerlink" title="P2P exmaple: Napster"></a>P2P exmaple: Napster</h3><ul>
<li>server <ol>
<li>stores no files</li>
<li>maintains a table</li>
<li>response with where to download the music(IP address, port)</li>
</ol>
</li>
<li>client stores their own data</li>
<li>server search: <strong>ternary tree</strong> algorithm</li>
<li>problem:<ol>
<li>infringement of copyright</li>
<li>security : each peer exposes a port; clear-text communication</li>
<li>fault-tolerance: centralized server, centralized algorithm<br><strong>single point of failure</strong></li>
</ol>
</li>
</ul>
<h3 id="Distributed-Hash-Table"><a href="#Distributed-Hash-Table" class="headerlink" title="Distributed Hash Table"></a>Distributed Hash Table</h3><ul>
<li><p>objects: files</p>
</li>
<li><p>bucket: nodes</p>
</li>
<li><p>hash function: consistent hashing    <strong>hash ring</strong><br>SHA-1(<strong>filename</strong> IP address, port)  &#x3D;&gt; 160-bit string(key) <strong>m bits</strong><br>may use leader-election algorithm</p>
</li>
<li><p>routing mechanism: </p>
<ul>
<li>routing: all operations, including <strong>insert, lookup and delete</strong></li>
<li>each node knows its successor and predecessor <strong>node id: 0~pow(2,m)-1</strong></li>
<li>each node computes a finger table(routing table, nodes it knows)</li>
<li>if doesn’t have the file(after local search), querying, <strong>each step halves the distance O(log(N))</strong><ol>
<li>go(forward) to the farthest node in finger table, but no crossing the key</li>
<li>if none exist, send query to successor</li>
</ol>
</li>
<li>all query steps are RPCs</li>
</ul>
</li>
<li><p>search under peer failures</p>
<ul>
<li>one solution: maintain <strong>(r)</strong> more than one successor entries instead of one <ul>
<li>if one query fails, go to the next successor</li>
<li>sender’s finger table not yet corrected</li>
</ul>
</li>
<li>one solution: replicate file&#x2F;key at r successors and predecessors</li>
</ul>
</li>
<li><p>new peers joining  (dynamic changes <strong>churn</strong>)</p>
<ul>
<li>stablization protocol followed by all nodes    <strong>stablization algorithm</strong><ul>
<li>periodically check and update</li>
<li>ensure non-loopiness</li>
</ul>
</li>
<li>copy keys and update finger table</li>
<li>bandwidth cost   busy network</li>
<li>alternatives: store and replicate only pointers to files(meta info)</li>
</ul>
</li>
</ul>
<h2 id="1010"><a href="#1010" class="headerlink" title="1010"></a>1010</h2><h3 id="naming-in-distributed-systems"><a href="#naming-in-distributed-systems" class="headerlink" title="naming in distributed systems"></a>naming in distributed systems</h3><ul>
<li><p>same name; unique identifier</p>
</li>
<li><p>address &#x3D; identifer + access point</p>
</li>
<li><p>context is import! </p>
<ul>
<li>global</li>
<li>local</li>
</ul>
</li>
<li><p>dynamic or static binding?</p>
</li>
</ul>
<h3 id="broadcast-link-network"><a href="#broadcast-link-network" class="headerlink" title="broadcast link network"></a>broadcast link network</h3><ul>
<li>identifier: IP and MAC address    <strong>Media Access Control</strong></li>
<li>arp -a    every node in the network will broadcast their id</li>
</ul>
<h3 id="independent-nodes-P2P-system"><a href="#independent-nodes-P2P-system" class="headerlink" title="independent nodes   P2P system"></a>independent nodes   P2P system</h3><ul>
<li>identifier: hash to 160-bits-string, then truncate it to m bits(name space)</li>
<li>name resolution: distributed hash tables</li>
<li>shaw-one algorithm</li>
</ul>
<h3 id="flat-naming"><a href="#flat-naming" class="headerlink" title="flat naming"></a>flat naming</h3><ul>
<li>no structure, just plain bits</li>
<li>ip address</li>
</ul>
<h3 id="structured-naming"><a href="#structured-naming" class="headerlink" title="structured naming"></a>structured naming</h3><ul>
<li>directory</li>
<li>file system: <ul>
<li>alias: short, multiple names</li>
<li>multiple path to one file</li>
</ul>
</li>
</ul>
<h3 id="centralized-management-generic-problems"><a href="#centralized-management-generic-problems" class="headerlink" title="centralized management    generic problems"></a>centralized management    generic problems</h3><ul>
<li>global state: no one can know all</li>
<li>transaction for second</li>
<li>single point of failure</li>
</ul>
<h3 id="hard-links-amp-amp-symbolic-links"><a href="#hard-links-amp-amp-symbolic-links" class="headerlink" title="hard links &amp;&amp; symbolic links"></a>hard links &amp;&amp; symbolic links</h3><ul>
<li><p>hard links:</p>
<ul>
<li>When adding one hard link, this file’s reference count++</li>
<li>must delete reference count before deleting</li>
</ul>
</li>
<li><p>symbolic links:</p>
<ul>
<li>When adding one link, the file will store the meta data pointing to the original file</li>
<li>linux: ln -s</li>
</ul>
</li>
</ul>
<h3 id="mounting"><a href="#mounting" class="headerlink" title="mounting"></a>mounting</h3><ul>
<li>nfs protocol       </li>
<li>remote server B: share file&#x2F;directory<ul>
<li>linux: exportfs &#x2F;home&#x2F;steen</li>
</ul>
</li>
<li>local server A: mount remote shared file&#x2F;directory locally<ul>
<li>linux: mount B.ip:&#x2F;home&#x2F;steen &#x2F;remote&#x2F;vu </li>
<li>linux: cd &#x2F;remote&#x2F;vu</li>
</ul>
</li>
</ul>
<h3 id="name-resolution"><a href="#name-resolution" class="headerlink" title="name resolution"></a>name resolution</h3><ul>
<li><p>client send query to name servers<br>host query DNS server</p>
</li>
<li><p>linux: </p>
<ul>
<li>the host knows where to query in DNS<br>&#x2F;etc&#x2F;reslve.conf</li>
</ul>
<ol>
<li>nslookup  <a href="http://www.scu.edu/">www.scu.edu</a></li>
<li>dig</li>
</ol>
</li>
<li><p>iterative</p>
</li>
<li><p>recursive</p>
</li>
<li><p>redundancy and caching server</p>
<ul>
<li>speed</li>
<li>fault tolerance</li>
</ul>
</li>
<li><p>caching on the client side: local browser name resolver</p>
</li>
</ul>
<h3 id="attribute-based-naming"><a href="#attribute-based-naming" class="headerlink" title="attribute-based naming"></a>attribute-based naming</h3><ul>
<li>tuple&#x2F;triple: key, value&#x2F;set of values</li>
<li>Lightweigh Directory Access Protocol</li>
<li>when sending email, client query LDAP server<br>west coast, east coast, europe, …</li>
<li>Directory Information Base  <strong>data sharding</strong></li>
</ul>
<h2 id="1017"><a href="#1017" class="headerlink" title="1017"></a>1017</h2><h3 id="gossip-multicast"><a href="#gossip-multicast" class="headerlink" title="gossip  multicast"></a>gossip  multicast</h3><ul>
<li>fault tolerance</li>
<li>scalability     sending messages fast</li>
</ul>
<h3 id="centralized-approach"><a href="#centralized-approach" class="headerlink" title="centralized approach"></a>centralized approach</h3><ul>
<li>performance bottleneck   not scalable</li>
<li>single point of failure  not reliable</li>
<li>communication channel may be unreliable<ul>
<li>acknowlegement      protocol</li>
</ul>
</li>
</ul>
<h3 id="tree-based-mechanism"><a href="#tree-based-mechanism" class="headerlink" title="tree-based mechanism"></a>tree-based mechanism</h3><ul>
<li>overheads:<ol>
<li>someone needs to be responsible to set up and maintain the tree</li>
<li>acknowledgement    ACKs &#x2F; NAKs</li>
<li>RMTP      SRM</li>
</ol>
</li>
</ul>
<h3 id="gossip-protocol-epidemic-multicast"><a href="#gossip-protocol-epidemic-multicast" class="headerlink" title="gossip protocol     epidemic multicast"></a>gossip protocol     epidemic multicast</h3><ul>
<li><p>every round, pick random targets and send messages via UDP</p>
</li>
<li><p>may have duplicates(send messages back)</p>
</li>
<li><p>once become infected, do the same</p>
</li>
<li><p>push vs pull</p>
<ul>
<li>push: whenever have a new mutlicast message</li>
<li>pull: periodically poll<br>if node crashes, after coming back, and poll messages   fault-tolerant</li>
</ul>
</li>
<li><p>topology-aware gossip:</p>
<ul>
<li>to reduce router load</li>
<li>fix: pick gossip target in its subnet</li>
</ul>
</li>
</ul>
<h2 id="1024"><a href="#1024" class="headerlink" title="1024"></a>1024</h2><h3 id="time-and-ordering"><a href="#time-and-ordering" class="headerlink" title="time and ordering"></a>time and ordering</h3><ul>
<li>host1, host2, host3</li>
<li>t1    t2      t3</li>
<li>each have local clocks(local frequencies)</li>
<li>within host1, different processes, all have same time t1</li>
<li>each process will order tasks it has</li>
<li>However, to order p1 from host1 and p2 from host2? <strong>Time Synchronization</strong></li>
</ul>
<h3 id="time-synchronization"><a href="#time-synchronization" class="headerlink" title="time synchronization"></a>time synchronization</h3><ol>
<li>external time synchronization: <ul>
<li>rely on external time source</li>
<li>when off bounds, sychronize</li>
<li>Cristian’s algorithm, NTP</li>
<li>problem: unbounded latency in asynchronous system:<ol>
<li>network latency</li>
<li>processing latency</li>
</ol>
</li>
</ul>
</li>
<li>internal time synchronization: <ul>
<li>between hosts’s processes, clock skew</li>
<li>when off bounds, sychronize</li>
<li>Berkeley algorithm</li>
<li>problem: time drift from the UTC(correct time)</li>
</ul>
</li>
<li>logical time synchronization</li>
</ol>
<h3 id="clock-skew-amp-amp-clock-drift"><a href="#clock-skew-amp-amp-clock-drift" class="headerlink" title="clock skew &amp;&amp; clock drift"></a>clock skew &amp;&amp; clock drift</h3><ul>
<li>clock skew; distance</li>
<li>clock drift: speeds difference</li>
<li>non-zero clock skew: clocks are not synchronized</li>
<li>non-zero clock drift: the skew will increase</li>
</ul>
<h3 id="cristian’s-algorithm"><a href="#cristian’s-algorithm" class="headerlink" title="cristian’s algorithm"></a>cristian’s algorithm</h3><ul>
<li>RTT: round-trip time</li>
<li>erro is at most (RTT-min2-min1)&#x2F;2</li>
<li>still has problem:<br>bounded error &#x3D;&gt; error rate more than zero<br>what if processes asynchronize within the bound? &#x3D;&gt; won’t trigger the algorithm</li>
</ul>
<h3 id="Network-Time-Protocol"><a href="#Network-Time-Protocol" class="headerlink" title="Network Time Protocol"></a>Network Time Protocol</h3><ul>
<li>to reduce min1, min2</li>
<li>leaf nodes are clients</li>
<li>child has ts1, tr1, ts2, tr2, then calculate the offset &#x3D; (tr1-tr2+ts2-ts1)&#x2F;2</li>
<li>error: difference between the calcuated offset and the real offset</li>
<li>still have a non-zero error!! &#x3D;&gt; still invalid in asynchronous distributed system</li>
</ul>
<h3 id="logical-time-instead-of-absolute-time"><a href="#logical-time-instead-of-absolute-time" class="headerlink" title="logical time, instead of absolute time"></a>logical time, instead of absolute time</h3><ul>
<li>Leslie Lamport, Turing award</li>
<li>causality: <ol>
<li>ordering within one process</li>
<li>send-recieve message between two processes</li>
</ol>
</li>
<li>transitivity</li>
<li>lamport timestaps   ts&#x3D;max(local,msg)+1</li>
<li>timestamp doesn’t not determine order, only causal path does!</li>
<li>timestamps only matter if there is a causal path!</li>
<li>when there is no causal path? concurrent events</li>
<li>shortcoming: can’t tell where two events are concurrent or not</li>
</ul>
<h3 id="vector-timestamps"><a href="#vector-timestamps" class="headerlink" title="vector timestamps"></a>vector timestamps</h3><ul>
<li>n processes &#x3D;&gt; n elements within the vector</li>
<li>each process maintains a vector</li>
<li>causality: iff VT1 &lt;&#x3D; VT2</li>
<li>concurrent (VT1 ||| VT2): !(VT1 &lt;&#x3D; VT2) &amp;&amp; !(VT2 &lt;&#x3D; VT1)</li>
</ul>
<h2 id="1026"><a href="#1026" class="headerlink" title="1026"></a>1026</h2><h3 id="coordination-coordinator-x2F-leader-x2F-introducer"><a href="#coordination-coordinator-x2F-leader-x2F-introducer" class="headerlink" title="coordination  coordinator&#x2F;leader&#x2F;introducer"></a>coordination  coordinator&#x2F;leader&#x2F;introducer</h3><ol>
<li>receive client requrest &#x3D;&gt; forward to appropriate host</li>
<li>handling of failure&#x2F;join&#x2F;leave</li>
</ol>
<ul>
<li><p>property&#x2F;attribute: cpu, disk, ID, space</p>
</li>
<li><p>safety: get an election result</p>
</li>
<li><p>liveness: election terminates</p>
</li>
</ul>
<h3 id="ring-election-protocol-consensus-problem"><a href="#ring-election-protocol-consensus-problem" class="headerlink" title="ring election protocol    consensus problem"></a>ring election protocol    consensus problem</h3><ul>
<li>elect highest id process as leader</li>
<li>received id &#x3D;&#x3D; this.id &#x3D;&gt; elected!!</li>
<li>whenever a new node joins, run the protocol<br>either become the new leader, or get the leader</li>
</ul>
<h3 id="fixing-for-failure"><a href="#fixing-for-failure" class="headerlink" title="fixing for failure"></a>fixing for failure</h3><ul>
<li>have predecessor&#x2F;successor detect failure</li>
<li>use the failure detector</li>
</ul>
<h3 id="bully-algorithm"><a href="#bully-algorithm" class="headerlink" title="bully algorithm"></a>bully algorithm</h3><ul>
<li>premise: all knows all</li>
<li>handle failures better</li>
</ul>
<h3 id="google-chubby"><a href="#google-chubby" class="headerlink" title="google chubby"></a>google chubby</h3><ul>
<li>quorum: voting set</li>
<li>master lease: time duration</li>
</ul>
<h3 id="apache-zookeeper"><a href="#apache-zookeeper" class="headerlink" title="apache zookeeper"></a>apache zookeeper</h3><ul>
<li>paxos: Zookeeper Atomic Broadcast</li>
</ul>
<h2 id="1031"><a href="#1031" class="headerlink" title="1031"></a>1031</h2><h3 id="transaction"><a href="#transaction" class="headerlink" title="transaction"></a>transaction</h3><ul>
<li>series of operations executed by client</li>
<li>each operation is a RPC to a server</li>
<li>either <strong>commit</strong> or <strong>abort</strong></li>
</ul>
<h3 id="atomicity"><a href="#atomicity" class="headerlink" title="atomicity"></a>atomicity</h3><ul>
<li>all or nothing; commit or abort</li>
<li>failure&#x2F;exception: roll back(undone)</li>
</ul>
<h3 id="consistency"><a href="#consistency" class="headerlink" title="consistency"></a>consistency</h3><ul>
<li>if the server starts in a consistent state, the transaction ends the server in a consistent state </li>
<li>Data is in a consistent state when a transaction starts and when it ends. For example, in an application that transfers funds from one account to another, the consistency property ensures that the total value of funds in both the accounts is the same at the start and end of each transaction.</li>
</ul>
<h3 id="isolation"><a href="#isolation" class="headerlink" title="isolation"></a>isolation</h3><ul>
<li>scenario: concurrency of transactions     </li>
<li>two transactions can not update the same object<br>one has to wait for the prior to commit</li>
</ul>
<ol>
<li>no access to intermediate result&#x2F;states of other transactions</li>
<li>free from interference by operations of other transactions</li>
</ol>
<h3 id="durability"><a href="#durability" class="headerlink" title="durability"></a>durability</h3><ul>
<li>transactions’effects are saved in permanent storage</li>
</ul>
<h3 id="multiple-servers-within-one-transaction-–-distributed-transaction"><a href="#multiple-servers-within-one-transaction-–-distributed-transaction" class="headerlink" title="multiple servers within one transaction – distributed transaction"></a>multiple servers within one transaction – distributed transaction</h3><ul>
<li>solution: 2-phase commit</li>
</ul>
<h3 id="lost-update-problem"><a href="#lost-update-problem" class="headerlink" title="lost update problem"></a>lost update problem</h3><ul>
<li>depending on how the server schedules, one of the update wil be lost</li>
<li>cause of problem: inconsistency, simultaneous access of a shared&amp;unsynchronized object; write-write conflict</li>
</ul>
<h3 id="inconsistent-retrieval-problem"><a href="#inconsistent-retrieval-problem" class="headerlink" title="inconsistent retrieval problem"></a>inconsistent retrieval problem</h3><h3 id="concurrent-transactions"><a href="#concurrent-transactions" class="headerlink" title="concurrent transactions"></a>concurrent transactions</h3><ul>
<li>transaction per second</li>
<li>goal: increase concurrency while maintaining correctness(ACID)</li>
</ul>
<h3 id="serial-amp-interleaving-schedule"><a href="#serial-amp-interleaving-schedule" class="headerlink" title="serial &amp; interleaving schedule"></a>serial &amp; interleaving schedule</h3><ul>
<li>serializability: T1,T2 &#x3D;&#x3D; T1.T2 or T2.T1</li>
<li>why: serial executions are most consistent</li>
</ul>
<h3 id="conflicting-operations"><a href="#conflicting-operations" class="headerlink" title="conflicting operations"></a>conflicting operations</h3><ul>
<li><p>same object: </p>
<ol>
<li>read write</li>
<li>write read</li>
<li>write write</li>
</ol>
</li>
<li><p>serially equivalent</p>
</li>
</ul>
<h3 id="prevent-violation-of-isolation"><a href="#prevent-violation-of-isolation" class="headerlink" title="prevent violation of isolation"></a>prevent violation of isolation</h3><ul>
<li><p>pessimistic</p>
<ol>
<li><p>exclusive locking</p>
<ol>
<li>before read&#x2F;write, lock(O)</li>
<li>either enter the lock or wait</li>
<li>when done, unlock(O)</li>
</ol>
<ul>
<li>improvement: exclusive locking is an overkill for read</li>
</ul>
</li>
<li><p>another approach: read&#x2F;write modes</p>
<ul>
<li>read_lock(O), write_lock(O), unlock(O)</li>
</ul>
</li>
</ol>
</li>
<li><p>optimistic</p>
<ol>
<li>check commit time&#x2F;serial equivalence</li>
</ol>
</li>
</ul>
<h3 id="two-phase-locking-protocol"><a href="#two-phase-locking-protocol" class="headerlink" title="two-phase locking protocol"></a>two-phase locking protocol</h3><ul>
<li>guarantee serial equivalence</li>
</ul>
<ol>
<li>growing phase: only acquires or promotes lock</li>
<li>shrinking phase: only release lock</li>
</ol>
<ul>
<li>drawback: deadlock</li>
<li>detect deadlocks in a wait-for graph</li>
</ul>
<h3 id="3-necessary-conditions-for-deadlock"><a href="#3-necessary-conditions-for-deadlock" class="headerlink" title="3 necessary conditions for deadlock"></a>3 necessary conditions for deadlock</h3><ol>
<li>Some objects are accessed in exclusive lock modes</li>
<li>Transactions holding locks cannotbe preempted</li>
<li>There is a circular wait (cycle) in the Wait-for graph</li>
</ol>
<h3 id="Coffman-conditions-if-all-four-simultaneously-x3D-gt-deadlock"><a href="#Coffman-conditions-if-all-four-simultaneously-x3D-gt-deadlock" class="headerlink" title="Coffman conditions    if all four simultaneously &#x3D;&gt; deadlock"></a>Coffman conditions    if all four simultaneously &#x3D;&gt; deadlock</h3><ol>
<li>mutual exlusion    resources</li>
<li>hold and wait      processes</li>
<li>no preemption      process holding resources</li>
<li>cirular wait</li>
</ol>
<h3 id="optimistic-lock"><a href="#optimistic-lock" class="headerlink" title="optimistic lock"></a>optimistic lock</h3><ul>
<li>example: dropbox</li>
<li>first-cut</li>
<li>ordering</li>
<li>multi-version concurrency control: svn</li>
</ul>
<h2 id="1102"><a href="#1102" class="headerlink" title="1102"></a>1102</h2><h3 id="distributed-system-mutual-exclusion"><a href="#distributed-system-mutual-exclusion" class="headerlink" title="distributed system mutual exclusion"></a>distributed system mutual exclusion</h3><ul>
<li><p>ATM<br>avoid WW conflicts, serial equivalence: false</p>
</li>
<li><p>distributed file systems<br>accessing objects in a safe and consistent way<br>server cooridination<br>in industry, Chubby, Apache Zookeeper</p>
</li>
<li><p>piece of code we ensure that there is at most one process executing it at any point of time</p>
</li>
<li><p><strong>critical section</strong> of the process</p>
<ol>
<li>enter()</li>
<li>accessResource()</li>
<li>exit()</li>
</ol>
</li>
</ul>
<h3 id="single-OS-process-synchronization"><a href="#single-OS-process-synchronization" class="headerlink" title="single OS: process synchronization"></a>single OS: process synchronization</h3><ul>
<li><p>semaphore</p>
<ul>
<li><p>signalling mechanism</p>
</li>
<li><p>an integer variable S, initialized with the number of resources available</p>
</li>
<li><p>only two functions can change its value: </p>
<ol>
<li>wait():</li>
</ol>
<ul>
<li>if S&gt;0: S–, accessResource()</li>
<li>if S&#x3D;&#x3D;0: wait</li>
</ul>
<ol>
<li>signal(): S++</li>
</ol>
</li>
</ul>
</li>
<li><p>mutex</p>
<ul>
<li>mutual exclusion object</li>
<li>locked-based technique</li>
<li>lock, use, release</li>
</ul>
</li>
</ul>
<h3 id="need-to-guarantee-3-properties"><a href="#need-to-guarantee-3-properties" class="headerlink" title="need to guarantee 3 properties"></a>need to guarantee 3 properties</h3><ol>
<li>safety(essential)<br>at most one at a time</li>
<li>liveness(essential)<br>all request for a CS is granted eventually</li>
<li>ordering(desirable)</li>
</ol>
<h3 id="distributed-system-central-solution"><a href="#distributed-system-central-solution" class="headerlink" title="distributed system: central solution"></a>distributed system: central solution</h3><ul>
<li>elect a central master(leader)</li>
<li>master keeps:<ol>
<li>a <strong>queue</strong> of waiting requests from processes</li>
<li>a special <strong>token</strong> which allows its holder to access CS</li>
</ol>
</li>
<li>any process in group:<ol>
<li>enter()<ul>
<li>send a request to master</li>
<li>wait for token from master</li>
</ul>
</li>
<li>exit()<ul>
<li>send back token</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="analyzing-performance-metrics"><a href="#analyzing-performance-metrics" class="headerlink" title="analyzing performance   metrics"></a>analyzing performance   metrics</h3><ul>
<li>bandwidth</li>
<li>client delay</li>
<li>synchronization delay</li>
</ul>
<h3 id="ring-based-mutual-exlusion"><a href="#ring-based-mutual-exlusion" class="headerlink" title="ring based mutual exlusion"></a>ring based mutual exlusion</h3><ul>
<li>safety: yes</li>
<li>liveness: yes</li>
<li>ordering: no<br>the nature of ring topology</li>
</ul>
<h3 id="Ricart-Agrawala’s-Algorithm"><a href="#Ricart-Agrawala’s-Algorithm" class="headerlink" title="Ricart-Agrawala’s Algorithm"></a>Ricart-Agrawala’s Algorithm</h3><ul>
<li>premise: reliable all-to-all communication</li>
<li>no token</li>
<li>uses the notion of causality and multicast<br>send messages of <strong>&lt;timestamp, process id&gt;</strong></li>
<li>lowing waiting time to enter CS</li>
<li>state<ul>
<li>wanted</li>
<li>held</li>
<li>released</li>
</ul>
</li>
</ul>
<h3 id="Maekawa’s-Algorithm"><a href="#Maekawa’s-Algorithm" class="headerlink" title="Maekawa’s Algorithm"></a>Maekawa’s Algorithm</h3><ul>
<li>voting set(<strong>quorum</strong>)</li>
<li>safety but not liveness</li>
</ul>
<h2 id="1107"><a href="#1107" class="headerlink" title="1107"></a>1107</h2><h3 id="replication-control"><a href="#replication-control" class="headerlink" title="replication control"></a>replication control</h3><ul>
<li>example: airline booking system</li>
<li>one client, query which one of multiple servers</li>
<li>multiple clients, coordinations; concurrency</li>
</ul>
<h3 id="why-replication-x3D-gt-higher-availability"><a href="#why-replication-x3D-gt-higher-availability" class="headerlink" title="why replication &#x3D;&gt; higher availability"></a>why replication &#x3D;&gt; higher availability</h3><ol>
<li>fault-tolerance</li>
<li>load balancing</li>
</ol>
<h3 id="availability-vs-reliability"><a href="#availability-vs-reliability" class="headerlink" title="availability vs reliability"></a>availability vs reliability</h3><ul>
<li><p>availability: </p>
<ol>
<li>The <strong>percentage of time</strong> that the infrastructure, system, or solution is <strong>operational</strong> under normal circumstances.</li>
<li>Percentage of availability &#x3D; (total elapsed time – sum of downtime)&#x2F;total elapsed time</li>
</ol>
</li>
<li><p>reliability: </p>
<ol>
<li>The <strong>probability</strong> that the system will meet certain performance standards and <strong>yield correct output</strong> for a specific time.</li>
<li><strong>Mean Time Betwen Failures</strong></li>
<li>MTBF &#x3D; (total elapsed time – sum of downtime)&#x2F;number of failures</li>
</ol>
</li>
<li><p>The measurement of Availability is driven by <strong>time loss</strong> whereas the measurement of Reliability is driven by the <strong>frequency and impact of failures</strong>. </p>
</li>
<li><p>Mathematically, the Availability of a system can be treated as a function of its Reliability. In other words, Reliability can be considered <strong>a subset of Availability</strong>.</p>
</li>
</ul>
<h3 id="maintain-two-properties"><a href="#maintain-two-properties" class="headerlink" title="maintain two properties"></a>maintain two properties</h3><ol>
<li><p>replication <strong>consistency</strong></p>
<ul>
<li>All clients see single consistent copy of data, in spite of replication</li>
<li>For transactions, ACID</li>
<li>achieved by passive&#x2F;active replication</li>
</ul>
</li>
<li><p>replication <strong>transparency</strong></p>
<ul>
<li>transparent to a single client</li>
<li>achieved by FEs</li>
</ul>
</li>
</ol>
<h3 id="replication-consistency"><a href="#replication-consistency" class="headerlink" title="replication consistency"></a>replication consistency</h3><ul>
<li>two ways to forward updates from front-ends to replica group<ol>
<li>passive replication<ol>
<li>leader election, select a primary replica (master)</li>
<li>FEs send request to the master</li>
</ol>
</li>
<li>active replication <ul>
<li>treats all replicas indentically</li>
</ul>
</li>
</ol>
</li>
<li>both approaches: <strong>replicated state machine</strong></li>
</ul>
<h3 id="passive-replication"><a href="#passive-replication" class="headerlink" title="passive replication"></a>passive replication</h3><ul>
<li>election: ring, bully, Google Chubby</li>
</ul>
<h3 id="active-replication"><a href="#active-replication" class="headerlink" title="active replication"></a>active replication</h3><ul>
<li>FEs send multicast requests: gossip</li>
<li>multicast ordering:<ol>
<li>FIFO</li>
<li>causal ordering, Lamport timestamp</li>
<li>total ordering<ul>
<li>object-based: timestamp, size, etc</li>
</ul>
</li>
<li>hybrid ordering</li>
</ol>
</li>
</ul>
<h3 id="one-copy-serializability"><a href="#one-copy-serializability" class="headerlink" title="one-copy serializability"></a>one-copy serializability</h3><ul>
<li>a concurrent execution of transactions equivalent to a serial execution of these transactions</li>
<li>one-copy: results should be consistent&#x2F;the same: doesn’t matter if I execute a, or b, or both</li>
<li>if non-replication: just order the concurrent transactions; ensure <strong>correctness</strong></li>
<li>when replicated:</li>
</ul>
<h3 id="distributed-transactions"><a href="#distributed-transactions" class="headerlink" title="distributed transactions"></a>distributed transactions</h3><ul>
<li>transaction: sequence of R&#x2F;W operations</li>
<li>main challenge: maintain ACID, especially Atomiciy</li>
<li>atomic commit problem:<ol>
<li>commit itself is distributed</li>
<li>make sure commit itself is atomic</li>
</ol>
</li>
</ul>
<h3 id="one-phase-commit-not-usable"><a href="#one-phase-commit-not-usable" class="headerlink" title="one-phase commit    not usable"></a>one-phase commit    not usable</h3><ul>
<li>special server called coordinator, which initiates atomic commit</li>
<li>tell other servers to either commit or abort</li>
<li>why not usable<ol>
<li>one-way communication<br>server has no say(can not time out), just coordinator telling servers what to do</li>
<li>server may crash before receiving commit message</li>
</ol>
</li>
</ul>
<h3 id="two-phase-commit"><a href="#two-phase-commit" class="headerlink" title="two-phase commit"></a>two-phase commit</h3><ol>
<li>coordinator prepared to save</li>
<li>servers respond with yes&#x2F;no</li>
<li>coordinator decides whether commit or abort</li>
</ol>
<h3 id="two-phase-commit-failures"><a href="#two-phase-commit-failures" class="headerlink" title="two-phase commit failures:"></a>two-phase commit failures:</h3><ol>
<li>server crashes<br>save tentative updates into permanent storage right before replying yes&#x2F;no</li>
<li>coordinator crashes:<br>log all decisions and received messages on disk</li>
<li>message loss: <strong>pessimistic</strong><ol>
<li>prepare message loss</li>
<li>yes&#x2F;no message loss</li>
<li>commit&#x2F;abort</li>
</ol>
</li>
</ol>
<h2 id="1109"><a href="#1109" class="headerlink" title="1109"></a>1109</h2><h3 id="distributed-systems-snapshots"><a href="#distributed-systems-snapshots" class="headerlink" title="distributed systems snapshots"></a>distributed systems snapshots</h3><ul>
<li>example:<br>transactions, take a global snapshot to construct the weight-for graph</li>
<li>distributed system global snapshot:<ol>
<li>process state</li>
<li>communiation channel<br><em>two main parts of distributed system: hosts and communications</em></li>
</ol>
</li>
</ul>
<h3 id="uses-of-having-a-global-picture"><a href="#uses-of-having-a-global-picture" class="headerlink" title="uses of having a global picture"></a>uses of having a global picture</h3><ol>
<li>checkpointing: can restart distributed application on failure</li>
<li>garbage collection: objects at servers that don’t have any other objects at any servers with pointers to them</li>
<li>deadlock detection: useful in database transaction systems</li>
<li>termination of computation: useful in batch computing systems</li>
</ol>
<h3 id="how-to-take-a-global-snapshot"><a href="#how-to-take-a-global-snapshot" class="headerlink" title="how to take a global snapshot"></a>how to take a global snapshot</h3><ul>
<li><p>obvious first solution</p>
<ol>
<li>synchronize clocks of all processes</li>
<li>then ask all processes to record their states at known time t</li>
</ol>
</li>
<li><p>problems:</p>
<ol>
<li>time synchronization always has error  <strong>clock skew</strong></li>
<li>also, doesn’t record the state of messages in the channels</li>
</ol>
</li>
<li><p>again: synchronization is not required! causality is enough!<br>(global) state to state movement obeys causality</p>
<ol>
<li>process receives message</li>
<li>process sends message</li>
<li>proces takes a step</li>
</ol>
</li>
</ul>
<h3 id="system-model"><a href="#system-model" class="headerlink" title="system model"></a>system model</h3><h3 id="requirements"><a href="#requirements" class="headerlink" title="requirements"></a>requirements</h3><ol>
<li>snapshot should not interfere with normal applcation actions&#x2F;sending messages</li>
<li>each process is able to record its own state<br>its heap, registers, program counter, code, etc (<strong>coredump</strong>)</li>
<li>global state is collected in a distributed manner</li>
<li>any process may initiate the snapshot</li>
</ol>
<h3 id="Chandy-Lamport-global-snapshot-algorithm"><a href="#Chandy-Lamport-global-snapshot-algorithm" class="headerlink" title="Chandy-Lamport global snapshot algorithm"></a>Chandy-Lamport global snapshot algorithm</h3><ul>
<li>initiator process records its own state</li>
<li>create and send <strong>Marker</strong> messages to all other processes via outgoing channels<br>turn on recording on all incoming channels</li>
<li>other processes start recording on each of the incoming channels<ul>
<li>if first marker message:<ol>
<li>record its own state</li>
<li>mark incoming channel as emtpy (<strong>&lt;&gt;</strong>)</li>
<li>turn on recording on other incoming channels</li>
<li>send out markers</li>
</ol>
</li>
<li>already seen a marker message:<ol>
<li>k: sender; i: receiver</li>
<li>mark the state of channel Cki as all the messages that have arrived on it since recording was turned on for Cki</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="consistent-cut"><a href="#consistent-cut" class="headerlink" title="consistent cut"></a>consistent cut</h3><ul>
<li><p>cut: time frontier at each process and at each channel</p>
<ul>
<li>in the cut</li>
<li>out of the cut</li>
</ul>
</li>
<li><p>consistent cut: a cut that obeys causality<br>event e in cut C; f happens before e (f-&gt;e)<br>then event f is also in the cut C</p>
</li>
<li><p>any run of the Chandy-Lamport gloabal snapshot algorithm creates a consistent cut</p>
</li>
</ul>
<h3 id="correctness-in-distributed-systems"><a href="#correctness-in-distributed-systems" class="headerlink" title="correctness in distributed systems"></a>correctness in distributed systems</h3><ul>
<li>liveness:<br>guarantee that something good will happen, eventually<br>eventually: does not imply a time bound, but if you let the system run long enough, then…<ul>
<li>examples:<ol>
<li>distributed computation: guarantee that it will terminate</li>
<li>completeness in failure detectors: every failure is eventually detected by some non-faulty process</li>
<li>consensus (election, Google Chubby): all processes eventually decide on a value</li>
</ol>
</li>
</ul>
</li>
<li>safety:<br>guarantee that something bad will never happen<ul>
<li>examples:<ol>
<li>there is no deadlock in a distributed system</li>
<li>no object is orphaned in a distributed system</li>
<li>accuracy in failure detectors</li>
<li>in consensus: no two processes decide on different values</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="stable-properties"><a href="#stable-properties" class="headerlink" title="stable properties"></a>stable properties</h3><ul>
<li>stable: once true, stays true forever afterwards</li>
<li>all stable properties can be detected using the Chandy-Lamport algorithm</li>
</ul>
<h2 id="1114"><a href="#1114" class="headerlink" title="1114"></a>1114</h2><h3 id="file-system"><a href="#file-system" class="headerlink" title="file system"></a>file system</h3><ul>
<li>higher level of abstraction</li>
<li>file contents:<ol>
<li>header:<ol>
<li>timestamps</li>
<li>file type</li>
<li>ownership</li>
<li>access control list</li>
<li>reference count: number of directories containing this file</li>
</ol>
</li>
<li>blocks</li>
</ol>
</li>
<li>directory</li>
</ul>
<h3 id="unix-file-system-local-methods"><a href="#unix-file-system-local-methods" class="headerlink" title="unix file system  local methods"></a>unix file system  local methods</h3><ul>
<li>file descriptors<ol>
<li>open</li>
<li>creat</li>
<li>close</li>
</ol>
</li>
<li>read-write pointer<ol>
<li>read</li>
<li>write</li>
<li>lseek</li>
</ol>
</li>
<li>status<ol>
<li>link</li>
<li>unlink</li>
<li>stat&#x2F;fstat</li>
</ol>
</li>
</ul>
<h3 id="distributed-file-systems"><a href="#distributed-file-systems" class="headerlink" title="distributed file systems"></a>distributed file systems</h3><ol>
<li>transparency</li>
<li>support concurrent clients</li>
<li>replcation: fault-tolerance</li>
</ol>
<ul>
<li>idempotent</li>
<li>stateless</li>
</ul>
<h3 id="security"><a href="#security" class="headerlink" title="security"></a>security</h3><ol>
<li>autentication</li>
<li>authorization:<ol>
<li>Access Control Lists, per file</li>
<li>Capability Lists, per user</li>
</ol>
</li>
</ol>
<h3 id="why-DFS-not-using-file-descriptors"><a href="#why-DFS-not-using-file-descriptors" class="headerlink" title="why DFS not using file descriptors?"></a>why DFS not using file descriptors?</h3><ol>
<li>transparency: client should not know the absolute position of the file</li>
<li>confusion: a file may be replicated across multiple servers, each having a file descriptor</li>
</ol>
<h3 id="Network-File-System"><a href="#Network-File-System" class="headerlink" title="Network File System"></a>Network File System</h3><ul>
<li><p>virtual file system: provide transparency</p>
<ul>
<li>local unix file system, if file is local</li>
<li>NFS client system, if file is not local<ul>
<li>do RPCs</li>
</ul>
</li>
</ul>
</li>
<li><p>server: exportfs</p>
</li>
<li><p>client: mount</p>
<ul>
<li>not clone, but hook(point to)</li>
<li>unlink dropbox, where file is local</li>
</ul>
</li>
</ul>
<h3 id="why-not-clone"><a href="#why-not-clone" class="headerlink" title="why not clone?"></a>why not clone?</h3><ul>
<li>replcation: consistency</li>
</ul>
<h3 id="virtual-file-system-module"><a href="#virtual-file-system-module" class="headerlink" title="virtual file system module"></a>virtual file system module</h3><ul>
<li>allow processes to access files via file descriptors</li>
<li>transparency: local and romote files look the same</li>
<li>“NFS file handles”</li>
<li>v-node</li>
</ul>
<h3 id="server-optimizations"><a href="#server-optimizations" class="headerlink" title="server optimizations"></a>server optimizations</h3><ul>
<li><p>server caching: locality of access</p>
</li>
<li><p>writes: two flavors</p>
<ol>
<li>delayed write:</li>
</ol>
<ul>
<li>write in memory, flush to disk every 30s</li>
<li>non-blocking</li>
<li>fast but not consistent</li>
</ul>
<ol start="2">
<li>write-through</li>
</ol>
<ul>
<li>blocking</li>
<li>consistent but may be slow(latency)</li>
</ul>
</li>
</ul>
<h3 id="client-optimization"><a href="#client-optimization" class="headerlink" title="client optimization"></a>client optimization</h3><ul>
<li>client caching</li>
<li>cache recently-accessed blocks</li>
<li>when block is written, do a delayed-write to server</li>
<li>compromise between consistency and efficiency</li>
</ul>
<h3 id="AFS"><a href="#AFS" class="headerlink" title="AFS"></a>AFS</h3><ul>
<li>whole file serving</li>
<li>whole file caching</li>
</ul>
<h2 id="1116"><a href="#1116" class="headerlink" title="1116"></a>1116</h2><h3 id="security-threats"><a href="#security-threats" class="headerlink" title="security threats"></a>security threats</h3><ol>
<li>leakage</li>
<li>tampering</li>
<li>vandalism</li>
</ol>
<h3 id="common-attacks"><a href="#common-attacks" class="headerlink" title="common attacks"></a>common attacks</h3><ol>
<li>eavesdropping: taps into network</li>
<li>masquerading: pretend</li>
<li>message tampering: modify</li>
<li>replay attack</li>
<li>denial of service: bombard a port</li>
</ol>
<h3 id="CIA-properties"><a href="#CIA-properties" class="headerlink" title="CIA properties"></a>CIA properties</h3><ul>
<li>confidentiality</li>
<li>integrity</li>
<li>availability</li>
</ul>
<h3 id="separate-policy-from-mechanism"><a href="#separate-policy-from-mechanism" class="headerlink" title="separate policy from mechanism"></a>separate policy from mechanism</h3><ul>
<li>policy: what’s the goal</li>
<li>mechanism: how the goal is accomplished</li>
</ul>
<h3 id="Mechanisms-Golden-A’s"><a href="#Mechanisms-Golden-A’s" class="headerlink" title="Mechanisms: Golden A’s"></a>Mechanisms: Golden A’s</h3><ul>
<li>authentication:<br>is a user claiming to be Alice, really Alice?</li>
<li>authorization:<br>Yes, it is Alice, but is Alice allowed to perfrom the requested operation?</li>
<li>auditing:<br>How did Eve manage to attack the system and breach defenses?<br>Usually done by continuously logging all operations.<br>No attack should go unnoticed!</li>
</ul>
<h3 id="designing-secure-systems"><a href="#designing-secure-systems" class="headerlink" title="designing secure systems"></a>designing secure systems</h3><ul>
<li>don’t know how powerful attacker is</li>
<li>when designing a secruity protocol, need to:<ol>
<li>specify <strong>Attacker Model</strong><br>capabilities of attacker; tied to reality, no imagination<ul>
<li>study</li>
</ul>
</li>
<li>design security mechanisms to satisfy policy under the attacker model<ul>
<li>engineers implement the mechanisms</li>
</ul>
</li>
<li>prove that mechanisms satisfy policy under attacker model<ul>
<li>a second organization may come into play, try to attack</li>
</ul>
</li>
<li>measure effect on overall performance in the common ase, i.e., no attacks<br>compare: <ul>
<li>no-security-control throughput</li>
<li>throughput with security control</li>
</ul>
</li>
</ol>
</li>
<li>security is not a one-time deal!</li>
</ul>
<h3 id="basic-cryptography"><a href="#basic-cryptography" class="headerlink" title="basic cryptography"></a>basic cryptography</h3><ul>
<li>key: <ul>
<li>sequence of bytes assigned to a user</li>
<li>can be used to lock a message, and only this key can be used to unlock that locked message</li>
</ul>
</li>
</ul>
<h3 id="encryption"><a href="#encryption" class="headerlink" title="encryption"></a>encryption</h3><ul>
<li>encrypted message &#x3D; encrypt(original message, key) </li>
<li>decrypted message &#x3D; decrypt(encrypted message, key)</li>
</ul>
<h3 id="two-cryptography-systems"><a href="#two-cryptography-systems" class="headerlink" title="two cryptography systems"></a>two cryptography systems</h3><ol>
<li><p>symmetric key systems: DES</p>
<ul>
<li>shared keys</li>
<li>hard to revoke permissions from principals</li>
</ul>
</li>
<li><p>public-private key systems: RSA, PGP</p>
<ul>
<li>private key</li>
<li>public key: known to all</li>
<li>anything encrypted with Kapriv can be decrypted only with Kapub</li>
<li>anything encrypted with Kapub can be decrypted only with Kapriv</li>
<li>relatively costly: 2 operations, at least one is costly</li>
</ul>
</li>
<li><p>combination: use public-private key system to generate shared key</p>
</li>
</ol>
<h3 id="authentication"><a href="#authentication" class="headerlink" title="authentication"></a>authentication</h3><ul>
<li>direct authentication</li>
<li>indirect authentication: uses a trusted third-party server, authentication server</li>
</ul>
<h3 id="digital-signatures"><a href="#digital-signatures" class="headerlink" title="digital signatures"></a>digital signatures</h3><ul>
<li>between two parties</li>
<li>SHA-1, MD-5</li>
</ul>
<h3 id="digital-certificates"><a href="#digital-certificates" class="headerlink" title="digital certificates"></a>digital certificates</h3><ul>
<li>transitivity: chains of certificates</li>
<li>trace back</li>
</ul>
<h3 id="authorization"><a href="#authorization" class="headerlink" title="authorization"></a>authorization</h3><ul>
<li><p>Access Control Matrix</p>
</li>
<li><p>Access Control Lists, per file&#x2F;object</p>
</li>
<li><p>Capability Lists, per user&#x2F;principal</p>
</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>COEN 210 — Computer Architecture</title>
    <url>/2022/12/04/COEN210/</url>
    <content><![CDATA[<h1 id="COEN-210-Computer-Architecture"><a href="#COEN-210-Computer-Architecture" class="headerlink" title="COEN 210 Computer Architecture"></a>COEN 210 Computer Architecture</h1><h2 id="Chapter-1-—-Computer-Abstraction-and-Technology"><a href="#Chapter-1-—-Computer-Abstraction-and-Technology" class="headerlink" title="Chapter 1 — Computer Abstraction and Technology"></a>Chapter 1 — Computer Abstraction and Technology</h2><h3 id="Understanding-Performance"><a href="#Understanding-Performance" class="headerlink" title="Understanding Performance"></a>Understanding Performance</h3><ul>
<li><p>Algorithm </p>
<ul>
<li>Determines number of operations executed</li>
</ul>
</li>
<li><p>Programming language, compiler, architecture </p>
<ul>
<li>Determine number of machine instructions  executed per operation</li>
</ul>
</li>
<li><p>Processor and memory system </p>
<ul>
<li>Determine how fast instructions are executed</li>
</ul>
</li>
<li><p>I&#x2F;O system (including OS) </p>
<ul>
<li>Determines how fast I&#x2F;O operations are executed</li>
</ul>
</li>
</ul>
<h3 id="Eight-Great-Ideas"><a href="#Eight-Great-Ideas" class="headerlink" title="Eight Great Ideas"></a>Eight Great Ideas</h3><ul>
<li>Design for Moore’s Law</li>
<li>Use abstraction to simplify design</li>
<li>Make the common case fast</li>
<li>Performance via parallelism</li>
<li>Performance via pipelining</li>
<li>Performance via prediction</li>
<li>Hierarchy of memories</li>
<li>Dependability via redundancy</li>
</ul>
<h3 id="Pitfalls"><a href="#Pitfalls" class="headerlink" title="Pitfalls"></a>Pitfalls</h3><ul>
<li><p>Amdahl’s Law</p>
<ul>
<li>Improving an aspect of a computer and expecting a  proportional improvement in overall performance</li>
<li>Corollary: make the common case fast</li>
</ul>
</li>
<li><p>Low Power at Idle</p>
<ul>
<li>Google data center <ul>
<li>Mostly operates at 10% – 50% load </li>
<li>At 100% load less than 1% of the time</li>
</ul>
</li>
<li>Consider designing processors to make power  proportional to load</li>
</ul>
</li>
<li><p>MIPS as a Performance Metric</p>
<ul>
<li>MIPS: Millions of Instructions Per Second</li>
<li>Doesn’t account for<ul>
<li>Differences in ISAs between computers</li>
<li>Differences in complexity between instructions</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Chapter-2-—-Instructions-Language-of-the-Computer"><a href="#Chapter-2-—-Instructions-Language-of-the-Computer" class="headerlink" title="Chapter 2 — Instructions: Language of the Computer"></a>Chapter 2 — Instructions: Language of the Computer</h2><h3 id="Design-Principle"><a href="#Design-Principle" class="headerlink" title="Design Principle"></a>Design Principle</h3><ol>
<li><p>Simplicity favors regularity</p>
<ul>
<li><p>All arithmetic operations have this form</p>
<p><strong>ADD a, b, c &#x2F;&#x2F; a &#x3D; b + c</strong></p>
</li>
<li><p>Regularity makes implementation simpler</p>
</li>
<li><p>Simplicity enables higher performance at lower  cost</p>
</li>
</ul>
</li>
<li><p>Smaller is faster</p>
<ul>
<li>LEGv8 has a 32 × 64-bit register file</li>
<li>64-bit data is called a “doubleword” <ul>
<li>31 x 64-bit general purpose registers X0 to X30</li>
</ul>
</li>
<li>c.f. main memory: millions of locations</li>
</ul>
</li>
<li><p>Make the common case fast</p>
<ul>
<li><p>Constant data specified in an instruction </p>
<p><strong>ADDI X22, X22, #4</strong></p>
</li>
<li><p>Small constants are common</p>
</li>
<li><p>Immediate operand avoids a load instruction</p>
</li>
</ul>
</li>
<li><p>Good design demands good compromises</p>
<ul>
<li>Different formats complicate decoding, but allow 32-bit instructions  uniformly</li>
<li>Keep formats as similar as possible</li>
</ul>
</li>
</ol>
<h3 id="LEGv8-Registers"><a href="#LEGv8-Registers" class="headerlink" title="LEGv8 Registers"></a>LEGv8 Registers</h3><ul>
<li>X0 – X7: procedure arguments&#x2F;results </li>
<li>X8: indirect result location register </li>
<li>X9 – X15: temporaries </li>
<li>X16 – X17 (IP0 – IP1): may be used by linker as a scratch  register, other times as temporary register</li>
<li>X18: platform register for platform independent code;  otherwise a temporary register </li>
<li>X19 – X27: saved </li>
<li>X28 (SP): stack pointer </li>
<li>X29 (FP): frame pointer </li>
<li>X30 (LR): link register (return address) </li>
<li>XZR (register 31): the constant value 0</li>
</ul>
<h3 id="Memory-Layout"><a href="#Memory-Layout" class="headerlink" title="Memory Layout"></a>Memory Layout</h3><ul>
<li>Text: program code</li>
<li>Static data: global variables <ul>
<li>e.g., static variables in C,  constant arrays and strings</li>
</ul>
</li>
<li>Dynamic data: heap <ul>
<li>E.g., malloc in C, new in Java</li>
</ul>
</li>
<li>Stack: automatic storage</li>
</ul>
<p><img src="/images/210/memory_layout.JPG"></p>
<h3 id="LEGv8-Addressing-Summary"><a href="#LEGv8-Addressing-Summary" class="headerlink" title="LEGv8 Addressing Summary"></a>LEGv8 Addressing Summary</h3><p><img src="/images/210/addressing.JPG"></p>
<h3 id="LEGv8-Encoding-Summary"><a href="#LEGv8-Encoding-Summary" class="headerlink" title="LEGv8 Encoding Summary"></a>LEGv8 Encoding Summary</h3><p><img src="/images/210/encoding.JPG"></p>
<h3 id="Synchronization"><a href="#Synchronization" class="headerlink" title="Synchronization"></a>Synchronization</h3><ul>
<li>Two processors sharing an area of memory<ul>
<li>P1 writes, then P2 reads</li>
<li>Data race if P1 and P2 don’t synchronize<ul>
<li>Result depends on order of accesses</li>
</ul>
</li>
</ul>
</li>
<li>Hardware support required<ul>
<li>Atomic read&#x2F;write memory operation</li>
<li>No other access to the location allowed between the read  and write</li>
</ul>
</li>
<li>Could be a single instruction<ul>
<li>E.g., atomic swap of register ↔ memory</li>
<li>Or an atomic pair of instructions</li>
</ul>
</li>
</ul>
<h3 id="Translation-and-Startup"><a href="#Translation-and-Startup" class="headerlink" title="Translation and Startup"></a>Translation and Startup</h3><p><img src="/images/210/translation_startup.JPG"></p>
<p><img src="/images/210/java_startup.JPG"></p>
<h3 id="Loading-a-Program"><a href="#Loading-a-Program" class="headerlink" title="Loading a Program"></a>Loading a Program</h3><p>Load from image file on disk into memory</p>
<ol>
<li>Read header to determine segment sizes</li>
<li>Create virtual address space</li>
<li>Copy text and initialized data into memory <ul>
<li>Or set page table entries so they can be faulted in</li>
</ul>
</li>
<li>Set up arguments on stack</li>
<li>Initialize registers (including SP, FP)</li>
<li>Jump to startup routine<ul>
<li>Copies arguments to X0, … and calls main</li>
<li>When main returns, do exit syscall</li>
</ul>
</li>
</ol>
<h3 id="Dynamic-Linking"><a href="#Dynamic-Linking" class="headerlink" title="Dynamic Linking"></a>Dynamic Linking</h3><ul>
<li>Only link&#x2F;load library procedure when it is  called<ul>
<li>Requires procedure code to be relocatable</li>
<li>Avoids image bloat caused by static linking of all  (transitively) referenced libraries</li>
<li>Automatically picks up new library versions</li>
</ul>
</li>
</ul>
<h3 id="Lessons-Learnt"><a href="#Lessons-Learnt" class="headerlink" title="Lessons Learnt"></a>Lessons Learnt</h3><ul>
<li>Instruction count and CPI are not good  performance indicators in isolation</li>
<li>Compiler optimizations are sensitive to the  algorithm</li>
<li>Java&#x2F;JIT compiled code is significantly faster  than JVM interpreted<ul>
<li>Comparable to optimized C in some cases</li>
</ul>
</li>
<li>Nothing can fix a dumb algorithm!</li>
</ul>
<h3 id="Fallacies"><a href="#Fallacies" class="headerlink" title="Fallacies"></a>Fallacies</h3><ol>
<li>Powerful instruction -&gt; higher performance<ul>
<li>Fewer instructions required</li>
<li>But complex instructions are hard to implement<ul>
<li>May slow down all instructions, including simple ones</li>
</ul>
</li>
<li>Compilers are good at making fast code from simple  instructions</li>
</ul>
</li>
<li>Use assembly code for high performance<ul>
<li>But modern compilers are better at dealing with modern  processors</li>
<li>More lines of code -&gt; more errors and less productivity</li>
</ul>
</li>
<li>Backward compatibility -&gt; instruction set  doesn’t change<ul>
<li>But they do accrete more instructions</li>
</ul>
</li>
</ol>
<h3 id="Pitfalls-1"><a href="#Pitfalls-1" class="headerlink" title="Pitfalls"></a>Pitfalls</h3><ol>
<li>Sequential words are not at sequential  addresses<ul>
<li>Increment by 4, not by 1!</li>
</ul>
</li>
<li>Keeping a pointer to an automatic variable  after procedure returns<ul>
<li>e.g., passing pointer back via an argument</li>
<li>Pointer becomes invalid when stack popped</li>
</ul>
</li>
</ol>
<h2 id="Chapter-4-—-The-Processor"><a href="#Chapter-4-—-The-Processor" class="headerlink" title="Chapter 4 — The Processor"></a>Chapter 4 — The Processor</h2><h3 id="Logic-Design-Basics"><a href="#Logic-Design-Basics" class="headerlink" title="Logic Design Basics"></a>Logic Design Basics</h3><ul>
<li>Information encoded in binary<ul>
<li>Low voltage &#x3D; 0, High voltage &#x3D; 1</li>
<li>One wire per bit</li>
<li>Multi-bit data encoded on multi-wire buses</li>
</ul>
</li>
<li>Combinational element<ul>
<li>Operate on data</li>
<li>Output is a function of input<ul>
<li>AND-gate</li>
<li>Multiplexer</li>
<li>Adder</li>
<li>Arithmetic&#x2F;Logic Unit</li>
</ul>
</li>
</ul>
</li>
<li>State (sequential) elements<ul>
<li>Store information</li>
<li>Register: stores data in a circuit<ul>
<li>Uses a clock signal to determine when to update  the stored value</li>
<li>Edge-triggered: update when Clk changes from 0  to 1</li>
</ul>
</li>
<li>Register with write control<ul>
<li>Only updates on clock edge when write control  input is 1</li>
<li>Used when stored value is required later</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Clocking-Methodology"><a href="#Clocking-Methodology" class="headerlink" title="Clocking Methodology"></a>Clocking Methodology</h3><ul>
<li>Combinational logic transforms data during  clock cycles<ul>
<li>Between clock edges</li>
<li>Input from state elements, output to state element</li>
<li>Longest delay determines clock period</li>
</ul>
</li>
</ul>
<h3 id="Full-Datapath"><a href="#Full-Datapath" class="headerlink" title="Full Datapath"></a>Full Datapath</h3><p>control signals derived from instruction</p>
<p><img src="/images/210/full_datapath.JPG"></p>
<h3 id="Datapath-With-Control"><a href="#Datapath-With-Control" class="headerlink" title="Datapath With Control"></a>Datapath With Control</h3><p><img src="/images/210/datapath_with_control.JPG"></p>
<h3 id="R-Type-Instruction"><a href="#R-Type-Instruction" class="headerlink" title="R-Type Instruction"></a>R-Type Instruction</h3><p><img src="/images/210/r_type.JPG"></p>
<h3 id="Load-Instruction"><a href="#Load-Instruction" class="headerlink" title="Load Instruction"></a>Load Instruction</h3><p><img src="/images/210/load.JPG"></p>
<h3 id="CBZ-Instruction"><a href="#CBZ-Instruction" class="headerlink" title="CBZ Instruction"></a>CBZ Instruction</h3><p><img src="/images/210/CBZ.JPG"></p>
<h3 id="Datapath-With-B-Added"><a href="#Datapath-With-B-Added" class="headerlink" title="Datapath With B Added"></a>Datapath With B Added</h3><p><img src="/images/210/B_added.JPG"></p>
<h3 id="Single-Cycle-Performance-Issues"><a href="#Single-Cycle-Performance-Issues" class="headerlink" title="Single Cycle Performance Issues"></a>Single Cycle Performance Issues</h3><ul>
<li>Longest delay determines clock period<ul>
<li>Critical path: load instruction</li>
<li>Instruction memory → register file → ALU → data  memory → register file</li>
</ul>
</li>
<li>Not feasible to vary period for different  instructions</li>
<li>Violates design principle<ul>
<li>Making the common case fast</li>
</ul>
</li>
<li>We will improve performance by pipelining</li>
</ul>
<h3 id="Pipelining-Analogy"><a href="#Pipelining-Analogy" class="headerlink" title="Pipelining Analogy"></a>Pipelining Analogy</h3><ul>
<li>Pipelined laundry: overlapping execution<ul>
<li>Parallelism improves performance</li>
</ul>
</li>
</ul>
<p><img src="/images/210/pipeline_analogy.JPG"></p>
<h3 id="LEGv8-Pipeline"><a href="#LEGv8-Pipeline" class="headerlink" title="LEGv8 Pipeline"></a>LEGv8 Pipeline</h3><ul>
<li>Five stages, one step per stage<ol>
<li>IF: Instruction fetch from memory</li>
<li>ID: Instruction decode &amp; register read</li>
<li>EX: Execute operation or calculate address</li>
<li>MEM: Access memory operand</li>
<li>WB: Write result back to register</li>
</ol>
</li>
</ul>
<h3 id="Pipeline-Performance"><a href="#Pipeline-Performance" class="headerlink" title="Pipeline Performance"></a>Pipeline Performance</h3><p><img src="D:\Blog\source\images\210\pipeline_performance1.JPG"></p>
<p><img src="/images/210/pipeline_performance2.JPG"></p>
<h3 id="Pipeline-Speedup"><a href="#Pipeline-Speedup" class="headerlink" title="Pipeline Speedup"></a>Pipeline Speedup</h3><ul>
<li>If all stages take the same time (balanced)<ul>
<li>Time between instructions(pipelined) &#x3D; Time between instructions(nonpipelined) &#x2F; Number of stages</li>
</ul>
</li>
<li>If not balanced, speedup is less</li>
<li>Speedup due to increased throughput<ul>
<li>Latency (time for each instruction) does not  decrease</li>
</ul>
</li>
</ul>
<h3 id="Pipelining-and-ISA-Design"><a href="#Pipelining-and-ISA-Design" class="headerlink" title="Pipelining and ISA Design"></a>Pipelining and ISA Design</h3><ul>
<li>LEGv8 ISA designed for pipelining<ul>
<li>All instructions are 32-bits<ul>
<li>Easier to fetch and decode in one cycle</li>
<li>c.f. x86: 1- to 17-byte instructions</li>
</ul>
</li>
<li>Few and regular instruction formats<ul>
<li>Can decode and read registers in one step</li>
</ul>
</li>
<li>Load&#x2F;store addressing<ul>
<li>Can calculate address in 3rd stage, access memory in 4th stage</li>
</ul>
</li>
<li>Alignment of memory operands<ul>
<li>Memory access takes only one cycle</li>
<li>registers &amp; stack</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Hazards"><a href="#Hazards" class="headerlink" title="Hazards"></a>Hazards</h3><p>Situations that prevent starting the next  instruction in the next cycle</p>
<ol>
<li><p>Structure hazards</p>
<ul>
<li>A required resource is busy</li>
<li>Conflict for use of a resource</li>
<li>In LEGv8 pipeline with a single memory<ul>
<li>Load&#x2F;store requires data access</li>
<li>Instruction fetch would have to stall for that cycle<ul>
<li>Would cause a pipeline “bubble”</li>
</ul>
</li>
</ul>
</li>
<li>Hence, pipelined datapaths require separate  instruction&#x2F;data memories<ul>
<li>Or separate instruction&#x2F;data caches</li>
</ul>
</li>
</ul>
</li>
<li><p>Data hazard</p>
<ul>
<li><p>Need to wait for previous instruction to complete  its data read&#x2F;write</p>
</li>
<li><p>An instruction depends on completion of data  access by a previous instruction</p>
<p><strong>ADD <em>X19</em>, X0, X1</strong> </p>
<p><strong>SUB X2, <em>X19</em>, X3</strong></p>
</li>
<li><p>Forwarding (aka Bypassing)</p>
<ul>
<li>Use result when it is computed</li>
<li>Don’t wait for it to be stored in a register</li>
<li>Requires extra connections in the datapath</li>
</ul>
<p><img src="/images/210/forwarding.JPG"></p>
</li>
<li><p>Load-Use Data Hazard</p>
<ul>
<li>Can’t always avoid stalls by forwarding<ul>
<li>If value not computed when needed</li>
<li>Can’t forward backward in time!</li>
</ul>
</li>
</ul>
<p><img src="/images/210/bubble.JPG"></p>
<ul>
<li>Code Scheduling to Avoid Stalls<ul>
<li>Reorder code to avoid use of load result in the  next instruction</li>
</ul>
</li>
</ul>
<p><img src="/images/210/code_scheduling.JPG"></p>
</li>
</ul>
</li>
<li><p>Control hazard</p>
<ul>
<li>Deciding on control action depends on previous  instruction</li>
<li>Branch determines flow of control<ul>
<li>Fetching next instruction depends on branch  outcome</li>
<li>Pipeline can’t always fetch correct instruction<ul>
<li>Still working on ID stage of branch</li>
</ul>
</li>
</ul>
</li>
<li>In LEGv8 pipeline<ul>
<li>Need to compare registers and compute target  early in the pipeline</li>
<li>Add hardware to do it in ID stage</li>
</ul>
</li>
<li>Stall on Branch<ul>
<li>Wait until branch outcome determined before  fetching next instruction</li>
</ul>
</li>
</ul>
<p><img src="/images/210/stall_on_branch.JPG"></p>
</li>
</ol>
<h3 id="Branch-Prediction"><a href="#Branch-Prediction" class="headerlink" title="Branch Prediction"></a>Branch Prediction</h3><ul>
<li>Longer pipelines can’t readily determine  branch outcome early<ul>
<li>Stall penalty becomes unacceptable</li>
</ul>
</li>
<li>Predict outcome of branch<ul>
<li>Only stall if prediction is wrong</li>
</ul>
</li>
<li>In LEGv8 pipeline<ul>
<li>Can predict branches not taken</li>
<li>Fetch instruction after branch, with no delay</li>
</ul>
</li>
</ul>
<h3 id="More-Realistic-Branch-Prediction"><a href="#More-Realistic-Branch-Prediction" class="headerlink" title="More-Realistic Branch Prediction"></a>More-Realistic Branch Prediction</h3><ul>
<li><p>Static branch prediction</p>
<ul>
<li><p>Based on typical branch behavior</p>
</li>
<li><p>Example: loop and if-statement branches</p>
<ul>
<li><p>Predict backward branches taken</p>
<p>do loop</p>
</li>
<li><p>Predict forward branches not taken</p>
<p>for loop</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Dynamic branch prediction</p>
<ul>
<li>Hardware measures actual branch behavior<ul>
<li>e.g., record recent history of each branch</li>
</ul>
</li>
<li>Assume future behavior will continue the trend<ul>
<li>When wrong, stall while re-fetching, and update history</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Pipeline-Summary"><a href="#Pipeline-Summary" class="headerlink" title="Pipeline Summary"></a>Pipeline Summary</h3><ul>
<li>Pipelining improves performance by increasing  instruction throughput<ul>
<li>Executes multiple instructions in parallel</li>
<li>Each instruction has the same latency</li>
</ul>
</li>
<li>Subject to hazards<ul>
<li>Structure, data, control</li>
</ul>
</li>
<li>Instruction set design affects complexity of  pipeline implementation</li>
</ul>
<h3 id="LEGv8-Pipelined-Datapath"><a href="#LEGv8-Pipelined-Datapath" class="headerlink" title="LEGv8 Pipelined Datapath"></a>LEGv8 Pipelined Datapath</h3><p><img src="/images/210/legv8_pipelined_datapath.JPG"></p>
<h3 id="Pipeline-registers"><a href="#Pipeline-registers" class="headerlink" title="Pipeline registers"></a>Pipeline registers</h3><p>Need registers between stages</p>
<ul>
<li>To hold information produced in previous cycle</li>
</ul>
<p><img src="/images/210/pipeline_registers.JPG"></p>
<h3 id="Multi-Cycle-Pipeline-Diagram"><a href="#Multi-Cycle-Pipeline-Diagram" class="headerlink" title="Multi-Cycle Pipeline Diagram"></a>Multi-Cycle Pipeline Diagram</h3><p><img src="/images/210/multi_cycle_pipeline.JPG"></p>
<h3 id="Single-Cycle-Pipeline-Diagram"><a href="#Single-Cycle-Pipeline-Diagram" class="headerlink" title="Single-Cycle Pipeline Diagram"></a>Single-Cycle Pipeline Diagram</h3><p><img src="/images/210/single_cycle_pipeline.JPG"></p>
<h3 id="Pipelined-Control"><a href="#Pipelined-Control" class="headerlink" title="Pipelined Control"></a>Pipelined Control</h3><p><img src="/images/210/pipelined_control2.JPG"></p>
<h3 id="Forwarding-and-Hazard-Detection"><a href="#Forwarding-and-Hazard-Detection" class="headerlink" title="Forwarding and Hazard Detection"></a>Forwarding and Hazard Detection</h3><ul>
<li><p>Detecting the Need to Forward</p>
<p><img src="/images/210/need_to_forward.JPG"></p>
<p><img src="/images/210/need_to_forward2.JPG"></p>
</li>
</ul>
<p>​        <img src="/images/210/forwarding_path.JPG"></p>
<p>​    <img src="/images/210/revised_forwarding_condition.JPG"></p>
<ul>
<li>Hazard in ALU</li>
<li>Load-use hazard</li>
</ul>
<p>​        <img src="/images/210/load_use_data_hazard.JPG"></p>
<p><img src="/images/210/datapath_with_hazard_detection.JPG"></p>
<ul>
<li>Branch hazard</li>
</ul>
<p><img src="/images/210/branch_hazard.JPG"></p>
<h3 id="Stalls-and-Performance"><a href="#Stalls-and-Performance" class="headerlink" title="Stalls and Performance"></a>Stalls and Performance</h3><ul>
<li>Stalls reduce performance<ul>
<li>But are required to get correct results</li>
</ul>
</li>
<li>Compiler can arrange code to avoid hazards  and stalls<ul>
<li>Requires knowledge of the pipeline structure</li>
</ul>
</li>
</ul>
<h3 id="Dynamic-Branch-Prediction"><a href="#Dynamic-Branch-Prediction" class="headerlink" title="Dynamic Branch Prediction"></a>Dynamic Branch Prediction</h3><ul>
<li>In deeper and superscalar pipelines, branch penalty is  more significant</li>
<li>Use dynamic prediction<ul>
<li>Branch prediction buffer (aka branch history table)</li>
<li>Indexed by recent branch instruction addresses</li>
<li>Stores outcome (taken&#x2F;not taken)</li>
<li>To execute a branch<ul>
<li>Check table, expect the same outcome</li>
<li>Start fetching from fall-through or target</li>
<li>If wrong, flush pipeline and flip prediction</li>
</ul>
</li>
</ul>
</li>
<li>1-Bit Predictor: Shortcoming<ul>
<li>Inner loop branches mispredicted twice!</li>
</ul>
</li>
<li>2-Bit Predictor<ul>
<li>Only change prediction on two successive  mispredictions</li>
</ul>
</li>
</ul>
<h3 id="Exceptions-and-Interrupts"><a href="#Exceptions-and-Interrupts" class="headerlink" title="Exceptions and Interrupts"></a>Exceptions and Interrupts</h3><ul>
<li>“Unexpected” events requiring change in flow of control<ul>
<li>Different ISAs use the terms differently</li>
</ul>
</li>
<li>Exception<ul>
<li>Arises within the CPU<ul>
<li>e.g., undefined opcode, overflow, syscall, …</li>
</ul>
</li>
</ul>
</li>
<li>Interrupt<ul>
<li>From an external I&#x2F;O controller</li>
</ul>
</li>
<li>Dealing with them without sacrificing performance is hard</li>
</ul>
<p><img src="/images/210/exception_interrupt.JPG"></p>
<h3 id="Handling-Exceptions"><a href="#Handling-Exceptions" class="headerlink" title="Handling Exceptions"></a>Handling Exceptions</h3><ul>
<li><p>Save PC of offending (or interrupted) instruction <strong>&#x3D;EPC</strong></p>
<ul>
<li>In LEGv8: Exception Link Register (ELR)</li>
</ul>
</li>
<li><p>Save indication of the problem</p>
<ul>
<li>In LEGv8: Exception Syndrome Rregister (ESR)</li>
<li>We’ll assume 1-bit<ul>
<li>0 for undefined opcode, 1 for overflow</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="/images/210/pipeline_with_exceptions.JPG"></p>
<h3 id="Exception-Properties"><a href="#Exception-Properties" class="headerlink" title="Exception Properties"></a>Exception Properties</h3><ul>
<li>Restartable exceptions<ul>
<li>Pipeline can flush the instruction</li>
<li>Handler executes, then returns to the instruction<ul>
<li>Refetched and executed from scratch</li>
</ul>
</li>
</ul>
</li>
<li>PC saved in ELR register<ul>
<li>Identifies causing instruction</li>
<li>Actually PC + 4 is saved<ul>
<li>Actually PC + 4 is saved</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Instruction-Level-Parallelism-ILP"><a href="#Instruction-Level-Parallelism-ILP" class="headerlink" title="Instruction-Level Parallelism (ILP)"></a>Instruction-Level Parallelism (ILP)</h3><ul>
<li>Pipelining: multiple instructions in parallel</li>
<li>To increase ILP<ul>
<li>Deeper pipeline<ul>
<li>Less work per stage -&gt; shorter clock cycle</li>
</ul>
</li>
<li>Multiple issue<ul>
<li>Replicate pipeline stages -&gt; multiple pipelines</li>
<li>Start multiple instructions per clock cycle</li>
<li>CPI &lt; 1, so use Instructions Per Cycle (IPC)</li>
<li>E.g., 4GHz 4-way multiple-issue<ul>
<li>16 BIPS, peak CPI &#x3D; 0.25, peak IPC &#x3D; 4</li>
</ul>
</li>
<li>But dependencies reduce this in practice</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Multiple-Issue"><a href="#Multiple-Issue" class="headerlink" title="Multiple Issue"></a>Multiple Issue</h3><ul>
<li>Static multiple issue (compile time)<ul>
<li>Compiler groups instructions to be issued together</li>
<li>Packages them into “issue slots”</li>
<li>Compiler detects and avoids hazards</li>
</ul>
</li>
<li>Dynamic multiple issue (run time)<ul>
<li>CPU examines instruction stream and chooses instructions  to issue each cycle</li>
<li>Compiler can help by reordering instructions</li>
<li>CPU resolves hazards using advanced techniques at runtime</li>
</ul>
</li>
</ul>
<h3 id="Speculation"><a href="#Speculation" class="headerlink" title="Speculation"></a>Speculation</h3><ul>
<li>“Guess” what to do with an instruction<ul>
<li>Start the guessed operation as soon as possible</li>
<li>Check whether guess was right<ul>
<li>If so, complete the operation</li>
<li>If not, roll-back and do the right thing</li>
</ul>
</li>
</ul>
</li>
<li>Common to static and dynamic multiple issue</li>
<li>Examples<ul>
<li>Speculate on branch outcome<ul>
<li>Roll back if path taken is different</li>
</ul>
</li>
<li>Speculate on load<ul>
<li>Roll back if location is updated</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Loop-Unrolling"><a href="#Loop-Unrolling" class="headerlink" title="Loop Unrolling"></a>Loop Unrolling</h3><ul>
<li>Replicate loop body to expose more  parallelism<ul>
<li>Reduces loop-control overhead</li>
</ul>
</li>
<li>Use different registers per replication<ul>
<li>Called “register renaming”</li>
<li>Avoid loop-carried “anti-dependencies”<ul>
<li>Store followed by a load of the same register</li>
<li>Aka “name dependence”<ul>
<li>Reuse of a register name</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Does-Multiple-Issue-Work"><a href="#Does-Multiple-Issue-Work" class="headerlink" title="Does Multiple Issue Work?"></a>Does Multiple Issue Work?</h3><ul>
<li>Yes, but not as much as we’d like</li>
<li>Programs have real dependencies that limit ILP</li>
<li>Some dependencies are hard to eliminate<ul>
<li>e.g., pointer aliasing</li>
</ul>
</li>
<li>Some parallelism is hard to expose<ul>
<li>Limited window size during instruction issue</li>
</ul>
</li>
<li>Memory delays and limited bandwidth<ul>
<li>Hard to keep pipelines full</li>
</ul>
</li>
<li>Speculation can help if done well</li>
</ul>
<h3 id="Fallacies-1"><a href="#Fallacies-1" class="headerlink" title="Fallacies"></a>Fallacies</h3><ol>
<li>Pipelining is easy (!)<ul>
<li>The basic idea is easy</li>
<li>The devil is in the details<ul>
<li>e.g., detecting data hazards</li>
</ul>
</li>
</ul>
</li>
<li>Pipelining is independent of technology<ul>
<li>So why haven’t we always done pipelining?</li>
<li>More transistors make more advanced techniques feasible</li>
<li>Pipeline-related ISA design needs to take account of  technology trends<ul>
<li>e.g., predicated instructions</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="Pitfalls-2"><a href="#Pitfalls-2" class="headerlink" title="Pitfalls"></a>Pitfalls</h3><ul>
<li>Poor ISA design can make pipelining harder<ul>
<li>e.g., complex instruction sets (VAX, IA-32)<ul>
<li>Significant overhead to make pipelining work</li>
<li>IA-32 micro-op approach</li>
</ul>
</li>
<li>e.g., complex addressing modes<ul>
<li>Register update side effects, memory indirection</li>
</ul>
</li>
<li>e.g., delayed branches<ul>
<li>Advanced pipelines have long delay slots</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Concluding-Remarks"><a href="#Concluding-Remarks" class="headerlink" title="Concluding Remarks"></a>Concluding Remarks</h3><ul>
<li>ISA influences design of datapath and control</li>
<li>Datapath and control influence design of ISA</li>
<li>Pipelining improves instruction throughput using parallelism<ul>
<li>More instructions completed per second</li>
<li>Latency for each instruction not reduced</li>
</ul>
</li>
<li>Hazards: structural, data, control</li>
<li>Multiple issue and dynamic scheduling (ILP)<ul>
<li>Dependencies limit achievable parallelism</li>
<li>Complexity leads to the power wall</li>
</ul>
</li>
</ul>
<h2 id="Chapter-5-—-Large-and-Fast-Exploiting-Memory-Hierarchy"><a href="#Chapter-5-—-Large-and-Fast-Exploiting-Memory-Hierarchy" class="headerlink" title="Chapter 5 — Large and Fast: Exploiting Memory Hierarchy"></a>Chapter 5 — Large and Fast: Exploiting Memory Hierarchy</h2><h3 id="Principle-of-Locality"><a href="#Principle-of-Locality" class="headerlink" title="Principle of Locality"></a>Principle of Locality</h3><ul>
<li>Programs access a small portion of their  address space at any time</li>
<li>Temporal locality<ul>
<li>Items accessed recently are likely to be accessed  again soon</li>
<li>e.g., instructions in a loop, induction variables</li>
</ul>
</li>
<li>Spatial locality<ul>
<li>Items near those accessed recently are likely to be  accessed soon</li>
<li>E.g., sequential instruction access, array data</li>
</ul>
</li>
</ul>
<h3 id="Taking-Advantage-of-Locality"><a href="#Taking-Advantage-of-Locality" class="headerlink" title="Taking Advantage of Locality"></a>Taking Advantage of Locality</h3><ul>
<li>Memory hierarchy</li>
<li>Store everything on disk</li>
<li>Copy recently accessed (and nearby) items  from disk to smaller DRAM memory<ul>
<li>Main memory</li>
</ul>
</li>
<li>Copy more recently accessed (and nearby)  items from DRAM to smaller SRAM memory<ul>
<li>Cache memory attached to CPU</li>
</ul>
</li>
</ul>
<h3 id="Cache-Block-Size-Considerations"><a href="#Cache-Block-Size-Considerations" class="headerlink" title="Cache Block Size Considerations"></a>Cache Block Size Considerations</h3><ul>
<li>Larger blocks should reduce miss rate<ul>
<li>Due to spatial locality</li>
</ul>
</li>
<li>But in a fixed-sized cache<ul>
<li>Larger blocks -&gt; fewer of them<ul>
<li>More competition -&gt; increased miss rate</li>
</ul>
</li>
<li>Larger blocks -&gt; pollution<ul>
<li>Partially used before being replaced</li>
</ul>
</li>
</ul>
</li>
<li>Larger miss penalty<ul>
<li>Can override benefit of reduced miss rate</li>
<li>Early restart and critical-word-first can help<ul>
<li>early restart: don’t wait for everything to load</li>
<li>critical-word-first: bring in the required data first</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Cache-Misses"><a href="#Cache-Misses" class="headerlink" title="Cache Misses"></a>Cache Misses</h3><ul>
<li>On cache hit, CPU proceeds normally</li>
<li>On cache miss<ul>
<li>Stall the CPU pipeline</li>
<li>Fetch block from next level of hierarchy</li>
<li>Instruction cache miss<ul>
<li>Restart instruction fetch (PC - 4)</li>
</ul>
</li>
<li>Data cache miss<ul>
<li>Complete data access</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="On-data-write-hit"><a href="#On-data-write-hit" class="headerlink" title="On data-write hit"></a>On data-write hit</h3><ul>
<li>Write-Through<ul>
<li>also update memory</li>
<li>But makes writes take longer</li>
<li>Solution: write buffer<ul>
<li>Holds data waiting to be written to memory</li>
<li>CPU continues immediately<ul>
<li>Only stalls on write if write buffer is already full</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Write-Back<ul>
<li>Alternative: On data-write hit, just update the  block in cache<ul>
<li>Keep track of whether each block is dirty</li>
</ul>
</li>
<li>When a dirty block is replaced<ul>
<li>Write it back to memory</li>
<li>Can use a write buffer to allow replacing block to  be read first</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Performance-Summary"><a href="#Performance-Summary" class="headerlink" title="Performance Summary"></a>Performance Summary</h3><ul>
<li>When CPU performance increased<ul>
<li>Miss penalty becomes more significant</li>
</ul>
</li>
<li>Decreasing base CPI<ul>
<li>Greater proportion of time spent on memory stalls</li>
</ul>
</li>
<li>Increasing clock rate<ul>
<li>Memory stalls account for more CPU cycles</li>
</ul>
</li>
<li>Can’t neglect cache behavior when evaluating  system performance</li>
</ul>
<h3 id="Set-Associative-Cache"><a href="#Set-Associative-Cache" class="headerlink" title="Set Associative Cache"></a>Set Associative Cache</h3><ul>
<li>n-way set associative<ul>
<li>Each set contains n entries</li>
<li>Block number determines which set<ul>
<li>(Block number) modulo (#Sets in cache)</li>
</ul>
</li>
<li>Search all entries in a given set at once</li>
<li>n comparators (less expensive)</li>
</ul>
</li>
<li>Replacement Policy<ul>
<li>Prefer non-valid entry, if there is one</li>
<li>Otherwise, choose among entries in the set<ul>
<li>Least-recently used (LRU)<ul>
<li>Choose the one unused for the longest time</li>
</ul>
</li>
<li>Random</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Multilevel-Caches"><a href="#Multilevel-Caches" class="headerlink" title="Multilevel Caches"></a>Multilevel Caches</h3><ul>
<li>Primary cache attached to CPU<ul>
<li>Focus on minimal hit time</li>
</ul>
</li>
<li>Level-2 cache services misses  from primary cache<ul>
<li>Focus on low miss rate to avoid main memory  access</li>
<li>Hit time has less overall impact</li>
</ul>
</li>
<li>Main memory services L-2  cache misses</li>
<li>Some high-end systems include  L-3 cache</li>
</ul>
<h3 id="Dependability-Measures"><a href="#Dependability-Measures" class="headerlink" title="Dependability Measures"></a>Dependability Measures</h3><ul>
<li>Reliability: mean time to failure (MTTF)</li>
<li>Service interruption: mean time to repair (MTTR)</li>
<li>Availability &#x3D; MTTF &#x2F; (MTTF + MTTR)</li>
<li>Improving Availability<ul>
<li>Increase MTTF: fault avoidance, fault tolerance, fault  forecasting</li>
<li>Reduce MTTR: improved tools and processes for diagnosis  and repair</li>
</ul>
</li>
</ul>
<h3 id="The-Hamming-SEC-Code"><a href="#The-Hamming-SEC-Code" class="headerlink" title="The Hamming SEC Code"></a>The Hamming SEC Code</h3><ul>
<li>Hamming distance<ul>
<li>Number of bits that are different between two bit  patterns, e.g. 2 in 011011 and 001111</li>
</ul>
</li>
<li>Code with minimum distance &#x3D; 2 provides  single bit error detection<ul>
<li>E.g. parity code</li>
</ul>
</li>
<li>Minimum distance &#x3D; 3 provides single error  correction, 2 bit error detection</li>
</ul>
<h3 id="Virtual-Memory"><a href="#Virtual-Memory" class="headerlink" title="Virtual Memory"></a>Virtual Memory</h3><ul>
<li><p>Use main memory as a “cache” for secondary  (disk) storage</p>
<ul>
<li>Managed jointly by CPU hardware and the  operating system (OS)</li>
</ul>
</li>
<li><p>Programs share main memory</p>
<ul>
<li>Each gets a private virtual address space holding its  frequently used code and data</li>
<li>Protected from other programs</li>
</ul>
</li>
<li><p>CPU and OS translate virtual addresses to  physical addresses</p>
<ul>
<li>VM “block” is called a page</li>
<li>VM translation “miss” is called a page fault</li>
</ul>
</li>
<li><p>PTE: Page Table Entry</p>
</li>
<li><p>TLB: Translation Look-aside Buffer</p>
</li>
</ul>
<p><img src="/images/210/TLB.JPG"></p>
<p><img src="/images/210/Integration.JPG"></p>
<h3 id="Pitfalls-3"><a href="#Pitfalls-3" class="headerlink" title="Pitfalls"></a>Pitfalls</h3><ul>
<li>Byte vs. word addressing<ul>
<li>Example: 32-byte direct-mapped cache, 4-byte blocks<ul>
<li>Byte 36 maps to block 1</li>
<li>Word 36 maps to block 4</li>
</ul>
</li>
</ul>
</li>
<li>Ignoring memory system effects when writing  or generating code<ul>
<li>Example: iterating over rows vs. columns of arrays</li>
<li>Large strides result in poor locality</li>
</ul>
</li>
<li>In multiprocessor with shared L2 or L3 cache<ul>
<li>Less associativity than cores results in conflict  misses</li>
<li>More cores -&gt; need to increase associativity</li>
</ul>
</li>
<li>Using AMAT to evaluate performance of out-of-order processors<ul>
<li>Ignores effect of non-blocked accesses</li>
<li>Instead, evaluate performance by simulation</li>
</ul>
</li>
<li>Extending address range using segments<ul>
<li>E.g., Intel 80286</li>
<li>But a segment is not always big enough</li>
<li>Makes address arithmetic complicated</li>
</ul>
</li>
<li>Implementing a VMM on an ISA not designed  for virtualization<ul>
<li>E.g., non-privileged instructions accessing  hardware resources</li>
<li>Either extend ISA, or require guest OS not to use  problematic instructions</li>
</ul>
</li>
</ul>
<h3 id="Concluding-Remarks-1"><a href="#Concluding-Remarks-1" class="headerlink" title="Concluding Remarks"></a>Concluding Remarks</h3><ul>
<li>Fast memories are small, large memories are slow<ul>
<li>We really want fast, large memories</li>
<li>Caching gives this illusion</li>
</ul>
</li>
<li>Principle of locality<ul>
<li>Programs use a small part of their memory space frequently</li>
</ul>
</li>
<li>Memory hierarchy<ul>
<li>L1 cache &lt;-&gt; L2 cache &lt;-&gt; … &lt;-&gt; DRAM memory &lt;-&gt; disk</li>
</ul>
</li>
<li>Memory system design is critical for multiprocessors</li>
</ul>
<h2 id="Chapter-6-—-Parallel-Processors-from-Client-to-Cloud"><a href="#Chapter-6-—-Parallel-Processors-from-Client-to-Cloud" class="headerlink" title="Chapter 6 — Parallel Processors from Client to Cloud"></a>Chapter 6 — Parallel Processors from Client to Cloud</h2><h3 id="GPU-Architectures"><a href="#GPU-Architectures" class="headerlink" title="GPU Architectures"></a>GPU Architectures</h3><ul>
<li>Processing is highly data-parallel<ul>
<li>GPUs are highly multithreaded</li>
<li>Use thread switching to hide memory latency<ul>
<li>Less reliance on multi-level caches</li>
</ul>
</li>
<li>Graphics memory is wide and high-bandwidth</li>
</ul>
</li>
<li>Trend toward general purpose GPUs<ul>
<li>Heterogeneous CPU&#x2F;GPU systems</li>
<li>CPU for sequential code, GPU for parallel code</li>
</ul>
</li>
<li>Programming languages&#x2F;APIs<ul>
<li>DirectX, OpenGL</li>
<li>C for Graphics (Cg), High Level Shader Language (HLSL)</li>
<li>Compute Unified Device Architecture (CUDA</li>
</ul>
</li>
</ul>
<h3 id="Concluding-Remarks-2"><a href="#Concluding-Remarks-2" class="headerlink" title="Concluding Remarks"></a>Concluding Remarks</h3><ul>
<li>Goal: higher performance by using multiple  processors</li>
<li>Difficulties</li>
<li>SaaS importance is growing and clusters are a good  match</li>
<li>Performance per dollar and performance per Joule  drive both mobile and WSC</li>
<li>SIMD and vector  operations match  multimedia applications  and are easy to program</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>COEN317_midterm</title>
    <url>/2022/12/04/COEN317-midterm/</url>
    <content><![CDATA[<h1 id="midterm-review"><a href="#midterm-review" class="headerlink" title="midterm review"></a>midterm review</h1><h2 id="Chap-1-Intro"><a href="#Chap-1-Intro" class="headerlink" title="Chap 1   Intro"></a>Chap 1   Intro</h2><h3 id="what’s-a-distributed-system"><a href="#what’s-a-distributed-system" class="headerlink" title="what’s a distributed system"></a>what’s a distributed system</h3><ul>
<li>definitions: <ol>
<li>a collection of independent computers that appears to users as a single coherent system</li>
<li>a collection of autonomous computers linked by a computer network and supported by software that enables the collection to operate as an integrated facility</li>
<li>crash you never heard of stops you from getting work done</li>
</ol>
</li>
<li><strong>types:</strong></li>
</ul>
<h3 id="what-do-we-want-from-distributed-system"><a href="#what-do-we-want-from-distributed-system" class="headerlink" title="what do we want from distributed system"></a>what do we want from distributed system</h3><ul>
<li><p>resource sharing: </p>
<ol>
<li>Quality of Service, trade-offs</li>
</ol>
</li>
<li><p>transparency: information hiding applied to distributed systems</p>
<ol>
<li>hiding different aspects of distribution from clients</li>
<li>make the system more user friendly</li>
<li>appears to users and applications as a single computer system</li>
<li>users&#x2F;apps should be able to access remote resources the same way they access local resources</li>
</ol>
<ul>
<li>types:<ol>
<li>access: hide differences in data representation and how a resource is accessed</li>
<li>location: hide where a resource is located</li>
<li>migration: hide that a resource may move to another location</li>
<li>relocation: hide that a resource may be moved to another location while in use</li>
<li>replication: hide that a resource is replicated</li>
<li>concurrency: hide that a resource may be shared by several competitive users</li>
<li>failure: hide the failure and recovery of a resource</li>
</ol>
</li>
</ul>
</li>
<li><p>openness:</p>
<ul>
<li>offer services according to standard rules</li>
<li>In other words, the interfaces to the system are clearly specified and freely available</li>
<li>formalized in protocols, not proprietary</li>
<li>definitions are language and machine independent    interoperate</li>
<li><strong>separating policy from mechanism</strong></li>
</ul>
</li>
<li><p>scalability: able to grow to meet increasing demands </p>
<ol>
<li>3 dimensions of scalability</li>
</ol>
<ul>
<li>size: users&#x2F;resources<ul>
<li>performance bottlneck: centralized server, data, algorithms</li>
</ul>
</li>
<li>geographically: topologically<ul>
<li>LAN: synchronous, fast ,reliable</li>
<li>WAN: asynchronous, slow, unreliable</li>
</ul>
</li>
<li><strong>administratively</strong>: independent organizations&#x2F;domains</li>
</ul>
<ol start="2">
<li>vertical horizontal</li>
<li>problems:</li>
</ol>
<ul>
<li>trade-off: scalability, security</li>
</ul>
<ol start="4">
<li>scaling techniques</li>
</ol>
<ul>
<li>caching: proximity, client decision</li>
<li>replicate: consistency vs scalability</li>
<li>asynchronous: hiding communication latency</li>
<li>synchronous</li>
<li>hierachies, domains, zones     split</li>
</ul>
</li>
</ul>
<h3 id="elements-of-distributed-system"><a href="#elements-of-distributed-system" class="headerlink" title="elements of distributed system"></a>elements of distributed system</h3><ul>
<li>networks</li>
<li>hosts</li>
<li>middleware</li>
</ul>
<h3 id="architecture-styles"><a href="#architecture-styles" class="headerlink" title="architecture styles"></a>architecture styles</h3><ul>
<li><p>describe a particular way to configure a collection of components and connectors</p>
</li>
<li><p>layered</p>
</li>
<li><p>object-based: object + RPC&#x2F;RMI</p>
</li>
<li><p>event&#x2F;publish-subscribe: </p>
<ul>
<li>publish to event bus &#x3D;&gt; event bus delivers</li>
<li>asynchronous communciation, decouples senders&amp;receivers</li>
</ul>
</li>
<li><p>shared data-space: </p>
<ul>
<li>publish to shared persistent data space &#x3D;&gt; data space delivers</li>
</ul>
</li>
<li><p>client&#x2F;server model:</p>
<ul>
<li>user-interface level: GUI</li>
<li>processing level: core functionality</li>
<li>data level: interacts with database or file system</li>
<li>two-tiered: <ul>
<li>thin-client: GUI</li>
<li>fat-client: user interface + processing + some data</li>
</ul>
</li>
<li>three-tiered:<ul>
<li>application server acting as a client</li>
<li>client &#x3D;&gt; middleware &#x3D;&gt; resource management server</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="various-configurations-of-distributed-systems"><a href="#various-configurations-of-distributed-systems" class="headerlink" title="various configurations of distributed systems"></a>various configurations of distributed systems</h3><h3 id="example-distributed-systems"><a href="#example-distributed-systems" class="headerlink" title="example distributed systems"></a>example distributed systems</h3><h2 id="Chap-2-3-Communications-Foudamentals"><a href="#Chap-2-3-Communications-Foudamentals" class="headerlink" title="Chap 2,3   Communications  Foudamentals"></a>Chap 2,3   Communications  Foudamentals</h2><h3 id="packets"><a href="#packets" class="headerlink" title="packets"></a>packets</h3><ul>
<li>segment &#x3D; original data + transport layer header</li>
<li>packet &#x3D; segment + network layer header</li>
<li>fram &#x3D; packet + data link layer header</li>
</ul>
<h3 id="protocols"><a href="#protocols" class="headerlink" title="protocols"></a>protocols</h3><ul>
<li>connection-oriented: setup of communication first</li>
<li>connectionless: no setup of communication</li>
<li>application-specific vs application-independent</li>
</ul>
<h3 id="blocking-x2F-unblocking-communication-calls"><a href="#blocking-x2F-unblocking-communication-calls" class="headerlink" title="blocking&#x2F;unblocking communication calls"></a>blocking&#x2F;unblocking communication calls</h3><ul>
<li>blocking: process&#x2F;thread execution is suspended until transmission finishes</li>
<li>unblocking: execution continues without waiting for the finish of the transmission</li>
</ul>
<h3 id="layering"><a href="#layering" class="headerlink" title="layering"></a>layering</h3><ul>
<li>do I need other intermediators to relay the message?</li>
</ul>
<h3 id="layered-protocols"><a href="#layered-protocols" class="headerlink" title="layered protocols"></a>layered protocols</h3><h3 id="application-layering"><a href="#application-layering" class="headerlink" title="application layering"></a>application layering</h3><h3 id="communication-between-processes"><a href="#communication-between-processes" class="headerlink" title="communication between processes"></a>communication between processes</h3><h3 id="middleware-and-application-protocols"><a href="#middleware-and-application-protocols" class="headerlink" title="middleware and application protocols"></a>middleware and application protocols</h3><ul>
<li>application layer protocols</li>
<li>between application and transport: middleware</li>
<li>program and network layer</li>
</ul>
<h3 id="layered-network-models"><a href="#layered-network-models" class="headerlink" title="layered network models"></a>layered network models</h3><ul>
<li><p>OSI 7-layer model     Open System Interconnection</p>
<ul>
<li>application: support application-specific needs</li>
<li>presentation: process information format and deliver(serialize and encrypt)</li>
<li>session: manage communication sessions among applications</li>
<li>transport: end-to-end communication for applications</li>
<li>network: route data packets among senders&#x2F;receivers</li>
<li>data link: send, detect and correct data frames(units of bits)</li>
<li>physical: transfer bits over physical interfaces(fiber optics)</li>
</ul>
</li>
<li><p>TCP&#x2F;IP 4-layer</p>
<ul>
<li>application: SMTP,HTTP,FTP,Telnet</li>
<li>transport: UCP,TCP</li>
<li>network: IP</li>
<li>link: most network hardware   Ethernet&#x2F;fiber&#x2F;satellite</li>
</ul>
</li>
<li><p>Ethernet: local area network</p>
</li>
<li><p>Inter-network Protocols       IP</p>
<ul>
<li>define datagram as the basic data unit</li>
<li>define the internet address schema</li>
<li>routes datagrams to destinations</li>
<li>divides and assembles datagrams</li>
</ul>
</li>
</ul>
<h3 id="addressing-and-routing"><a href="#addressing-and-routing" class="headerlink" title="addressing and routing"></a>addressing and routing</h3><ul>
<li>TCP<ul>
<li>Transmission Control Protocol</li>
<li>data sent via streams of bytes</li>
</ul>
</li>
<li>UDP<ul>
<li>User Datagram Protocol</li>
<li>data sent in messages</li>
</ul>
</li>
<li>communication ports and sockets</li>
</ul>
<h3 id="multicast-more-than-one-recipient"><a href="#multicast-more-than-one-recipient" class="headerlink" title="multicast : more than one recipient"></a>multicast : more than one recipient</h3><h3 id="client-x2F-server-communication-protocols"><a href="#client-x2F-server-communication-protocols" class="headerlink" title="client&#x2F;server communication protocols"></a>client&#x2F;server communication protocols</h3><h3 id="processing-multiple-requests"><a href="#processing-multiple-requests" class="headerlink" title="processing multiple requests"></a>processing multiple requests</h3><ul>
<li>iterative processing:<br>receive &#x3D;&gt; process &#x3D;&gt; return result &#x3D;&gt; wait for new</li>
<li>concurrent processing:<br>receive &#x3D;&gt; ask another to process &#x3D;&gt; wait for new<br>                      process &#x3D;&gt; return result</li>
<li>using replicated processes</li>
<li>using multiple threads</li>
<li>using message brokers&#x2F;space repository</li>
</ul>
<h3 id="communication-types"><a href="#communication-types" class="headerlink" title="communication types"></a>communication types</h3><ul>
<li>transient: messages are kept in the communication temporarily only if both the sender and the receiver are live</li>
<li>persistent: messages are kept in the communciation system until they are delivered to the receiver</li>
<li>synchronous: <ul>
<li>the sender waits until it knows the messages have been delivered to the receiver</li>
<li>blocking send&#x2F;receive</li>
</ul>
</li>
<li>asynchronous: <ul>
<li>the process continues as soon as sending messages have been copied to the local buffer    </li>
<li>non-blocking send</li>
<li>callback mechanisms</li>
</ul>
</li>
</ul>
<h3 id="stateful-x2F-stateless-server"><a href="#stateful-x2F-stateless-server" class="headerlink" title="stateful&#x2F;stateless server"></a>stateful&#x2F;stateless server</h3><ul>
<li>keep clients’ state information</li>
</ul>
<h2 id="Chap-4-5-6-9-Commuications-Programming"><a href="#Chap-4-5-6-9-Commuications-Programming" class="headerlink" title="Chap 4,5,6,9 Commuications     Programming"></a>Chap 4,5,6,9 Commuications     Programming</h2><h3 id="ports"><a href="#ports" class="headerlink" title="ports"></a>ports</h3><h3 id="sockets"><a href="#sockets" class="headerlink" title="sockets"></a>sockets</h3><ul>
<li>how does an application use the transport layer communciation to send&#x2F;receive messages?   Transport-level socket programming via socket interface</li>
<li>socket interface: socket APIs</li>
<li>what is a socket: a communication end point to&#x2F;from which an application can send&#x2F;receive data through the underlying network</li>
<li>message-oriented transient communication at transport level</li>
<li>client: connect, send, receive</li>
<li>server: bind, listen&#x2F;accept, recieve, process, send</li>
</ul>
<h3 id="binding"><a href="#binding" class="headerlink" title="binding"></a>binding</h3><ul>
<li>attach a local address to a socket</li>
</ul>
<h3 id="datagram-sockets"><a href="#datagram-sockets" class="headerlink" title="datagram sockets"></a>datagram sockets</h3><h3 id="UDP-User-Datagram-Protocol"><a href="#UDP-User-Datagram-Protocol" class="headerlink" title="UDP   User Datagram Protocol"></a>UDP   User Datagram Protocol</h3><h3 id="locating-resources-on-the-network"><a href="#locating-resources-on-the-network" class="headerlink" title="locating resources on the network"></a>locating resources on the network</h3><h3 id="network-programming-sockets"><a href="#network-programming-sockets" class="headerlink" title="network programming: sockets"></a>network programming: sockets</h3><h3 id="socket-programming-with-TCP"><a href="#socket-programming-with-TCP" class="headerlink" title="socket programming with TCP"></a>socket programming with TCP</h3><h3 id="models-for-application-communications"><a href="#models-for-application-communications" class="headerlink" title="models for application communications"></a>models for application communications</h3><ul>
<li>RPC, remote procedure call<ul>
<li>asynchronous RPC:<ol>
<li>synchronize at request submission</li>
<li>synchronize at request delivery</li>
</ol>
</li>
<li>synchronous RPC:<ol>
<li>synchronize after processed by server</li>
</ol>
</li>
</ul>
</li>
<li>message-oriented communication<ul>
<li>transient   socket</li>
<li>persistent  message-queuing<ul>
<li>time uncoupling</li>
</ul>
</li>
</ul>
</li>
<li>stream-oriented communication</li>
<li>multicast communication</li>
</ul>
<h3 id="remote-objects-and-RMI"><a href="#remote-objects-and-RMI" class="headerlink" title="remote objects and RMI"></a>remote objects and RMI</h3><ul>
<li>distributed&#x2F;remote objects</li>
<li>RMI, Remote Method Invocation</li>
</ul>
<h3 id="web-services"><a href="#web-services" class="headerlink" title="web services"></a>web services</h3><ul>
<li>architecture</li>
<li>REST<ol>
<li>resources are identified and accessed through URIs</li>
<li>resources are data and functionality</li>
<li>a web service manages a set of resources</li>
<li>a client and a service exchange representation of resources via standardized interface and protocols</li>
</ol>
</li>
<li>cloud computing&#x2F; cloud resources: file, storage, compute machine, middleware</li>
</ul>
<h3 id="stream-data-programming"><a href="#stream-data-programming" class="headerlink" title="stream data programming"></a>stream data programming</h3><ul>
<li>data stream: a sequence of data units<br>reading bytes from a file and sending bytes via a TCP socket</li>
<li>can be used for: <ol>
<li>continuous media: video</li>
<li>discrete media: stock market events&#x2F;twitter events</li>
</ol>
</li>
<li>timing issues   transmission modes<ol>
<li>asynchronous: no contraints of delay(when the transmission completes)</li>
<li>synchronous: maximum end-to-end delay defined for each data unit</li>
<li>iochronous: maximum and minimum delay defined</li>
</ol>
</li>
</ul>
<h3 id="group-communication"><a href="#group-communication" class="headerlink" title="group communication"></a>group communication</h3><ul>
<li><p>use multicast messages</p>
<ol>
<li>IP multicast</li>
<li>application-level multicast</li>
</ol>
<ul>
<li>application processes are organized into an overlay network, in mesh or tree</li>
</ul>
</li>
<li><p>atomic multicast: messages are received either by every memeber or by none of them</p>
</li>
<li><p>reliable multicast: messages are delivered to all members in the best effort, but not guaranteed</p>
</li>
</ul>
<h3 id="gossip-based-communication"><a href="#gossip-based-communication" class="headerlink" title="gossip based communication"></a>gossip based communication</h3><ul>
<li>why? It can spread messages fast and reliably.</li>
<li>periodically transmit to b random targets</li>
<li>other nodes do same after receiving multicast</li>
</ul>
<h2 id="Chap-10-Naming"><a href="#Chap-10-Naming" class="headerlink" title="Chap 10 Naming"></a>Chap 10 Naming</h2><h3 id="definitions"><a href="#definitions" class="headerlink" title="definitions:"></a>definitions:</h3><ul>
<li>entity: any kind of object in distributed system:<br>process, file, printer, host, communication endpoint</li>
<li>naming services:<ul>
<li>usefulness: <ul>
<li>identification</li>
<li>providing detailed description</li>
<li>foundations for communication, security, auditing</li>
</ul>
</li>
</ul>
</li>
<li>name space:<ul>
<li>contains all valid names recognized and managed by a service</li>
</ul>
</li>
<li>naming domain:<ul>
<li>name space with a single administrative authority which manages names for the name space</li>
</ul>
</li>
<li>name resolution: <ul>
<li>a process to look up information&#x2F;attributes from a name</li>
<li>mounting: <ul>
<li>a directory node in a remote server can be mounted into a local node</li>
</ul>
</li>
</ul>
</li>
<li>name: set of bits&#x2F;characters used to refer to an entity&#x2F;a collective of entities, in a context</li>
<li>identifier: a name that uniquely identifies an entity</li>
<li>address: the name of an access point, the location of an entity</li>
</ul>
<h3 id="design-principles"><a href="#design-principles" class="headerlink" title="design principles:"></a>design principles:</h3><ul>
<li>flat naming:<ul>
<li>identifiers have no structured description, just a set of bits<br>m-bits in distributed hash table</li>
</ul>
</li>
<li>structured naming:<ul>
<li>hard links: multiple absolute paths names referring to the same node</li>
<li>symbolic links: leaf node storing an absolute path name</li>
</ul>
</li>
<li>attribute based naming:</li>
</ul>
<h3 id="naming-services"><a href="#naming-services" class="headerlink" title="naming services:"></a>naming services:</h3><ul>
<li>DNS</li>
<li>distributed naming service<ul>
<li>global layer: com, org, us, edu</li>
<li>administrational layer: yale.cs.linda</li>
<li>managerial layer: robot.txt</li>
</ul>
</li>
<li>iterative&#x2F;recursive name resolution<ul>
<li>client’s name resolver &#x3D;&gt; name server &#x3D;&gt;client’s name resolver </li>
<li>iterative name resolution at resolver side </li>
<li>iterative name resolution at server side</li>
<li>recursive name resolution</li>
</ul>
</li>
<li>administrative zones</li>
<li>caching servers<ul>
<li>scalabiltiy<ul>
<li>response time</li>
<li>fault tolerance</li>
</ul>
</li>
</ul>
</li>
<li>Directory Service(LDAP,RDF)<ul>
<li>LDAP implementation, flow</li>
</ul>
</li>
</ul>
<h3 id="attributed-based-naming"><a href="#attributed-based-naming" class="headerlink" title="attributed-based naming"></a>attributed-based naming</h3><ul>
<li>a tuple(attribute,value) can be used to describe a property</li>
<li>directory service</li>
<li>hierachical implementation: LDAP</li>
<li>decentralized implementations</li>
</ul>
<h3 id="name-and-name-services"><a href="#name-and-name-services" class="headerlink" title="name and name services"></a>name and name services</h3><h3 id="naming-space-and-implementation"><a href="#naming-space-and-implementation" class="headerlink" title="naming space and implementation"></a>naming space and implementation</h3><h3 id="flat-naming-and-simple-resolutions"><a href="#flat-naming-and-simple-resolutions" class="headerlink" title="flat naming and simple resolutions"></a>flat naming and simple resolutions</h3><h3 id="structured-naming"><a href="#structured-naming" class="headerlink" title="structured naming"></a>structured naming</h3><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><h2 id="Virtualization"><a href="#Virtualization" class="headerlink" title="Virtualization"></a>Virtualization</h2><h3 id="definitions-1"><a href="#definitions-1" class="headerlink" title="definitions"></a>definitions</h3><ul>
<li><p>hypervisor</p>
<ol>
<li>type 1:</li>
</ol>
<ul>
<li>right on top of computer hardware</li>
<li>all guest operating systems are a layer above the hypervisor</li>
</ul>
<ol start="2">
<li>type 2:  VMware workstation</li>
</ol>
<ul>
<li>run over a host OS</li>
<li>the second layer over the hardware</li>
<li>the guest OSs run a layer over the hypervisor(the third layer)</li>
</ul>
</li>
<li><p>virtual machine</p>
<ul>
<li>virtual machine layer, VMM, hypervisor: software that runs in a layer between a hypervisor&#x2F;host OS and one of more VMs</li>
</ul>
</li>
<li><p>full vs platform virtualization</p>
<ol>
<li>full virtualization    native VM<ul>
<li>complete simulation of underlying hardware, all instructions</li>
<li>hardware architectural support provided to allow virtualziation</li>
</ul>
</li>
<li>platform virtualization    hosted VM<ul>
<li>limited simulation of underlying hardware</li>
</ul>
</li>
</ol>
</li>
<li><p>native vs hosted VM</p>
</li>
</ul>
<h3 id="performance-x2F-efficiency-analysis"><a href="#performance-x2F-efficiency-analysis" class="headerlink" title="performance&#x2F;efficiency analysis"></a>performance&#x2F;efficiency analysis</h3><ul>
<li>virtual networking <ul>
<li>bridging: guest OS is given direct access to the host’s NIC independent of the host OS</li>
<li>NAT: guest OS is given a virtual NIC<br>network traffic &#x3D;&gt; virtual NIC &#x3D;&gt; host OS &#x3D;&gt; physical NIC</li>
<li>Host Only: virtual NIC has no direct route to physical NIC</li>
</ul>
</li>
<li>virtual IO<ul>
<li>emulation: scalable, low performance</li>
<li>direct IO: unscalable, high performance</li>
</ul>
</li>
<li>SRIOV<ul>
<li>solution to 50 VMs but 5 I&#x2F;O devices </li>
<li>allow PCIe device to present itself as multiple virtual interfaces </li>
<li>best performance</li>
<li>limitation: VF configuration depends on PF configuration, thus can not configure</li>
</ul>
</li>
<li>trade off</li>
</ul>
<h3 id="case-study"><a href="#case-study" class="headerlink" title="case study"></a>case study</h3><ul>
<li>XEN architecture<ul>
<li>domain 0 for control and I&#x2F;O</li>
</ul>
</li>
<li>Amazon AWS&#x2F;Google</li>
</ul>
<h3 id="virtual-machine"><a href="#virtual-machine" class="headerlink" title="virtual machine"></a>virtual machine</h3><h3 id="virtual-machine-architecture"><a href="#virtual-machine-architecture" class="headerlink" title="virtual machine architecture"></a>virtual machine architecture</h3><h3 id="virtual-I-x2F-O-and-networking"><a href="#virtual-I-x2F-O-and-networking" class="headerlink" title="virtual I&#x2F;O and networking"></a>virtual I&#x2F;O and networking</h3><h2 id="Chap-13-Peer-to-Peer-System"><a href="#Chap-13-Peer-to-Peer-System" class="headerlink" title="Chap 13, Peer to Peer System"></a>Chap 13, Peer to Peer System</h2><h3 id="history-Napster"><a href="#history-Napster" class="headerlink" title="history   Napster"></a>history   Napster</h3><ul>
<li>servers store table: filename, peer pointer(ip address, port number)</li>
<li>peers store their own files</li>
<li>all communications use TCP</li>
<li>problem: <ol>
<li>centralized server: congestion</li>
<li>centralized server: single point of failure</li>
<li>security: plaintext messages</li>
</ol>
</li>
</ul>
<h3 id="distributed-hash-table"><a href="#distributed-hash-table" class="headerlink" title="distributed hash table"></a>distributed hash table</h3><ul>
<li>to insert, lookup and delete objects with keys</li>
<li>key, object(file)</li>
</ul>
<h3 id="Chord"><a href="#Chord" class="headerlink" title="Chord"></a>Chord</h3><ul>
<li>finger table: ft[m] [0,m-1]<ul>
<li>ft[i] &#x3D; first peer with id &gt;&#x3D; (n+pow(2,i)) mod pow(2,m) </li>
<li>file is stored at first peer with id &gt;&#x3D; file_key mod pow(2,m)</li>
</ul>
</li>
<li>efficiency analysis: O(log(n)) for insertion and lookup given correct finger table entries</li>
<li>lookup algorithm, finger table<ul>
<li>local search</li>
<li>query largest successor&#x2F;finger table entry &lt;&#x3D; k</li>
<li>if none exist, query next successor</li>
</ul>
</li>
<li>new nodes joining</li>
<li>stablization algorithm: O(n^2) rounds for strict stablization</li>
<li>rate of churn per hour: define r(successor and predecessor)</li>
</ul>
<h2 id="Failure-Detection"><a href="#Failure-Detection" class="headerlink" title="Failure Detection"></a>Failure Detection</h2><h3 id="two-different-system-models"><a href="#two-different-system-models" class="headerlink" title="two different system models"></a>two different system models</h3><ul>
<li>synchronous distributed system</li>
<li>asynchronous distributed system   <ul>
<li>no bounds on process execution</li>
<li>no bounds on message transmission delay </li>
<li>the Internet</li>
</ul>
</li>
</ul>
<h3 id="failure-model"><a href="#failure-model" class="headerlink" title="failure model"></a>failure model</h3><ul>
<li>process omission failure<ul>
<li>crash-stop</li>
<li>crash-recovery</li>
</ul>
</li>
</ul>
<h3 id="type-of-failure-detection"><a href="#type-of-failure-detection" class="headerlink" title="type of failure detection"></a>type of failure detection</h3><ul>
<li>process failure</li>
<li>arbitrary failure<ul>
<li>arbitrary process failure</li>
<li>arbitrary channel failure</li>
</ul>
</li>
<li>communication failure<ul>
<li>send omission</li>
<li>channel omission</li>
<li>receive omission</li>
</ul>
</li>
<li>completeness and accuracy<ul>
<li>completness: no misses</li>
<li>accuracy: no mistakes<br>Every detected failure corresponds to a crashed process.</li>
</ul>
</li>
<li>synchronous and asynchronous model</li>
<li>measuring accuracy(metrics)<ul>
<li>speed: detection time</li>
<li>accuracy: <ol>
<li>mistake recurrence time</li>
<li>mistake duration time</li>
<li>number of false failure detections per time</li>
<li>number of undetected failures per time</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="process-failure"><a href="#process-failure" class="headerlink" title="process failure"></a>process failure</h3><p>pj fails</p>
<ul>
<li>ping-ack<br>pi Ping&#x3D;&gt; pj, pj Ack&#x3D;&gt; pi</li>
<li>heartbeat<br>pj Heartbeat&#x3D;&gt; pi</li>
<li>satifies completness and accuracy in synchronous systems</li>
<li>satifies completness and probabilistic accuracy in asynchronous systems</li>
</ul>
<h3 id="implement-heartbeat-in-a-distributed-system-environment"><a href="#implement-heartbeat-in-a-distributed-system-environment" class="headerlink" title="implement heartbeat in a distributed system environment"></a>implement heartbeat in a distributed system environment</h3><ul>
<li>want all to know the failure</li>
<li>combine failure detection with a dissemination protocol</li>
<li>central, ring, all-to-all</li>
<li>heartbeat combined reliable multicast protocol</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>COEN317 Final Review</title>
    <url>/2022/12/04/COEN317_final/</url>
    <content><![CDATA[<h1 id="COEN317-Final-Review"><a href="#COEN317-Final-Review" class="headerlink" title="COEN317 Final Review"></a>COEN317 Final Review</h1><h2 id="Global-Time-and-Global-State"><a href="#Global-Time-and-Global-State" class="headerlink" title="Global Time and Global State"></a>Global Time and Global State</h2><ul>
<li>Asynchronous distributed systems consist of several  processes without common memory which communicate  via messages with <strong>unpredictable transmission delays</strong></li>
<li>Global time &amp; global state are hard to realize in distributed  systems<ul>
<li>Processes are distributed geographically</li>
<li>Rate of event occurrence can be high (unpredictable)</li>
<li>Event execution times can be small</li>
</ul>
</li>
<li>We can only approximate the global view<ul>
<li>Simulate a global time – Logical Clocks</li>
<li>Simulate a global state – Global Snapshots</li>
</ul>
</li>
</ul>
<h2 id="Simulating-global-time"><a href="#Simulating-global-time" class="headerlink" title="Simulating global time"></a>Simulating global time</h2><ul>
<li><p>An accurate notion of global time is difficult to achieve in distributed systems.</p>
<ul>
<li>We often derive “causality” from loosely synchronized clocks</li>
</ul>
</li>
<li><p>Clocks in a distributed system drift</p>
<ul>
<li>Relative to each other</li>
<li>Relative to a real world clock<ul>
<li>Determination of this real world clock itself may be an issue</li>
</ul>
</li>
<li>Clock Skew versus Drift<ul>
<li>Clock Skew &#x3D; Relative Difference in clock values of two processes</li>
<li>Clock Drift &#x3D; Relative Difference in clock frequencies (rates) of two  processes</li>
</ul>
</li>
</ul>
</li>
<li><p>Clock synchronization is needed to simulate global time</p>
<ul>
<li>Correctness – consistency, fairness</li>
</ul>
</li>
<li><p>Physical Clocks vs. Logical clocks </p>
<ul>
<li>Physical clocks - must not deviate from the real-time by more than a  certain amount.</li>
</ul>
</li>
</ul>
<h2 id="Cristian’s-Time-Server-Algorithm"><a href="#Cristian’s-Time-Server-Algorithm" class="headerlink" title="Cristian’s (Time Server) Algorithm"></a>Cristian’s (Time Server) Algorithm</h2><ul>
<li><p>Uses <strong>a time server</strong> to synchronize clocks</p>
<ul>
<li>Time server keeps the reference time (say UTC)</li>
<li>A client asks the time server for time, the server responds with its current  time, and the client uses the received value <strong>T</strong> to set its clock</li>
</ul>
</li>
<li><p>But network round-trip time introduces errors…</p>
<ul>
<li><p>Let <strong>RTT</strong> &#x3D; response-received-time – request-sent-time (measurable at  client),</p>
</li>
<li><p>If we know </p>
<ul>
<li>(a) <strong>min1</strong> &#x3D; minimum P -&gt; S latency </li>
<li>(b) <strong>min2</strong> &#x3D; minimum S -&gt; P latency </li>
<li>(c) that the server timestamped the message at the last possible instant  before sending it back</li>
</ul>
</li>
<li><p>Then, the actual time could be between <strong>[T+min2,T+RTT— min1]</strong></p>
</li>
<li><p>P sets its time to halfway through this interval</p>
<ul>
<li>To: t + (RTT+min2-min1)&#x2F;2</li>
</ul>
</li>
<li><p>Error is at most (RTT-min2-min1)&#x2F;2 </p>
<ul>
<li>Bounded!</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Berkeley-UNIX-algorithm"><a href="#Berkeley-UNIX-algorithm" class="headerlink" title="Berkeley UNIX algorithm"></a>Berkeley UNIX algorithm</h2><ul>
<li>One daemon without UTC</li>
<li>Periodically, this <strong>daemon</strong> polls and asks all the machines for their  time</li>
<li>The machines respond.</li>
<li>The daemon computes an average time and then broadcasts this  average time.</li>
</ul>
<h2 id="Decentralized-Averaging-Algorithm"><a href="#Decentralized-Averaging-Algorithm" class="headerlink" title="Decentralized Averaging Algorithm"></a>Decentralized Averaging Algorithm</h2><ul>
<li>Each machine has a daemon without UTC</li>
<li>Periodically, at fixed agreed-upon times, each machine broadcasts its  local time.</li>
<li>Each of them calculates the average time by averaging all the received  local times.</li>
</ul>
<h2 id="Network-Time-Protocol-NTP"><a href="#Network-Time-Protocol-NTP" class="headerlink" title="Network Time Protocol (NTP)"></a>Network Time Protocol (NTP)</h2><ul>
<li>Most widely used physical clock synchronization protocol on the Internet</li>
<li>Hierarchical tree of time servers.<ul>
<li>The primary server at the root synchronizes with the UTC.</li>
<li>Secondary servers - backup to primary server.</li>
<li>Lowest</li>
<li>synchronization subnet with clients.</li>
</ul>
</li>
</ul>
<p><img src="/images/317/NTP.JPG"></p>
<p><img src="/images/317/NTP1.JPG"></p>
<p><img src="/images/317/NTP2.JPG"></p>
<p><img src="/images/317/NTP3.JPG"></p>
<p><img src="/images/317/NTP4.JPG"></p>
<h2 id="Event-Ordering"><a href="#Event-Ordering" class="headerlink" title="Event Ordering"></a>Event Ordering</h2><ul>
<li>Lamport defined the “happens before” (-&gt;) relation<ul>
<li>If a and b are events in the same process, and a occurs before b, then  a-&gt;b.</li>
<li>If a is the event of a message being sent by one process and b is the  event of the message being received by another process, then a -&gt; b.</li>
<li>If X -&gt; Y and Y-&gt; Z then X -&gt; Z.</li>
</ul>
</li>
<li>If a -&gt; b then time (a) &lt; time (b)</li>
</ul>
<h2 id="Causal-Ordering"><a href="#Causal-Ordering" class="headerlink" title="Causal Ordering"></a>Causal Ordering</h2><ul>
<li><p>“Happens Before” also called causal ordering</p>
</li>
<li><p>Possible to draw a causality relation between 2 events if</p>
<ul>
<li>They happen in the same process</li>
<li>There is a chain of messages between them</li>
</ul>
</li>
<li><p>“Happens Before” notion is not straightforward in distributed system</p>
<ul>
<li><p>No guarantees of synchronized clocks</p>
</li>
<li><p>Communication latency</p>
</li>
</ul>
</li>
</ul>
<h2 id="Types-of-Logical-Clocks"><a href="#Types-of-Logical-Clocks" class="headerlink" title="Types of Logical Clocks"></a>Types of Logical Clocks</h2><ul>
<li>Systems of logical clocks differ in their representation of logical time  and also in the protocol to update the logical clocks.</li>
<li>2 kinds of logical clocks<ul>
<li>Lamport</li>
<li>Vector</li>
</ul>
</li>
</ul>
<h2 id="Lamport-Clock"><a href="#Lamport-Clock" class="headerlink" title="Lamport Clock"></a>Lamport Clock</h2><ul>
<li><p>Proposed by Lamport in 1978 as an attempt to totally order events in  a distributed system.</p>
</li>
<li><p>Each process uses a local counter (clock) which is an integer</p>
<ul>
<li><p>initial value of counter is set to a non-negative integer or zero</p>
</li>
<li><p>A process increments its counter when a send or an instruction happens at it.</p>
<p>The counter is assigned to the event as its timestamp.</p>
</li>
<li><p>Each process keeps its own logical clock used to timestamp events</p>
</li>
</ul>
</li>
<li><p>A send (message) event carries its timestamp</p>
</li>
<li><p>For a receive (message) event the counter is updated by</p>
<ul>
<li>max(local clock, message timestamp) + 1</li>
</ul>
</li>
</ul>
<p><img src="/images/317/Lamport1.JPG"></p>
<h2 id="Vector-Timestamp"><a href="#Vector-Timestamp" class="headerlink" title="Vector Timestamp"></a>Vector Timestamp</h2><ul>
<li>In the system of vector clocks, the time domain is represented by a set of  n-dimensional non-negative integer vectors.</li>
<li>Each process has a clock Ci consisting of a vector of length n, where n is  the total number of processes vt[1..n], where vt[j ] is the local logical  clock of Pj and describes the logical time progress at process Pj .</li>
<li>Incrementing vector clocks<ul>
<li>On an instruction or send event at process i, it increments only its ith element of its vector clock</li>
</ul>
</li>
<li>Each message carries the send-event’s vector timestamp  Vmessage[1…N]</li>
<li>On receiving a message at process i:<ul>
<li>Vi[i] &#x3D; Vi[i] + 1</li>
<li>Vi[j] &#x3D; max(Vmessage[j], Vi[j]) for j≠ i</li>
</ul>
</li>
<li>Vector Clocks example</li>
</ul>
<p><img src="/images/317/Vector.JPG"></p>
<p><img src="/images/317/Vector1.JPG"></p>
<p><img src="/images/317/Vector2.JPG"></p>
<p><img src="/images/317/Vector3.JPG"></p>
<p><img src="/images/317/Vector4.JPG"></p>
<h2 id="Global-State"><a href="#Global-State" class="headerlink" title="Global State"></a>Global State</h2><ul>
<li>Recording the global state of a distributed system on-the-fly is an  important paradigm.<ul>
<li>Challenge: lack of globally shared memory, global clock and unpredictable message  delays in a distributed system</li>
</ul>
</li>
<li>Notions of global time and global state closely related</li>
<li>A process can (without freezing the whole computation) compute the  best possible approximation of global state</li>
<li>A global state that could have occurred<ul>
<li>No process in the system can decide whether the state did really occur</li>
<li>Guarantee stable properties (i.e. once they become true, they remain true)</li>
</ul>
</li>
</ul>
<h2 id="Consistent-Cuts"><a href="#Consistent-Cuts" class="headerlink" title="Consistent Cuts"></a>Consistent Cuts</h2><ul>
<li>A cut (or time slice) is a zigzag line cutting a time diagram  into 2 parts (past and future)</li>
<li>Consistent Cut: a cut that obeys causality<ul>
<li>A cut C is a consistent cut if and only if:<ul>
<li>for (each pair of events e, f in the system)</li>
<li>Such that event e is in the cut C, and if f-&gt;e (f happens-before e)</li>
<li>Then: Event f is also in the cut C</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="/images/317/Cut.JPG"></p>
<h2 id="System-Model-for-Global-Snapshots"><a href="#System-Model-for-Global-Snapshots" class="headerlink" title="System Model for Global Snapshots"></a>System Model for Global Snapshots</h2><ul>
<li>The system consists of a collection of n processes p1, p2, …, pn that are  connected by channels.</li>
<li>There are no globally shared memory and physical global clock and processes  communicate by passing messages through communication channels.</li>
<li>Cij denotes the channel from process pi to process pj and its state is denoted by Si</li>
<li>The actions performed by a process are modeled as three types of events:<ul>
<li>Internal events,the message send event and the message receive event.</li>
<li>For a message mij that is sent by process pi to process pj , let send(mij ) and rec(mij ) denote  its send and receive events.</li>
</ul>
</li>
</ul>
<h2 id="Chandy-Lamport-Distributed-Snapshot-Algorithm"><a href="#Chandy-Lamport-Distributed-Snapshot-Algorithm" class="headerlink" title="Chandy-Lamport Distributed Snapshot Algorithm"></a>Chandy-Lamport Distributed Snapshot Algorithm</h2><ul>
<li>Assumes FIFO communication in channels</li>
<li>Uses a marker message to separate messages in the channels.<ul>
<li>After a process has recorded its snapshot, it sends a marker, along all of its  outgoing channels before sending out any more messages.</li>
<li>The marker separates the messages in the channel into those to be included  in the snapshot from those not to be recorded in the snapshot.</li>
</ul>
</li>
<li>A process must record its snapshot no later than when it receives a marker on  any of its incoming channels.</li>
<li>The algorithm terminates after each process has received a marker on all of its  incoming channels.</li>
<li>All the local snapshots get disseminated to all other processes and all the  processes can determine the global state</li>
</ul>
<p><img src="/images/317/Chandy_Lamport1.JPG"></p>
<p><img src="/images/317/Chandy_Lamport2.JPG"></p>
<p><img src="/images/317/Chandy_Lamport3.JPG"></p>
<ul>
<li>Global Snapshot calculated by Chandy-Lamport algorithm is  causally correct</li>
</ul>
<h2 id="Distributed-Mutual-Exclusion"><a href="#Distributed-Mutual-Exclusion" class="headerlink" title="Distributed Mutual Exclusion"></a>Distributed Mutual Exclusion</h2><ul>
<li>Mutual exclusion<ul>
<li>ensures that concurrent processes have serialized access to  shared resources - the critical section problem</li>
<li>At any point in time, only one process can be executing in its  critical section</li>
</ul>
</li>
<li>Shared variables (semaphores) cannot be used in a distributed  system<ul>
<li>Mutual exclusion must be based on message passing, in the  context of unpredictable delays and incomplete knowledge</li>
</ul>
</li>
</ul>
<h2 id="Approaches-to-Distributed-Mutual-Exclusion"><a href="#Approaches-to-Distributed-Mutual-Exclusion" class="headerlink" title="Approaches to Distributed Mutual Exclusion"></a>Approaches to Distributed Mutual Exclusion</h2><ul>
<li>Central coordinator-based approach<ul>
<li>A centralized coordinator determines who enters the CS</li>
</ul>
</li>
<li>Distributed approaches to mutual exclusion<ul>
<li>Token based approach<ul>
<li>A unique token is shared among the processes. A process is allowed to  enter its CS if it possesses the token.</li>
<li>Mutual exclusion is ensured because the token is unique.</li>
</ul>
</li>
<li>Non-token based approach<ul>
<li>Two or more successive rounds of messages are exchanged among the  processes to determine which process will enter the CS next.</li>
</ul>
</li>
<li>Quorum based approach<ul>
<li>Each process requests permission to execute the CS from a subset of  processes (called a quorum).</li>
<li>Any two quorums contain a common process. This common process makes sure that only one request executes the CS at any time.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Requirements-x2F-Conditions"><a href="#Requirements-x2F-Conditions" class="headerlink" title="Requirements&#x2F;Conditions"></a>Requirements&#x2F;Conditions</h3><ul>
<li>Safety Property<ul>
<li>At any instant, only one process can execute the critical section.</li>
</ul>
</li>
<li>Liveness Property<ul>
<li>This property states the absence of deadlock and starvation. Two or more  processess should not endlessly wait for messages which will never arrive.</li>
</ul>
</li>
<li>Ordering&#x2F;Fairness<ul>
<li>Each process gets a fair chance to execute the CS which means the CS  execution requests are executed in the order of their arrival (time is  determined by a logical clock) in the system.</li>
</ul>
</li>
</ul>
<h2 id="Mutual-Exclusion-Techniques-Covered"><a href="#Mutual-Exclusion-Techniques-Covered" class="headerlink" title="Mutual Exclusion Techniques Covered"></a>Mutual Exclusion Techniques Covered</h2><ul>
<li><p>Central Coordinator Algorithm</p>
<p><img src="/images/317/central_coordinator.JPG"></p>
</li>
<li><p>In a distributed environment it seems more natural to implement  mutual exclusion, based upon distributed agreement - not on a  central coordinator.</p>
</li>
<li><p>Distributed Non-token based</p>
<ul>
<li>Ricart-Agrawala Algorithm</li>
<li>Maekawa’s Algorithm</li>
</ul>
</li>
</ul>
<h2 id="Ricart-Agrawala-Algorithm"><a href="#Ricart-Agrawala-Algorithm" class="headerlink" title="Ricart-Agrawala Algorithm"></a>Ricart-Agrawala Algorithm</h2><ul>
<li>Uses only two types of messages – REQUEST and REPLY.</li>
<li>It is assumed that all processes keep a (Lamport’s) logical clock which is updated  according to the clock rules.<ul>
<li>Requests are ordered according to their global logical timestamps; if  timestamps are equal, process identifiers are compared to order them.</li>
</ul>
</li>
<li>The process that requires entry to a CS multicasts the request message to all  other processes competing for the same resource.<ul>
<li>Process is allowed to enter the CS when all processes have replied to this  message.</li>
<li>The request message consists of the requesting process’ timestamp (logical  clock) and its identifier.</li>
</ul>
</li>
<li>Each process keeps its state with respect to the CS: released, requested, or held.</li>
</ul>
<p><img src="/images/317/RA.JPG"></p>
<h3 id="Analysis-Ricart-Agrawala’s-Algorithm"><a href="#Analysis-Ricart-Agrawala’s-Algorithm" class="headerlink" title="Analysis: Ricart-Agrawala’s Algorithm"></a>Analysis: Ricart-Agrawala’s Algorithm</h3><ul>
<li>Safety<ul>
<li>Two processes Pi and Pj cannot both have access to CS</li>
</ul>
</li>
<li>Liveness<ul>
<li>Worst-case: wait for all other (N-1) processes to send Reply</li>
</ul>
</li>
<li>Ordering<ul>
<li>Requests with lower Lamport timestamps are granted earlier</li>
</ul>
</li>
</ul>
<h3 id="Performance-Ricart-Agrawala’s-Algorithm"><a href="#Performance-Ricart-Agrawala’s-Algorithm" class="headerlink" title="Performance: Ricart-Agrawala’s Algorithm"></a>Performance: Ricart-Agrawala’s Algorithm</h3><ul>
<li>Bandwidth: 2*(N-1) messages per enter() operation</li>
<li>Client delay: one round-trip time</li>
<li>Synchronization delay: one message transmission time</li>
</ul>
<h2 id="Quorum-Based-–-Maekawa’s-Algorithm"><a href="#Quorum-Based-–-Maekawa’s-Algorithm" class="headerlink" title="Quorum-Based – Maekawa’s Algorithm"></a>Quorum-Based – Maekawa’s Algorithm</h2><ul>
<li><p>Site obtains permission only from a subset of sites to enter CS</p>
</li>
<li><p>Multicasts messages to a voting subset of processes</p>
<ul>
<li><p>Each process pi is associated with a voting set vi (of processes)</p>
<ul>
<li>Each process belongs to its own voting set</li>
<li>The intersection of any two voting sets is non-empty</li>
<li>Each voting set is of size K</li>
<li>Each process belongs to M other voting sets</li>
</ul>
</li>
<li><p>To access a critical section, pi requests permission from all other processes in  its own voting set vi</p>
<ul>
<li><p>Voting set member gives permission to only one requestor at a time, and  queues all other requests</p>
</li>
<li><p>Guarantees safety </p>
</li>
<li><p>May not guarantee liveness (may deadlock)</p>
<p><img src="/images/317/M_liveness.JPG"></p>
</li>
<li><p>Maekawa showed that K&#x3D;M&#x3D;N^0.5 works best</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="/images/317/Maekawa1.JPG"></p>
<p><img src="/images/317/Maekawa2.JPG"></p>
<h2 id="Election-Algorithms"><a href="#Election-Algorithms" class="headerlink" title="Election Algorithms"></a>Election Algorithms</h2><ul>
<li>It doesn’t matter which process is elected.<ul>
<li>What is important is that one and only one process is chosen (we call this  process the coordinator) and all processes agree on this decision</li>
</ul>
</li>
<li>Assume that each process has a unique number (identifier)<ul>
<li>In general, election algorithms attempt to locate the process with the highest  number, among those which currently are up</li>
</ul>
</li>
<li>Election is typically started after a failure occurs<ul>
<li>The detection of a failure (e.g. the crash of the current coordinator) is  normally based on time-out → a process that gets no response for a period of  time suspects a failure and initiates an election process.</li>
</ul>
</li>
<li>An election process is typically performed in two phases:<ul>
<li>Select a leader with the highest priority.</li>
<li>Inform all processes about the winner.</li>
</ul>
</li>
</ul>
<h2 id="The-Ring-based-Algorithm"><a href="#The-Ring-based-Algorithm" class="headerlink" title="The Ring-based Algorithm"></a>The Ring-based Algorithm</h2><ul>
<li>We assume that the processes are arranged in a logical ring<ul>
<li>Each process knows the address of one other process, which is its  neighbor in the clockwise direction</li>
</ul>
</li>
<li>The algorithm elects a single coordinator, which is the highest id process.</li>
<li>Election is started by a process which detects the coordinator failure<ul>
<li>The process prepares an election message which includes its id and passed it to the successor process.</li>
<li>When a process receives an election message<ul>
<li>It compares the identifier in the message with its own</li>
<li>If the arrived identifier is greater, it forwards the received election  message to its neighbor</li>
<li>If the arrived identifier is smaller, it substitutes its own identifier in the  election message before forwarding it.</li>
<li>If the received id is that of the receiver itself → this will be the  coordinator.</li>
</ul>
</li>
</ul>
</li>
<li>The new coordinator sends an elected message through the ring</li>
</ul>
<p><img src="/images/317/ring.JPG"></p>
<h2 id="The-Bully-Algorithm"><a href="#The-Bully-Algorithm" class="headerlink" title="The Bully Algorithm"></a>The Bully Algorithm</h2><ul>
<li>A process has to know the identifier of all other processes <ul>
<li>(it doesn’t know, however, which one is still up); the process with the highest identifier, among those which are  up, is selected.</li>
</ul>
</li>
<li>Any process could fail during the election procedure.</li>
<li>When a process Pi detects a failure and a coordinator has to be elected<ul>
<li>it sends an election message to all the processes with a higher identifier and then waits for an answer message:</li>
<li>If no response arrives within a time limit<ul>
<li>Pi becomes the coordinator (all processes with higher identifier are down)</li>
<li>it broadcasts a coordinator message to all processes to let them know.</li>
</ul>
</li>
<li>If an answer message arrives, <ul>
<li>Pi knows that another process has to become the coordinator → it waits in order to receive the  coordinator message.</li>
<li>If this message fails to arrive within a time limit (which means that a potential coordinator crashed after  sending the answer message) Pi resends the election message.</li>
</ul>
</li>
</ul>
</li>
<li>When receiving an election message from Pi<ul>
<li>a process Pj replies with an answer message to Pi and</li>
<li>then starts an election procedure itself( unless it has already started one) it sends an election message to all  processes with higher identifier.</li>
</ul>
</li>
<li>Finally all processes get an answer message, except the one which becomes the coordinator.</li>
</ul>
<p><img src="D:\Blog\source\images\317\bully.JPG"></p>
<h2 id="Distributed-File-System-DFS"><a href="#Distributed-File-System-DFS" class="headerlink" title="Distributed File System (DFS)"></a>Distributed File System (DFS)</h2><ul>
<li>Files are stored on a server machine<ul>
<li>client machine does RPCs to server to perform operations on file</li>
</ul>
</li>
<li>Desirable Properties from a DFS<ul>
<li>Transparency: client accesses DFS files as if it were accessing local files<ul>
<li>Same API as local files, i.e., client code doesn’t change</li>
<li>Need to make location, replication, etc. invisible to client</li>
</ul>
</li>
<li>Support concurrent clients<ul>
<li>Multiple client processes reading&#x2F;writing the file concurrently</li>
</ul>
</li>
</ul>
</li>
<li>Replication: for fault-tolerance</li>
</ul>
<h2 id="File-Sharing-Semantics"><a href="#File-Sharing-Semantics" class="headerlink" title="File Sharing Semantics"></a>File Sharing Semantics</h2><ul>
<li>One-copy Serializability<ul>
<li>Updates are written to the single copy and are available immediately</li>
</ul>
</li>
<li>Serializability<ul>
<li>Transaction semantics (file locking protocols implemented - share for  read, exclusive for write).</li>
</ul>
</li>
</ul>
<h2 id="Example-Sun-NFS"><a href="#Example-Sun-NFS" class="headerlink" title="Example: Sun-NFS"></a>Example: Sun-NFS</h2><ul>
<li><p>Network File System</p>
</li>
<li><p>Supports heterogeneous systems</p>
</li>
<li><p>Architecture</p>
<ul>
<li>Server exports one or more directory trees for access by  remote clients</li>
<li>Clients access exported directory trees by mounting them  to the client local tree</li>
</ul>
</li>
<li><p>Protocols</p>
<ul>
<li>Mounting protocol</li>
<li>Directory and file access protocol - stateless, no open-close  messages, full access path on read&#x2F;write</li>
</ul>
</li>
</ul>
<h3 id="NFS-Architecture"><a href="#NFS-Architecture" class="headerlink" title="NFS Architecture"></a>NFS Architecture</h3><p><img src="/images/317/NFS.JPG"></p>
<h2 id="Example-Andrew-File-System"><a href="#Example-Andrew-File-System" class="headerlink" title="Example: Andrew File System"></a>Example: Andrew File System</h2><ul>
<li><p>Designed at CMU</p>
<ul>
<li>Named after Andrew Carnegie and Andrew Mellon, the “C” and  “M” in CMU</li>
</ul>
</li>
<li><p>In use today in some clusters (especially University  clusters)</p>
</li>
<li><p>Supports information sharing on a large scale</p>
</li>
<li><p>Uses a session semantics</p>
<ul>
<li>Entire file is copied to the local machine (Venus) from the server  (Vice) when open. If file is changed, it is copied to server when  closed.<ul>
<li>Works because in practice, most files are changed by one  person</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Replication"><a href="#Replication" class="headerlink" title="Replication"></a>Replication</h2><ul>
<li><p>Enhances a service by replicating data</p>
<ul>
<li><p>Increased Availability</p>
<ul>
<li>Of service. When servers fail or when the network is partitioned.</li>
</ul>
</li>
<li><p>Fault Tolerance</p>
<ul>
<li>Under the fail-stop model, if up to f of f+1 servers crash, at least one is alive</li>
</ul>
</li>
<li><p>Load Balancing</p>
<ul>
<li>One approach: Multiple server IPs can be assigned to the same name in DNS,  which returns answers round-robin.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Passive-Replication"><a href="#Passive-Replication" class="headerlink" title="Passive Replication"></a>Passive Replication</h3><ul>
<li><p>uses a primary replica (master)</p>
<p>master: elected leader</p>
</li>
</ul>
<p><img src="/images/317/passive_replication.JPG"></p>
<h3 id="Active-Replication"><a href="#Active-Replication" class="headerlink" title="Active Replication"></a>Active Replication</h3><ul>
<li><p>treats all replicas identically</p>
</li>
<li><p>multicast inside replica group</p>
</li>
<li><p>can use any flavor of multicast ordering</p>
<ul>
<li>FIFO ordering</li>
<li>causal ordering</li>
<li>total ordering</li>
<li>hybrid ordering</li>
</ul>
</li>
</ul>
<p><img src="/images/317/active_replication.JPG"></p>
<h2 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h2><ul>
<li><p>Sequence of Read&#x2F;Write operations that act as ONE unit of execution</p>
</li>
<li><p>ACID Properties</p>
<ul>
<li>Atomicity<ul>
<li>All or nothing</li>
<li>a transaction should either <ul>
<li>i)complete successfully, so its effects are recorded in the  server objects; </li>
<li>or ii) the transaction has no effect at all.</li>
</ul>
</li>
</ul>
</li>
<li>Consistency<ul>
<li>if the server starts in a consistent state,  the transaction ends the server in a consistent state.</li>
</ul>
</li>
<li>Isolation<ul>
<li>Each transaction must be performed  without interference from other transactions</li>
<li>i.e.,  non-final effects of a transaction must not be visible  to other transactions</li>
</ul>
</li>
<li>Durability<ul>
<li>After a transaction has completed  successfully, all its effects are saved in permanent  storage.</li>
</ul>
</li>
</ul>
</li>
<li><p>Serializable Schedule </p>
<ul>
<li>Goal: increase <strong>concurrency</strong> while maintaining  <strong>correctness (ACID)</strong></li>
<li>Equivalent to some Serial execution → Correctness</li>
<li>Serial Equivalency Test</li>
</ul>
</li>
<li><p>serial</p>
<ul>
<li>An interleaving (say O) of transaction operations is  <strong>serially equivalent</strong> iff (if and only if):<ul>
<li>Cannot distinguish end-result of real  operation O from (fake) serial transaction order O’</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Distributed-Transactions"><a href="#Distributed-Transactions" class="headerlink" title="Distributed Transactions"></a>Distributed Transactions</h2><ul>
<li>Transactions distributed based on which entity hosts the  object&#x2F;replica</li>
<li>One-phase Commit: Issues<ul>
<li>Server with object has no say in whether transaction  commits or aborts<ul>
<li>If object corrupted, it just cannot commit (while other servers have  committed)</li>
</ul>
</li>
<li>Server may crash before receiving commit message,  with some updates still in memory</li>
</ul>
</li>
<li>Uses 2 Phase Commit protocol for guaranteeing atomic commit (in  contrast to 1 Phase Commit)<ul>
<li>Failures in Two-phase Commit <ul>
<li>To deal with server crashes<ul>
<li>Each server saves tentative updates into permanent storage, right  before replying Yes&#x2F;No in first phase. Retrievable after crash  recovery</li>
</ul>
</li>
<li>To deal with coordinator crashes<ul>
<li>Coordinator logs all decisions and received&#x2F;sent messages on disk</li>
<li>After recovery or new election &#x3D;&gt; new coordinator takes over</li>
</ul>
</li>
<li>To deal with Yes&#x2F;No message loss, <ul>
<li>coordinator aborts  the transaction after a timeout (pessimistic!)</li>
</ul>
</li>
<li>To deal with Commit or Abort message loss<ul>
<li>Server can poll coordinator (repeatedly)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Concurrency-Control"><a href="#Concurrency-Control" class="headerlink" title="Concurrency Control"></a>Concurrency Control</h2><ul>
<li>Optimistic Concurrency Control<ul>
<li>Used in Dropbox, Google apps, Wikipedia, key-value  stores like Cassandra, Riak, and Amazon’s Dynamo</li>
<li>Used for Read&#x2F;Read-Only transaction</li>
<li>Allow the transaction to execute</li>
<li>If Serial Equivalency passed, then commit. Otherwise, abort</li>
</ul>
</li>
<li>Pessimistic Concurrency Control<ul>
<li>Use Locking (Mutual Exclusion)</li>
</ul>
</li>
<li>2 Phase Locking protocol (2PL)<ul>
<li>Growing&#x2F;expanding phase – Acquire locks</li>
<li>Shrinking phase – release locks and no new locks can be acquired</li>
</ul>
</li>
<li>Strict 2PL – hold on to locks until transactions commits&#x2F;aborts</li>
</ul>
<h2 id="Deadlocks"><a href="#Deadlocks" class="headerlink" title="Deadlocks"></a>Deadlocks</h2><ul>
<li><p>3 necessary conditions for a deadlock to occur</p>
<ol>
<li>Some objects are accessed in exclusive lock modes</li>
<li>Transactions holding locks cannot be preempted</li>
<li>There is a circular wait (cycle) in the Wait-for graph</li>
</ol>
</li>
</ul>
<h2 id="Handling-Deadlocks"><a href="#Handling-Deadlocks" class="headerlink" title="Handling Deadlocks"></a>Handling Deadlocks</h2><ol>
<li><p>Lock timeout: </p>
<ul>
<li>abort transaction if lock cannot be  acquired within timeout</li>
<li>Expensive; leads to wasted work</li>
</ul>
</li>
<li><p>Deadlock Detection:</p>
<ul>
<li>keep track of Wait-for graph (e.g., via Global  Snapshot algorithm), and</li>
<li>find cycles in it (e.g., periodically)</li>
<li>If find cycle, there’s a deadlock &#x3D;&gt; Abort one or  more transactions to break cycle</li>
<li>Still allows deadlocks to occur</li>
</ul>
</li>
<li><p>Deadlock Prevention</p>
</li>
</ol>
<ul>
<li><p>Set up the system so one of the necessary conditions is violated</p>
<ol>
<li><p>Some objects are accessed in exclusive lock modes</p>
<p>Fix: Allow read-only access to objects</p>
</li>
<li><p>Transactions holding locks cannot be preempted</p>
<p>Fix: Allow preemption of some transactions</p>
</li>
<li><p>There is a circular wait (cycle) in the Wait-for graph</p>
<p>Fix: Lock all objects in the beginning; if fail any, abort  transaction &#x3D;&gt; No cycles in Wait-for graph</p>
</li>
</ol>
</li>
</ul>
<h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><ul>
<li>Threats<ul>
<li>Leakage<ul>
<li>Unauthorized access to service or data</li>
<li>E.g., Someone knows your bank balance</li>
</ul>
</li>
<li>Tampering<ul>
<li>Unauthorized modification of service or data</li>
<li>E.g., Someone modifies your bank balance</li>
</ul>
</li>
<li>Vandalism<ul>
<li>Interference with normal service, without  direct gain to attacker</li>
<li>E.g., Denial of Service attacks</li>
</ul>
</li>
</ul>
</li>
<li>Common Attacks<ul>
<li>Eavesdropping<ul>
<li>Attacker taps into network</li>
</ul>
</li>
<li>Masquerading<ul>
<li>Attacker pretends to be someone else, i.e.,  identity theft</li>
</ul>
</li>
<li>Message tampering<ul>
<li>Attacker modifies messages</li>
</ul>
</li>
<li>Replay attack<ul>
<li>Attacker replays old messages</li>
</ul>
</li>
<li>Denial of service<ul>
<li>bombard a port</li>
</ul>
</li>
</ul>
</li>
<li>CIA properties<ul>
<li>Confidentiality<ul>
<li>Protection against disclosure to unauthorized  individuals</li>
<li>Addresses Leakage threat</li>
</ul>
</li>
<li>Integrity<ul>
<li>Protection against unauthorized alteration or  corruption</li>
<li>Addresses Tampering threat</li>
</ul>
</li>
<li>Availability<ul>
<li>Service&#x2F;data is always readable&#x2F;writable</li>
<li>Addresses Vandalism threat</li>
</ul>
</li>
</ul>
</li>
<li>Policy vs Mechanism<ul>
<li>Many scientists (e.g., Hansen) have argued for a  separation of policy vs. mechanism</li>
<li>A security policy indicates what a secure system  accomplishes</li>
<li>A security mechanism indicates how these goals  are accomplished</li>
<li>E.g.,<ul>
<li>Policy: in a file system, only authorized individuals  allowed to access files (i.e., CIA properties)</li>
<li>Mechanism: Encryption, capabilities, etc.</li>
</ul>
</li>
</ul>
</li>
<li>Mechanisms: Golden A’s<ul>
<li>Authentication<ul>
<li>Is a user (communicating over the network)  claiming to be Alice, really Alice?</li>
</ul>
</li>
<li>Authorization<ul>
<li>Yes, the user is Alice, but is she allowed to  perform her requested operation on this  object?</li>
</ul>
</li>
<li>Auditing<ul>
<li>How did Eve manage to attack the system and  breach defenses? Usually done by  continuously logging all operations.</li>
</ul>
</li>
</ul>
</li>
<li>Encryption<ul>
<li>Symmetric Keys<ul>
<li>Same key (KAB) used to both encrypt and decrypt a  message</li>
<li>E.g., DES (Data Encryption Standard): 56 b key  operates on 64 b blocks from the message</li>
</ul>
</li>
<li>Public-Private keys<ul>
<li>Anything encrypted with KApriv can be decrypted only with  KApub</li>
<li>Anything encrypted with KApub can be decrypted only with  KApri</li>
<li>If Alice wants to send a secret message M that can  be read only by Bob<ol>
<li>Alice encrypts it with Bob’s public key</li>
<li>KBpub(M)</li>
<li>Bob only one able to decrypt it</li>
<li>KBpriv(KBpub(M)) &#x3D; M</li>
</ol>
</li>
</ul>
</li>
<li>Shared&#x2F;Symmetric vs. Public&#x2F;Private<ul>
<li>Shared keys reveal too much information<ul>
<li>Hard to revoke permissions from principals</li>
<li>E.g., group of principals shares one key <ul>
<li>want to remove one principal from group</li>
<li>need everyone in group to change key</li>
</ul>
</li>
</ul>
</li>
<li>Public&#x2F;private keys involve costly encryption or  decryption<ul>
<li>At least one of these 2 operations is costly</li>
</ul>
</li>
<li>Many systems use public&#x2F;private key system to  generate shared key, and use latter on messages</li>
</ul>
</li>
</ul>
</li>
<li>Digital Signature&#x2F;Certificate<ul>
<li>To sign a message M, Alice encrypts message with her  own private key<ul>
<li>Signed message: [M, KApriv(M)]</li>
<li>Anyone can verify, using Alice’s public key, that Alice signed it</li>
</ul>
</li>
<li>Digital Certificates implemented using digital signatures</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>Segment Tree</title>
    <url>/2022/12/11/Segment-Tree/</url>
    <content><![CDATA[<h1 id="Segment-Tree选编"><a href="#Segment-Tree选编" class="headerlink" title="Segment Tree选编"></a>Segment Tree选编</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>如何表示线段树？</p>
<ol>
<li>直接用node构造一棵树</li>
<li>用一个数组模拟一棵树</li>
</ol>
<p>三大功能：</p>
<ol>
<li>build</li>
<li>querySum</li>
<li>update</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumArray</span> &#123;</span><br><span class="line">    SegmentTree tree;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        tree = <span class="keyword">new</span> <span class="title class_">SegmentTree</span>(nums);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        tree.update(i, val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumRange</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tree.querySum(i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SegmentTree</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">root</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        SegmentTree(<span class="type">int</span>[] array)&#123;</span><br><span class="line">            <span class="built_in">this</span>.root = build(<span class="number">0</span>, array.length-<span class="number">1</span>, array);</span><br><span class="line">        &#125;</span><br><span class="line">        Node <span class="title function_">build</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span>[] array)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (start&gt;end)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(start, end);</span><br><span class="line">            <span class="keyword">if</span> (start==end)&#123;</span><br><span class="line">                node.sum = array[start];</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> start + (end-start)/<span class="number">2</span>;</span><br><span class="line">            node.left = build(start, mid, array);</span><br><span class="line">            node.right = build(mid+<span class="number">1</span>, end, array);</span><br><span class="line">            node.sum = node.left.sum + node.right.sum;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="title function_">querySum</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> querySum(root, start, end);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="title function_">querySum</span><span class="params">(Node root, <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (start&gt;end)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (root.start==start &amp;&amp; root.end==end)&#123;</span><br><span class="line">                <span class="keyword">return</span> root.sum;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> root.start + (root.end-root.start)/<span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">leftsum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rightsum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (start&lt;=mid)&#123;</span><br><span class="line">                leftsum = querySum(root.left, start, Math.min(mid, end));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (end&gt;=mid+<span class="number">1</span>)&#123;</span><br><span class="line">                rightsum = querySum(root.right, Math.max(mid+<span class="number">1</span>, start), end);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> leftsum+rightsum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> value)</span>&#123;</span><br><span class="line">            update(root, index, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Node root, <span class="type">int</span> index, <span class="type">int</span> value)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (root.start==index &amp;&amp; root.end==index)&#123;</span><br><span class="line">                root.sum = value;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> root.start + (root.end-root.start)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (index &lt;= mid)&#123;</span><br><span class="line">                update(root.left, index, value);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                update(root.right, index, value);</span><br><span class="line">            &#125;</span><br><span class="line">            root.sum = root.left.sum + root.right.sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">        <span class="type">int</span> start;</span><br><span class="line">        <span class="type">int</span> end;</span><br><span class="line">        <span class="type">int</span> sum;</span><br><span class="line">        Node left;</span><br><span class="line">        Node right;</span><br><span class="line">        Node(<span class="type">int</span> start, <span class="type">int</span> end)&#123;</span><br><span class="line">            <span class="built_in">this</span>.start = start;</span><br><span class="line">            <span class="built_in">this</span>.end = end;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            left = <span class="literal">null</span>;</span><br><span class="line">            right = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="327-Count-of-Range-Sum"><a href="#327-Count-of-Range-Sum" class="headerlink" title="327. Count of Range Sum"></a>327. Count of Range Sum</h2><p><a href="https://leetcode.com/problems/count-of-range-sum/discuss/1674377/Java-Segment-Tree-With-Explanation">https://leetcode.com/problems/count-of-range-sum/discuss/1674377/Java-Segment-Tree-With-Explanation</a></p>
<p>prefix_sum超时，考虑用segment_tree</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Time Limit Exceeded</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countRangeSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> lower, <span class="type">int</span> upper)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="comment">//pres[i]=[0,i]=pres[i-1]+nums[i]</span></span><br><span class="line">    <span class="type">long</span>[] pres=<span class="keyword">new</span> <span class="title class_">long</span>[n];</span><br><span class="line">    pres[<span class="number">0</span>]=nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        pres[i]=pres[i-<span class="number">1</span>]+nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//sums(i,j)=[0,j]-[0,i-1]=pres[j]-pres[i-1]</span></span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="type">long</span> sum= i==<span class="number">0</span> ? pres[j] : pres[j]-pres[i-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(sum&gt;=lower &amp;&amp; sum&lt;=upper)&#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><a href="https://leetcode.cn/problems/count-of-range-sum/solution/by-ac_oier-b36o/">https://leetcode.cn/problems/count-of-range-sum/solution/by-ac_oier-b36o/</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    树状数组模板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;    <span class="comment">// 树状数组索引</span></span><br><span class="line">    <span class="type">int</span>[] tr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span> * <span class="number">100010</span>]; <span class="comment">// 树状数组节点(数目等于元素坑位数)</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">lowBit</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 往u坑位加上x</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> u; i &lt;= idx; i += lowBit(i)) &#123;</span><br><span class="line">            tr[i] += x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询[1,x]前缀和</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> u)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> u; i &gt; <span class="number">0</span>; i -= lowBit(i)) &#123;</span><br><span class="line">            res += tr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countRangeSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> lower, <span class="type">int</span> upper)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        离散化+树状数组:</span></span><br><span class="line"><span class="comment">        题目原意:给定数组nums,寻找nums中区间和在[lower,upper]的区间sum[i,j]个数</span></span><br><span class="line"><span class="comment">        设当前区间区间为[i,j],移动j指针,我们只需要的求出每个以j结尾的区间有多少个是区间和在[lower,upper]即可</span></span><br><span class="line"><span class="comment">        朴素的解法中我们可以扫描k∈[0,i-1],求适合的k有多少个,时间复杂度综合为O(N^2)</span></span><br><span class="line"><span class="comment">        逆向思维,我们把目光放在[0,k]区间上,设sum[0,i]=sum[0,k]+sum[k+1,i]=s</span></span><br><span class="line"><span class="comment">        其中lower&lt;=sum[k+1,i]&lt;=upper --&gt; lower&lt;=s-sum[0,k]&lt;=upper --&gt; s-upper&lt;=sum[0,k]&lt;=s-lower</span></span><br><span class="line"><span class="comment">        我们把问题就转化为了求在[0,i-1]区间内前缀和为[s-upper,s-lower]的个数</span></span><br><span class="line"><span class="comment">        求前缀和&quot;个数&quot;,同时前缀和的值域范围爆炸,我们把可能出现的前缀和直接离散化分散到特定数据结构</span></span><br><span class="line"><span class="comment">        然后统计[s-upper,s-lower]范围内的前缀和个数可以抽象成 前面前缀和出现了就在对应坑位数目+1 ,然后再进行区间求和</span></span><br><span class="line"><span class="comment">        此处要想在O(logN)内求出某个区间的和(前缀和作差得到)就要用到树状数组</span></span><br><span class="line"><span class="comment">        前缀和可能出现的情况数目为:3*1e5</span></span><br><span class="line"><span class="comment">        总体时间复杂度:O(NlogN) 空间复杂度:O(N)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 将前缀和进行去重</span></span><br><span class="line">        HashSet&lt;Long&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();    <span class="comment">// 存储可能出现的前缀和</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">preSum</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        set.add(<span class="number">0L</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            preSum += num;</span><br><span class="line">            set.add(preSum);</span><br><span class="line">            set.add(preSum - upper);</span><br><span class="line">            set.add(preSum - lower);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 排序并离散化</span></span><br><span class="line">        List&lt;Long&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(set);</span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        HashMap&lt;Long, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();   <span class="comment">// 存储某个前缀和对应的索引</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> sum : list) map.put(sum, ++idx);   <span class="comment">// 树状数组索引从1开始</span></span><br><span class="line">        preSum = <span class="number">0L</span>;</span><br><span class="line">        add(map.get(preSum), <span class="number">1</span>);    <span class="comment">// 初始化前缀和为0的坑位+1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            preSum += num;</span><br><span class="line">            <span class="comment">// a 为前缀和preSum-lower对应坑位; b 为前缀和preSum-upper对应坑位</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> map.get(preSum - lower), b = map.get(preSum - upper);</span><br><span class="line">            res += query(a) - query(b - <span class="number">1</span>); <span class="comment">// 累加[preSum-upper,preSum-lower]前缀和个数</span></span><br><span class="line">            <span class="comment">// 记得是先求完前缀和个数再更新,保证树状数组是[0,i-1]状态下的</span></span><br><span class="line">            add(map.get(preSum), <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>quotes</title>
    <url>/2022/12/13/quotes/</url>
    <content><![CDATA[<blockquote>
<p>Let no feeling of discouragement prey upon you, and in the end you are sure to succeed.</p>
<p>​                                                                                <em>Abraham Lincoln</em></p>
</blockquote>
<blockquote>
<p>You become responsible, forever, for what you have tamed.</p>
<p>​                                                                                <em>Oscar Wilde</em></p>
</blockquote>
<blockquote>
<p>Laziness is nothing more than the habit of resting before you get tired.</p>
<p>​                                                                                <em>Jules Renard</em></p>
</blockquote>
<blockquote>
<p>A day without laughter is a day wasted.</p>
<p>​                                                                                <em>Charlie Chaplin</em></p>
</blockquote>
<blockquote>
<p>Knowledge speaks, but wisdom listens.</p>
<p>​                                                                                <em>Jimi Hendrix</em></p>
</blockquote>
<blockquote>
<p>Life is something that happens when you can’t get to sleep.</p>
<p>​                                                                                <em>Fran Lebowitz</em></p>
</blockquote>
<blockquote>
<p>Truth is more of a stranger than fiction.</p>
<p>​                                                                                <em>Fran Lebowitz</em></p>
</blockquote>
<blockquote>
<p>Everyone is a moon and has a dark side which he never shows to anybody.</p>
<p>​                                                                                <em>Mark Twain</em></p>
</blockquote>
<blockquote>
<p>Art is making something out of nothing and selling it.</p>
<p>​                                                                                <em>Frank Zappa</em></p>
</blockquote>
<blockquote>
<p>Better to write for yourself and have no public, than to write for the public and have no self.</p>
<p>​                                                                                <em>Cyril Connolly</em></p>
</blockquote>
<blockquote>
<p>It is our choices that show what we truly are, far more than our abilities.</p>
<p>​                                                                                <em>J. K. Rowling</em></p>
</blockquote>
<blockquote>
<p>Everything is funny as long as it is happening to somebody else.</p>
<p>​                                                                                <em>Will Rogers</em></p>
</blockquote>
<blockquote>
<p>When you have eliminated the impossible, whatever remains, however improbable, must be the truth.</p>
<p>​                                                                                <em>Sir Arthur Conan Doyle</em></p>
</blockquote>
<blockquote>
<p>A good novel tells us the truth about its hero; but a bad novel tells us the truth about its author.</p>
<p>​                                                                                <em>G. K. Chesterton</em></p>
</blockquote>
<blockquote>
<p>Famous remarks are very seldom quoted correctly.</p>
<p>​                                                                                <em>Simeon Strunsky</em></p>
</blockquote>
<blockquote>
<p>The two most important days in your life are the day you are born and the day you find out why.</p>
<p>​                                                                                <em>Mark Twain</em></p>
</blockquote>
<blockquote>
<p>The two most important days in your life are the day you are born and the day you find out why.</p>
<p>​                                                                                <em>Mark Twain</em></p>
</blockquote>
<blockquote>
<p>Fashion is a form of ugliness so intolerable that we have to alter it every six months.</p>
<p>​                                                                                <em>Oscar Wilde</em></p>
</blockquote>
<blockquote>
<p>Education’s purpose is to replace an empty mind with an open one.</p>
<p>​                                                                                <em>Malcolm Forbes</em></p>
</blockquote>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>String好题(2)</title>
    <url>/2022/12/28/String%E5%A5%BD%E9%A2%98-2/</url>
    <content><![CDATA[<h1 id="String好题选编-2"><a href="#String好题选编-2" class="headerlink" title="String好题选编(2)"></a>String好题选编(2)</h1><h2 id="340-Longest-Substring-with-At-Most-K-Distinct-Characters"><a href="#340-Longest-Substring-with-At-Most-K-Distinct-Characters" class="headerlink" title="340. Longest Substring with At Most K Distinct Characters"></a>340. Longest Substring with At Most K Distinct Characters</h2><p>typical sliding window</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstringKDistinct</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    Map&lt;Character,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span>(right&lt;n)&#123;</span><br><span class="line">        <span class="comment">//[left,right)</span></span><br><span class="line">        <span class="type">char</span> c=s.charAt(right++);</span><br><span class="line">        map.put(c,map.getOrDefault(c,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(map.size()&gt;k)&#123;</span><br><span class="line">            c=s.charAt(left++);</span><br><span class="line">            map.put(c,map.get(c)-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(map.get(c)==<span class="number">0</span>)&#123;</span><br><span class="line">                map.remove(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(right-left&gt;max)&#123;</span><br><span class="line">            max=right-left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="394-Decode-String"><a href="#394-Decode-String" class="headerlink" title="394. Decode String"></a>394. Decode String</h2><p>好题！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Part</span>&#123;</span><br><span class="line">    StringBuilder sb;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    Part(<span class="type">int</span> num)&#123;</span><br><span class="line">        <span class="built_in">this</span>.sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="built_in">this</span>.num=num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">decodeString</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    Deque&lt;Part&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    stack.push(<span class="keyword">new</span> <span class="title class_">Part</span>(<span class="number">1</span>));</span><br><span class="line">    <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> c=s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(Character.isDigit(c))&#123;</span><br><span class="line">            num=num*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">            stack.push(<span class="keyword">new</span> <span class="title class_">Part</span>(num));</span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line">            Part p=stack.pop();</span><br><span class="line">            <span class="type">int</span> t=p.num;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; t; j++) &#123;</span><br><span class="line">                stack.peek().sb.append(p.sb);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            stack.peek().sb.append(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.peek().sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">StrItem</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    </span><br><span class="line">    StrItem(<span class="type">int</span> n) &#123;<span class="built_in">this</span>.num = n;&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decodeString</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Stack&lt;StrItem&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(<span class="keyword">new</span> <span class="title class_">StrItem</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c: s.toCharArray())</span><br><span class="line">            <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">                    num = num * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">                    stack.push(<span class="keyword">new</span> <span class="title class_">StrItem</span>(num));</span><br><span class="line">                    num = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">                    <span class="type">String</span> <span class="variable">curStr</span> <span class="operator">=</span> stack.peek().sb.toString();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> stack.pop().num;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                        stack.peek().sb.append(curStr);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    stack.peek().sb.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.pop().sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="395-Longest-Substring-with-At-Least-K-Repeating-Characters"><a href="#395-Longest-Substring-with-At-Least-K-Repeating-Characters" class="headerlink" title="395. Longest Substring with At Least K Repeating Characters"></a>395. Longest Substring with At Least K Repeating Characters</h2><p>hardest sliding window?</p>
<h3 id="法一：divide-and-conquer"><a href="#法一：divide-and-conquer" class="headerlink" title="法一：divide-and-conquer"></a>法一：divide-and-conquer</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestSubstring</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    <span class="keyword">if</span>(k&lt;<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> helper(s,k,<span class="number">0</span>,n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">helper</span><span class="params">(String s, <span class="type">int</span> k ,<span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&gt;=right)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] counts=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left; i &lt; right; i++) &#123;</span><br><span class="line">        counts[s.charAt(i)-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> start=left;</span><br><span class="line">    <span class="type">int</span> end=left;</span><br><span class="line">    <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line">    <span class="type">boolean</span> valid=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(end&lt;right)&#123;</span><br><span class="line">        <span class="comment">//[left,right)</span></span><br><span class="line">        <span class="type">char</span> c=s.charAt(end);</span><br><span class="line">        <span class="keyword">if</span>(counts[c-<span class="string">&#x27;a&#x27;</span>]&lt;k)&#123;</span><br><span class="line">            valid=<span class="literal">false</span>;</span><br><span class="line">            max=Math.max(max,helper(s,k,start,end));</span><br><span class="line">            start=end+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        end++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> valid ? right-left : Math.max(max,helper(s,k,start,right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二：sliding-window"><a href="#法二：sliding-window" class="headerlink" title="法二：sliding window"></a>法二：sliding window</h3><h2 id="402-Remove-K-Digits"><a href="#402-Remove-K-Digits" class="headerlink" title="402. Remove K Digits"></a>402. Remove K Digits</h2><p>单调栈</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">removeKdigits</span><span class="params">(String num, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=num.length();</span><br><span class="line">    <span class="keyword">if</span>(k==n)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Deque&lt;Integer&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> cur=num.charAt(i)-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">while</span>(k&gt;<span class="number">0</span> &amp;&amp; !stack.isEmpty() &amp;&amp; stack.peek()&gt;cur)&#123;</span><br><span class="line">            stack.pop();    <span class="comment">//every pop is one delete, i.e, one use of k</span></span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        stack.push(cur);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(k--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//still have unused k, i.e, can delete more digit to make num smaller</span></span><br><span class="line">        stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">        <span class="comment">//1 2 9</span></span><br><span class="line">        sb.append(stack.pop()); <span class="comment">//921</span></span><br><span class="line">    &#125;</span><br><span class="line">    String res=sb.reverse().toString();</span><br><span class="line">    <span class="keyword">while</span>(res.length()&gt;<span class="number">1</span> &amp;&amp; res.charAt(<span class="number">0</span>)==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">        res=res.substring(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="306-Additive-Number"><a href="#306-Additive-Number" class="headerlink" title="306. Additive Number"></a>306. Additive Number</h2><p>tail recursion</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAdditiveNumber</span><span class="params">(String num)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> num.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n / <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num.charAt(<span class="number">0</span>) == <span class="string">&#x27;0&#x27;</span> &amp;&amp; i &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">BigInteger</span> <span class="variable">x1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(num.substring(<span class="number">0</span>, i));</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; Math.max(j, i) &lt;= n - i - j; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (num.charAt(i) == <span class="string">&#x27;0&#x27;</span> &amp;&amp; j &gt; <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">                <span class="type">BigInteger</span> <span class="variable">x2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(num.substring(i, i + j));</span><br><span class="line">                <span class="keyword">if</span> (isValid(x1, x2, j + i, num)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(BigInteger x1, BigInteger x2, <span class="type">int</span> start, String num)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (start == num.length()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        x2 = x2.add(x1);</span><br><span class="line">        x1 = x2.subtract(x1);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sum</span> <span class="operator">=</span> x2.toString();</span><br><span class="line">        <span class="keyword">return</span> num.startsWith(sum, start) &amp;&amp; isValid(x1, x2, start + sum.length(), num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="227-Basic-Calculator-II"><a href="#227-Basic-Calculator-II" class="headerlink" title="227. Basic Calculator II"></a>227. Basic Calculator II</h2><p>躲不过的计算器</p>
<p>标准版，不考虑括号</p>
<p>无需中缀转后缀，一个stack就够了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    Deque&lt;Integer&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">char</span> sign=<span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">char</span> c=s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(Character.isDigit(c))&#123;</span><br><span class="line">            num*=<span class="number">10</span>;</span><br><span class="line">            num+=c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!Character.isDigit(c) &amp;&amp; c!=<span class="string">&#x27; &#x27;</span> || i==n-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sign==<span class="string">&#x27;+&#x27;</span>)&#123;</span><br><span class="line">                stack.push(num);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sign==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">                stack.push(-num);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sign==<span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                stack.push(stack.pop()*num);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sign==<span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">                stack.push(stack.pop()/num);</span><br><span class="line">            &#125;</span><br><span class="line">            num=<span class="number">0</span>;</span><br><span class="line">            sign=c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">        res+=stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="224-Basic-Calculator"><a href="#224-Basic-Calculator" class="headerlink" title="224. Basic Calculator"></a>224. Basic Calculator</h2><p>半升级版，考虑括号，但不再考虑乘除</p>
<p>依然一个stack搞定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> sign=<span class="number">1</span>;</span><br><span class="line">    Deque&lt;Integer&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">char</span> c=s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(Character.isDigit(c))&#123;</span><br><span class="line">            <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;n &amp;&amp; Character.isDigit(s.charAt(i)))&#123;</span><br><span class="line">                num*=<span class="number">10</span>;</span><br><span class="line">                num+=s.charAt(i)-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            i--;</span><br><span class="line">            num*=sign;</span><br><span class="line">            sign=<span class="number">1</span>;</span><br><span class="line">            sum+=num;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">            stack.push(sum);	<span class="comment">//存储上一阶段结果</span></span><br><span class="line">            stack.push(sign);	<span class="comment">//存储这一阶段的符号</span></span><br><span class="line">            sum=<span class="number">0</span>;</span><br><span class="line">            sign=<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">            sum*=stack.pop();</span><br><span class="line">            sum+=stack.pop();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">            sign*=-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sign</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    Stack&lt;Integer&gt;st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(Character.isDigit(ch))&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">             <span class="keyword">while</span>(i &lt; s.length() &amp;&amp; Character.isDigit(s.charAt(i)))&#123;</span><br><span class="line">                 val = val * <span class="number">10</span> + (s.charAt(i) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                 i++;</span><br><span class="line">             &#125;</span><br><span class="line">         i--;</span><br><span class="line">         val = val * sign;</span><br><span class="line">         sign = <span class="number">1</span>;</span><br><span class="line">         sum += val;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">          st.push(sum);</span><br><span class="line">          st.push(sign);</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            sign = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">            sum *= st.pop();</span><br><span class="line">            sum += st.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">            sign*= -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="418-Sentence-Screen-Fitting"><a href="#418-Sentence-Screen-Fitting" class="headerlink" title="418. Sentence Screen Fitting"></a>418. Sentence Screen Fitting</h2><p>still hard to understand !</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">wordsTyping</span><span class="params">(String[] sentence, <span class="type">int</span> rows, <span class="type">int</span> cols)</span> &#123;</span><br><span class="line">    String str=String.join(<span class="string">&quot; &quot;</span>,sentence)+<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="type">int</span> n=str.length();</span><br><span class="line">    <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">        len+=cols;</span><br><span class="line">        <span class="keyword">if</span>(str.charAt(len%n)==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(len&gt;<span class="number">0</span> &amp;&amp; str.charAt((len-<span class="number">1</span>)%n)!=<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                len--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len/n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a new &#123;<span class="doctag">@code</span> String&#125; composed of copies of the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> CharSequence elements&#125; joined together with a copy of the</span></span><br><span class="line"><span class="comment"> * specified &#123;<span class="doctag">@code</span> delimiter&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;blockquote&gt;For example,</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> *     List&lt;String&gt; strings = List.of(&quot;Java&quot;, &quot;is&quot;, &quot;cool&quot;);</span></span><br><span class="line"><span class="comment"> *     String message = String.join(&quot; &quot;, strings);</span></span><br><span class="line"><span class="comment"> *     //message returned is: &quot;Java is cool&quot;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     Set&lt;String&gt; strings =</span></span><br><span class="line"><span class="comment"> *         new LinkedHashSet&lt;&gt;(List.of(&quot;Java&quot;, &quot;is&quot;, &quot;very&quot;, &quot;cool&quot;));</span></span><br><span class="line"><span class="comment"> *     String message = String.join(&quot;-&quot;, strings);</span></span><br><span class="line"><span class="comment"> *     //message returned is: &quot;Java-is-very-cool&quot;</span></span><br><span class="line"><span class="comment"> * &#125;&lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Note that if an individual element is &#123;<span class="doctag">@code</span> null&#125;, then &#123;<span class="doctag">@code</span> &quot;null&quot;&#125; is added.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  delimiter a sequence of characters that is used to separate each</span></span><br><span class="line"><span class="comment"> *         of the &#123;<span class="doctag">@code</span> elements&#125; in the resulting &#123;<span class="doctag">@code</span> String&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  elements an &#123;<span class="doctag">@code</span> Iterable&#125; that will have its &#123;<span class="doctag">@code</span> elements&#125;</span></span><br><span class="line"><span class="comment"> *         joined together.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a new &#123;<span class="doctag">@code</span> String&#125; that is composed from the &#123;<span class="doctag">@code</span> elements&#125;</span></span><br><span class="line"><span class="comment"> *         argument</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException If &#123;<span class="doctag">@code</span> delimiter&#125; or &#123;<span class="doctag">@code</span> elements&#125;</span></span><br><span class="line"><span class="comment"> *         is &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>    #join(CharSequence,CharSequence...)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>    java.util.StringJoiner</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">wordsTyping</span><span class="params">(String[] sentence, <span class="type">int</span> rows, <span class="type">int</span> cols)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (sentence.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// convert string array to a string sentence with space between every word</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> String.join(<span class="string">&quot; &quot;</span>, sentence) + <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> str.length();</span><br><span class="line"><span class="type">int</span> <span class="variable">lenSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">    lenSum += cols;</span><br><span class="line">    <span class="comment">// if last character is space, add effective length by 1, since we put a space after input sentence before</span></span><br><span class="line">    <span class="keyword">if</span> (str.charAt(lenSum % n) == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">        lenSum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// otherwise, find the most recent space position</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// DO NOT FORGET to MOD n since we may repeat many times of entire sentence in a single line</span></span><br><span class="line">        <span class="keyword">while</span> (lenSum &gt; <span class="number">0</span> &amp;&amp; str.charAt((lenSum - <span class="number">1</span>) % n) != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">            lenSum--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lenSum / n; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="415-Add-Strings"><a href="#415-Add-Strings" class="headerlink" title="415. Add Strings"></a>415. Add Strings</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">addStrings</span><span class="params">(String num1, String num2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n1=num1.length();</span><br><span class="line">    <span class="type">int</span> n2=num2.length();</span><br><span class="line">    StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="type">int</span> pre=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= Math.max(n1, n2); i++) &#123;</span><br><span class="line">        <span class="type">int</span> c1=n1-i&gt;=<span class="number">0</span> ? num1.charAt(n1-i)-<span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> c2=n2-i&gt;=<span class="number">0</span> ? num2.charAt(n2-i)-<span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cur=c1+c2+pre;</span><br><span class="line">        pre=cur/<span class="number">10</span>;</span><br><span class="line">        sb.append(cur%<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pre!=<span class="number">0</span>)&#123;</span><br><span class="line">        sb.append(pre);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="484-Find-Permutation"><a href="#484-Find-Permutation" class="headerlink" title="484. Find Permutation"></a>484. Find Permutation</h2><p>Given a string <code>s</code>, reconstruct the lexicographically smallest permutation <code>perm</code> and return it.</p>
<p>思路：</p>
<ol>
<li>要想结果最小，则要尽可能把小的数字放前面</li>
<li>即：发现有increase，则立即出掉</li>
<li>若是decrease，则无法出掉，只能先存着</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] findPermutation(String s) &#123;</span><br><span class="line">    <span class="type">int</span> n=s.length()+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    Deque&lt;Integer&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= s.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> c=s.charAt(i-<span class="number">1</span>);</span><br><span class="line">        stack.push(i);</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;I&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">                res[j++]=stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stack.push(s.length()+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">        res[j++]=stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="451-Sort-Characters-By-Frequency"><a href="#451-Sort-Characters-By-Frequency" class="headerlink" title="451. Sort Characters By Frequency"></a>451. Sort Characters By Frequency</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">frequencySort</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    Map&lt;Character,Integer&gt; count=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">char</span> c=s.charAt(i);</span><br><span class="line">        count.put(c,count.getOrDefault(c,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    TreeMap&lt;Integer, List&lt;Character&gt;&gt; map=<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Character c : count.keySet()) &#123;</span><br><span class="line">        <span class="type">int</span> freq=count.get(c);</span><br><span class="line">        map.putIfAbsent(freq,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        map.get(freq).add(c);</span><br><span class="line">    &#125;</span><br><span class="line">    StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (Integer f : map.keySet()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Character c : map.get(f)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; f; j++) &#123;</span><br><span class="line">                sb.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="556-Next-Greater-Element-III"><a href="#556-Next-Greater-Element-III" class="headerlink" title="556. Next Greater Element III"></a>556. Next Greater Element III</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextGreaterElement</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">//first non-ascending i</span></span><br><span class="line">    <span class="comment">//first j &gt; i</span></span><br><span class="line">    <span class="comment">//swap i,j</span></span><br><span class="line">    <span class="comment">//reverse [i+1,end]</span></span><br><span class="line">    <span class="comment">//163542</span></span><br><span class="line">    <span class="comment">//164532</span></span><br><span class="line">    <span class="comment">//164235</span></span><br><span class="line">    <span class="comment">//14321</span></span><br><span class="line">    <span class="keyword">if</span>(n==Integer.MAX_VALUE)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String s=String.valueOf(n);</span><br><span class="line">    <span class="type">int</span> len=s.length();</span><br><span class="line">    <span class="type">int</span>[] nums=<span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        nums[i]=s.charAt(i)-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> i=len-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&gt;<span class="number">0</span> &amp;&amp; nums[i-<span class="number">1</span>]&gt;=nums[i])&#123;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    i--;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> j=len-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; j&gt;i; j--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[j]&gt;nums[i])&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(nums,i,j);</span><br><span class="line">    reverse(nums,i+<span class="number">1</span>,len-<span class="number">1</span>);</span><br><span class="line">    StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        sb.append(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> Long.valueOf(sb.toString());</span><br><span class="line">    <span class="keyword">return</span> res&lt;=Integer.MAX_VALUE ? (<span class="type">int</span>)res : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(start&lt;end)&#123;</span><br><span class="line">        swap(nums,start++,end--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=nums[i];</span><br><span class="line">    nums[i]=nums[j];</span><br><span class="line">    nums[j]=temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="583-Delete-Operation-for-Two-Strings"><a href="#583-Delete-Operation-for-Two-Strings" class="headerlink" title="583. Delete Operation for Two Strings"></a>583. Delete Operation for Two Strings</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n1=word1.length();</span><br><span class="line">    <span class="type">int</span> n2=word2.length();</span><br><span class="line">    <span class="type">int</span>[][] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n1+<span class="number">1</span>][n2+<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//0 1 ... n2</span></span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//n1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n1; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n2; i++) &#123;</span><br><span class="line">        dp[<span class="number">0</span>][i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n1; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n2; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(word1.charAt(i-<span class="number">1</span>)==word2.charAt(j-<span class="number">1</span>))&#123;</span><br><span class="line">                dp[i][j]=dp[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dp[i][j]=Math.min(dp[i-<span class="number">1</span>][j],dp[i][j-<span class="number">1</span>])+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n1][n2];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="467-Unique-Substrings-in-Wraparound-String"><a href="#467-Unique-Substrings-in-Wraparound-String" class="headerlink" title="467. Unique Substrings in Wraparound String"></a>467. Unique Substrings in Wraparound String</h2><p>Brute Force超时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findSubstringInWraproundString</span><span class="params">(String p)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=p.length();</span><br><span class="line">    Set&lt;String&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="type">char</span> cur=p.charAt(j);</span><br><span class="line">            <span class="keyword">if</span>(sb.length()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">char</span> last=sb.charAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(!(last==<span class="string">&#x27;z&#x27;</span> &amp;&amp; cur==<span class="string">&#x27;a&#x27;</span> || cur-last==<span class="number">1</span>))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(cur);</span><br><span class="line">            set.add(sb.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> set.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><a href="https://leetcode.com/problems/unique-substrings-in-wraparound-string/discuss/95439/Concise-Java-solution-using-DP">https://leetcode.com/problems/unique-substrings-in-wraparound-string/discuss/95439/Concise-Java-solution-using-DP</a></p>
<p>另类DP: </p>
<ul>
<li>子问题为由每个字母结尾的 longest continuous substring</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findSubstringInWraproundString</span><span class="params">(String p)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=p.length();</span><br><span class="line">    <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="type">int</span> cur=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(cur==<span class="number">0</span> || p.charAt(i-<span class="number">1</span>)==<span class="string">&#x27;z&#x27;</span> &amp;&amp; p.charAt(i)==<span class="string">&#x27;a&#x27;</span></span><br><span class="line">                || p.charAt(i)-p.charAt(i-<span class="number">1</span>)==<span class="number">1</span>)&#123;</span><br><span class="line">            cur++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cur=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> idx=p.charAt(i)-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        arr[idx]=Math.max(arr[idx],cur);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">        res+=arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="2546-Apply-Bitwise-Operations-to-Make-Strings-Equal"><a href="#2546-Apply-Bitwise-Operations-to-Make-Strings-Equal" class="headerlink" title="2546. Apply Bitwise Operations to Make Strings Equal"></a>2546. Apply Bitwise Operations to Make Strings Equal</h2><p><a href="https://leetcode.com/problems/apply-bitwise-operations-to-make-strings-equal/discuss/3083831/JavaC%2B%2BPython-1-line-Check-1">https://leetcode.com/problems/apply-bitwise-operations-to-make-strings-equal/discuss/3083831/JavaC%2B%2BPython-1-line-Check-1</a></p>
<p>Enumerate the values for <code>s[i]</code> and <code>s[j]</code><br><code>(0, 0)</code> -&gt; <code>(0, 0)</code><br><code>(1, 0)</code> -&gt; <code>(1, 1)</code><br><code>(0, 1)</code> -&gt; <code>(1, 1)</code><br><code>(1, 1)</code> -&gt; <code>(1, 0)</code></p>
<p><strong>To summrize the rule</strong></p>
<ol>
<li>Two 0s stay 0s.</li>
<li>If we have 1, we can make any 0 to 1.</li>
<li>If we have at least two 1s, we can make any 1 to 0.</li>
</ol>
<p><strong>Continue to sunmmrize</strong></p>
<ol>
<li>All 0 string can not change.</li>
<li>Any other strings can transform from each other.</li>
</ol>
<p><strong>So we only need to check</strong><br>if <code>s</code> has 1.<br>if <code>target</code> has 1.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">makeStringsEqual</span><span class="params">(String s, String target)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s.contains(<span class="string">&quot;1&quot;</span>)==target.contains(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="2531-Make-Number-of-Distinct-Characters-Equal"><a href="#2531-Make-Number-of-Distinct-Characters-Equal" class="headerlink" title="2531. Make Number of Distinct Characters Equal"></a>2531. Make Number of Distinct Characters Equal</h2><p>every possible swap, 26*26</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isItPossible</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr1=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="type">int</span>[] arr2=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="type">int</span> count1=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> count2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word1.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> c=word1.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(arr1[c-<span class="string">&#x27;a&#x27;</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">            count1++;</span><br><span class="line">        &#125;</span><br><span class="line">        arr1[c-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word2.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> c=word2.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(arr2[c-<span class="string">&#x27;a&#x27;</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">            count2++;</span><br><span class="line">        &#125;</span><br><span class="line">        arr2[c-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr1[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">26</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr2[j]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i==j &amp;&amp; count1==count2)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> a=count1;</span><br><span class="line">            <span class="keyword">if</span>(arr1[i]==<span class="number">1</span>)&#123;</span><br><span class="line">                a--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(arr1[j]==<span class="number">0</span> || arr1[i]==<span class="number">1</span> &amp;&amp; i==j)&#123;</span><br><span class="line">                a++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> b=count2;</span><br><span class="line">            <span class="keyword">if</span>(arr2[j]==<span class="number">1</span>)&#123;</span><br><span class="line">                b--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(arr2[i]==<span class="number">0</span> || arr2[j]==<span class="number">1</span> &amp;&amp; i==j)&#123;</span><br><span class="line">                b++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a==b)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="763-Partition-Labels"><a href="#763-Partition-Labels" class="headerlink" title="763. Partition Labels"></a>763. Partition Labels</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">partitionLabels</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    <span class="type">char</span>[] chars=s.toCharArray();</span><br><span class="line">    <span class="type">int</span>[] last=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        last[chars[i]-<span class="string">&#x27;a&#x27;</span>]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    Set&lt;Integer&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> start=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        set.add(chars[i]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="type">boolean</span> valid=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> idx : set) &#123;</span><br><span class="line">            <span class="keyword">if</span>(last[idx]&gt;i)&#123;</span><br><span class="line">                valid=<span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(valid)&#123;</span><br><span class="line">            res.add(i-start+<span class="number">1</span>);</span><br><span class="line">            start=i+<span class="number">1</span>;</span><br><span class="line">            set.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="647-Palindromic-Substrings"><a href="#647-Palindromic-Substrings" class="headerlink" title="647. Palindromic Substrings"></a>647. Palindromic Substrings</h2><p>好题好解，一鸭三吃！</p>
<h3 id="Approach-1-Check-All-Substrings"><a href="#Approach-1-Check-All-Substrings" class="headerlink" title="Approach #1: Check All Substrings"></a>Approach #1: Check All Substrings</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countSubstrings</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    <span class="type">char</span>[] chars=s.toCharArray();</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(isPalindrome(chars,j,i))&#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">char</span>[] chars, <span class="type">int</span> j, <span class="type">int</span> i)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(j==i)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chars[j]!=chars[i])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="Approach-3-Expand-Around-Possible-Centers"><a href="#Approach-3-Expand-Around-Possible-Centers" class="headerlink" title="Approach #3: Expand Around Possible Centers"></a>Approach #3: Expand Around Possible Centers</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countSubstrings</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        res+=count(s,i,i)+count(s,i,i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">count</span><span class="params">(String s, <span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&gt;=<span class="number">0</span> &amp;&amp; right&lt;s.length()</span><br><span class="line">            &amp;&amp; s.charAt(left)==s.charAt(right))&#123;</span><br><span class="line">        left--;</span><br><span class="line">        right++;</span><br><span class="line">        res++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="524-Longest-Word-in-Dictionary-through-Deleting"><a href="#524-Longest-Word-in-Dictionary-through-Deleting" class="headerlink" title="524. Longest Word in Dictionary through Deleting"></a>524. Longest Word in Dictionary through Deleting</h2><p>through deleting ? just skipping!</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">findLongestWord</span><span class="params">(String s, List&lt;String&gt; dictionary)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    Collections.sort(dictionary, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String o1, String o2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> o1.length()!=o2.length() ? o2.length()-o1.length() : o1.compareTo(o2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span> (String word : dictionary) &#123;</span><br><span class="line">        <span class="type">int</span> idx=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i)==word.charAt(idx))&#123;</span><br><span class="line">                idx++;</span><br><span class="line">                <span class="keyword">if</span>(idx==word.length())&#123;</span><br><span class="line">                    <span class="keyword">return</span> word;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="720-Longest-Word-in-Dictionary"><a href="#720-Longest-Word-in-Dictionary" class="headerlink" title="720. Longest Word in Dictionary"></a>720. Longest Word in Dictionary</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">longestWord</span><span class="params">(String[] words)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n= words.length;</span><br><span class="line">    Arrays.sort(words,(a,b)-&gt;(a.length()!=b.length() ? b.length()-a.length() : a.compareTo(b)));</span><br><span class="line">    Set&lt;String&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(Arrays.asList(words));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        String word=words[i];</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; j &lt; word.length(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!set.contains(word.substring(<span class="number">0</span>,j+<span class="number">1</span>)))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j==word.length())&#123;</span><br><span class="line">            <span class="keyword">return</span> word;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="767-Reorganize-String"><a href="#767-Reorganize-String" class="headerlink" title="767. Reorganize String"></a>767. Reorganize String</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reorganizeString</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">    <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : chars) &#123;</span><br><span class="line">        arr[c-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> maxIdx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]&gt;max)&#123;</span><br><span class="line">            max=arr[i];</span><br><span class="line">            maxIdx=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2 3   2 4</span></span><br><span class="line">    <span class="comment">//3 4</span></span><br><span class="line">    <span class="keyword">if</span>(max&gt;(n+<span class="number">1</span>)/<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> idx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(arr[maxIdx]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        chars[idx]=(<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span>+maxIdx);</span><br><span class="line">        idx+=<span class="number">2</span>;</span><br><span class="line">        arr[maxIdx]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(arr[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(idx&gt;=n)&#123;</span><br><span class="line">                idx=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            chars[idx]=(<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span>+i);</span><br><span class="line">            arr[i]--;</span><br><span class="line">            idx+=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="937-Reorder-Data-in-Log-Files"><a href="#937-Reorder-Data-in-Log-Files" class="headerlink" title="937. Reorder Data in Log Files"></a>937. Reorder Data in Log Files</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] reorderLogFiles(String[] logs) &#123;</span><br><span class="line">    List&lt;Integer&gt; digits=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//[string,identifier,content]</span></span><br><span class="line">    PriorityQueue&lt;String[]&gt; pq=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String[]&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String[] a, String[] b)</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(a[<span class="number">2</span>].equals(b[<span class="number">2</span>]))&#123;</span><br><span class="line">                        <span class="keyword">return</span> a[<span class="number">1</span>].compareTo(b[<span class="number">1</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> a[<span class="number">2</span>].compareTo(b[<span class="number">2</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="type">int</span> n=logs.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>; j&lt;n; j++) &#123;</span><br><span class="line">        String log=logs[j];</span><br><span class="line">        <span class="type">int</span> idx=log.indexOf(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        String identifier=log.substring(<span class="number">0</span>,idx);</span><br><span class="line">        String content=log.substring(idx+<span class="number">1</span>);</span><br><span class="line">        <span class="type">boolean</span> isDigit=Character.isDigit(content.charAt(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">if</span>(isDigit)&#123;</span><br><span class="line">            digits.add(j);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pq.offer(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;log,identifier,content&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    String[] res=<span class="keyword">new</span> <span class="title class_">String</span>[n];</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!pq.isEmpty())&#123;</span><br><span class="line">        res[i++]=pq.poll()[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> idx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">        res[i++]=logs[digits.get(idx++)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>Bit</title>
    <url>/2023/01/01/Bit/</url>
    <content><![CDATA[<h1 id="Bit好题"><a href="#Bit好题" class="headerlink" title="Bit好题"></a>Bit好题</h1><h2 id="137-Single-Number-II"><a href="#137-Single-Number-II" class="headerlink" title="137. Single Number II"></a>137. Single Number II</h2><p><a href="https://leetcode.com/kenanlv">@kenanlv</a> the part about XOR is often supposed to be textbook knowledge because of well-known swap implementation without tmp variable:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = a^b      # mix of a and b</span><br><span class="line">b = a^b      # a^b^b = a</span><br><span class="line">a = a^b      # a^b^a = b</span><br></pre></td></tr></table></figure>



<p>If you don’t know that idea, the interviewer would probably simplify the task, asking you first to solve the problem “each element appears <em>twice</em> except one, find that one.” That is a very straightforward XOR usage, like in swap above</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">seen_once = seen_once^num</span><br></pre></td></tr></table></figure>



<p>Once you’ll figure that out, to go to the idea of two bitmasks instead of one is not a big deal, basically it’s</p>
<p>NOT seen_twice AND (CHANGE see_once)<br>NOT seen_once AND (CHANGE see_twice)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">seenOnce</span> <span class="operator">=</span> <span class="number">0</span>, seenTwice = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">      <span class="comment">// first appearence: </span></span><br><span class="line">      <span class="comment">// add num to seen_once </span></span><br><span class="line">      <span class="comment">// don&#x27;t add to seen_twice because of presence in seen_once</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// second appearance: </span></span><br><span class="line">      <span class="comment">// remove num from seen_once </span></span><br><span class="line">      <span class="comment">// add num to seen_twice</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// third appearance: </span></span><br><span class="line">      <span class="comment">// don&#x27;t add to seen_once because of presence in seen_twice</span></span><br><span class="line">      <span class="comment">// remove num from seen_twice</span></span><br><span class="line">      seenOnce = ~seenTwice &amp; (seenOnce ^ num);</span><br><span class="line">      seenTwice = ~seenOnce &amp; (seenTwice ^ num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> seenOnce;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>开背！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> seenOnce=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> seenTwice=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        seenOnce=(~seenTwice) &amp; (seenOnce^num);</span><br><span class="line">        seenTwice=(~seenOnce) &amp; (seenTwice^num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> seenOnce;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="260-Single-Number-III"><a href="#260-Single-Number-III" class="headerlink" title="260. Single Number III"></a>260. Single Number III</h2><p>The bitmask will have all the differences between x and y (the two singles). x has 0 and y has 1 or vice-versa in those bits. You take one difference, the rightmost one.<br>Iterate through array again dividing into two. The ones which has 1 on the rightmost different bit into one group and those who have 0 into another group.<br>Group1 : [x^a^a^b^b] &#x3D; x<br>Group2 : [y^c^c^d^d] &#x3D; y<br>bitmask^x &#x3D; y;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span>[] singleNumber(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="comment">// difference between two numbers (x and y) which were seen only once</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">bitmask</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) bitmask ^= num;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// rightmost 1-bit diff between x and y</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">diff</span> <span class="operator">=</span> bitmask &amp; (-bitmask);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// bitmask which will contain only x</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) <span class="keyword">if</span> ((num &amp; diff) != <span class="number">0</span>) x ^= num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x, bitmask^x&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] singleNumber(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="type">int</span> ab=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        ab^=num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//ab=a^b</span></span><br><span class="line">    <span class="type">int</span> r=ab&amp;(-ab);</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        <span class="keyword">if</span>((num&amp;r)!=<span class="number">0</span>)&#123;</span><br><span class="line">            a^=num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;a,ab^a&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="191-Number-of-1-Bits"><a href="#191-Number-of-1-Bits" class="headerlink" title="191. Number of 1 Bits"></a>191. Number of 1 Bits</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hammingWeight</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">        count+=n&amp;<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//must use logical shift, not arithmetic shift</span></span><br><span class="line">        n&gt;&gt;&gt;=<span class="number">1</span>; <span class="comment">//n&gt;&gt;=1则不行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="371-Sum-of-Two-Integers"><a href="#371-Sum-of-Two-Integers" class="headerlink" title="371. Sum of Two Integers"></a>371. Sum of Two Integers</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(b!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="type">int</span> answer=a^b;</span><br><span class="line">        <span class="type">int</span> carry=(a&amp;b)&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        a=answer;</span><br><span class="line">        b=carry;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>Math</title>
    <url>/2022/12/30/Math/</url>
    <content><![CDATA[<h1 id="Math好题选编"><a href="#Math好题选编" class="headerlink" title="Math好题选编"></a>Math好题选编</h1><h2 id="119-Pascal’s-Triangle-II"><a href="#119-Pascal’s-Triangle-II" class="headerlink" title="119. Pascal’s Triangle II"></a>119. Pascal’s Triangle II</h2><p><strong>Follow up:</strong> Could you optimize your algorithm to use only <code>O(rowIndex)</code> extra space?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">getRow</span><span class="params">(<span class="type">int</span> rowIndex)</span> &#123;</span><br><span class="line">    <span class="comment">//rowIndex, len=rowIndex+1</span></span><br><span class="line">    <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[rowIndex+<span class="number">1</span>];</span><br><span class="line">    arr[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; rowIndex + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="comment">//1				0</span></span><br><span class="line">            <span class="comment">//1 1			1</span></span><br><span class="line">            <span class="comment">//1 2 1			2</span></span><br><span class="line">            <span class="comment">//1 3 3 1		3</span></span><br><span class="line">            <span class="comment">//1 4 6 4 1		4</span></span><br><span class="line">            arr[j]+=arr[j-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Integer&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; rowIndex + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        res.add(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="204-Count-Primes"><a href="#204-Count-Primes" class="headerlink" title="204. Count Primes"></a>204. Count Primes</h2><p>Use <em>Sieve of Eratosthenes</em>.</p>
<p><a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes">https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes</a></p>
<p>To find all the prime numbers less than or equal to a given integer <em>n</em> by Eratosthenes’ method:</p>
<ol>
<li>Create a list of consecutive integers from 2 through <em>n</em>: (2, 3, 4, …, <em>n</em>).</li>
<li>Initially, let <em>p</em> equal 2, the smallest prime number.</li>
<li>Enumerate the multiples of <em>p</em> by counting in increments of <em>p</em> from 2<em>p</em> to <em>n</em>, and mark them in the list (these will be 2<em>p</em>, 3<em>p</em>, 4<em>p</em>, …; the <em>p</em> itself should not be marked).</li>
<li>Find the smallest number in the list greater than <em>p</em> that is not marked. If there was no such number, stop. Otherwise, let <em>p</em> now equal this new number (which is the next prime), and repeat from step 3.</li>
<li>When the algorithm terminates, the numbers remaining not marked in the list are all the primes below <em>n</em>.</li>
</ol>
<h3 id="Time-Limit-Exceeded"><a href="#Time-Limit-Exceeded" class="headerlink" title="Time Limit Exceeded"></a>Time Limit Exceeded</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countPrimes</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span>[] marks=<span class="keyword">new</span> <span class="title class_">boolean</span>[n]; <span class="comment">//[1,n-1]</span></span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(marks[i])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isPrime(i))&#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>*i; j&lt;n; j+=i)&#123;</span><br><span class="line">                marks[j]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; num / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(num%i==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="Approach-Sieve-of-Eratosthenes"><a href="#Approach-Sieve-of-Eratosthenes" class="headerlink" title="Approach: Sieve of Eratosthenes"></a>Approach: Sieve of Eratosthenes</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">It is not necessary to consider any number greater than the square root of n. </span><br><span class="line"></span><br><span class="line">6 * 1 = 6 = 1 * 6</span><br><span class="line">6 * 2 = 12 = 2 * 6</span><br><span class="line">6 * 3 = 18 = 3 * 6</span><br><span class="line">6 * 4 = 24 = 2 * 12</span><br><span class="line">6 * 5 = 30 = 5 * 6</span><br><span class="line">6 * 6 = 36 &gt; 30</span><br><span class="line"></span><br><span class="line">Notice that every multiple of 6 was already addressed by some multiple of a prime number less than 6.</span><br></pre></td></tr></table></figure>





<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countPrimes</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span>[] marks=<span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;=(<span class="type">int</span>)Math.sqrt(n); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!marks[i])&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i*i; j&lt;n; j+=i)&#123;</span><br><span class="line">                marks[j]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!marks[i])&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="229-Majority-Element-II"><a href="#229-Majority-Element-II" class="headerlink" title="229. Majority Element II"></a>229. Majority Element II</h2><h3 id="Approach-1-Boyer-Moore-Voting-Algorithm"><a href="#Approach-1-Boyer-Moore-Voting-Algorithm" class="headerlink" title="Approach 1: Boyer-Moore Voting Algorithm"></a>Approach 1: Boyer-Moore Voting Algorithm</h3><p><strong>Intuition</strong></p>
<p>To figure out a O(1)<em>O</em>(1) space requirement, we would need to get this simple intuition first. For an array of length <code>n</code>:</p>
<ul>
<li>There can be at most <strong>one</strong> majority element which is <strong>more than</strong> <code>⌊n/2⌋</code> times.</li>
<li>There can be at most <strong>two</strong> majority elements which are <strong>more than</strong> <code>⌊n/3⌋</code> times.</li>
<li>There can be at most <strong>three</strong> majority elements which are <strong>more than</strong> <code>⌊n/4⌋</code> times.</li>
</ul>
<p>and so on.</p>
<p>Knowing this can help us understand how we can keep track of majority elements which satisfies O(1)<em>O</em>(1) space requirement.</p>
<ul>
<li>If the current element is equal to one of the potential candidate, the count for that candidate is increased while leaving the count of the other candidate as it is.</li>
<li>If the counter reaches zero, the candidate associated with that counter will be replaced with the next element <strong>if</strong> the next element is not equal to the other candidate as well.</li>
<li>Both counters are decremented <strong>only when</strong> the current element is different from both candidates.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List &lt; Integer &gt; majorityElement(<span class="type">int</span>[] nums) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1st pass</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">candidate1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">candidate2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> n: nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (candidate1 != <span class="literal">null</span> &amp;&amp; candidate1 == n) &#123;</span><br><span class="line">                count1++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (candidate2 != <span class="literal">null</span> &amp;&amp; candidate2 == n) &#123;</span><br><span class="line">                count2++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count1 == <span class="number">0</span>) &#123;</span><br><span class="line">                candidate1 = n;</span><br><span class="line">                count1++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count2 == <span class="number">0</span>) &#123;</span><br><span class="line">                candidate2 = n;</span><br><span class="line">                count2++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                count1--;</span><br><span class="line">                count2--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2nd pass</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span> &lt;&gt; ();</span><br><span class="line"></span><br><span class="line">        count1 = <span class="number">0</span>;</span><br><span class="line">        count2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> n: nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (candidate1 != <span class="literal">null</span> &amp;&amp; n == candidate1) count1++;</span><br><span class="line">            <span class="keyword">if</span> (candidate2 != <span class="literal">null</span> &amp;&amp; n == candidate2) count2++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (count1 &gt; n/<span class="number">3</span>) result.add(candidate1);</span><br><span class="line">        <span class="keyword">if</span> (count2 &gt; n/<span class="number">3</span>) result.add(candidate2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="396-Rotate-Function"><a href="#396-Rotate-Function" class="headerlink" title="396. Rotate Function"></a>396. Rotate Function</h2><p><a href="https://leetcode.com/problems/rotate-function/discuss/87853/Java-O(n)-solution-with-explanation">https://leetcode.com/problems/rotate-function/discuss/87853/Java-O(n)-solution-with-explanation</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F(k) = 0 * Bk[0] + 1 * Bk[1] + ... + (n-1) * Bk[n-1]</span><br><span class="line">F(k-1) = 0 * Bk-1[0] + 1 * Bk-1[1] + ... + (n-1) * Bk-1[n-1]</span><br><span class="line">       = 0 * Bk[1] + 1 * Bk[2] + ... + (n-2) * Bk[n-1] + (n-1) * Bk[0]</span><br></pre></td></tr></table></figure>



<p>Then,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F(k) - F(k-1) = Bk[1] + Bk[2] + ... + Bk[n-1] + (1-n)Bk[0]</span><br><span class="line">              = (Bk[0] + ... + Bk[n-1]) - nBk[0]</span><br><span class="line">              = sum - nBk[0]</span><br></pre></td></tr></table></figure>



<p>Thus,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F(k) = F(k-1) + sum - nBk[0]</span><br></pre></td></tr></table></figure>



<p>What is Bk[0]?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">k = 0; B[0] = A[0];</span><br><span class="line">k = 1; B[0] = A[len-1];</span><br><span class="line">k = 2; B[0] = A[len-2];</span><br><span class="line">...</span><br></pre></td></tr></table></figure>





<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxRotateFunction</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> F=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        sum+=nums[i];</span><br><span class="line">        F+=i*nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=F;</span><br><span class="line">    <span class="comment">//F1-F0=sum-nB(0)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        F=F+sum-n*nums[i];</span><br><span class="line">        res=Math.max(res,F);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="313-Super-Ugly-Number"><a href="#313-Super-Ugly-Number" class="headerlink" title="313. Super Ugly Number"></a>313. Super Ugly Number</h2><p><a href="https://leetcode.com/problems/super-ugly-number/discuss/277313/My-view-of-this-question-hope-it-can-help-you-understand">https://leetcode.com/problems/super-ugly-number/discuss/277313/My-view-of-this-question-hope-it-can-help-you-understand</a>!!!</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nthSuperUglyNumber</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[] primes)</span> &#123;</span><br><span class="line">            PriorityQueue&lt;<span class="type">int</span>[]&gt; queue=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a,b)-&gt;(a[<span class="number">0</span>]-b[<span class="number">0</span>]));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;primes.length;i++)</span><br><span class="line">        queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;primes[i], primes[i], <span class="number">0</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] nums=<span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    nums[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;n)&#123;</span><br><span class="line">        <span class="type">int</span>[] entry=queue.poll();</span><br><span class="line">        <span class="type">int</span> num=entry[<span class="number">0</span>], prime=entry[<span class="number">1</span>], index=entry[<span class="number">2</span>];</span><br><span class="line">		<span class="comment">// remove duplicate</span></span><br><span class="line">        <span class="keyword">if</span> (num!=nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">            nums[i]=num;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;prime*nums[index+<span class="number">1</span>], prime, index+<span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[n-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="50-Pow-x-n"><a href="#50-Pow-x-n" class="headerlink" title="50. Pow(x, n)"></a>50. Pow(x, n)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">myPow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">long</span> N=n;</span><br><span class="line">    <span class="type">double</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(N&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        N=-N;</span><br><span class="line">        x=<span class="number">1</span>/x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> cur=x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> i=N; i&gt;<span class="number">0</span>; i/=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            ans*=cur;</span><br><span class="line">        &#125;</span><br><span class="line">        cur*=cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="372-Super-Pow"><a href="#372-Super-Pow" class="headerlink" title="372. Super Pow"></a>372. Super Pow</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">superPow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span>[] b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> superPow(a,b,b.length,<span class="number">1337</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">superPow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span>[] b, <span class="type">int</span> len, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(len==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> pow(a,b[<span class="number">0</span>],k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pow(superPow(a,b,len-<span class="number">1</span>,k),<span class="number">10</span>,k)*pow(a,b[len-<span class="number">1</span>],k)%k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">pow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">    a%=k;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; b; i++) &#123;</span><br><span class="line">        res*=a;</span><br><span class="line">        res%=k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="69-Sqrt-x"><a href="#69-Sqrt-x" class="headerlink" title="69. Sqrt(x)"></a>69. Sqrt(x)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">long</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> right=x/<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        <span class="type">long</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">        <span class="type">long</span> sq=mid*mid;</span><br><span class="line">        <span class="keyword">if</span>(sq==(<span class="type">long</span>)x)&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">int</span>)mid;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sq&gt;x)&#123;</span><br><span class="line">            right=mid-<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="172-Factorial-Trailing-Zeroes"><a href="#172-Factorial-Trailing-Zeroes" class="headerlink" title="172. Factorial Trailing Zeroes"></a>172. Factorial Trailing Zeroes</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trailingZeroes</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        n/=<span class="number">5</span>;</span><br><span class="line">        count+=n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="2571-Minimum-Operations-to-Reduce-an-Integer-to-0"><a href="#2571-Minimum-Operations-to-Reduce-an-Integer-to-0" class="headerlink" title="2571. Minimum Operations to Reduce an Integer to 0"></a>2571. Minimum Operations to Reduce an Integer to 0</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minOperations</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//log2n = ln(n) / ln(2)</span></span><br><span class="line">        <span class="type">int</span> x=(<span class="type">int</span>)(Math.log(n)/Math.log(<span class="number">2</span>));</span><br><span class="line">        <span class="type">int</span> bigger=(<span class="type">int</span>)Math.pow(<span class="number">2</span>,x+<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> smaller=(<span class="type">int</span>)Math.pow(<span class="number">2</span>,x);</span><br><span class="line">        <span class="keyword">if</span>(bigger-n&lt;n-smaller)&#123;</span><br><span class="line">            n=bigger-n;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            n=n-smaller;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="326-Power-of-Three"><a href="#326-Power-of-Three" class="headerlink" title="326. Power of Three"></a>326. Power of Three</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPowerOfThree</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> x=(<span class="type">int</span>)(Math.log(Integer.MAX_VALUE)/Math.log(<span class="number">3</span>));</span><br><span class="line">    <span class="type">int</span> mod=(<span class="type">int</span>)Math.pow(<span class="number">3</span>,x);</span><br><span class="line">    <span class="keyword">return</span> n&gt;<span class="number">0</span> &amp;&amp; mod%n==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPowerOfThree</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">//regular expression</span></span><br><span class="line">    <span class="keyword">return</span> Integer.toString(n,<span class="number">3</span>).matches(<span class="string">&quot;^10*$&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>Array(2)</title>
    <url>/2023/01/09/Array-2/</url>
    <content><![CDATA[<h1 id="Array好题选编（2）"><a href="#Array好题选编（2）" class="headerlink" title="Array好题选编（2）"></a>Array好题选编（2）</h1><h2 id="334-Increasing-Triplet-Subsequence"><a href="#334-Increasing-Triplet-Subsequence" class="headerlink" title="334. Increasing Triplet Subsequence"></a>334. Increasing Triplet Subsequence</h2><p><strong>Follow up:</strong> Could you implement a solution that runs in <code>O(n)</code> time complexity and <code>O(1)</code> space complexity?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">increasingTriplet</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">            <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> left=Integer.MAX_VALUE;</span><br><span class="line">    <span class="type">int</span> mid=Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&gt;mid)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&gt;left &amp;&amp; nums[i]&lt;mid)&#123;</span><br><span class="line">            mid=nums[i];</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&lt;left)&#123;</span><br><span class="line">            left=nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="361-Bomb-Enemy"><a href="#361-Bomb-Enemy" class="headerlink" title="361. Bomb Enemy"></a>361. Bomb Enemy</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxKilledEnemies</span><span class="params">(<span class="type">char</span>[][] grid)</span> &#123;</span><br><span class="line">    <span class="type">int</span> row=grid.length;</span><br><span class="line">    <span class="type">int</span> col=grid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i][j]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">                <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> x=i-<span class="number">1</span>; x&gt;=<span class="number">0</span> ; x--)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(grid[x][j]==<span class="string">&#x27;W&#x27;</span>)&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(grid[x][j]==<span class="string">&#x27;E&#x27;</span>)&#123;</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> x=i+<span class="number">1</span>; x&lt;row ; x++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(grid[x][j]==<span class="string">&#x27;W&#x27;</span>)&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(grid[x][j]==<span class="string">&#x27;E&#x27;</span>)&#123;</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> y=j-<span class="number">1</span>; y&gt;=<span class="number">0</span> ; y--)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(grid[i][y]==<span class="string">&#x27;W&#x27;</span>)&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(grid[i][y]==<span class="string">&#x27;E&#x27;</span>)&#123;</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> y=j+<span class="number">1</span>; y&lt;col ; y++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(grid[i][y]==<span class="string">&#x27;W&#x27;</span>)&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(grid[i][y]==<span class="string">&#x27;E&#x27;</span>)&#123;</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                res=Math.max(res,count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="325-Maximum-Size-Subarray-Sum-Equals-k"><a href="#325-Maximum-Size-Subarray-Sum-Equals-k" class="headerlink" title="325. Maximum Size Subarray Sum Equals k"></a>325. Maximum Size Subarray Sum Equals k</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArrayLen</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">currSum</span> <span class="operator">=</span> <span class="number">0</span>, maxLen = <span class="number">0</span>; <span class="comment">// set initial values for cumulative sum and max length sum to k</span></span><br><span class="line">    HashMap&lt;Integer, Integer&gt; sumToIndexMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;(); <span class="comment">// key: cumulative sum until index i, value: i</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        currSum = currSum + nums[i]; <span class="comment">// update cumulative sum</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// two cases where we can update maxLen</span></span><br><span class="line">        <span class="keyword">if</span> (currSum == k) maxLen = i + <span class="number">1</span>; <span class="comment">// case 1: cumulative sum is k, update maxLen for sure</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (sumToIndexMap.containsKey(currSum - k)) maxLen = Math.max(maxLen, i - sumToIndexMap.get(currSum - k)); <span class="comment">// case 2: cumulative sum is more than k, but we can truncate a prefix of the array</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// store cumulative sum in map, only if it is not seen</span></span><br><span class="line">        <span class="comment">// because only the earlier (thus shorter) subarray is valuable, when we want to get the maxLen after truncation</span></span><br><span class="line">        <span class="keyword">if</span> (!sumToIndexMap.containsKey(currSum)) sumToIndexMap.put(currSum, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArrayLen</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span> curSum=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        curSum+=nums[i];    <span class="comment">//[0,i]</span></span><br><span class="line">        <span class="keyword">if</span>(curSum==k)&#123;</span><br><span class="line">            res=Math.max(res,i+<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(map.containsKey(curSum-k))&#123;</span><br><span class="line">            <span class="type">int</span> index=map.get(curSum-k);    <span class="comment">//[0,index]</span></span><br><span class="line">            <span class="comment">//[index+1,i] = k</span></span><br><span class="line">            res=Math.max(res,i-index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(curSum))&#123;</span><br><span class="line">            map.put(curSum,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="373-Find-K-Pairs-with-Smallest-Sums"><a href="#373-Find-K-Pairs-with-Smallest-Sums" class="headerlink" title="373. Find K Pairs with Smallest Sums"></a>373. Find K Pairs with Smallest Sums</h2><h3 id="法一：没看懂"><a href="#法一：没看懂" class="headerlink" title="法一：没看懂"></a>法一：没看懂</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="type">int</span>[]&gt; kSmallestPairs(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span> k) &#123;</span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; que = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a,b)-&gt;a[<span class="number">0</span>]+a[<span class="number">1</span>]-b[<span class="number">0</span>]-b[<span class="number">1</span>]);</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(nums1.length==<span class="number">0</span> || nums2.length==<span class="number">0</span> || k==<span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;nums1.length &amp;&amp; i&lt;k; i++) que.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;nums1[i], nums2[<span class="number">0</span>], <span class="number">0</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span>(k-- &gt; <span class="number">0</span> &amp;&amp; !que.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span>[] cur = que.poll();</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;cur[<span class="number">0</span>], cur[<span class="number">1</span>]&#125;);</span><br><span class="line">            <span class="keyword">if</span>(cur[<span class="number">2</span>] == nums2.length-<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            que.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;cur[<span class="number">0</span>],nums2[cur[<span class="number">2</span>]+<span class="number">1</span>], cur[<span class="number">2</span>]+<span class="number">1</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>I was asked this question in a top company’s onsite interview. I presented this approach specifically the index pair approach like <a href="https://leetcode.com/EddieCarrillo">@EddieCarrillo</a> ‘s and the interviewer didn’t buy it. He thought this will not work as when you poll index pair [i, j] out, the next could be <strong>[i + 1, j]</strong> or <strong>[i, j + 1]</strong>, why did you <strong>only</strong> add [i, j + 1] to the queue? I tried to explain it in different ways, like thinking it as multiple linked lists, showing an example, and so on. He didn’t agree and still considered this as a wrong approach.</p>
<p>I came back and kept asking myself, how could I have explained this better? Here is they way I would have done:</p>
<p>When index pair [i, j] is polled out from the Priority Queue, it’s guaranteed that there is a pair [i + 1, <strong>x</strong>] is in the queue. (except its the last pair which we don’t need next pair)<br>Why is it? because we added all the smallest possible pairs [0, 0], [1, 0]…..[Min(k, n), 0].<br>Now for x, there are three cases:</p>
<ul>
<li>if x &lt; j, that means [i +1, x] is smaller than [i + 1, j]. Thus, [i + 1, j] won’t be a candidate. And it will be reached later by increasing x in [i + 1, x].</li>
<li>if x &gt; j, that means [i + 1, x] is larger than [i + 1, j]. Thus, [i + 1, j] is already in the result, we should not consider it again.</li>
<li>if x &#x3D; j, that’s the same pair. We should not add it to queue.</li>
</ul>
<p>The damage on me is done. I just hope the interviewer come across this post and have an aha moment so that the future interviewees won’t be affected.</p>
<h3 id="法二：想象成有序二维数组-好！"><a href="#法二：想象成有序二维数组-好！" class="headerlink" title="法二：想象成有序二维数组 好！"></a>法二：想象成有序二维数组 好！</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># # # # # ? . .</span><br><span class="line"># # # ? . . . .</span><br><span class="line"># ? . . . . . .   &quot;#&quot; means pair already in the output</span><br><span class="line"># ? . . . . . .   &quot;?&quot; means pair currently in the queue</span><br><span class="line"># ? . . . . . .</span><br><span class="line">? . . . . . . .</span><br><span class="line">. . . . . . . .</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">kSmallestPairs</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    PriorityQueue&lt;<span class="type">int</span>[]&gt; pq=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a,b)-&gt;(a[<span class="number">2</span>]-b[<span class="number">2</span>]));</span><br><span class="line">    <span class="type">int</span> n1=nums1.length;</span><br><span class="line">    <span class="type">int</span> n2=nums2.length;</span><br><span class="line">    <span class="comment">//[0,n1-1]  j</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//i</span></span><br><span class="line">    <span class="comment">//n2-1</span></span><br><span class="line">    pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,nums1[<span class="number">0</span>]+nums2[<span class="number">0</span>]&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!pq.isEmpty() &amp;&amp; k--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="type">int</span>[] cur=pq.poll();</span><br><span class="line">        <span class="type">int</span> i=cur[<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> j=cur[<span class="number">0</span>];</span><br><span class="line">        res.add(Arrays.asList(nums1[j],nums2[i]));</span><br><span class="line">        <span class="keyword">if</span>(j!=n1-<span class="number">1</span>)&#123;</span><br><span class="line">            pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;j+<span class="number">1</span>,i,nums1[j+<span class="number">1</span>]+nums2[i]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span> &amp;&amp; i+<span class="number">1</span>&lt;n2)&#123;</span><br><span class="line">            pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;j,i+<span class="number">1</span>,nums1[j]+nums2[i+<span class="number">1</span>]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="23-Merge-k-Sorted-Lists"><a href="#23-Merge-k-Sorted-Lists" class="headerlink" title="23. Merge k Sorted Lists"></a>23. Merge k Sorted Lists</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">mergeKLists</span><span class="params">(ListNode[] lists)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    PriorityQueue&lt;ListNode&gt; heap=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((Comparator&lt;ListNode&gt;)(o1,o2)-&gt;o1.val-o2.val); <span class="comment">//升序</span></span><br><span class="line">    <span class="keyword">for</span> (ListNode node : lists) &#123;</span><br><span class="line">        <span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line">            heap.offer(node); <span class="comment">//按优先级插入各个链表的头结点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode pre=<span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);<span class="comment">//空白头结点，指向新链表的第一个结点</span></span><br><span class="line">    ListNode temp=pre;</span><br><span class="line">    <span class="keyword">while</span>(!heap.isEmpty())&#123;</span><br><span class="line">        ListNode curr=heap.poll(); <span class="comment">//获取并移除队列头(当前最小值)</span></span><br><span class="line">        temp.next=<span class="keyword">new</span> <span class="title class_">ListNode</span>(curr.val);<span class="comment">//头插入新链表</span></span><br><span class="line">        <span class="keyword">if</span>(curr.next!=<span class="literal">null</span>)&#123;<span class="comment">//若该原链表非空，则还有剩余结点</span></span><br><span class="line">            heap.offer(curr.next);<span class="comment">//将当前最小值的后一个结点入队</span></span><br><span class="line">        &#125;</span><br><span class="line">        temp=temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>初代hard不如中代medium</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">mergeKLists</span><span class="params">(ListNode[] lists)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(lists.length==<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">    PriorityQueue&lt;ListNode&gt; pq=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a,b)-&gt;(a.val-b.val));</span><br><span class="line">    ListNode dummy=<span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">    ListNode pre=dummy;</span><br><span class="line">    ListNode p=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (ListNode list : lists) &#123;</span><br><span class="line">        <span class="keyword">if</span>(list!=<span class="literal">null</span>)&#123;</span><br><span class="line">            pq.offer(list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!pq.isEmpty())&#123;</span><br><span class="line">        p=pq.poll();</span><br><span class="line">        <span class="keyword">if</span>(p.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            pq.offer(p.next);</span><br><span class="line">        &#125;</span><br><span class="line">        pre.next=p;</span><br><span class="line">        pre=pre.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="368-Largest-Divisible-Subset"><a href="#368-Largest-Divisible-Subset" class="headerlink" title="368. Largest Divisible Subset"></a>368. Largest Divisible Subset</h2><p>注意：</p>
<ul>
<li>若只需求subset的大小，则只需dp数组</li>
<li>还需要求subset的每个元素，则需要另一个数组prev，记录当前元素的前一个元素</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">largestDivisibleSubset</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> index=-<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span>[] dp=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="type">int</span>[] prev=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    Arrays.fill(prev,-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i-<span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]%nums[j]==<span class="number">0</span> &amp;&amp; dp[i]&lt;dp[j]+<span class="number">1</span>)&#123;</span><br><span class="line">                dp[i]=dp[j]+<span class="number">1</span>;</span><br><span class="line">                prev[i]=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dp[i]&gt;max)&#123;</span><br><span class="line">            max=dp[i];</span><br><span class="line">            index=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Integer&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span>(index!=-<span class="number">1</span>)&#123;</span><br><span class="line">        res.add(nums[index]);</span><br><span class="line">        index=prev[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="377-Combination-Sum-IV"><a href="#377-Combination-Sum-IV" class="headerlink" title="377. Combination Sum IV"></a>377. Combination Sum IV</h2><p>无脑backtracking超时！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">combinationSum4</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    n=nums.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        backtracking(nums,target-nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums,  <span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(target&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>)&#123;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(target-nums[i]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        backtracking(nums,target-nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>用map减少重复运算</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line">Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">combinationSum4</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    n=nums.length;</span><br><span class="line">    <span class="keyword">return</span> backtracking(nums,target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums,  <span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(target&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(map.containsKey(target))&#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(target);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(target-nums[i]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res+=backtracking(nums,target-nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    map.put(target,res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="378-Kth-Smallest-Element-in-a-Sorted-Matrix"><a href="#378-Kth-Smallest-Element-in-a-Sorted-Matrix" class="headerlink" title="378. Kth Smallest Element in a Sorted Matrix"></a>378. Kth Smallest Element in a Sorted Matrix</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">kthSmallest</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    PriorityQueue&lt;<span class="type">int</span>[]&gt; pq=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a,b)-&gt;(a[<span class="number">2</span>]-b[<span class="number">2</span>]));</span><br><span class="line">    <span class="type">int</span> row=matrix.length;</span><br><span class="line">    <span class="type">int</span> col=matrix[<span class="number">0</span>].length;</span><br><span class="line">    pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,matrix[<span class="number">0</span>][<span class="number">0</span>]&#125;);</span><br><span class="line">    <span class="type">int</span> idx=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="type">int</span>[] cur=pq.poll();</span><br><span class="line">        <span class="keyword">if</span>(idx==k)&#123;</span><br><span class="line">            <span class="keyword">return</span> cur[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i=cur[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> j=cur[<span class="number">1</span>];</span><br><span class="line">        idx++;</span><br><span class="line">        <span class="keyword">if</span>(j+<span class="number">1</span>&lt;col)&#123;</span><br><span class="line">            pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i,j+<span class="number">1</span>,matrix[i][j+<span class="number">1</span>]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span> &amp;&amp; i+<span class="number">1</span>&lt;row)&#123;</span><br><span class="line">            pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i+<span class="number">1</span>,j,matrix[i+<span class="number">1</span>][j]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="413-Arithmetic-Slices"><a href="#413-Arithmetic-Slices" class="headerlink" title="413. Arithmetic Slices"></a>413. Arithmetic Slices</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numberOfArithmeticSlices</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n-<span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//[n-3,n-2,n-1]</span></span><br><span class="line">        <span class="keyword">if</span>(nums[i+<span class="number">1</span>]-nums[i]==nums[i+<span class="number">2</span>]-nums[i+<span class="number">1</span>])&#123;</span><br><span class="line">            res++;</span><br><span class="line">            <span class="type">int</span> dif=nums[i+<span class="number">1</span>]-nums[i];</span><br><span class="line">            <span class="type">int</span> j=i+<span class="number">3</span>;</span><br><span class="line">            <span class="keyword">while</span>(j&lt;n &amp;&amp; nums[j]-nums[j-<span class="number">1</span>]==dif)&#123;</span><br><span class="line">                j++;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="477-Total-Hamming-Distance"><a href="#477-Total-Hamming-Distance" class="headerlink" title="477. Total Hamming Distance"></a>477. Total Hamming Distance</h2><h3 id="Approach-1-Brute-Force-Time-Limit-Exceeded"><a href="#Approach-1-Brute-Force-Time-Limit-Exceeded" class="headerlink" title="Approach #1 Brute Force [Time Limit Exceeded]"></a>Approach #1 Brute Force [Time Limit Exceeded]</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">totalHammingDistance</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            res+=hamming(nums[i],nums[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">hamming</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="type">int</span> c=a^b;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(c!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>((c&amp;<span class="number">1</span>)==<span class="number">1</span>)&#123;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">        c&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Approach-2-Loop-over-the-bits-Accepted"><a href="#Approach-2-Loop-over-the-bits-Accepted" class="headerlink" title="Approach #2 Loop over the bits! [Accepted]"></a>Approach #2 Loop over the bits! [Accepted]</h3><p>For each bit position 1-32 in a 32-bit integer, we count the number of integers in the array which have that bit set. Then, if there are n integers in the array and k of them have a particular bit set and (n-k) do not, then that bit contributes k*(n-k) hamming distance to the total.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">totalHammingDistance</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>, n = nums.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">32</span>;j++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bitCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) </span><br><span class="line">            bitCount += (nums[i] &gt;&gt; j) &amp; <span class="number">1</span>;</span><br><span class="line">        total += bitCount*(n - bitCount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">totalHammingDistance</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span>((num&amp;(<span class="number">1</span>&lt;&lt;i))!=<span class="number">0</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res+=count*(n-count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="31-Next-Permutation"><a href="#31-Next-Permutation" class="headerlink" title="31. Next Permutation"></a>31. Next Permutation</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">nextPermutation</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">//find first non-ascending, i</span></span><br><span class="line">    <span class="comment">//find first &gt; i , j</span></span><br><span class="line">    <span class="comment">//swap i,j</span></span><br><span class="line">    <span class="comment">//reverse [i+1,end]</span></span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span> i=n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&gt;<span class="number">0</span> &amp;&amp; nums[i-<span class="number">1</span>]&gt;=nums[i])&#123;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    i--;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        reverse(nums,<span class="number">0</span>,n-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> j=n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>( ;j&gt;i; j--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[j]&gt;nums[i])&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(nums,i,j);</span><br><span class="line">    reverse(nums,i+<span class="number">1</span>,n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(start&lt;end)&#123;</span><br><span class="line">        swap(nums,start++,end--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=nums[i];</span><br><span class="line">    nums[i]=nums[j];</span><br><span class="line">    nums[j]=temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="498-Diagonal-Traverse"><a href="#498-Diagonal-Traverse" class="headerlink" title="498. Diagonal Traverse"></a>498. Diagonal Traverse</h2><h3 id="法一："><a href="#法一：" class="headerlink" title="法一："></a>法一：</h3><p>easy to think but requires extra space</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] findDiagonalOrder(<span class="type">int</span>[][] mat) &#123;</span><br><span class="line">    TreeMap&lt;Integer, LinkedList&lt;Integer&gt;&gt; map=<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> row=mat.length;</span><br><span class="line">    <span class="type">int</span> col=mat[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            <span class="type">int</span> idx=i+j;</span><br><span class="line">            map.putIfAbsent(idx,<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;());</span><br><span class="line">            <span class="keyword">if</span>(idx%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                map.get(idx).addFirst(mat[i][j]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.get(idx).add(mat[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[row*col];</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Integer idx : map.keySet()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Integer num : map.get(idx)) &#123;</span><br><span class="line">            res[i++]=num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="法二："><a href="#法二：" class="headerlink" title="法二："></a>法二：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] findDiagonalOrder(<span class="type">int</span>[][] matrix) &#123;</span><br><span class="line"><span class="keyword">if</span> (matrix == <span class="literal">null</span> || matrix.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>, col = <span class="number">0</span>, pos = <span class="number">0</span>, m = matrix.length, n=matrix[<span class="number">0</span>].length, output [] = <span class="keyword">new</span> <span class="title class_">int</span>[m * n];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (pos = <span class="number">0</span>; pos &lt; m * n; pos++) &#123;</span><br><span class="line">    output[pos] = matrix[row][col];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((row + col) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// The direction is always up when the sum of row &amp; col is even</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// For last column, go down</span></span><br><span class="line">        <span class="keyword">if</span> (col == n-<span class="number">1</span>) &#123; row++; &#125;                </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// For first row &amp; non-last columns, go right</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (row == <span class="number">0</span>) &#123; col++; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// For not first row &amp; non-last columns, go up and to the right</span></span><br><span class="line">        <span class="keyword">else</span> &#123; row--; col++; &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// The direction is always down when the sum of row &amp; col is odd</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// For last row, go right</span></span><br><span class="line">        <span class="keyword">if</span> (row == m-<span class="number">1</span>) &#123; col++; &#125; </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  For non-last row &amp; first column, go down</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (col == <span class="number">0</span>) &#123; row++; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// For non-last row &amp; non-first column, go down and to the left</span></span><br><span class="line">        <span class="keyword">else</span> &#123; row++; col--; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] findDiagonalOrder(<span class="type">int</span>[][] mat) &#123;</span><br><span class="line">    <span class="type">int</span> row=mat.length;</span><br><span class="line">    <span class="type">int</span> col=mat[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[row*col];</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> y=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;row*col)&#123;</span><br><span class="line">        res[i++]=mat[x][y];</span><br><span class="line">        <span class="keyword">if</span>((x+y)%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(y==col-<span class="number">1</span>)&#123;</span><br><span class="line">                x++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">0</span>)&#123;</span><br><span class="line">                y++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                x--;</span><br><span class="line">                y++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(x==row-<span class="number">1</span>)&#123;</span><br><span class="line">                y++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(y==<span class="number">0</span>)&#123;</span><br><span class="line">                x++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                x++;</span><br><span class="line">                y--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="581-Shortest-Unsorted-Continuous-Subarray"><a href="#581-Shortest-Unsorted-Continuous-Subarray" class="headerlink" title="581. Shortest Unsorted Continuous Subarray"></a>581. Shortest Unsorted Continuous Subarray</h2><p>好题！</p>
<p><a href="https://leetcode.com/problems/shortest-unsorted-continuous-subarray/solution/">https://leetcode.com/problems/shortest-unsorted-continuous-subarray/solution/</a></p>
<h3 id="Approach-4-Using-Stack"><a href="#Approach-4-Using-Stack" class="headerlink" title="Approach 4: Using Stack"></a>Approach 4: Using Stack</h3><p>two monotonic stacks</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findUnsortedSubarray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span> l=n;</span><br><span class="line">    <span class="type">int</span> r=<span class="number">0</span>;</span><br><span class="line">    Deque&lt;Integer&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; nums[i]&lt;nums[stack.peek()])&#123;</span><br><span class="line">            l=Math.min(l,stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        stack.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    stack.clear();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; nums[i]&gt;nums[stack.peek()])&#123;</span><br><span class="line">            r=Math.max(r,stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        stack.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l&lt;r ? r-l+<span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="Approach-5-Without-Using-Extra-Space"><a href="#Approach-5-Without-Using-Extra-Space" class="headerlink" title="Approach 5: Without Using Extra Space"></a>Approach 5: Without Using Extra Space</h3><h2 id="554-Brick-Wall"><a href="#554-Brick-Wall" class="headerlink" title="554. Brick Wall"></a>554. Brick Wall</h2><p>妙用hashmap</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">leastBricks</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; wall)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=wall.size();</span><br><span class="line">    Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (List&lt;Integer&gt; row : wall) &#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; row.size()-<span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="type">int</span> brick=row.get(j);</span><br><span class="line">            i+=brick;</span><br><span class="line">            map.put(i,map.getOrDefault(i,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Integer i : map.keySet()) &#123;</span><br><span class="line">        max=Math.max(max,map.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n-max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="611-Valid-Triangle-Number"><a href="#611-Valid-Triangle-Number" class="headerlink" title="611. Valid Triangle Number"></a>611. Valid Triangle Number</h2><p>花里胡哨，不如brute force</p>
<p>why: nums.length较小，未发挥出优势</p>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 1000</code></li>
<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">triangleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1001</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        arr[num]++;</span><br><span class="line">    &#125;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt;= <span class="number">1000</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> j; k &lt;= <span class="number">1000</span>; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i+j&lt;=k)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(arr[k]==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(i==j)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(j==k)&#123;</span><br><span class="line">                        res+=arr[i]*(arr[i]-<span class="number">1</span>)*(arr[i]-<span class="number">2</span>)/<span class="number">6</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        res+=arr[i]*(arr[i]-<span class="number">1</span>)*arr[k]/<span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j==k)&#123;</span><br><span class="line">                    res+=arr[i]*arr[j]*(arr[j]-<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    res+=arr[i]*arr[j]*arr[k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">triangleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> j+<span class="number">1</span>; k &lt; n; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]+nums[j]&lt;=nums[k])&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>much better!</p>
<p>注意k的定义，同一个i共用一个k,避免重复比较</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">triangleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n= nums.length;;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> k=i+<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(k&lt;n &amp;&amp; nums[i]+nums[j]&gt;nums[k])&#123;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//[j+1,k)</span></span><br><span class="line">            res+=k-j-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="616-Add-Bold-Tag-in-String"><a href="#616-Add-Bold-Tag-in-String" class="headerlink" title="616. Add Bold Tag in String"></a>616. Add Bold Tag in String</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">addBoldTag</span><span class="params">(String s, String[] words)</span> &#123;</span><br><span class="line">    Arrays.sort(words,(a,b)-&gt;(b.length()-a.length()));</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    <span class="type">int</span> end=<span class="number">0</span>;  <span class="comment">//[i,end) is bold</span></span><br><span class="line">    <span class="type">boolean</span>[] bold=<span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.startsWith(word,i))&#123;</span><br><span class="line">                end=Math.max(end,i+word.length());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bold[i]=end&gt;i;	<span class="comment">//神之一手！</span></span><br><span class="line">    &#125;</span><br><span class="line">    StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!bold[i])&#123;</span><br><span class="line">            sb.append(s.charAt(i));</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> j=i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;n &amp;&amp; bold[j])&#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">&quot;&lt;b&gt;&quot;</span>);</span><br><span class="line">        sb.append(s.substring(i,j));</span><br><span class="line">        sb.append(<span class="string">&quot;&lt;/b&gt;&quot;</span>);</span><br><span class="line">        i=j-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="621-Task-Scheduler"><a href="#621-Task-Scheduler" class="headerlink" title="621. Task Scheduler"></a>621. Task Scheduler</h2><p>greedy</p>
<p>hard to think</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">leastInterval</span><span class="params">(<span class="type">char</span>[] tasks, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="type">int</span> total=tasks.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : tasks) &#123;</span><br><span class="line">        arr[c-<span class="string">&#x27;A&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    Arrays.sort(arr);</span><br><span class="line">    <span class="type">int</span> max=arr[<span class="number">25</span>]-<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> idle=max*n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">24</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        idle-=Math.min(max,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total+Math.max(idle,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="2365-Task-Scheduler-II"><a href="#2365-Task-Scheduler-II" class="headerlink" title="2365. Task Scheduler II"></a>2365. Task Scheduler II</h2><p> tasks that need to be completed <strong>in order</strong></p>
<p>老老实实 simulation</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">taskSchedulerII</span><span class="params">(<span class="type">int</span>[] tasks, <span class="type">int</span> space)</span> &#123;</span><br><span class="line">    <span class="type">long</span> t=<span class="number">0</span>;</span><br><span class="line">    Map&lt;Integer,Long&gt; next=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  <span class="comment">//next starting time</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> task : tasks) &#123;</span><br><span class="line">        <span class="type">long</span> time=next.containsKey(task) ? next.get(task) : <span class="number">0</span>;</span><br><span class="line">        t=Math.max(t,time);</span><br><span class="line">        t++;</span><br><span class="line">        next.put(task,t+space);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="769-Max-Chunks-To-Make-Sorted"><a href="#769-Max-Chunks-To-Make-Sorted" class="headerlink" title="769. Max Chunks To Make Sorted"></a>769. Max Chunks To Make Sorted</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxChunksToSorted</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="comment">//1 0 2 3 4</span></span><br><span class="line">    <span class="comment">//4 1 2 3 0</span></span><br><span class="line">    <span class="comment">//arr[0,i] should be 0,1,2,...,i</span></span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n=arr.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        max=Math.max(max,arr[i]);</span><br><span class="line">        <span class="keyword">if</span>(i==max)&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="768-Max-Chunks-To-Make-Sorted-II"><a href="#768-Max-Chunks-To-Make-Sorted-II" class="headerlink" title="768. Max Chunks To Make Sorted II"></a>768. Max Chunks To Make Sorted II</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxChunksToSorted</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=arr.length;</span><br><span class="line">    <span class="type">int</span>[] rightMin=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    rightMin[n-<span class="number">1</span>]=arr[n-<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n-<span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        rightMin[i]=Math.min(rightMin[i+<span class="number">1</span>],arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> leftMax=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n-<span class="number">1</span>; i++) &#123;</span><br><span class="line">        leftMax=Math.max(leftMax,arr[i]);</span><br><span class="line">        <span class="keyword">if</span>(leftMax&lt;=rightMin[i+<span class="number">1</span>])&#123;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="658-Find-K-Closest-Elements"><a href="#658-Find-K-Closest-Elements" class="headerlink" title="658. Find K Closest Elements"></a>658. Find K Closest Elements</h2><p>蛮力：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findClosestElements</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> k, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">    PriorityQueue&lt;Integer&gt; q=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer a, Integer b)</span> &#123;</span><br><span class="line">            <span class="type">int</span> v1=Math.abs(a-x);</span><br><span class="line">            <span class="type">int</span> v2=Math.abs(b-x);</span><br><span class="line">            <span class="keyword">return</span> v1==v2 ? a-b : v1-v2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">        q.offer(num);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Integer&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i++&lt;k)&#123;</span><br><span class="line">        res.add(q.poll());</span><br><span class="line">    &#125;</span><br><span class="line">    Collections.sort(res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>化劲儿：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findClosestElements</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> k, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> high=arr.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(high-low+<span class="number">1</span>&gt;k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Math.abs(arr[high]-x)&lt;Math.abs(arr[low]-x))&#123;</span><br><span class="line">            low++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            high--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Integer&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=low; i&lt;=high; i++)&#123;</span><br><span class="line">        res.add(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="735-Asteroid-Collision"><a href="#735-Asteroid-Collision" class="headerlink" title="735. Asteroid Collision"></a>735. Asteroid Collision</h2><p>stack的妙用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] asteroidCollision(<span class="type">int</span>[] asteroids) &#123;</span><br><span class="line">    <span class="type">int</span> n=asteroids.length;</span><br><span class="line">    Deque&lt;Integer&gt; stack=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(asteroids[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            stack.push(asteroids[i]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> val=-asteroids[i];</span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; stack.peek()&gt;<span class="number">0</span> &amp;&amp; stack.peek()&lt;val)&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(stack.isEmpty() || stack.peek()&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                stack.push(asteroids[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(stack.peek()==val)&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len=stack.size();</span><br><span class="line">    <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        res[i]=stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="274-H-Index"><a href="#274-H-Index" class="headerlink" title="274. H-Index"></a>274. H-Index</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hIndex</span><span class="params">(<span class="type">int</span>[] citations)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=citations.length;</span><br><span class="line">    Arrays.sort(citations);</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n &amp;&amp; citations[n-<span class="number">1</span>-i]&gt;=i+<span class="number">1</span>)&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="630-Course-Schedule-III"><a href="#630-Course-Schedule-III" class="headerlink" title="630. Course Schedule III"></a>630. Course Schedule III</h2><p>注意：</p>
<ul>
<li>it’s always better to take courses with smaller end time first</li>
<li>if unable to take, swap with the longest previous course</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">scheduleCourse</span><span class="params">(<span class="type">int</span>[][] courses)</span> &#123;</span><br><span class="line">    PriorityQueue&lt;Integer&gt; pq=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a,b)-&gt;(b-a));</span><br><span class="line">    Arrays.sort(courses,(a,b)-&gt;(a[<span class="number">1</span>]-b[<span class="number">1</span>]));</span><br><span class="line">    <span class="type">int</span> n=courses.length;</span><br><span class="line">    <span class="type">int</span> time=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span>[] c=courses[i];</span><br><span class="line">        <span class="keyword">if</span>(time+c[<span class="number">0</span>]&lt;=c[<span class="number">1</span>])&#123;</span><br><span class="line">            pq.offer(c[<span class="number">0</span>]);</span><br><span class="line">            time+=c[<span class="number">0</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!pq.isEmpty() &amp;&amp; pq.peek()&gt;c[<span class="number">0</span>])&#123;</span><br><span class="line">                time+=c[<span class="number">0</span>]-pq.poll();</span><br><span class="line">                pq.offer(c[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pq.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>Minimum Moves</title>
    <url>/2023/01/13/Minimum-Moves/</url>
    <content><![CDATA[<h1 id="Minimum-Moves-to-Make-Equal"><a href="#Minimum-Moves-to-Make-Equal" class="headerlink" title="Minimum Moves to Make Equal"></a>Minimum Moves to Make Equal</h1><h2 id="215-Kth-Largest-Element-in-an-Array"><a href="#215-Kth-Largest-Element-in-an-Array" class="headerlink" title="215. Kth Largest Element in an Array"></a>215. Kth Largest Element in an Array</h2><p><a href="https://leetcode.com/problems/kth-largest-element-in-an-array/discuss/2180600/A-Guide-to-Quick-Select-or-JAVA">https://leetcode.com/problems/kth-largest-element-in-an-array/discuss/2180600/A-Guide-to-Quick-Select-or-JAVA</a></p>
<h3 id="How-Does-Quickselect-Work"><a href="#How-Does-Quickselect-Work" class="headerlink" title="How Does Quickselect Work?"></a>How Does Quickselect Work?</h3><p>Quickselect works identical to quicksort in that we:</p>
<ul>
<li>Pick a pivot</li>
<li>Partition the data into two where:<ul>
<li>Numbers less than the pivot go to the left</li>
<li>Numbers greater than the pivot go to the right</li>
</ul>
</li>
</ul>
<p>However, instead of recursing into both sides as in Quicksort, quickselect only recurs into one side; whichever one would have our kth largest element.<br>The main thing to note here is that <strong>our pivot at any given partition will always end up at the correct index</strong>. Therefore, we just need to check:</p>
<ul>
<li>If our pivot is at our “kth largest” index, return the number at that index.</li>
<li>If our pivot comes before the “kth largest” index, perform quickselect on the right partition.</li>
<li>If our pivot comes after the “kth largest” index, perform quickselect on the left partition.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthLargest</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> quickSelect(nums, <span class="number">0</span>, nums.length-<span class="number">1</span>, nums.length-k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">quickSelect</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (left == right) <span class="keyword">return</span> nums[left];</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> <span class="variable">pIndex</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(right - left + <span class="number">1</span>) + left;</span><br><span class="line">	pIndex = partition(nums, left, right, pIndex);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (pIndex == k) <span class="keyword">return</span> nums[k];</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (pIndex &lt; k) <span class="keyword">return</span> quickSelect(nums, pIndex+<span class="number">1</span>, right, k);</span><br><span class="line">	<span class="keyword">return</span> quickSelect(nums, left, pIndex-<span class="number">1</span>, k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> pIndex)</span> &#123;</span><br><span class="line">	<span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> nums[pIndex];</span><br><span class="line">	swap(nums, pIndex, right);</span><br><span class="line">	pIndex = left;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=left; i&lt;=right; i++) </span><br><span class="line">		<span class="keyword">if</span> (nums[i] &lt;= pivot) </span><br><span class="line">			swap(nums, i, pIndex++);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> pIndex - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">	<span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[x];</span><br><span class="line">	nums[x] = nums[y];</span><br><span class="line">	nums[y] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="传统快排！"><a href="#传统快排！" class="headerlink" title="传统快排！"></a>传统快排！</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Random rand=<span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthLargest</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> high=n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">        <span class="type">int</span> j=partition(nums,low,high);</span><br><span class="line">        <span class="keyword">if</span>(j&lt;n-k)&#123;</span><br><span class="line">            low=j+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j&gt;n-k)&#123;</span><br><span class="line">            high=j-<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nums[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">    <span class="type">int</span> index=rand.nextInt(end-start+<span class="number">1</span>)+start;</span><br><span class="line">    swap(nums,start,index);</span><br><span class="line">    <span class="type">int</span> pivot=nums[start];</span><br><span class="line">    <span class="type">int</span> i=start+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> j=end;</span><br><span class="line">    <span class="comment">//[start,i) &lt;=pivot</span></span><br><span class="line">    <span class="comment">//[i,j] unknown</span></span><br><span class="line">    <span class="comment">//(j,end] &gt;pivot</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[j]&gt;pivot)&#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            swap(nums,i++,j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(nums,start,j);</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==j)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> temp=nums[i];</span><br><span class="line">    nums[i]=nums[j];</span><br><span class="line">    nums[j]=temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="462-Minimum-Moves-to-Equal-Array-Elements-II"><a href="#462-Minimum-Moves-to-Equal-Array-Elements-II" class="headerlink" title="462. Minimum Moves to Equal Array Elements II"></a>462. Minimum Moves to Equal Array Elements II</h2><p>In one move, you can increment or decrement an element of the array by <code>1</code>.</p>
<p><a href="https://leetcode.com/problems/minimum-moves-to-equal-array-elements-ii/discuss/2215782/Visual-Explanation-%2B-Interview-Tips-or-JAVA">https://leetcode.com/problems/minimum-moves-to-equal-array-elements-ii/discuss/2215782/Visual-Explanation-%2B-Interview-Tips-or-JAVA</a></p>
<p>Find the Median</p>
<h3 id="Approach-1-Sort"><a href="#Approach-1-Sort" class="headerlink" title="Approach 1: Sort"></a>Approach 1: Sort</h3><h3 id="Approach-2-Quick-Select"><a href="#Approach-2-Quick-Select" class="headerlink" title="Approach 2: Quick Select"></a>Approach 2: Quick Select</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    Random rand=<span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minMoves2</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> median=kthSmallest(nums,nums.length/<span class="number">2</span>);</span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            res+=Math.abs(num-median);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">kthSmallest</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="type">int</span> index=partition(nums,left,right);</span><br><span class="line">            <span class="keyword">if</span>(index==k)&#123;</span><br><span class="line">                <span class="keyword">return</span> nums[index];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(index&lt;k)&#123;</span><br><span class="line">                left=index+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right=index-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="type">int</span> index=start+rand.nextInt(end-start+<span class="number">1</span>);</span><br><span class="line">        swap(nums,start,index);</span><br><span class="line">        <span class="type">int</span> left=start+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> right=end;</span><br><span class="line">        <span class="type">int</span> pivot=nums[start];</span><br><span class="line">        <span class="comment">//[start+1,left) &lt;=pivot</span></span><br><span class="line">        <span class="comment">//[left,right] unknown</span></span><br><span class="line">        <span class="comment">//(right,end] &gt;pivot</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[right]&gt;pivot)&#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                swap(nums,left++,right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(nums,start,right);</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==j)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> temp=nums[i];</span><br><span class="line">        nums[i]=nums[j];</span><br><span class="line">        nums[j]=temp;</span><br><span class="line"><span class="comment">/*        a=a^b;</span></span><br><span class="line"><span class="comment">        b=a^b;//a^b^b</span></span><br><span class="line"><span class="comment">        a=a^b; //a^b^a*/</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h2 id="453-Minimum-Moves-to-Equal-Array-Elements"><a href="#453-Minimum-Moves-to-Equal-Array-Elements" class="headerlink" title="453. Minimum Moves to Equal Array Elements"></a>453. Minimum Moves to Equal Array Elements</h2><p>let’s define sum as the sum of all the numbers, before any moves; minNum as the min number int the list; n is the length of the list;</p>
<p>After, say m moves, we get all the numbers as x , and we will get the following equation</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sum + m * (n - 1) = x * n</span><br></pre></td></tr></table></figure>



<p>and actually,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x = minNum + m</span><br></pre></td></tr></table></figure>



<p>This part may be a little confusing, but @shijungg explained very well. let me explain a little again. it comes from two observations:</p>
<ol>
<li>the minum number will always be minum until it reachs the final number, because every move, other numbers (besides the max) will be increamented too;</li>
<li>from above, we can get, the minum number will be incremented in every move. So, if the final number is x, it would be minNum + moves;</li>
</ol>
<p>and finally, we will get</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sum - minNum * n = m</span><br></pre></td></tr></table></figure>



<p>This is just a math calculation.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sum+m*(n-1)=n*x</span></span><br><span class="line"><span class="comment">//x=minNum+m</span></span><br><span class="line"><span class="comment">//sum+m*(n-1)=n*(minNum+m)</span></span><br><span class="line"><span class="comment">//sum-m=n*minNum</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minMoves</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> min=Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        sum+=num;</span><br><span class="line">        min=Math.min(min,num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum-n*min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>Max_Consecutive_Ones</title>
    <url>/2023/01/24/Max-Consecutive-Ones/</url>
    <content><![CDATA[<h1 id="Max-Consecutive-Ones"><a href="#Max-Consecutive-Ones" class="headerlink" title="Max Consecutive Ones"></a>Max Consecutive Ones</h1><h2 id="485-Max-Consecutive-Ones"><a href="#485-Max-Consecutive-Ones" class="headerlink" title="485. Max Consecutive Ones"></a>485. Max Consecutive Ones</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMaxConsecutiveOnes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cur=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]==<span class="number">1</span>)&#123;</span><br><span class="line">            cur++;</span><br><span class="line">            res=Math.max(res,cur);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cur=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="487-Max-Consecutive-Ones-II"><a href="#487-Max-Consecutive-Ones-II" class="headerlink" title="487. Max Consecutive Ones II"></a>487. Max Consecutive Ones II</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMaxConsecutiveOnes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">boolean</span> firstZero=<span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> pre=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cur=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]==<span class="number">1</span>)&#123;</span><br><span class="line">            cur++;</span><br><span class="line">            firstZero=<span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(firstZero)&#123;</span><br><span class="line">                res=Math.max(res,pre+cur+<span class="number">1</span>);</span><br><span class="line">                pre=cur;</span><br><span class="line">                cur=<span class="number">0</span>;</span><br><span class="line">                firstZero=<span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               pre=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res=Math.max(res,pre+cur+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res&gt;n ? n : res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1004-Max-Consecutive-Ones-III"><a href="#1004-Max-Consecutive-Ones-III" class="headerlink" title="1004. Max Consecutive Ones III"></a>1004. Max Consecutive Ones III</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestOnes</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> curZero=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(right&lt;n)&#123;</span><br><span class="line">        <span class="comment">//[left,right)</span></span><br><span class="line">        <span class="type">int</span> cur=nums[right++];</span><br><span class="line">        <span class="keyword">if</span>(cur==<span class="number">0</span>)&#123;</span><br><span class="line">            curZero++;</span><br><span class="line">            <span class="keyword">while</span>(curZero&gt;k)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[left]==<span class="number">0</span>)&#123;</span><br><span class="line">                    curZero--;</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res=Math.max(res,right-left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>COEN233</title>
    <url>/2023/02/05/COEN233/</url>
    <content><![CDATA[<h1 id="COEN-233-Computer-Network"><a href="#COEN-233-Computer-Network" class="headerlink" title="COEN 233    Computer Network"></a>COEN 233    Computer Network</h1><h2 id="Mid-term-review"><a href="#Mid-term-review" class="headerlink" title="Mid-term review"></a>Mid-term review</h2><ol>
<li>Besides bandwidth and latency, what other parameter is needed to give a good characterization<br>of the quality of service offered by a network used for (i) digitized voice traffic?<br>(ii) video traffic? (iii) financial transaction traffic?</li>
</ol>
<p>A <strong>uniform delivery time</strong> is needed for voice as well as video, so the amount<br>of <strong>jitter</strong> in the network is important. This could be expressed as the <strong>standard</strong><br><strong>deviation of the delivery time</strong>. Having short delay but large variability is actually<br>worse than a somewhat <strong>longer delay and low variability</strong>. </p>
<p>For financial<br>transaction traffic, <strong>reliability and security</strong> are very important.</p>
<p>–</p>
<ol start="2">
<li>A client-server system uses a satellite network, with the satellite at a height of 40,000<br>km. What is the best-case delay in response to a request?</li>
</ol>
<p>The request has to go up and down, and the response has to go up and down.<br>The total path length traversed is thus 160,000 km. The speed of light in air<br>and vacuum is 300,000 km&#x2F;sec, so the propagation delay alone is<br><strong>160,000&#x2F;300,000 sec</strong> or about 533 msec.</p>
<p>–</p>
<ol start="3">
<li>Match the layers—Link, Network, and Transport—with the guarantees that each layer<br>could provide to higher layers.</li>
</ol>
<p>Guarantee                     Layer</p>
<p>Best effort delivery             Network<br>Reliable Delivery             Transport<br>In-order Delivery             Transport<br>Byte-stream abstraction         Transport<br>Point-to-point link abstraction     Data link</p>
<p>–</p>
<ol start="4">
<li>Two networks each provide reliable connection-oriented service. One of them offers<br>a reliable byte stream and the other offers a reliable message stream. Are these identical?<br>If so, why is the distinction made? If not, give an example of how they differ.</li>
</ol>
<p>Message and byte streams are different. In a message stream, the network<br>keeps track of message boundaries. In a byte stream, it does not. For example,<br>suppose a process writes 1024 bytes to a connection and then a little<br>later writes another 1024 bytes. The receiver then does a read for 2048 bytes.<br>With a <strong>message stream</strong>, the receiver will <strong>get two messages, of 1024 bytes</strong><br><strong>each.</strong> </p>
<p>With a <strong>byte stream</strong>, the message boundaries do not count and the receiver<br>will <strong>get the full 2048 bytes as a single unit</strong>. The fact that there were<br>originally two distinct messages is lost.</p>
<p>–</p>
<ol start="5">
<li>What does ‘‘negotiation’’ mean when discussing network protocols? Give an example.</li>
</ol>
<p>Negotiation has to do with <strong>getting both sides to agree on some parameters or</strong><br><strong>values to be used</strong> during the communication. <strong>Maximum packet size</strong> is one<br>example, but there are many others.</p>
<p>__</p>
<ol start="6">
<li>What is the main difference between TCP and UDP?</li>
</ol>
<p>TCP is <strong>connection oriented</strong>, whereas UDP is a <strong>connectionless service</strong>.</p>
<p>__</p>
<ol start="7">
<li>Suppose the <strong>algorithms used to implement</strong> <strong>the operations at layer k</strong> is changed. How<br>does this impact operations at layers k − 1 and k + 1?</li>
</ol>
<p>This has <strong>no impact</strong> on the operations at layers k-1 or k+1.</p>
<hr>
<ol start="8">
<li>Suppose there is a change in <strong>the service (set of operations) provided by layer k</strong>. How<br>does this impact services at layers k-1 and k+1?</li>
</ol>
<p>There is no impact at layer k-1, but <strong>operations in k+1 have to be reimplemented</strong>.</p>
<hr>
<ol start="9">
<li>Provide a list of reasons for why the response time of a client may be larger than the<br>best-case delay.</li>
</ol>
<p>One reason is request or response <strong>messages may get corrupted or lost</strong> during<br>transmission. Another reason is the <strong>processing unit in the satellite may get</strong><br><strong>overloaded</strong> processing several requests from different clients.</p>
<hr>
<ol start="10">
<li>What are the disadvantages of using small, fixed-length cells in ATM?</li>
</ol>
<p>Small-sized cells result in <strong>large header-to-payload overhead</strong>. </p>
<p>Fixed-size cells result in <strong>wastage of unused bytes</strong> in the payload.</p>
<p>ATM cell : 5 byte header + 48 byte data</p>
<hr>
<ol start="11">
<li><p>Nyquist’s theorem<br>Maximum data rate &#x3D; <strong>2Blog2 V</strong>   bits&#x2F;sec, where B is the bandwidth and V is the number of discrete state</p>
<p>•Shannon’s formula for capacity of a noisy channel</p>
<p><em>*<em>B</em>log2 (1 + <em>S&#x2F;N</em>)<em>bits&#x2F;sec</em>*</em></p>
</li>
</ol>
<hr>
<ol start="12">
<li>Is the Nyquist theorem true for high-quality single-mode optical fiber or only for<br>copper wire?</li>
</ol>
<p>The Nyquist theorem is a property of mathematics and has nothing to do with<br>technology. It says that if you have a function whose Fourier spectrum does<br>not contain any sines or cosines above f, by sampling the function at a frequency<br>of 2f you capture all the information there is. Thus, <strong>the Nyquist</strong><br><strong>theorem is true for all media.</strong></p>
<hr>
<ol start="13">
<li>What is the difference, if any, between the demodulator part of a modem and the coder<br>part of a codec? (After all, both convert analog signals to digital ones.)</li>
</ol>
<p>A <strong>coder</strong> accepts an <strong>arbitrary analog signal</strong> and generates a digital signal from<br>it. A <strong>demodulator</strong> accepts a <strong>modulated sine wave only</strong> and generates a digital<br>signal.</p>
<hr>
<ol start="14">
<li>Three packet-switching networks each contain n nodes. The first network has a star<br>topology with a central switch, the second is a (bidirectional) ring, and the third is<br>fully interconnected, with a wire from every node to every other node. What are the<br>best-, average-, and worst-case transmission paths in hops?</li>
</ol>
<p>The three networks have the following properties:<br>Star: best case &#x3D; 2, average case &#x3D; 2, worst case &#x3D; 2.<br>Ring: best case &#x3D; 1, average case &#x3D; n&#x2F;4, worst case &#x3D; n&#x2F;2.<br>Full interconnect: best case &#x3D; 1, average case &#x3D; 1, worst case &#x3D; 1.</p>
<hr>
<ol start="15">
<li>A bit stream 10011101 is transmitted using the standard CRC method described in the<br>text. The generator polynomial is x 3 + 1. Show the actual bit string transmitted. Suppose<br>that the third bit from the left is inverted during transmission. Show that this<br>error is detected at the receiver’s end. Give an example of bit errors in the bit string<br>transmitted that will not be detected by the receiver.</li>
</ol>
<p>The frame is 10011101. The generator is 1001. The message after appending<br>three zeros is 10011101000. The remainder on dividing 10011101000 by<br>1001 is 100. So, the actual bit string transmitted is 10011101100. The received<br>bit stream with an error in the third bit from the left is 10111101100.<br>Dividing this by 1001 produces a remainder of 100, which is different from 0.<br>Thus, the receiver detects the error and can ask for a retransmission. If the<br>14 PROBLEM SOLUTIONS FOR CHAPTER 3<br>transmitted bit stream is converted to any multiple of 1001, the error will not<br>be detected. A trivial example is if all ones in the bit stream are inverted to<br>zeros.</p>
<p><a href="https://www.gatevidyalay.com/cyclic-redundancy-check-crc-error-detection/">https://www.gatevidyalay.com/cyclic-redundancy-check-crc-error-detection/</a></p>
<hr>
<ol start="16">
<li>Give at least one reason why PPP uses byte stuffing instead of bit stuffing to prevent<br>accidental flag bytes within the payload from causing confusion.</li>
</ol>
<p>PPP was clearly <strong>designed to be implemented in software</strong>, not in hardware as<br>bit-stuffing protocols such as HDLC nearly always are. With a software implementation,<br>working entirely with bytes is <strong>much simpler</strong> than working with<br>individual bits. </p>
<p>In addition, PPP was <strong>designed to be used with modems</strong>, and<br>modems <strong>accept and transmit data in units of 1 byte, not 1 bit</strong>.</p>
<hr>
<ol start="17">
<li>Consider the delay of pure ALOHA versus slotted ALOHA at low load. Which one is<br>less? Explain your answer.</li>
</ol>
<p>With pure ALOHA, transmission can start instantly. <strong>At low load, no collisions</strong><br><strong>are expected</strong> so the transmission is likely to be successful. With slotted<br>ALOHA, it has to wait for the next slot. This introduces half a slot time of<br>delay.</p>
<hr>
<ol start="18">
<li>What is the <strong>baud rate</strong> of classic 10-Mbps Ethernet?</li>
</ol>
<p>Classic Ethernet uses Manchester encoding, which means it has <strong>two signal</strong><br><strong>periods per bit sent</strong>. The <strong>data rate</strong> is 10 Mbps, so the <strong>baud rate is twice that</strong>,<br>or <strong>20 megabaud</strong>.</p>
<p>Baud rate is <strong>the measure of the number of changes to the signal (per second) that propagate through a transmission medium</strong>.</p>
<p>IPG: 9.6 microsecond</p>
<p>Maximum throughput: 10,000,000 &#x2F; (96 + (8+64)*8) &#x3D; 10, 000, 000 &#x2F; 672</p>
<hr>
<ol start="19">
<li>Sketch the Manchester encoding on a classic Ethernet for the bit stream 0001110101.</li>
</ol>
<p>The signal is a square wave with two values, high (H) and low (L). The pattern<br>is LHLHLHHLHLHLLHHLLHHL.</p>
<p><strong>0: LH</strong></p>
<p><strong>1: HL</strong></p>
<hr>
<ol start="20">
<li>An IP packet to be transmitted by Ethernet is 60 bytes long, including all its headers.<br>If LLC is not in use, is padding needed in the Ethernet frame, and if so, how many<br>bytes?</li>
</ol>
<p>The minimum Ethernet frame is 64 bytes, including both addresses in the<br>Ethernet frame header, the type&#x2F;length field, and the checksum. Since the<br>header fields occupy 18 bytes and the packet is 60 bytes, the <strong>total frame size</strong><br><strong>is 78 bytes, which exceeds the 64-byte minimum</strong>. Therefore, no padding is<br>used.</p>
<hr>
<ol start="21">
<li>Some books quote the maximum size of an Ethernet frame as 1522 bytes instead of<br>1500 bytes. Are they wrong? Explain your answer.</li>
</ol>
<p>The payload is 1500 bytes, but when the destination address, source address,<br>type&#x2F;length, and checksum fields are counted, plus the <strong>VLAN header</strong>, the<br>total is indeed 1522. Prior to VLANs, the total was 1518.</p>
<p><strong>Maximum VLAN node: 4096-2 &#x3D; 4094</strong></p>
<hr>
<ol start="22">
<li>Name two networks that allow <strong>frames to be packed back-to-back</strong>. Why is this feature<br>worth having?</li>
</ol>
<p><strong>Gigabit Ethernet</strong> has it and so does 802.16 (<strong>IEEE 802.16</strong> is a series of wireless broadband standards).<br>It is useful for <strong>bandwidth efficiency (one preamble</strong>, etc.) but also when there is <strong>a lower limit on frame size</strong>.</p>
<hr>
<ol start="23">
<li>Give two reasons why networks might use an error-correcting code instead of error<br>detection and retransmission.</li>
</ol>
<p>One reason is the need for <strong>real-time quality of service</strong>. If an error is discovered,<br>there is no time for a retransmission. The show must go on. Forward<br>error correction can be used here. Another reason is that <strong>on very low-quality</strong><br><strong>lines (e.g., wireless channels)</strong>, the <strong>error rate can be so high</strong> that practically all<br>frames would have to be retransmitted, and the retransmissions would probably<br>damaged as well. To avoid this, forward error correction is used to <strong>increase</strong><br><strong>the fraction of frames that arrive correctly</strong>.</p>
<hr>
<ol start="24">
<li>List two ways in which WiMAX is similar to 802.11, and two ways in which it is different<br>from 802.11.</li>
</ol>
<p>Like 802.11, WiMAX <strong>wirelessly connects devices</strong>, including mobile devices<br>to the Internet at Mbps speeds. Also, like 802.11, WiMAX is based on<br><strong>OFDM and MIMO</strong> technologies. </p>
<p>However, unlike 802.11, WiMAX <strong>base stations</strong><br><strong>are much more powerful than 802.11 access points</strong>. Also, transmissions<br>in WiMAX are <strong>carefully scheduled by the base station</strong> for each subscriber<br>without any possibility of collisions unlike CSMA&#x2F;CA used in 802.11.</p>
<p>–</p>
<ol start="25">
<li>List some of the security concerns of an RFID system.</li>
</ol>
<p>One key security concern is <strong>unauthorized tracking of RFID tags</strong>. An adversary<br>with an appropriate RFID reader can track the locations of the items<br>tagged using RFID tags. This becomes quite serious if the item is sensitive in<br>nature, for example, a passport, and the tag can be used to retrieve further<br>information, for example, the nationality and other personal information of<br>the person holding the passport.</p>
<p>Another security concern is the ability of a<br>reader to <strong>change tag information</strong>. This can be used by an adversary to, for example,<br>change the price of a tagged item he plans to buy.</p>
<p>–</p>
<ol start="26">
<li>Store-and-forward switches have an advantage over cut-through switches with respect<br>to damaged frames. Explain what it is.</li>
</ol>
<p>Store-and-forward switches <strong>store entire frames before forwarding them</strong>.<br>After a frame comes in, the checksum can be verified. If the frame is damaged,<br>it is discarded immediately. With cut-through, damaged frames cannot<br>be discarded by the switch because <strong>by the time the error is detected, the frame</strong><br><strong>is already gone.</strong> Trying to deal with the problem is like locking the barn door<br>after the horse has escaped. </p>
<p><strong>forward corrupted frames</strong></p>
<hr>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>Weekly_Contest</title>
    <url>/2023/02/05/Weekly-Contest/</url>
    <content><![CDATA[<h1 id="周赛好题"><a href="#周赛好题" class="headerlink" title="周赛好题"></a>周赛好题</h1><h2 id="2561-Rearranging-Fruits"><a href="#2561-Rearranging-Fruits" class="headerlink" title="2561. Rearranging Fruits"></a>2561. Rearranging Fruits</h2><p>how should we swap to minimize the cost?</p>
<ul>
<li><p>swap directly, or</p>
</li>
<li><p>swap indirectly</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">minCost</span><span class="params">(<span class="type">int</span>[] basket1, <span class="type">int</span>[] basket2)</span> &#123;</span><br><span class="line">    Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : basket1) &#123;</span><br><span class="line">        map.put(num,map.getOrDefault(num,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : basket2) &#123;</span><br><span class="line">        map.put(num,map.getOrDefault(num,<span class="number">0</span>)-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Integer&gt; last=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Integer key : map.keySet()) &#123;</span><br><span class="line">        <span class="type">int</span> val=map.get(key);</span><br><span class="line">        <span class="keyword">if</span>((val&amp;<span class="number">1</span>)==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; Math.abs(val) / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            last.add(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> min=Math.min(Arrays.stream(basket1).min().getAsInt()</span><br><span class="line">            , Arrays.stream(basket2).min().getAsInt());</span><br><span class="line">    Collections.sort(last);</span><br><span class="line">    <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; last.size()/<span class="number">2</span>; i++) &#123;</span><br><span class="line">        res+=Math.min(last.get(i),<span class="number">2</span>*min);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="2563-Count-the-Number-of-Fair-Pairs"><a href="#2563-Count-the-Number-of-Fair-Pairs" class="headerlink" title="2563. Count the Number of Fair Pairs"></a>2563. Count the Number of Fair Pairs</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">countFairPairs</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> lower, <span class="type">int</span> upper)</span> &#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">return</span> count(nums,upper)-count(nums,lower-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="title function_">count</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> upper)</span>&#123;</span><br><span class="line">    <span class="comment">//count pairs &lt;= upper</span></span><br><span class="line">    <span class="type">long</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="comment">//[left+1,right]</span></span><br><span class="line">        <span class="keyword">if</span>(nums[left]+nums[right]&lt;=upper)&#123;</span><br><span class="line">            count+=right-left;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>重刷经典</title>
    <url>/2023/01/30/%E9%87%8D%E5%88%B7%E7%BB%8F%E5%85%B8/</url>
    <content><![CDATA[<h1 id="重刷经典老题"><a href="#重刷经典老题" class="headerlink" title="重刷经典老题"></a>重刷经典老题</h1><h2 id="5-Longest-Palindromic-Substring"><a href="#5-Longest-Palindromic-Substring" class="headerlink" title="5. Longest Palindromic Substring"></a>5. Longest Palindromic Substring</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">longestPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    <span class="type">int</span> start=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> end=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> len1=expandFromMid(s,i,i);</span><br><span class="line">        <span class="type">int</span> len2=expandFromMid(s,i,i+<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> len=Math.max(len1,len2);</span><br><span class="line">        <span class="keyword">if</span>(len&gt;end-start+<span class="number">1</span>)&#123;</span><br><span class="line">            start=i-(len-<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">            end=i+len/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.substring(start,end+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">expandFromMid</span><span class="params">(String s, <span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&gt;right)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(left&gt;=<span class="number">0</span> &amp;&amp; right&lt;s.length() &amp;&amp; s.charAt(left)==s.charAt(right))&#123;</span><br><span class="line">        left--;</span><br><span class="line">        right++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right-left-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="6-Zigzag-Conversion"><a href="#6-Zigzag-Conversion" class="headerlink" title="6. Zigzag Conversion"></a>6. Zigzag Conversion</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">convert</span><span class="params">(String s, <span class="type">int</span> numRows)</span> &#123;</span><br><span class="line">    StringBuilder[] sbs=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>[numRows];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">        sbs[i]=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    <span class="type">int</span> idx=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>[] chars=s.toCharArray();</span><br><span class="line">    a:<span class="keyword">while</span>(idx&lt;n)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">            sbs[i].append(chars[idx++]);</span><br><span class="line">            <span class="keyword">if</span>(idx&gt;=n)&#123;</span><br><span class="line">                <span class="keyword">break</span> a;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> numRows-<span class="number">2</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            sbs[i].append(chars[idx++]);</span><br><span class="line">            <span class="keyword">if</span>(idx&gt;=n)&#123;</span><br><span class="line">                <span class="keyword">break</span> a;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    StringBuilder res=sbs[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">        res.append(sbs[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="7-Reverse-Integer"><a href="#7-Reverse-Integer" class="headerlink" title="7. Reverse Integer"></a>7. Reverse Integer</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">            <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">0</span>)&#123;</span><br><span class="line">        res*=<span class="number">10</span>;</span><br><span class="line">        res+=x%<span class="number">10</span>;</span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(res&gt;Integer.MAX_VALUE || res&lt;Integer.MIN_VALUE)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>Follow up: Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="comment">//[-2147483648,2147483647]</span></span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="type">int</span> pop=x%<span class="number">10</span>;</span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(res&gt;Integer.MAX_VALUE/<span class="number">10</span> || res==Integer.MAX_VALUE/<span class="number">10</span> &amp;&amp; pop&gt;<span class="number">7</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res&lt;Integer.MIN_VALUE/<span class="number">10</span> || res==Integer.MIN_VALUE/<span class="number">10</span> &amp;&amp; pop&lt;-<span class="number">8</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res*=<span class="number">10</span>;</span><br><span class="line">        res+=pop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="8-String-to-Integer-atoi"><a href="#8-String-to-Integer-atoi" class="headerlink" title="8. String to Integer (atoi)"></a>8. String to Integer (atoi)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">myAtoi</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="literal">null</span> || s.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> res=<span class="number">0</span>;   <span class="comment">//double 比 long 更大</span></span><br><span class="line">    s=s.trim();</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    <span class="type">boolean</span> negative=<span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(s.charAt(<span class="number">0</span>)==<span class="string">&#x27;+&#x27;</span> || s.charAt(<span class="number">0</span>)==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s.charAt(<span class="number">0</span>)==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">        negative=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">        <span class="type">char</span> c=s.charAt(i++);</span><br><span class="line">        <span class="keyword">if</span>(c&lt;<span class="string">&#x27;0&#x27;</span> || c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res*=<span class="number">10</span>;</span><br><span class="line">        res+=c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(negative)&#123;</span><br><span class="line">        res=-res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(res&lt;Integer.MIN_VALUE)&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(res&gt;Integer.MAX_VALUE)&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="9-Palindrome-Number"><a href="#9-Palindrome-Number" class="headerlink" title="9. Palindrome Number"></a>9. Palindrome Number</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    String s=String.valueOf(x);</span><br><span class="line">    <span class="keyword">if</span>(s.charAt(<span class="number">0</span>)==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=s.length()-<span class="number">1</span>;i&lt;j;i++,j--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.charAt(i)!=s.charAt(j))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="10-Regular-Expression-Matching"><a href="#10-Regular-Expression-Matching" class="headerlink" title="10. Regular Expression Matching"></a>10. Regular Expression Matching</h2><p><a href="https://leetcode.com/problems/regular-expression-matching/discuss/191830/Java-DP-solution-beats-100-with-explanation">https://leetcode.com/problems/regular-expression-matching/discuss/191830/Java-DP-solution-beats-100-with-explanation</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//abd</span></span><br><span class="line"><span class="comment">//ad*</span></span><br><span class="line"><span class="comment">//a.*</span></span><br><span class="line"><span class="comment">//ac*</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isMatch</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span>[][] dp=<span class="keyword">new</span> <span class="title class_">boolean</span>[s.length()+<span class="number">1</span>][p.length()+<span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= p.length(); i++) &#123;</span><br><span class="line">        <span class="comment">//a*b*</span></span><br><span class="line">        dp[<span class="number">0</span>][i]=p.charAt(i-<span class="number">1</span>)==<span class="string">&#x27;*&#x27;</span> &amp;&amp; dp[<span class="number">0</span>][i-<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= p.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= s.length(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(p.charAt(i-<span class="number">1</span>)==s.charAt(j-<span class="number">1</span>) || p.charAt(i-<span class="number">1</span>)==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                dp[j][i]=dp[j-<span class="number">1</span>][i-<span class="number">1</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p.charAt(i-<span class="number">1</span>)==<span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                dp[j][i]=dp[j][i-<span class="number">2</span>] ||</span><br><span class="line">                        dp[j-<span class="number">1</span>][i]&amp;&amp;(p.charAt(i-<span class="number">2</span>)==s.charAt(j-<span class="number">1</span>) || p.charAt(i-<span class="number">2</span>)==<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[s.length()][p.length()];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="12-Integer-to-Roman"><a href="#12-Integer-to-Roman" class="headerlink" title="12. Integer to Roman"></a>12. Integer to Roman</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">intToRoman</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">    String[] M=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;&quot;</span>,<span class="string">&quot;M&quot;</span>,<span class="string">&quot;MM&quot;</span>,<span class="string">&quot;MMM&quot;</span>&#125;;</span><br><span class="line">    String[] C=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;CC&quot;</span>,<span class="string">&quot;CCC&quot;</span>,<span class="string">&quot;CD&quot;</span>,<span class="string">&quot;D&quot;</span>,<span class="string">&quot;DC&quot;</span>,</span><br><span class="line">            <span class="string">&quot;DCC&quot;</span>,<span class="string">&quot;DCCC&quot;</span>,<span class="string">&quot;CM&quot;</span>&#125;;</span><br><span class="line">    String[] X=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;&quot;</span>,<span class="string">&quot;X&quot;</span>,<span class="string">&quot;XX&quot;</span>,<span class="string">&quot;XXX&quot;</span>,<span class="string">&quot;XL&quot;</span>,<span class="string">&quot;L&quot;</span>,<span class="string">&quot;LX&quot;</span>,</span><br><span class="line">    <span class="string">&quot;LXX&quot;</span>,<span class="string">&quot;LXXX&quot;</span>,<span class="string">&quot;XC&quot;</span>&#125;;</span><br><span class="line">    String[] I=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;&quot;</span>,<span class="string">&quot;I&quot;</span>,<span class="string">&quot;II&quot;</span>,<span class="string">&quot;III&quot;</span>,<span class="string">&quot;IV&quot;</span>,<span class="string">&quot;V&quot;</span>,<span class="string">&quot;VI&quot;</span>,</span><br><span class="line">    <span class="string">&quot;VII&quot;</span>,<span class="string">&quot;VIII&quot;</span>,<span class="string">&quot;IX&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> M[num/<span class="number">1000</span>]+C[(num%<span class="number">1000</span>)/<span class="number">100</span>]+X[(num%<span class="number">100</span>)/<span class="number">10</span>]+I[num%<span class="number">10</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="13-Roman-to-Integer"><a href="#13-Roman-to-Integer" class="headerlink" title="13. Roman to Integer"></a>13. Roman to Integer</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">romanToInt</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    Map&lt;Character,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&#x27;I&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    map.put(<span class="string">&#x27;V&#x27;</span>,<span class="number">5</span>);</span><br><span class="line">    map.put(<span class="string">&#x27;X&#x27;</span>,<span class="number">10</span>);</span><br><span class="line">    map.put(<span class="string">&#x27;L&#x27;</span>,<span class="number">50</span>);</span><br><span class="line">    map.put(<span class="string">&#x27;C&#x27;</span>,<span class="number">100</span>);</span><br><span class="line">    map.put(<span class="string">&#x27;D&#x27;</span>,<span class="number">500</span>);</span><br><span class="line">    map.put(<span class="string">&#x27;M&#x27;</span>,<span class="number">1000</span>);</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">            res+=map.get(s.charAt(i));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(map.get(s.charAt(i))&gt;map.get(s.charAt(i-<span class="number">1</span>)))&#123;</span><br><span class="line">            res=res+map.get(s.charAt(i))-<span class="number">2</span>*map.get(s.charAt(i-<span class="number">1</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res+=map.get(s.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="14-Longest-Common-Prefix"><a href="#14-Longest-Common-Prefix" class="headerlink" title="14. Longest Common Prefix"></a>14. Longest Common Prefix</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">longestCommonPrefix</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=strs.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strs[<span class="number">0</span>].length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> c=strs[<span class="number">0</span>].charAt(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==strs[j].length() || strs[j].charAt(i)!=c)&#123;</span><br><span class="line">                <span class="keyword">return</span> strs[<span class="number">0</span>].substring(<span class="number">0</span>,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="17-Letter-Combinations-of-a-Phone-Number"><a href="#17-Letter-Combinations-of-a-Phone-Number" class="headerlink" title="17. Letter Combinations of a Phone Number"></a>17. Letter Combinations of a Phone Number</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCombinations</span><span class="params">(String digits)</span> &#123;</span><br><span class="line">    List&lt;String&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> n=digits.length();</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    String[] list=<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">10</span>];</span><br><span class="line">    list[<span class="number">2</span>]=<span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    list[<span class="number">3</span>]=<span class="string">&quot;def&quot;</span>;</span><br><span class="line">    list[<span class="number">4</span>]=<span class="string">&quot;ghi&quot;</span>;</span><br><span class="line">    list[<span class="number">5</span>]=<span class="string">&quot;jkl&quot;</span>;</span><br><span class="line">    list[<span class="number">6</span>]=<span class="string">&quot;mno&quot;</span>;</span><br><span class="line">    list[<span class="number">7</span>]=<span class="string">&quot;pqrs&quot;</span>;</span><br><span class="line">    list[<span class="number">8</span>]=<span class="string">&quot;tuv&quot;</span>;</span><br><span class="line">    list[<span class="number">9</span>]=<span class="string">&quot;wxyz&quot;</span>;</span><br><span class="line">    res.add(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        res=combine(res,list[digits.charAt(i)-<span class="string">&#x27;0&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; <span class="title function_">combine</span><span class="params">(List&lt;String&gt; res, String chars)</span>&#123;</span><br><span class="line">    List&lt;String&gt; newRes=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String s : res) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length(); i++) &#123;</span><br><span class="line">            newRes.add(s+chars.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newRes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="79-Word-Search"><a href="#79-Word-Search" class="headerlink" title="79. Word Search"></a>79. Word Search</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> row;</span><br><span class="line"><span class="type">int</span> col;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">(<span class="type">char</span>[][] board, String word)</span> &#123;</span><br><span class="line">    row=board.length;</span><br><span class="line">    col=board[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][j]==word.charAt(<span class="number">0</span>))&#123;</span><br><span class="line">                <span class="keyword">if</span>(helper(board,word,i,j,<span class="number">0</span>,<span class="keyword">new</span> <span class="title class_">boolean</span>[row][col]))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">helper</span><span class="params">(<span class="type">char</span>[][] board, String word, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> idx, <span class="type">boolean</span>[][] visited)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(idx==word.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=row || j&lt;<span class="number">0</span> || j&gt;=col || visited[i][j])&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(board[i][j]!=word.charAt(idx))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    visited[i][j]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(helper(board,word,i+<span class="number">1</span>,j,idx+<span class="number">1</span>,visited)||</span><br><span class="line">            helper(board,word,i-<span class="number">1</span>,j,idx+<span class="number">1</span>,visited)||</span><br><span class="line">            helper(board,word,i,j+<span class="number">1</span>,idx+<span class="number">1</span>,visited)||</span><br><span class="line">            helper(board,word,i,j-<span class="number">1</span>,idx+<span class="number">1</span>,visited))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    visited[i][j]=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="273-Integer-to-English-Words"><a href="#273-Integer-to-English-Words" class="headerlink" title="273. Integer to English Words"></a>273. Integer to English Words</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] twenties=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;&quot;</span>,<span class="string">&quot;One&quot;</span>,<span class="string">&quot;Two&quot;</span>,<span class="string">&quot;Three&quot;</span>,<span class="string">&quot;Four&quot;</span>,<span class="string">&quot;Five&quot;</span>,<span class="string">&quot;Six&quot;</span>,<span class="string">&quot;Seven&quot;</span>,<span class="string">&quot;Eight&quot;</span>,<span class="string">&quot;Nine&quot;</span>,<span class="string">&quot;Ten&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Eleven&quot;</span>,<span class="string">&quot;Twelve&quot;</span>,<span class="string">&quot;Thirteen&quot;</span>,<span class="string">&quot;Fourteen&quot;</span>,<span class="string">&quot;Fifteen&quot;</span>,<span class="string">&quot;Sixteen&quot;</span>,<span class="string">&quot;Seventeen&quot;</span>,<span class="string">&quot;Eighteen&quot;</span>,<span class="string">&quot;Nineteen&quot;</span>&#125;;</span><br><span class="line">String[] tens=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;&quot;</span>,<span class="string">&quot;Ten&quot;</span>,<span class="string">&quot;Twenty&quot;</span>,<span class="string">&quot;Thirty&quot;</span>,<span class="string">&quot;Forty&quot;</span>,<span class="string">&quot;Fifty&quot;</span>,<span class="string">&quot;Sixty&quot;</span>,<span class="string">&quot;Seventy&quot;</span>,<span class="string">&quot;Eighty&quot;</span>,<span class="string">&quot;Ninety&quot;</span>&#125;;</span><br><span class="line">String[] thousands=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;&quot;</span>,<span class="string">&quot;Thousand&quot;</span>,<span class="string">&quot;Million&quot;</span>,<span class="string">&quot;Billion&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">numberToWords</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(num==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Zero&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String word=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(num!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num%<span class="number">1000</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">            word=helper(num%<span class="number">1000</span>)+thousands[i]+<span class="string">&quot; &quot;</span>+word;</span><br><span class="line">        &#125;</span><br><span class="line">        num/=<span class="number">1000</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> word.trim();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String <span class="title function_">helper</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">20</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> twenties[n]+<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">100</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> tens[n/<span class="number">10</span>]+<span class="string">&quot; &quot;</span>+helper(n%<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> twenties[n/<span class="number">100</span>]+<span class="string">&quot; Hundred &quot;</span>+helper(n%<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>Array-3</title>
    <url>/2023/02/13/Array-3/</url>
    <content><![CDATA[<h1 id="Array选编（3）"><a href="#Array选编（3）" class="headerlink" title="Array选编（3）"></a>Array选编（3）</h1><h2 id="163-Missing-Ranges"><a href="#163-Missing-Ranges" class="headerlink" title="163. Missing Ranges"></a>163. Missing Ranges</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">findMissingRanges</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> lower, <span class="type">int</span> upper)</span> &#123;</span><br><span class="line">    List&lt;String&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span> curStart=lower;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(curStart==nums[i])&#123;</span><br><span class="line">            curStart=nums[i]+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//curStart&lt;nums[i]</span></span><br><span class="line">            <span class="comment">//[curStart,nums[i]-1]</span></span><br><span class="line">            <span class="type">int</span> end=nums[i]-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(curStart==end)&#123;</span><br><span class="line">                res.add(curStart+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.add(curStart+<span class="string">&quot;-&gt;&quot;</span>+end);</span><br><span class="line">            &#125;</span><br><span class="line">            curStart=nums[i]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(curStart&lt;upper)&#123;</span><br><span class="line">        res.add(curStart+<span class="string">&quot;-&gt;&quot;</span>+upper);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(curStart==upper)&#123;</span><br><span class="line">        res.add(curStart+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="238-Product-of-Array-Except-Self"><a href="#238-Product-of-Array-Except-Self" class="headerlink" title="238. Product of Array Except Self"></a>238. Product of Array Except Self</h2><p>You must write an algorithm that runs in <code>O(n)</code> time and without using the division operation.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] productExceptSelf(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="type">int</span>[] fromLeft=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="type">int</span>[] fromRight=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    fromLeft[<span class="number">0</span>]=nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        fromLeft[i]=fromLeft[i-<span class="number">1</span>]*nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    fromRight[n-<span class="number">1</span>]=nums[n-<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n-<span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        fromRight[i]=fromRight[i+<span class="number">1</span>]*nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    res[<span class="number">0</span>]=fromRight[<span class="number">1</span>];</span><br><span class="line">    res[n-<span class="number">1</span>]=fromLeft[n-<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n-<span class="number">1</span>; i++) &#123;</span><br><span class="line">        res[i]=fromLeft[i-<span class="number">1</span>]*fromRight[i+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>Follow up:</strong> Can you solve the problem in <code>O(1) </code>extra space complexity? (The output array <strong>does not</strong> count as extra space for space complexity analysis.)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] productExceptSelf(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="type">int</span> n=nums.length;</span><br><span class="line">    <span class="comment">//[0,i-1] [i+1,n-1]</span></span><br><span class="line">    <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    res[n-<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n-<span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        res[i]=nums[i+<span class="number">1</span>]*res[i+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> fromLeft=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        res[i]*=fromLeft;</span><br><span class="line">        fromLeft*=nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="1383-Maximum-Performance-of-a-Team"><a href="#1383-Maximum-Performance-of-a-Team" class="headerlink" title="1383. Maximum Performance of a Team"></a>1383. Maximum Performance of a Team</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxPerformance</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[] speed, <span class="type">int</span>[] efficiency, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> mod=(<span class="type">int</span>)<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">    <span class="type">int</span>[][] arr=<span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        arr[i][<span class="number">0</span>]=efficiency[i];</span><br><span class="line">        arr[i][<span class="number">1</span>]=speed[i];</span><br><span class="line">    &#125;</span><br><span class="line">    Arrays.sort(arr,(a,b)-&gt;(b[<span class="number">0</span>]-a[<span class="number">0</span>]));</span><br><span class="line">    PriorityQueue&lt;Integer&gt; pq=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">    <span class="type">long</span> max=<span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span>[] cur=arr[i];</span><br><span class="line">        <span class="type">int</span> curEff=cur[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> curSpeed=cur[<span class="number">1</span>];</span><br><span class="line">        sum+=curSpeed;</span><br><span class="line">        pq.offer(curSpeed);</span><br><span class="line">        <span class="keyword">if</span>(pq.size()&gt;k)&#123;</span><br><span class="line">            sum-=pq.poll();</span><br><span class="line">        &#125;</span><br><span class="line">        max=Math.max(max,sum*curEff);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)(max%mod);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="1710-Maximum-Units-on-a-Truck"><a href="#1710-Maximum-Units-on-a-Truck" class="headerlink" title="1710. Maximum Units on a Truck"></a>1710. Maximum Units on a Truck</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumUnits</span><span class="params">(<span class="type">int</span>[][] boxTypes, <span class="type">int</span> truckSize)</span> &#123;</span><br><span class="line">    Arrays.sort(boxTypes,(a,b)-&gt;(b[<span class="number">1</span>]-a[<span class="number">1</span>]));</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] box : boxTypes) &#123;</span><br><span class="line">        <span class="keyword">while</span>(truckSize&gt;<span class="number">0</span> &amp;&amp; box[<span class="number">0</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            res+=box[<span class="number">1</span>];</span><br><span class="line">            box[<span class="number">0</span>]--;</span><br><span class="line">            truckSize--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="2055-Plates-Between-Candles"><a href="#2055-Plates-Between-Candles" class="headerlink" title="2055. Plates Between Candles"></a>2055. Plates Between Candles</h2><p>新知识：</p>
<ul>
<li>TreeMap.ceilingKey()</li>
<li>TreeMap.floorKey()</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] platesBetweenCandles(String s, <span class="type">int</span>[][] queries) &#123;</span><br><span class="line">    <span class="type">int</span> n=queries.length;</span><br><span class="line">    <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    TreeMap&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> idx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.charAt(i)==<span class="string">&#x27;|&#x27;</span>)&#123;</span><br><span class="line">            map.put(i,idx++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> start=queries[i][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> end=queries[i][<span class="number">1</span>];</span><br><span class="line">        Integer left=map.ceilingKey(start);</span><br><span class="line">        Integer right=map.floorKey(end);</span><br><span class="line">        <span class="keyword">if</span>(left==<span class="literal">null</span> || right==<span class="literal">null</span> || left&gt;=right)&#123;</span><br><span class="line">            res[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res[i]=right-left-(map.get(right)-map.get(left));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2023/02/23/Git/</url>
    <content><![CDATA[<h1 id="Git笔记"><a href="#Git笔记" class="headerlink" title="Git笔记"></a>Git笔记</h1><h2 id="Git结构"><a href="#Git结构" class="headerlink" title="Git结构"></a>Git结构</h2><ol>
<li>工作目录 work directory</li>
<li>暂存区 stage</li>
<li>本地仓库 repository<ul>
<li>每台电脑都有一个</li>
</ul>
</li>
<li>远程仓库 remote<ul>
<li>多台电脑共用一个，位于服务器</li>
</ul>
</li>
</ol>
<p>注意：</p>
<ul>
<li>文件提交时，必须1-&gt;2-&gt;3-&gt;4逐步提交</li>
<li>文件可以依次检出，也可以直接从remote检出到work directory</li>
<li>内置小的linux系统，支持linux命令</li>
</ul>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global -l</span><br><span class="line">git config --global user.name <span class="string">&quot;My name&quot;</span></span><br><span class="line">git config --global <span class="built_in">unset</span> user.name</span><br></pre></td></tr></table></figure>



<h3 id="init-add"><a href="#init-add" class="headerlink" title="init, add"></a>init, add</h3><p>位于任意文件夹，创建本地仓库.git</p>
<p>外面即为work directory, 所创建文件默认处于未追踪 untracked 状态，需要add，进入暂存区stage</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line"></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line">git add hello.txt</span><br><span class="line"></span><br><span class="line">git add .	<span class="comment">#一次性添加目录下所有文件</span></span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&quot;message&quot;</span> <span class="comment">#提交至本地仓库repository</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span>		<span class="comment">#查看提交记录</span></span><br><span class="line">git <span class="built_in">log</span> --oneline</span><br><span class="line">git <span class="built_in">log</span> --oneline --graph --all</span><br></pre></td></tr></table></figure>



<p>每次文件修改后，都需要再次add和comit</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add hello.txt</span><br><span class="line">git commit </span><br><span class="line"></span><br><span class="line">git commit -a -m <span class="string">&quot;Modify&quot;</span>	<span class="comment">#只适用于修改</span></span><br><span class="line"></span><br><span class="line">git show </span><br><span class="line">git show 5121</span><br></pre></td></tr></table></figure>



<h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p>直接写入文件名</p>
<p>支持正则匹配</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配所有txt文件</span></span><br><span class="line">*.txt</span><br><span class="line"><span class="comment"># 除了这个txt</span></span><br><span class="line">!666.txt</span><br><span class="line"><span class="comment"># 排除某个文件夹</span></span><br><span class="line"><span class="built_in">test</span>/</span><br><span class="line"><span class="comment"># 目录中所有以txt结尾的文件，但不包括子目录</span></span><br><span class="line">xxx/*.txt</span><br><span class="line"><span class="comment"># 目录中所有以txt结尾的文件，包括子目录</span></span><br><span class="line">xxx/**/*.txt</span><br></pre></td></tr></table></figure>





<h3 id="rollback"><a href="#rollback" class="headerlink" title="rollback"></a>rollback</h3><p>将work directory恢复到指定的提交状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard commitID</span><br><span class="line"></span><br><span class="line">git reflog	<span class="comment">#显示所有commitID</span></span><br></pre></td></tr></table></figure>





<h2 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h2><p>不同分支下文件内容相互隔离</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch</span><br><span class="line"></span><br><span class="line">git branch <span class="built_in">test</span></span><br><span class="line">git branch yyds</span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> --all --graph --online</span><br><span class="line"></span><br><span class="line">git branch -d yyds	<span class="comment">#删除</span></span><br><span class="line"></span><br><span class="line">git chechout <span class="built_in">test</span>	<span class="comment">#切换/签出</span></span><br><span class="line">git commit -a -m <span class="string">&quot;Modify on test&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#合并分支</span></span><br><span class="line">git chechout master</span><br><span class="line">git merge <span class="built_in">test</span></span><br><span class="line">git diff</span><br><span class="line"><span class="comment">#解决冲突后再次提交</span></span><br><span class="line">git commit -a -m <span class="string">&quot;Merge on conflict&quot;</span></span><br></pre></td></tr></table></figure>



<p>注意：</p>
<ul>
<li>merge并不改变另一个分支，只是把另一分支的修改合到当前分支上（提交的合并，非分支的合并）</li>
</ul>
<h3 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h3><p>变基</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git chechout <span class="built_in">test</span></span><br><span class="line">git rebase master</span><br></pre></td></tr></table></figure>



<h3 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h3><p>优选，灵活选取其他branch的某些更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git cherry-pick commitID	<span class="comment">#单独合并一个提交</span></span><br></pre></td></tr></table></figure>





<h2 id="远程仓库GitHub"><a href="#远程仓库GitHub" class="headerlink" title="远程仓库GitHub"></a>远程仓库GitHub</h2><p>本地推远程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin https://github.com/.../...</span><br><span class="line">git push origin master</span><br><span class="line">git push 远程仓库名称 本地分支名称[:远程分支名称]</span><br></pre></td></tr></table></figure>



<p>远程克隆本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/.../...</span><br></pre></td></tr></table></figure>



<p>解决不同步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git <span class="built_in">log</span> --all --graph --oneline</span><br><span class="line">git merge origin/master</span><br><span class="line"></span><br><span class="line"><span class="comment">#pull = fetch + merge</span></span><br><span class="line">git pull origin</span><br><span class="line"></span><br><span class="line"><span class="comment">#解决冲突后，再次提交</span></span><br><span class="line">git commit -a -m <span class="string">&quot;Modify by B finally&quot;</span></span><br><span class="line">git push origin</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CS</category>
      </categories>
  </entry>
  <entry>
    <title>Design题</title>
    <url>/2023/02/16/Design%E9%A2%98/</url>
    <content><![CDATA[<h1 id="Design题选编"><a href="#Design题选编" class="headerlink" title="Design题选编"></a>Design题选编</h1><h2 id="251-Flatten-2D-Vector"><a href="#251-Flatten-2D-Vector" class="headerlink" title="251. Flatten 2D Vector"></a>251. Flatten 2D Vector</h2><p><strong>Follow up:</strong> As an added challenge, try to code it using only <a href="http://www.cplusplus.com/reference/iterator/iterator/">iterators in C++</a> or <a href="http://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html">iterators in Java</a>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vector2D</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; list;</span><br><span class="line">    Iterator&lt;Integer&gt; iterator;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Vector2D</span><span class="params">(<span class="type">int</span>[][] vec)</span> &#123;</span><br><span class="line">        list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] arrs : vec) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> arr : arrs) &#123;</span><br><span class="line">                list.add(arr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        iterator=list.iterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> iterator.next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> iterator.hasNext();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="295-Find-Median-from-Data-Stream"><a href="#295-Find-Median-from-Data-Stream" class="headerlink" title="295. Find Median from Data Stream"></a>295. Find Median from Data Stream</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MedianFinder</span> &#123;</span><br><span class="line"></span><br><span class="line">    PriorityQueue&lt;Integer&gt; firstHalf;</span><br><span class="line">    PriorityQueue&lt;Integer&gt; secondHalf;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MedianFinder</span><span class="params">()</span> &#123;</span><br><span class="line">        firstHalf=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a,b)-&gt;(b-a));    <span class="comment">//2 1 0</span></span><br><span class="line">        secondHalf=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();               <span class="comment">//3 4</span></span><br><span class="line">        size=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addNum</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>((size&amp;<span class="number">1</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">            firstHalf.offer(num);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            secondHalf.offer(num);</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">while</span>(!secondHalf.isEmpty() &amp;&amp; secondHalf.peek()&lt;firstHalf.peek())&#123;</span><br><span class="line">            <span class="type">int</span> second=secondHalf.poll();</span><br><span class="line">            <span class="type">int</span> first=firstHalf.poll();</span><br><span class="line">            secondHalf.offer(first);</span><br><span class="line">            firstHalf.offer(second);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMedian</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>((size&amp;<span class="number">1</span>)==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> firstHalf.peek();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (firstHalf.peek()+secondHalf.peek())/<span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="308-Range-Sum-Query-2D-Mutable"><a href="#308-Range-Sum-Query-2D-Mutable" class="headerlink" title="308. Range Sum Query 2D - Mutable"></a>308. Range Sum Query 2D - Mutable</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumMatrix</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[][] sum;</span><br><span class="line">    <span class="type">int</span> row;</span><br><span class="line">    <span class="type">int</span> col;</span><br><span class="line">    <span class="type">int</span>[][] matrix;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumMatrix</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        row=matrix.length;</span><br><span class="line">        col=matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="built_in">this</span>.matrix=matrix;</span><br><span class="line">        sum=<span class="keyword">new</span> <span class="title class_">int</span>[row][col];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                sum[i][j]=sumRec(i-<span class="number">1</span>,j)+sumRec(i,j-<span class="number">1</span>)+matrix[i][j]-sumRec(i-<span class="number">1</span>,j-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> r, <span class="type">int</span> c, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> delta=val-matrix[r][c];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=r; i&lt;row; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=c; j&lt;col; j++)&#123;</span><br><span class="line">                sum[i][j]+=delta;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        matrix[r][c]=val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumRegion</span><span class="params">(<span class="type">int</span> row1, <span class="type">int</span> col1, <span class="type">int</span> row2, <span class="type">int</span> col2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sumRec(row2,col2)+sumRec(row1-<span class="number">1</span>,col1-<span class="number">1</span>)-sumRec(row1-<span class="number">1</span>,col2)-sumRec(row2,col1-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">sumRec</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=row || j&lt;<span class="number">0</span> || j&gt;=col)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="348-Design-Tic-Tac-Toe"><a href="#348-Design-Tic-Tac-Toe" class="headerlink" title="348. Design Tic-Tac-Toe"></a>348. Design Tic-Tac-Toe</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TicTacToe</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] row;</span><br><span class="line">    <span class="type">int</span>[] col;</span><br><span class="line">    <span class="type">int</span> diagonal;</span><br><span class="line">    <span class="type">int</span> anti_diagonal;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TicTacToe</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        row=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        col=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        diagonal=<span class="number">0</span>;</span><br><span class="line">        anti_diagonal=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.n=n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">move</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> player)</span> &#123;</span><br><span class="line">        <span class="type">int</span> val=player==<span class="number">2</span> ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">        row[i]+=val;</span><br><span class="line">        col[j]+=val;</span><br><span class="line">        <span class="comment">//diagonal : top-left to bottom-right</span></span><br><span class="line">        <span class="comment">//anti-diagonal: top-right to bottom-left</span></span><br><span class="line">        <span class="keyword">if</span>(i==j)&#123;</span><br><span class="line">            diagonal+=val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i+j==n-<span class="number">1</span>)&#123;</span><br><span class="line">            anti_diagonal+=val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(row[i]==n || col[j]==n || diagonal==n || anti_diagonal==n)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(row[i]==-n || col[j]==-n ||diagonal==-n || anti_diagonal==-n)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="384-Shuffle-an-Array"><a href="#384-Shuffle-an-Array" class="headerlink" title="384. Shuffle an Array"></a>384. Shuffle an Array</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] nums;</span><br><span class="line">    <span class="type">int</span>[] origin;</span><br><span class="line">    Random rand=<span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Solution</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nums=nums;</span><br><span class="line">        <span class="built_in">this</span>.origin=nums.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] reset() &#123;</span><br><span class="line">        <span class="built_in">this</span>.nums=<span class="built_in">this</span>.origin;</span><br><span class="line">        <span class="built_in">this</span>.origin=<span class="built_in">this</span>.origin.clone();</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] shuffle() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            swap(i,pick(i,nums.length));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">pick</span><span class="params">(<span class="type">int</span> min, <span class="type">int</span> max)</span>&#123;</span><br><span class="line">        <span class="comment">//[min,max)</span></span><br><span class="line">        <span class="keyword">return</span> rand.nextInt(max-min)+min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="type">int</span> temp=nums[a];</span><br><span class="line">        nums[a]=nums[b];</span><br><span class="line">        nums[b]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="588-Design-In-Memory-File-System"><a href="#588-Design-In-Memory-File-System" class="headerlink" title="588. Design In-Memory File System"></a>588. Design In-Memory File System</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FileSystem</span> &#123;</span><br><span class="line"></span><br><span class="line">    Node root;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileSystem</span><span class="params">()</span> &#123;</span><br><span class="line">        root=<span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">ls</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        String[] split = path.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">//skip split[0] &quot;&quot;</span></span><br><span class="line">        Node node=root;</span><br><span class="line">        String s=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; split.length; i++) &#123;</span><br><span class="line">            s=split[i];</span><br><span class="line">            node=node.children.get(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.content!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(s));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(node.children.keySet());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mkdir</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        getNode(path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addContentToFile</span><span class="params">(String filePath, String content)</span> &#123;</span><br><span class="line">        Node node=getNode(filePath);</span><br><span class="line">        <span class="keyword">if</span>(node.content==<span class="literal">null</span>)&#123;</span><br><span class="line">            node.content=content;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            node.content+=content;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readContentFromFile</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getNode(filePath).content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">getNode</span><span class="params">(String path)</span>&#123;</span><br><span class="line">        String[] split = path.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">//skip split[0] &quot;&quot;</span></span><br><span class="line">        Node node=root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; split.length; i++) &#123;</span><br><span class="line">            String s=split[i];</span><br><span class="line">            <span class="keyword">if</span>(!node.children.containsKey(s))&#123;</span><br><span class="line">                node.children.put(s,<span class="keyword">new</span> <span class="title class_">Node</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            node=node.children.get(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    String content;</span><br><span class="line">    TreeMap&lt;String,Node&gt; children;</span><br><span class="line">    Node()&#123;</span><br><span class="line">        children=<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="1603-Design-Parking-System"><a href="#1603-Design-Parking-System" class="headerlink" title="1603. Design Parking System"></a>1603. Design Parking System</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ParkingSystem</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] lots;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ParkingSystem</span><span class="params">(<span class="type">int</span> big, <span class="type">int</span> medium, <span class="type">int</span> small)</span> &#123;</span><br><span class="line">        lots=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line">        lots[<span class="number">1</span>]=big;</span><br><span class="line">        lots[<span class="number">2</span>]=medium;</span><br><span class="line">        lots[<span class="number">3</span>]=small;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addCar</span><span class="params">(<span class="type">int</span> carType)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(lots[carType]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            lots[carType]--;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>String好题(3)</title>
    <url>/2023/02/22/String%E5%A5%BD%E9%A2%98-3/</url>
    <content><![CDATA[<h1 id="String好题（3）"><a href="#String好题（3）" class="headerlink" title="String好题（3）"></a>String好题（3）</h1><h2 id="1268-Search-Suggestions-System"><a href="#1268-Search-Suggestions-System" class="headerlink" title="1268. Search Suggestions System"></a>1268. Search Suggestions System</h2><p>三吃，好题</p>
<h3 id="Brute-force"><a href="#Brute-force" class="headerlink" title="Brute force"></a>Brute force</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">suggestedProducts</span><span class="params">(String[] products, String searchWord)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=searchWord.length();</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Arrays.sort(products);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        String cur=searchWord.substring(<span class="number">0</span>,i+<span class="number">1</span>);</span><br><span class="line">        List&lt;String&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (String p : products) &#123;</span><br><span class="line">            <span class="keyword">if</span>(p.startsWith(cur))&#123;</span><br><span class="line">                list.add(p);</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">if</span>(count==<span class="number">3</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.add(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">suggestedProducts</span><span class="params">(String[] products, String searchWord)</span> &#123;</span><br><span class="line">    Arrays.sort(products);</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> start=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> bStart=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n=products.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; searchWord.length(); i++) &#123;</span><br><span class="line">        String prefix=searchWord.substring(<span class="number">0</span>,i+<span class="number">1</span>);</span><br><span class="line">        bStart=binary_search(products,prefix,start,n-<span class="number">1</span>);</span><br><span class="line">        List&lt;String&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> bStart; j &lt; n &amp;&amp; list.size()&lt;<span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(products[j].startsWith(prefix))&#123;</span><br><span class="line">                list.add(products[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        start=bStart;</span><br><span class="line">        res.add(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">binary_search</span><span class="params">(String[] products, String prefix, <span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="type">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(products[mid].compareTo(prefix)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right=mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h3><h2 id="1152-Analyze-User-Website-Visit-Pattern"><a href="#1152-Analyze-User-Website-Visit-Pattern" class="headerlink" title="1152. Analyze User Website Visit Pattern"></a>1152. Analyze User Website Visit Pattern</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">mostVisitedPattern</span><span class="params">(String[] username, <span class="type">int</span>[] timestamp, String[] website)</span> &#123;</span><br><span class="line">    Map&lt;String,TreeMap&lt;Integer,String&gt;&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> n=username.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        String user=username[i];</span><br><span class="line">        String web=website[i];</span><br><span class="line">        <span class="type">int</span> time=timestamp[i];</span><br><span class="line">        map.putIfAbsent(user,<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;());</span><br><span class="line">        map.get(user).put(time,web);</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String,Integer&gt; count=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String user : map.keySet()) &#123;</span><br><span class="line">        HashSet&lt;String&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(map.get(user).values());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; list.size(); j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> j+<span class="number">1</span>; k &lt; list.size(); k++) &#123;</span><br><span class="line">                    String s=list.get(i)+<span class="string">&quot;,&quot;</span>+list.get(j)+<span class="string">&quot;,&quot;</span>+list.get(k);</span><br><span class="line">                    <span class="keyword">if</span>(set.contains(s))&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    set.add(s);</span><br><span class="line">                    count.put(s,count.getOrDefault(s,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line">    String res=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (String s : count.keySet()) &#123;</span><br><span class="line">        <span class="type">int</span> val=count.get(s);</span><br><span class="line">        <span class="keyword">if</span>(val&gt;max)&#123;</span><br><span class="line">            max=val;</span><br><span class="line">            res=s;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(val==max &amp;&amp; res.compareTo(s)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            res=s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    String[] split = res.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    List&lt;String&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        list.add(split[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
</search>
